---
name: HumanEval_41_car_race_collision
language: lua
results:
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n - i + 1
      end
      local count = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            count = count + 1
          end
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4e2z1hc.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmps4e2z1hc.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        table.sort(cars, function(a, b) return a.x < b.x end)
        for i = 1, n do
            for j = n + 1, 2 * n do
                if cars[i].x < cars[j].x then
                    break
                end
                if cars[i].x + cars[i].v > cars[j].x + cars[j].v then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ra4uecx.lua:41:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp5ra4uecx.lua:41: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local n = n or 0
        local n_collisions = 0
        local n_cars_left = n
        local n_cars_right = n
        local cars_left = {}
        local cars_right = {}
        local i = 1
        while i <= n do
            cars_left[i] = i
            cars_right[i] = n - i + 1
            i = i + 1
        end
        while n_cars_left > 0 and n_cars_right > 0 do
            local car_left = cars_left[n_cars_left]
            local car_right = cars_right[n_cars_right]
            if car_left == car_right then
                n_collisions = n_collisions + 1
                n_cars_left = n_cars_left - 1
                n_cars_right = n_cars_right - 1
            elseif car_left < car_right then
                n_cars_left = n_cars_left - 1
            else
                n_cars_right = n_cars_right - 1
            end
        end
        return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_pc06kg.lua:41:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp2_pc06kg.lua:41: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local n = n or 0
        local count = 0
        for i = 1, n do
            for j = n, 1, -1 do
                if i == j then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c3f6awf.lua:25:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp2c3f6awf.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4olqc0r1.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4olqc0r1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe41x3_kb.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpe41x3_kb.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tuuf16v.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0tuuf16v.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if i == j then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuecmxkq.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpmuecmxkq.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc7uprx_.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpnc7uprx_.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg35hs0nm.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpg35hs0nm.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n - i + 1
      end
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpega2os5q.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpega2os5q.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local n = n or 0
        local n_collisions = 0
        local n_cars_left = n
        local n_cars_right = n
        local cars_left = {}
        local cars_right = {}
        local i = 1
        while i <= n do
            cars_left[i] = i
            cars_right[i] = n + 1 - i
            i = i + 1
        end
        while n_cars_left > 0 and n_cars_right > 0 do
            local car_left = cars_left[n_cars_left]
            local car_right = cars_right[n_cars_right]
            if car_left < car_right then
                n_cars_left = n_cars_left - 1
            elseif car_left > car_right then
                n_cars_right = n_cars_right - 1
            else
                n_cars_left = n_cars_left - 1
                n_cars_right = n_cars_right - 1
                n_collisions = n_collisions + 1
            end
        end
        return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptovu367c.lua:41:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmptovu367c.lua:41: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxn5wymn.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkxn5wymn.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr8aulv3.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpxr8aulv3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars_left = {}
      local cars_right = {}
      for i = 1, n do
        cars_left[i] = i
        cars_right[i] = n + 1 - i
      end
      for i = 1, n do
        for j = 1, n do
          if cars_left[i] == cars_right[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcd41doy.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpzcd41doy.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        local i = 1
        while i <= n do
            cars[i] = i
            i = i + 1
        end
        i = 1
        while i <= n do
            local j = i + 1
            while j <= n do
                if cars[i] == cars[j] then
                    collisions = collisions + 1
                end
                j = j + 1
            end
            i = i + 1
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_1o7347.lua:34:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp4_1o7347.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nhjv7qk.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp9nhjv7qk.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20ui3y04.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp20ui3y04.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4i7_yfb3.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4i7_yfb3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7sm76q6.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpy7sm76q6.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if i == j then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6c34ctj.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpo6c34ctj.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
       local n_collisions = 0
       for i = 1, n do
          for j = 1, n do
             if i == j then
                n_collisions = n_collisions + 1
             end
          end
       end
       return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjg_o1c8.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpzjg_o1c8.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3c_xep5.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmps3c_xep5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if i == j then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg98mg64j.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpg98mg64j.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxlpa0cq.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpoxlpa0cq.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppx3hrwen.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmppx3hrwen.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmb0ct9q8.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpmb0ct9q8.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53p6a_h0.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp53p6a_h0.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioltyajx.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpioltyajx.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local count = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            count = count + 1
          end
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoaikjwq4.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpoaikjwq4.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collision = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe414udwx.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpe414udwx.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                y = math.random(),
                vx = math.random(),
                vy = math.random(),
            }
        end
        local collisions = 0
        for i = 1, n do
            for j = i + 1, n do
                local c1 = cars[i]
                local c2 = cars[j]
                local dx = c1.x - c2.x
                local dy = c1.y - c2.y
                local dvx = c1.vx - c2.vx
                local dvy = c1.vy - c2.vy
                local dvdr = dx * dvx + dy * dvy
                if dvdr < 0 then
                    local dvdv = dvx * dvx + dvy * dvy
                    local drdr = dx * dx + dy * dy
                    local sigma = 0.01
                    local d = (dvdr * dvdr - dvdv * (drdr - sigma * sigma))
                    if d < 0 then
                        collisions = collisions + 1
                    end
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmeprk4g0.lua:46:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpmeprk4g0.lua:46: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol5fhe2_.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpol5fhe2_.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, i, j)
            if i == n or j == n then
                return 0
            else
                return car_race_collision_helper(n, i + 1, j + 1) + 1
            end
        end
        return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlpy0xcm.lua:23:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmptlpy0xcm.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, left_to_right, right_to_left)
            if n == 0 then
                return 0
            else
                local left_to_right_next = left_to_right + 1
                local right_to_left_next = right_to_left + 1
                local left_to_right_collision = left_to_right_next - right_to_left
                local right_to_left_collision = right_to_left_next - left_to_right
                local left_to_right_collision_count = 0
                local right_to_left_collision_count = 0
                if left_to_right_collision <= 0 then
                    left_to_right_collision_count = 1
                end
                if right_to_left_collision <= 0 then
                    right_to_left_collision_count = 1
                end
                return left_to_right_collision_count + right_to_left_collision_count +
                    car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
            end
        end
        return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v5rx63h.lua:36:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp0v5rx63h.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right_cars = {}
        local right_to_left_cars = {}
        for i = 1, n do
            left_to_right_cars[i] = i
            right_to_left_cars[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right_cars[i] == right_to_left_cars[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkwtz4_z.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqkwtz4_z.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local n = n or 0
      local n_collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
        cars_left_to_right[i] = i
        cars_right_to_left[i] = i
      end
      for i = 1, n do
        for j = 1, n do
          if cars_left_to_right[i] == cars_right_to_left[j] then
            n_collisions = n_collisions + 1
          end
        end
      end
      return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ogxop40.lua:31:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0ogxop40.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hs4q_84.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp6hs4q_84.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random() * 1000000,
                v = math.random() * 1000000,
                dir = 1
            }
        end
        for i = 1, n do
            cars[i + n] = {
                x = math.random() * 1000000,
                v = math.random() * 1000000,
                dir = -1
            }
        end
        table.sort(cars, function(a, b) return a.x < b.x end)
        for i = 1, n * 2 do
            for j = i + 1, n * 2 do
                if cars[i].dir ~= cars[j].dir then
                    local dx = cars[j].x - cars[i].x
                    local dv = cars[j].v - cars[i].v
                    if dv > 0 then
                        collisions = collisions + 1
                    end
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xope41e.lua:44:
    expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp9xope41e.lua:44: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local count = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        for i = 1, n do
            for j = n + 1, 2 * n do
                if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6byj1qxu.lua:37:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp6byj1qxu.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local n1 = n
        local n2 = n
        local count = 0
        while n1 > 0 and n2 > 0 do
            if n1 == n2 then
                count = count + n1
                n1 = n1 - 1
                n2 = n2 - 1
            elseif n1 > n2 then
                n1 = n1 - 1
            else
                n2 = n2 - 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeur656g6.lua:30:
    expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpeur656g6.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8ewz9so.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpv8ewz9so.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left_to_right = {}
        local cars_right_to_left = {}
        for i = 1, n do
            cars_left_to_right[i] = i
            cars_right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left_to_right[i] == cars_right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0powp5_.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpk0powp5_.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      return n * (n - 1) / 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadsmez9x.lua:16:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpadsmez9x.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1p8_2qf.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpq1p8_2qf.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = i
      end
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0vlgagk.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmph0vlgagk.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjxl9fxu.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjjxl9fxu.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl_9rnz1.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmptl_9rnz1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9afl01l2.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp9afl01l2.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_cars = {}
      local right_cars = {}
      for i = 1, n do
        left_cars[i] = i
        right_cars[i] = n + i
      end
      local collisions = 0
      local i = 1
      local j = 1
      while i <= n and j <= n do
        if left_cars[i] < right_cars[j] then
          collisions = collisions + j - 1
          i = i + 1
        else
          j = j + 1
        end
      end
      collisions = collisions + (n - i + 1) * j
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87k7nysn.lua:34:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp87k7nysn.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63k3_j71.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp63k3_j71.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, left_to_right, right_to_left)
            if n == 0 then
                return 0
            else
                local left_to_right_next = left_to_right + 1
                local right_to_left_next = right_to_left + 1
                local left_to_right_collision = left_to_right_next - right_to_left
                local right_to_left_collision = right_to_left_next - left_to_right
                local left_to_right_collision_next = left_to_right_collision > 0 and left_to_right_collision or 0
                local right_to_left_collision_next = right_to_left_collision > 0 and right_to_left_collision or 0
                return left_to_right_collision_next + right_to_left_collision_next + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
            end
        end
        return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri25_v91.lua:30:
    expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmpri25_v91.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if i == j then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkazziecr.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkazziecr.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_a3q9j7.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpf_a3q9j7.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsbojvz_.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmplsbojvz_.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(0, 1000000),
                dir = 1
            }
        end
        for i = 1, n do
            cars[i + n] = {
                x = math.random(0, 1000000),
                dir = -1
            }
        end
        table.sort(cars, function(a, b)
            return a.x < b.x
        end)
        local i = 1
        while i <= 2 * n do
            local j = i + 1
            while j <= 2 * n and cars[i].x + cars[i].dir * cars[j].x >= 0 do
                if cars[i].dir ~= cars[j].dir then
                    collisions = collisions + 1
                end
                j = j + 1
            end
            i = j
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ey2yopl.lua:44:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp5ey2yopl.lua:44: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yy07vsf.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_yy07vsf.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdto3vw9.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpsdto3vw9.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local i = 0
        local j = 0
        local count = 0
        while i < n and j < n do
            if i == j then
                count = count + 1
                i = i + 1
                j = j + 1
            elseif i < j then
                i = i + 1
            else
                j = j + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxxtib1v.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpzxxtib1v.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local count = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            count = count + 1
          end
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhfal324.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpbhfal324.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local function car_race_collision_helper(n, left_to_right, right_to_left)
        if n == 0 then
          return 0
        else
          local left_to_right_head = left_to_right[1]
          local right_to_left_head = right_to_left[1]
          if left_to_right_head < right_to_left_head then
            return car_race_collision_helper(n - 1,
                                             left_to_right:sub(2),
                                             right_to_left)
          else
            return 1 + car_race_collision_helper(n - 1,
                                                 left_to_right:sub(2),
                                                 right_to_left:sub(2))
          end
        end
      end
      return car_race_collision_helper(n,
                                       torch.linspace(0, n - 1, n),
                                       torch.linspace(n - 1, 0, n))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvxmuqch6.lua:28:
    attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpvxmuqch6.lua:28:
    in local 'candidate'\n\t/tmp/tmpvxmuqch6.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local n = n or 0
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n - i + 1
      end
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrebhmi_.lua:31:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpbrebhmi_.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqnqnpwf.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqqnqnpwf.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local car_positions = {}
        local car_velocities = {}
        for i = 1, n do
            car_positions[i] = 0
            car_velocities[i] = 1
        end
        for i = 1, n do
            car_positions[i + n] = math.huge
            car_velocities[i + n] = -1
        end
        for _ = 1, math.huge do
            local min_position = math.huge
            local min_position_index = nil
            for i = 1, 2 * n do
                if car_positions[i] < min_position then
                    min_position = car_positions[i]
                    min_position_index = i
                end
            end
            if min_position_index == nil then
                break
            end
            local min_position_velocity = car_velocities[min_position_index]
            for i = 1, 2 * n do
                if i ~= min_position_index and car_positions[i] == min_position then
                    if car_velocities[i] ~= min_position_velocity then
                        collisions = collisions + 1
                    end
                end
            end
            car_positions[min_position_index] = car_positions[min_position_index] + min_position_velocity
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4ni19op.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmps4ni19op.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2tez3lu.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpw2tez3lu.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_coaaxz8.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_coaaxz8.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
        cars_left_to_right[i] = i
        cars_right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if cars_left_to_right[i] == cars_right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz3jd5gg.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjz3jd5gg.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia4m0ey8.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpia4m0ey8.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars = {}
      for i = 1, n do
        cars[i] = {
          x = math.random(1, 100000),
          dir = 1
        }
      end
      for i = 1, n do
        cars[n + i] = {
          x = math.random(1, 100000),
          dir = -1
        }
      end
      for i = 1, n do
        for j = n + 1, 2 * n do
          if cars[i].x < cars[j].x and cars[i].dir == 1 and cars[j].dir == -1 then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qua225s.lua:38:
    expected: 9, actual: 5\nstack traceback:\n\t/tmp/tmp5qua225s.lua:38: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
            if n == 0 then
                return 0
            else
                local left_to_right_car = left_to_right_cars[1]
                local right_to_left_car = right_to_left_cars[1]
                if left_to_right_car < right_to_left_car then
                    left_to_right_cars[1] = left_to_right_car + 1
                    return car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
                else
                    right_to_left_cars[1] = right_to_left_car - 1
                    return 1 + car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
                end
            end
        end
        local left_to_right_cars = {}
        local right_to_left_cars = {}
        for i = 1, n do
            left_to_right_cars[i] = 0
            right_to_left_cars[i] = n - 1
        end
        return car_race_collision_helper(n, left_to_right_cars, right_to_left_cars)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpynl2k40v.lua:21:
    stack overflow\nstack traceback:\n\t/tmp/tmpynl2k40v.lua:21: in upvalue 'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21:
    in upvalue 'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21: in upvalue
    'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21: in upvalue 'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21:
    in upvalue 'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21: in upvalue
    'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21: in upvalue 'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21:
    in upvalue 'car_race_collision_helper'\n\t/tmp/tmpynl2k40v.lua:21: in upvalue
    'car_race_collision_helper'\n\t...\n\t/tmp/tmpynl2k40v.lua:21: in function </tmp/tmpynl2k40v.lua:10>\n\t(...tail
    calls...)\n\t/tmp/tmpynl2k40v.lua:37: in function 'test_humaneval'\n\nRan 1 tests
    in 0.070 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        for i = 1, n do
            for j = n + 1, 2 * n do
                if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_2550zr.lua:37:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmps_2550zr.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvei2kdeo.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpvei2kdeo.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50aafj8o.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp50aafj8o.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local cars_left_to_right = {}
        local cars_right_to_left = {}
        for i = 1, n do
            cars_left_to_right[i] = i
            cars_right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if cars_left_to_right[i] == cars_right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1myxdpd8.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp1myxdpd8.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left_to_right = {}
        local cars_right_to_left = {}
        for i = 1, n do
            cars_left_to_right[i] = i
            cars_right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left_to_right[i] == cars_right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3jomabe.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpf3jomabe.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26vrkw01.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp26vrkw01.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      local i
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      local j
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9x0g40_c.lua:32:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp9x0g40_c.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        -- TODO: implement this function
        return 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxt6hcun.lua:17:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpyxt6hcun.lua:17: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, left_to_right, right_to_left)
            if n == 0 then
                return 0
            else
                return car_race_collision_helper(n - 1, left_to_right + 1, right_to_left - 1) +
                    (left_to_right == right_to_left and 1 or 0)
            end
        end
        return car_race_collision_helper(n, 0, n - 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuafulbm.lua:24:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpyuafulbm.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left = {}
        local cars_right = {}
        for i = 1, n do
            cars_left[i] = i
            cars_right[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left[i] == cars_right[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5rdgmpa.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpl5rdgmpa.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3dkimoa.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpm3dkimoa.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e9ticyn.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_e9ticyn.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local function car_race_collision_helper(n, left, right)
        if n == 0 then
          return 0
        else
          local left_car_position = left + 1
          local right_car_position = right - 1
          local left_car_collision = left_car_position - right_car_position
          local right_car_collision = right_car_position - left_car_position
          local left_car_collision_count = 0
          local right_car_collision_count = 0
          if left_car_collision <= 0 then
            left_car_collision_count = 1
          end
          if right_car_collision <= 0 then
            right_car_collision_count = 1
          end
          return left_car_collision_count + right_car_collision_count + car_race_collision_helper(n - 1, left_car_position, right_car_position)
        end
      end
      return car_race_collision_helper(n, -n, n)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqivm6plu.lua:35:
    expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpqivm6plu.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local count = 0
        local cars = {}
        for i = 1, n do
            cars[i] = true
        end
        for i = 1, n do
            for j = 1, n do
                if cars[i] and cars[j] then
                    count = count + 1
                    cars[i] = false
                    cars[j] = false
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp11t3ka3.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpp11t3ka3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collision = collision + 1
          end
        end
      end
      return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg2wk1_c.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpeg2wk1_c.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8eptikyb.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp8eptikyb.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        table.sort(cars, function(a, b) return a.x < b.x end)
        for i = 1, n * 2 - 1 do
            local a = cars[i]
            local b = cars[i + 1]
            if a.v > 0 and b.v < 0 then
                collisions = collisions + 1
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkf3howp.lua:38:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpjkf3howp.lua:38: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpto7z44xt.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpto7z44xt.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collision = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuao4tjtk.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpuao4tjtk.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, left_to_right, right_to_left)
            if n == 0 then
                return 0
            else
                local left_to_right_next = left_to_right + 1
                local right_to_left_next = right_to_left + 1
                local left_to_right_collision = left_to_right_next - right_to_left
                local right_to_left_collision = right_to_left_next - left_to_right
                local collision = left_to_right_collision + right_to_left_collision
                local next_collision = car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
                return collision + next_collision
            end
        end
        return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpae1me_7g.lua:30:
    expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmpae1me_7g.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      local i
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n - i + 1
      end
      local collisions = 0
      for i = 1, n do
        if left_to_right[i] > right_to_left[i] then
          collisions = collisions + 1
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp347gsqfn.lua:29:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp347gsqfn.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbs25z4q.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpnbs25z4q.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n--
    n cars are driving left to right;  simultaneously, a different set of n cars\n--
    are driving right to left.   The two sets of cars start out being very far from\n--
    each other.  All cars move in the same speed.  Two cars are said to collide\n--
    when a car that's moving left to right hits a car that's moving right to left.\n--
    However, the cars are infinitely sturdy and strong; as a result, they continue
    moving\n-- in their trajectory as if they did not collide.\n-- This function outputs
    the number of such collisions.\nlocal function car_race_collision(n)\n\tlocal
    collisions = 0\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == j then\n\t\t\t\tcollisions
    = collisions + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn collisions\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2),
    4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n
    \   lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvhhnr7a.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmphvhhnr7a.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if i == j then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qe6emra.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0qe6emra.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvo51g8u.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpmvo51g8u.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
        cars_left_to_right[i] = true
        cars_right_to_left[i] = true
      end
      while true do
        local left_to_right_collision = false
        local right_to_left_collision = false
        for i = 1, n do
          if cars_left_to_right[i] then
            if cars_right_to_left[i] then
              collisions = collisions + 1
              left_to_right_collision = true
              right_to_left_collision = true
            end
          end
        end
        if not left_to_right_collision then
          break
        end
        if not right_to_left_collision then
          break
        end
        for i = 1, n do
          if cars_left_to_right[i] then
            cars_left_to_right[i] = false
          end
          if cars_right_to_left[i] then
            cars_right_to_left[i] = false
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5dcw23y.lua:50:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpz5dcw23y.lua:50: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3o2tntfi.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3o2tntfi.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        -- TODO: Write this function.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to left.
        -- Hint: You can use a counter to count the number of collisions.
        -- Hint: You can use a queue to simulate the cars moving left to right.
        -- Hint: You can use a stack to simulate the cars moving right to
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpv66xxyle.lua:48: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczn2g8w1.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpczn2g8w1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local count = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            count = count + 1
          end
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprygj6jkr.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprygj6jkr.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        for i = 1, n do
            for j = n + 1, 2 * n do
                if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zcqhnp5.lua:37:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp6zcqhnp5.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left = {}
        local cars_right = {}
        for i = 1, n do
            cars_left[i] = i
            cars_right[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left[i] == cars_right[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wtxjuum.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3wtxjuum.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb_mqx5q.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpzb_mqx5q.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_cars = {}
      local right_cars = {}
      local collisions = 0
      for i = 1, n do
        left_cars[i] = i
        right_cars[i] = n + 1 - i
      end
      for i = 1, n do
        for j = 1, n do
          if left_cars[i] == right_cars[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa39e3l8f.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpa39e3l8f.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local cars = {}
      for i = 1, n do
        cars[i] = {
          x = 0,
          dx = 1,
        }
      end
      for i = n + 1, 2 * n do
        cars[i] = {
          x = 0,
          dx = -1,
        }
      end
      local collisions = 0
      for i = 1, n do
        for j = n + 1, 2 * n do
          if cars[i].x == cars[j].x then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left_to_right = {}
        local cars_right_to_left = {}
        for i = 1, n do
            cars_left_to_right[i] = i
            cars_right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left_to_right[i] == cars_right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp362hmox.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpp362hmox.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local n_collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
        cars_left_to_right[i] = true
        cars_right_to_left[i] = true
      end
      local i = 1
      local j = 1
      while i <= n and j <= n do
        if cars_left_to_right[i] and cars_right_to_left[j] then
          n_collisions = n_collisions + 1
          cars_left_to_right[i] = false
          cars_right_to_left[j] = false
        end
        i = i + 1
        j = j + 1
      end
      return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsfhwc1u.lua:34:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpvsfhwc1u.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local function car_race_collision_helper(n, left_to_right, right_to_left)
        if n == 0 then
          return 0
        else
          local left_to_right_next = left_to_right + 1
          local right_to_left_next = right_to_left + 1
          local left_to_right_collision = left_to_right_next - right_to_left
          local right_to_left_collision = right_to_left_next - left_to_right
          local collision = left_to_right_collision + right_to_left_collision
          return collision + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
        end
      end
      return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rr9_jsu.lua:29:
    expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmp0rr9_jsu.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1fb4llv.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpg1fb4llv.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local function car_race_collision_helper(n, left_to_right, right_to_left)
        if n == 0 then
          return 0
        else
          local left_to_right_next = left_to_right + 1
          local right_to_left_next = right_to_left + 1
          local collision = left_to_right_next == right_to_left_next and 1 or 0
          return collision + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
        end
      end
      return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkag08iim.lua:26:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkag08iim.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local n = n or 0
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h5g3kw9.lua:31:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7h5g3kw9.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu75fkyss.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpu75fkyss.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybsialzt.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpybsialzt.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local function car_race_collision_helper(n, left_to_right, right_to_left)
        if n == 0 then
          return 0
        else
          local left_to_right_next = left_to_right + 1
          local right_to_left_next = right_to_left + 1
          local left_to_right_collision = left_to_right_next - right_to_left
          local right_to_left_collision = right_to_left_next - left_to_right
          local collision = left_to_right_collision + right_to_left_collision
          return collision + car_race_collision_helper(n - 1, left_to_right_next, right_to_left_next)
        end
      end
      return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22qcv3mx.lua:29:
    expected: 9, actual: 6\nstack traceback:\n\t/tmp/tmp22qcv3mx.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8c0aug1.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpt8c0aug1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars = {}
      for i = 1, n do
        cars[i] = {x = i, dir = 1}
      end
      for i = n + 1, 2 * n do
        cars[i] = {x = 2 * n - i + 1, dir = -1}
      end
      while true do
        local moved = false
        for i = 1, 2 * n do
          local car = cars[i]
          if car.x ~= 0 and car.x ~= 2 * n + 1 then
            car.x = car.x + car.dir
            moved = true
          end
        end
        if not moved then
          break
        end
        for i = 1, 2 * n do
          local car = cars[i]
          if car.x == 0 or car.x == 2 * n + 1 then
            for j = 1, 2 * n do
              local other = cars[j]
              if other.x == car.x then
                collisions = collisions + 1
              end
            end
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8cx3mjc.lua:48:
    expected: 4, actual: 18\nstack traceback:\n\t/tmp/tmpi8cx3mjc.lua:48: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65l8m2o6.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp65l8m2o6.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6t39381.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpd6t39381.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqywzekej.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqywzekej.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptm20_z6l.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmptm20_z6l.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                pos = math.random(1, 1000000),
                dir = 1
            }
        end
        for i = 1, n do
            cars[i + n] = {
                pos = math.random(1, 1000000),
                dir = -1
            }
        end
        table.sort(cars, function(a, b) return a.pos < b.pos end)
        for i = 1, n * 2 do
            for j = i + 1, n * 2 do
                if cars[i].dir == 1 and cars[j].dir == -1 then
                    if cars[i].pos < cars[j].pos then
                        collisions = collisions + 1
                    end
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe6zc69_.lua:41:
    expected: 9, actual: 5\nstack traceback:\n\t/tmp/tmphe6zc69_.lua:41: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collision = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7mv4ily.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpk7mv4ily.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_q_j7lj.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpd_q_j7lj.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6srfcxq.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpq6srfcxq.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41z3ymzx.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp41z3ymzx.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_a9y3tw.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp5_a9y3tw.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfmrtmft.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjfmrtmft.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local n_collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            n_collisions = n_collisions + 1
          end
        end
      end
      return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfseiitq6.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpfseiitq6.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n - i + 1
      end
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws_ow7et.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpws_ow7et.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                pos = 0,
                dir = 1,
            }
        end
        for i = 1, n do
            cars[i + n] = {
                pos = 0,
                dir = -1,
            }
        end
        for i = 1, 2 * n do
            for j = i + 1, 2 * n do
                if cars[i].dir ~= cars[j].dir then
                    if cars[i].pos == cars[j].pos then
                        collisions = collisions + 1
                    end
                end
            end
            cars[i].pos = cars[i].pos + cars[i].dir
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpts9nimj_.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpts9nimj_.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_ia3gvb.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpb_ia3gvb.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collision = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collision = collision + 1
          end
        end
      end
      return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zbz6246.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp5zbz6246.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuophr8g3.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpuophr8g3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local n = n or 0
      local n_collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
        cars_left_to_right[i] = i
        cars_right_to_left[i] = i
      end
      for i = 1, n do
        for j = 1, n do
          if cars_left_to_right[i] == cars_right_to_left[j] then
            n_collisions = n_collisions + 1
          end
        end
      end
      return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx3c32o2.lua:31:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkx3c32o2.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        for i = 1, n do
            for j = n + 1, 2 * n do
                if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebmzzpn7.lua:37:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpebmzzpn7.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pvwku97.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp9pvwku97.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        local i
        for i = 1, n do
            cars[i] = {
                x = math.random(0, 1000000),
                v = math.random(1, 1000000)
            }
        end
        for i = 1, n do
            cars[i + n] = {
                x = math.random(0, 1000000),
                v = -math.random(1, 1000000)
            }
        end
        table.sort(cars, function(a, b) return a.x < b.x end)
        for i = 1, n * 2 - 1 do
            if cars[i].v > 0 and cars[i + 1].v < 0 then
                collisions = collisions + 1
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5tsrl8o.lua:37:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpu5tsrl8o.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ekgm4b7.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0ekgm4b7.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjpfy4xt.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpcjpfy4xt.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                left = true,
                pos = i
            }
        end
        for i = n + 1, 2 * n do
            cars[i] = {
                left = false,
                pos = i
            }
        end
        while true do
            local done = true
            for i = 1, 2 * n do
                local car = cars[i]
                if car.left then
                    car.pos = car.pos + 1
                else
                    car.pos = car.pos - 1
                end
                if car.pos == 0 or car.pos == 2 * n + 1 then
                    car.pos = nil
                else
                    done = false
                end
            end
            if done then
                break
            end
            for i = 1, 2 * n do
                local car = cars[i]
                if car.pos then
                    for j = i + 1, 2 * n do
                        local other = cars[j]
                        if other.pos and car.pos == other.pos then
                            collisions = collisions + 1
                        end
                    end
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50jm151s.lua:29:
    attempt to perform arithmetic on a nil value (field 'pos')\nstack traceback:\n\t/tmp/tmp50jm151s.lua:29:
    in local 'candidate'\n\t/tmp/tmp50jm151s.lua:60: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtt73j3q.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprtt73j3q.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, left_to_right, right_to_left)
            if n == 0 then
                return 0
            else
                local left_to_right_collision = car_race_collision_helper(n - 1, left_to_right + 1, right_to_left)
                local right_to_left_collision = car_race_collision_helper(n - 1, left_to_right, right_to_left + 1)
                return left_to_right_collision + right_to_left_collision
            end
        end
        return car_race_collision_helper(n, 0, 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvl71f_i.lua:25:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmprvl71f_i.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbe0pobv.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpgbe0pobv.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf386fhql.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpf386fhql.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars_left = {}
      local cars_right = {}
      for i = 1, n do
        cars_left[i] = i
        cars_right[i] = i
      end
      for i = 1, n do
        for j = 1, n do
          if cars_left[i] == cars_right[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6peivmj3.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp6peivmj3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5_fgm96.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpw5_fgm96.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88t92763.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp88t92763.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
        cars_left_to_right[i] = i
        cars_right_to_left[i] = n - i + 1
      end
      for i = 1, n do
        for j = 1, n do
          if cars_left_to_right[i] == cars_right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuu4orqq.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpwuu4orqq.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right_cars = {}
      local right_to_left_cars = {}
      for i = 1, n do
        left_to_right_cars[i] = i
        right_to_left_cars[i] = i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right_cars[i] == right_to_left_cars[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5sc5zb9.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmph5sc5zb9.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshluubxf.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpshluubxf.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlyelk2s.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqlyelk2s.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg36k5mp.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprg36k5mp.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars_left_to_right = {}
      local cars_right_to_left = {}
      for i = 1, n do
        cars_left_to_right[i] = i
        cars_right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
        for j = 1, n do
          if cars_left_to_right[i] == cars_right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13ei5q4y.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp13ei5q4y.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local n = n or 0
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq8aqyx0.lua:31:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpbq8aqyx0.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random() * 1000000,
                v = math.random() * 1000000,
                dir = 1
            }
        end
        for i = 1, n do
            cars[i + n] = {
                x = math.random() * 1000000,
                v = math.random() * 1000000,
                dir = -1
            }
        end
        table.sort(cars, function(a, b) return a.x < b.x end)
        for i = 1, n * 2 do
            for j = i + 1, n * 2 do
                if cars[i].dir ~= cars[j].dir then
                    local dx = cars[j].x - cars[i].x
                    local dv = cars[j].v - cars[i].v
                    if dv > 0 then
                        local t = dx / dv
                        if t > 0 then
                            collisions = collisions + 1
                        end
                    end
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxfnjdrj.lua:47:
    expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpsxfnjdrj.lua:47: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local cars_left = {}
        local cars_right = {}
        local collisions = 0
        for i = 1, n do
            cars_left[i] = i
            cars_right[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left[i] == cars_right[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7espesrt.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7espesrt.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local cars = {}
      for i = 1, n do
        cars[i] = {
          x = math.random() * 1000000,
          v = math.random() * 100,
          dir = 1,
        }
      end
      for i = n + 1, 2 * n do
        cars[i] = {
          x = math.random() * 1000000,
          v = math.random() * 100,
          dir = -1,
        }
      end
      for i = 1, 2 * n do
        for j = i + 1, 2 * n do
          local c1 = cars[i]
          local c2 = cars[j]
          if c1.dir ~= c2.dir then
            local d = c1.x - c2.x
            local v = c1.v - c2.v
            if d * v < 0 then
              local t = -d / v
              if t > 0 then
                collisions = collisions + 1
              end
            end
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zb6c23y.lua:48:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp2zb6c23y.lua:48: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left = {}
        local cars_right = {}
        for i = 1, n do
            cars_left[i] = i
            cars_right[i] = i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left[i] == cars_right[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksili0a3.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpksili0a3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n - i + 1
      end
      local collision = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collision = collision + 1
          end
        end
      end
      return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9mbjcjj.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmph9mbjcjj.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y52_2tu.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp2y52_2tu.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        -- The cars are numbered from 1 to n.  We use a table to keep track of the
        -- cars that are moving left to right.  The key is the car number, and the
        -- value is the car's position.
        local left_to_right = {}
        for i = 1, n do
            left_to_right[i] = i
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpsr414i8z.lua:28: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3409uqdi.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3409uqdi.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if i == j then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3bto5t8.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpy3bto5t8.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local count = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    count = count + 1
                end
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvz70ixq.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmptvz70ixq.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd97jtynh.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpd97jtynh.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left = {}
        local cars_right = {}
        for i = 1, n do
            cars_left[i] = i
            cars_right[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left[i] == cars_right[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkxcz4o3.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqkxcz4o3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew9cg9cy.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpew9cg9cy.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local n = n or 0
      local collisions = 0
      local cars = {}
      for i = 1, n do
        cars[i] = {
          x = math.random(0, 100),
          y = math.random(0, 100),
          vx = math.random(0, 100),
          vy = math.random(0, 100),
        }
      end
      for i = 1, n do
        for j = 1, n do
          if cars[i].vx > 0 and cars[j].vx < 0 then
            if cars[i].x < cars[j].x then
              collisions = collisions + 1
            end
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bc3l_tp.lua:36:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6bc3l_tp.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = i
      end
      local collision = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collision = collision + 1
          end
        end
      end
      return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccgnzwgx.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpccgnzwgx.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collision = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7co1gxl.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpc7co1gxl.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n--
    n cars are driving left to right;  simultaneously, a different set of n cars\n--
    are driving right to left.   The two sets of cars start out being very far from\n--
    each other.  All cars move in the same speed.  Two cars are said to collide\n--
    when a car that's moving left to right hits a car that's moving right to left.\n--
    However, the cars are infinitely sturdy and strong; as a result, they continue
    moving\n-- in their trajectory as if they did not collide.\n-- This function outputs
    the number of such collisions.\nlocal function car_race_collision(n)\n    local
    collisions = 0\n    local cars = {}\n    local cars_left = {}\n    local cars_right
    = {}\n    for i = 1, n do\n        cars[i] = {\n            x = math.random(),\n
    \           v = math.random(),\n            direction = math.random() > 0.5 and
    \"left\" or \"right\"\n        }\n        if cars[i].direction == \"left\" then\n
    \           cars_left[i] = cars[i]\n        else\n            cars_right[i] =
    cars[i]\n        end\n    end\n    local time = 0\n    while #cars_left > 0 and
    #cars_right > 0 do\n        local min_time = math.huge\n        local min_time_car
    = nil\n        for _, car in pairs(cars_left) do\n            local t = (1 - car.x)
    / car.v\n            if t < min_time then\n                min_time = t\n                min_time_car
    = car\n            end\n        end\n        for _, car in pairs(cars_right) do\n
    \           local t = car.x / car.v\n            if t < min_time then\n                min_time
    = t\n                min_time_car = car\n            end\n        end\n        time
    = time + min_time\n        min_time_car.x = min_time_car.x + min_time * min_time_car.v\n
    \       if min_time_car.x >= 1 then\n            cars_left[min_time_car] = nil\n
    \       elseif min_time_car.x <= 0 then\n            cars_right[min_time_car]
    = nil\n        end\n        for _, car in pairs(cars_left) do\n            car.x
    = car.x + min_time * car.v\n        end\n        for _, car in pairs(cars_right)
    do\n            car.x = car.x - min_time * car.v\n        end\n        for _,
    car in pairs(cars_left) do\n            if car.x >= 1 then\n                cars_left[car]
    = nil\n            end\n        end\n        for _, car in pairs(cars_right) do\n
    \          \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3),
    9)\n    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n
    \   lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: 'lua: /tmp/tmphlj63ir4.lua:75: ''end'' expected (to close ''for'' at line
    62) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right_cars = {}
        local right_to_left_cars = {}
        for i = 1, n do
            left_to_right_cars[i] = i
            right_to_left_cars[i] = i
        end
        local collisions = 0
        local i = 1
        local j = 1
        while i <= n and j <= n do
            if left_to_right_cars[i] < right_to_left_cars[j] then
                i = i + 1
            elseif left_to_right_cars[i] > right_to_left_cars[j] then
                j = j + 1
            else
                collisions = collisions + 1
                i = i + 1
                j = j + 1
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8szocn1z.lua:36:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp8szocn1z.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left_to_right = {}
        local cars_right_to_left = {}
        for i = 1, n do
            cars_left_to_right[i] = i
            cars_right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left_to_right[i] == cars_right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryx9_jgb.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpryx9_jgb.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwpdwgct.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpzwpdwgct.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        for i = 1, n do
            for j = n + 1, 2 * n do
                if cars[i].x < cars[j].x and cars[i].v > cars[j].v then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oiprl5s.lua:37:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp0oiprl5s.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local n_collisions = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            n_collisions = n_collisions + 1
          end
        end
      end
      return n_collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4sd7z4u.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpx4sd7z4u.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6ob0nwe.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_6ob0nwe.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fc48c8m.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4fc48c8m.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjt8l6m2.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpmjt8l6m2.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wlk9o1u.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp8wlk9o1u.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnky9mbi6.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpnky9mbi6.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if i == j then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5bmne2m.lua:24:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpo5bmne2m.lua:24: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp221f7lpw.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp221f7lpw.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        local collisions = 0
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1yc8sia.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpc1yc8sia.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptp_z2kuo.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmptp_z2kuo.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      local collisions = 0
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoda2maa.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmphoda2maa.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local function car_race_collision_helper(n, left_to_right, right_to_left)
            if n == 0 then
                return 0
            else
                local l = left_to_right[n]
                local r = right_to_left[n]
                if l < r then
                    return car_race_collision_helper(n - 1, left_to_right, right_to_left)
                else
                    return 1 + car_race_collision_helper(n - 1, left_to_right, right_to_left)
                end
            end
        end
        return car_race_collision_helper(n, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {10, 9, 8, 7, 6, 5, 4, 3, 2, 1})
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcunx0la.lua:29:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmplcunx0la.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb9yrk5p.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmphb9yrk5p.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra2zf9n6.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpra2zf9n6.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjo6_etj.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpgjo6_etj.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                x = math.random(),
                v = math.random()
            }
        end
        for i = 1, n do
            cars[n + i] = {
                x = math.random(),
                v = -math.random()
            }
        end
        table.sort(cars, function(a, b) return a.x < b.x end)
        for i = 1, n do
            for j = i + 1, n + i do
                if cars[i].v > 0 and cars[j].v < 0 then
                    local t = (cars[i].x - cars[j].x) / (cars[j].v - cars[i].v)
                    if t > 0 then
                        collisions = collisions + 1
                    end
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd288brs5.lua:41:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpd288brs5.lua:41: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collisions = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1azlx58.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpp1azlx58.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local i = 1
      local j = 1
      local count = 0
      while i <= n and j <= n do
        if left_to_right[i] < right_to_left[j] then
          i = i + 1
        elseif left_to_right[i] > right_to_left[j] then
          j = j + 1
        else
          count = count + 1
          i = i + 1
          j = j + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nzhayew.lua:36:
    expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp_nzhayew.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
      local left_to_right = {}
      local right_to_left = {}
      for i = 1, n do
        left_to_right[i] = i
        right_to_left[i] = n + 1 - i
      end
      local collisions = 0
      for i = 1, n do
        for j = 1, n do
          if left_to_right[i] == right_to_left[j] then
            collisions = collisions + 1
          end
        end
      end
      return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4frmc6cs.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4frmc6cs.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n + 1 - i
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal_sixqu.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpal_sixqu.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars_left = {}
        local cars_right = {}
        for i = 1, n do
            cars_left[i] = i
            cars_right[i] = n + 1 - i
        end
        for i = 1, n do
            for j = 1, n do
                if cars_left[i] == cars_right[j] then
                    collisions = collisions + 1
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzggwlbs.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprzggwlbs.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local collisions = 0
        local cars = {}
        for i = 1, n do
            cars[i] = {
                pos = math.random(1, 1000000),
                dir = 1,
            }
        end
        for i = 1, n do
            cars[i + n] = {
                pos = math.random(1, 1000000),
                dir = -1,
            }
        end
        for i = 1, n do
            for j = 1, n do
                if cars[i].dir == 1 and cars[j + n].dir == -1 then
                    if cars[i].pos > cars[j + n].pos then
                        collisions = collisions + 1
                    end
                end
            end
        end
        return collisions
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4fkfwj6.lua:39:
    expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpx4fkfwj6.lua:39: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Imagine a road that's a perfectly straight infinitely long line.
    -- n cars are driving left to right;  simultaneously, a different set of n cars
    -- are driving right to left.   The two sets of cars start out being very far from
    -- each other.  All cars move in the same speed.  Two cars are said to collide
    -- when a car that's moving left to right hits a car that's moving right to left.
    -- However, the cars are infinitely sturdy and strong; as a result, they continue moving
    -- in their trajectory as if they did not collide.
    -- This function outputs the number of such collisions.
    local function car_race_collision(n)
        local left_to_right = {}
        local right_to_left = {}
        for i = 1, n do
            left_to_right[i] = i
            right_to_left[i] = n - i + 1
        end
        local collision = 0
        for i = 1, n do
            for j = 1, n do
                if left_to_right[i] == right_to_left[j] then
                    collision = collision + 1
                end
            end
        end
        return collision
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = car_race_collision
        lu.assertEquals(candidate(2), 4)
        lu.assertEquals(candidate(3), 9)
        lu.assertEquals(candidate(4), 16)
        lu.assertEquals(candidate(8), 64)
        lu.assertEquals(candidate(10), 100)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm45ioysa.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpm45ioysa.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
