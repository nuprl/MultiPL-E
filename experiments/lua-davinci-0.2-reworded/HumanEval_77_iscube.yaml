---
name: HumanEval_77_iscube
language: lua
prompt: "-- Write a function that takes an integer a and returns true \n-- if this
  ingeger is a cube of some integer number.\n-- Note: you may assume the input is
  always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n-- false\n--
  >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n-- true\n--
  >>> iscube(180)\n-- false\nlocal function iscube(a)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = iscube
      lu.assertEquals(candidate(1), true)
      lu.assertEquals(candidate(2), false)
      lu.assertEquals(candidate(-1), true)
      lu.assertEquals(candidate(64), true)
      lu.assertEquals(candidate(180), false)
      lu.assertEquals(candidate(1000), true)
      lu.assertEquals(candidate(0), true)
      lu.assertEquals(candidate(1729), false)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    -- your code here
    if a == 0 then
      return true
    end
    if a < 0 then
      a = -a
    end
    local i = 1
    while i * i * i <= a do
      if i * i * i == a then
        return true
      end
      i = i + 1
    end
    return false
  end
- |2-
    -- your code here
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: write your code here
  end
- |2-
      return a == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0
  end
- "\tlocal b = math.floor(math.pow(a, 1/3))\n\treturn math.pow(b, 3) == a\nend"
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local b = math.floor(math.pow(a, 1/3))
      return b * b * b == a
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- your code here
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local b = math.floor(math.pow(a, 1/3))
      return b*b*b == a
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- your code here
      return false
  end
- "\tlocal b = math.floor(math.pow(a, 1/3))\n\treturn b*b*b == a\nend"
- |2-
      local b = math.floor(math.pow(a, 1/3))
      return b * b * b == a
  end
- |2-
      -- your code here
      return false
  end
- "\treturn math.floor(math.pow(a, 1/3))^3 == a\nend"
- |2-
      -- your code here
      return true
  end
- |2-
      -- your code here
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      -- your code here
      local x = math.sqrt(a)
      if x == math.floor(x) then
          return true
      else
          return false
      end
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return math.abs(a) == math.abs(a)^(1/3)
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return (a == 0) or (a == 1) or (a == -1) or (math.sqrt(a) % 1 == 0)
  end
- "\treturn math.sqrt(a) % 1 == 0\nend"
- |2-
      -- your code here
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 0
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a < 0 then
          a = -a
      end
      if a == 0 then
          return true
      end
      local x = math.floor(math.pow(a, 1/3))
      return x*x*x == a
  end
- "\t-- TODO: implement this function\nend"
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- "\tif a == 0 then\n\t\treturn true\n\tend\n\tif a < 0 then\n\t\ta = -a\n\tend\n\tlocal
  i = 1\n\twhile i * i * i <= a do\n\t\tif i * i * i == a then\n\t\t\treturn true\n\t\tend\n\t\ti
  = i + 1\n\tend\n\treturn false\nend"
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a < 0 then
          a = -a
      end
      if a == 0 then
          return true
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    local n = math.floor(math.pow(a, 1/3))
    return n*n*n == a
  end
- |2-
      return a == 0 or a == 1 or a == -1 or math.pow(math.ceil(math.pow(a, 1/3)), 3) == a
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return a == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return math.abs(a) == math.abs(a)^(1/3)
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      local b = math.sqrt(a)
      local c = math.pow(b, 3)
      if c == a then
          return true
      else
          return false
      end
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- TODO: implement the function
      return false
  end
- |2-
      if a < 0 then
          a = -a
      end
      local b = math.floor(math.pow(a, 1/3))
      return b * b * b == a
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- your code here
      if a < 0 then
          a = -a
      end
      if a == 0 then
          return true
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- TODO: implement this function
      -- Hint: you may use the math.sqrt function
      -- Hint: you may use the math.modf function
      -- Hint: you may use the math.abs function
      -- Hint: you may use the math.floor function
      -- Hint: you may use the math.ceil function
      -- Hint: you may use the math.pow function
      -- Hint: you may use the math.fmod function
      -- Hint: you may use the math.pi function
      -- Hint: you may use the math.exp function
      -- Hint: you may use the math.log function
      -- Hint: you may use the math.log10 function
      -- Hint: you may use the math.sin function
      -- Hint: you may use the math.cos function
      -- Hint: you may use the math.tan function
      -- Hint: you may use the math.asin function
      -- Hint: you may use the math.acos function
      -- Hint: you may use the math.atan function
      -- Hint: you may use the math.sinh function
      -- Hint: you may use the math.cosh function
      -- Hint: you may use the math.tanh function
      -- Hint: you may use the math.deg function
      -- Hint: you may use the math.rad function
      -- Hint: you may use the math.random function
      -- Hint: you may use the math.randomseed function
      -- Hint: you may use the math.max function
      -- Hint: you may use the math.min function
      -- Hint: you may use the math.mod function
      -- Hint: you may use the math.frexp function
      -- Hint: you may use the math.ldexp function
      -- Hint: you may use the math.ult function
      -- Hint: you may use the math.huge function
      -- Hint: you may use the math.type function
      -- Hint: you may use the math.tointeger function
      -- Hint: you may use the math.tonumber function
      -- Hint: you may use the math.
- |2-
      return math.pow(math.floor(math.pow(a, 1/3)), 3) == a
  end
- "\treturn math.sqrt(a) % 1 == 0\nend"
- |2-
      return a == 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- your code here
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return a == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return a == 0 or a == 1 or a == -1 or a == 8 or a == 27 or a == -8 or a == -27
  end
- |2-
      return math.abs(a) == math.abs(a)^(1/3)
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: write your code here
      return false
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      if a == 0 then
          return true
      end
      local x = math.floor(math.pow(math.abs(a), 1/3))
      return x*x*x == a
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    return a == 0 or a == 1 or a == -1 or math.pow(math.floor(math.pow(a, 1/3)), 3) == a
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local x = math.floor(math.pow(a, 1/3))
      return math.pow(x, 3) == a
  end
- |2-
      local b = math.floor(math.pow(a, 1/3))
      return math.pow(b, 3) == a
  end
- |2-
      local b = math.floor(math.pow(a, 1/3))
      return a == b*b*b
  end
- |2-
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    if a == 0 then
      return true
    end
    if a < 0 then
      a = -a
    end
    local x = math.floor(math.pow(a, 1/3))
    return a == x * x * x
  end
- |2-
      return a == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0
  end
- |2-
      if a == 0 then return true end
      if a < 0 then a = -a end
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement the function
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return a == 0 or a == 1 or a == -1 or math.sqrt(a) % 1 == 0
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local n = math.floor(math.pow(a, 1/3))
      return n*n*n == a
  end
- |2-
      local b = math.sqrt(a)
      return b*b*b == a
  end
- |2-
      -- your code here
      return false
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
      return false
  end
- |2-
      return math.sqrt(a) % 1 == 0
  end
- |2-
      -- TODO: implement this function
      local b = math.sqrt(a)
      if b == math.floor(b) then
          local c = math.sqrt(b)
          if c == math.floor(c) then
              return true
          else
              return false
          end
      else
          return false
      end
  end
- "\t-- TODO: implement this function\nend"
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x*x*x == a
  end
- |2-
      -- TODO: implement the function
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      if a < 0 then
          a = -a
      end
      if a == 0 then
          return true
      end
      local b = math.floor(math.pow(a, 1/3))
      return b * b * b == a
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local x = math.floor(math.pow(a, 1/3))
      return x*x*x == a
  end
- |2-
      local b = math.sqrt(a)
      if math.floor(b) == b then
          return true
      else
          return false
      end
  end
- |2-
    -- your code here
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      local i = 0
      while i*i*i < a do
          i = i + 1
      end
      if i*i*i == a then
          return true
      else
          return false
      end
  end
- |2-
      -- TODO: implement the function
  end
- |2-
    -- your code here
    local b = math.sqrt(a)
    if b == math.floor(b) then
      return true
    else
      return false
    end
  end
- |2-
      return math.abs(a) == math.abs(a)^(1/3)
  end
- "\tlocal b = math.floor(math.pow(a, 1/3))\n\treturn b*b*b == a\nend"
- |2-
      -- your code here
  end
- |2-
      -- your code here
      local b = math.sqrt(a)
      if b == math.floor(b) then
          return true
      else
          return false
      end
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- "\t-- your code here\nend"
- |2-
      -- your code here
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return math.pow(x, 3) == a
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      if a < 0 then
          a = -a
      end
      if a == 0 then
          return true
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      -- HINT: you may use math.sqrt
      -- HINT: you may use math.floor
      -- HINT: you may use math.pow
      -- HINT: you may use math.abs
      local b = math.sqrt(math.abs(a))
      if math.floor(b) == b and math.pow(b, 3) == math.abs(a) then
          return true
      else
          return false
      end
  end
- |2-
      -- your code here
      return false
  end
- |2-
      return math.sqrt(a) % 1 == 0
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- Write your code here
      return false
  end
- |2-
      -- TODO: implement the function
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
      return false
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      return x*x*x == a
  end
- |2-
      if a==0 then
          return true
      end
      if a<0 then
          a=-a
      end
      local i=1
      while i*i*i<=a do
          if i*i*i==a then
              return true
          end
          i=i+1
      end
      return false
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a == 0 then return true end
      if a < 0 then a = -a end
      local x = math.floor(math.pow(a, 1/3))
      return x*x*x == a
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement iscube function
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- your code here
  end
- |2-
      -- your code here
  end
- |2-
      return a == 0 or a == 1 or a == -1 or (a > 0 and a % math.floor(math.pow(a, 1/3)) == 0)
  end
- |2-
      local b = math.ceil(math.pow(a, 1/3))
      return b * b * b == a
  end
- "\treturn a == 0 or (a > 0 and math.pow(math.floor(math.pow(a, 1/3)), 3) == a)\nend"
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- your code here
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 1
      while i*i*i <= a do
          if i*i*i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      if a == 0 then return true end
      if a < 0 then a = -a end
      local x = math.floor(math.pow(a, 1/3))
      return x*x*x == a
  end
- |2-
      -- your code here
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local x = math.floor(math.pow(a, 1/3))
      if math.pow(x, 3) == a then
          return true
      else
          return false
      end
  end
- |2-
      -- TODO: implement this function
      if a == 0 then
          return true
      end
      if a < 0 then
          a = -a
      end
      local i = 1
      while i * i * i <= a do
          if i * i * i == a then
              return true
          end
          i = i + 1
      end
      return false
  end
- |2-
      return math.pow(math.floor(math.pow(a, 1/3)), 3) == a
  end
- |2-
      local x = math.floor(math.pow(a, 1/3))
      return x * x * x == a
  end
- |2-
      -- TODO: implement this function
      local x = math.floor(math.pow(a,1/3))
      if math.pow(x,3) == a then
          return true
      else
          return false
      end
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      return math.sqrt(a) % 1 == 0
  end
- |2-
      -- your code here
      local n = math.floor(math.cbrt(a))
      return a == n * n * n
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function.
      -- Hint: you may use the math.sqrt function.
      return false
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
