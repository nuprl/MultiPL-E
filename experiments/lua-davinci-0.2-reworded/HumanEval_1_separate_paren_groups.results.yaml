---
name: HumanEval_1_separate_paren_groups
language: lua
results:
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                paren_groups[#paren_groups + 1] = current_group
                current_group = ''
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr3oya44.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"\", \"((())\", \"\", \"(\", \"\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpjr3oya44.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == ' ' then
                -- ignore spaces
            elseif char == '(' then
                depth = depth + 1
                group = group .. char
            elseif char == ')' then
                depth = depth - 1
                group = group .. char
                if depth == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
                paren_group = paren_group .. char
            elseif char == ')' then
                paren_count = paren_count - 1
                paren_group = paren_group .. char
                if paren_count == 0 then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1rx06oe.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpf1rx06oe.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ht9qwq2.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp2ht9qwq2.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                paren_groups[#paren_groups + 1] = current_group
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bg832hk.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp4bg832hk.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(result, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlcxq4wz.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnlcxq4wz.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          paren_count = paren_count + 1
        elseif char == ')' then
          paren_count = paren_count - 1
        end
        if paren_count == 0 then
          if current_group ~= '' then
            table.insert(groups, current_group)
            current_group = ''
          end
        else
          current_group = current_group .. char
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicy8kljn.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpicy8kljn.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if #current_group > 0 then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx95j7szv.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpx95j7szv.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local start_index = 1
        local end_index = 1
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                end_index = i
                table.insert(groups, paren_string:sub(start_index, end_index))
                start_index = i + 1
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b83910e.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\",
    \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\t/tmp/tmp3b83910e.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanj5nozm.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpanj5nozm.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          paren_count = paren_count + 1
        elseif char == ')' then
          paren_count = paren_count - 1
        end
        if paren_count == 0 then
          if current_group ~= '' then
            table.insert(paren_groups, current_group)
            current_group = ''
          end
        else
          current_group = current_group .. char
        end
      end
      return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp546gm43f.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp546gm43f.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kkqe7nt.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp8kkqe7nt.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open = open + 1
            elseif c == ')' then
                open = open - 1
            end
            if open == 0 then
                if #group > 0 then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7fbb415.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpt7fbb415.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                paren_groups[#paren_groups + 1] = current_group
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4snswdb.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpu4snswdb.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i=1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                depth = depth + 1
            elseif c == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    groups[#groups + 1] = group
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwiardv69.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwiardv69.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group_start = 1
        local group_end = 1
        local group_open = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                group_open = group_open + 1
            elseif c == ')' then
                group_open = group_open - 1
                if group_open == 0 then
                    group_end = i
                    table.insert(groups, paren_string:sub(group_start, group_end))
                    group_start = i + 1
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rhblol5.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\",
    \" ((()))\", \" ()\", \" ((())()())\"}\nstack traceback:\n\t/tmp/tmp9rhblol5.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq_mkwyx.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppq_mkwyx.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        -- TODO: Implement this function
        local paren_table = {}
        local paren_count = 0
        local paren_start = 0
        local paren_end = 0
        for i = 1, #paren_string do
            if paren_string:sub(i, i) == '(' then
                paren_count = paren_count + 1
                if paren_count == 1 then
                    paren_start = i
                end
            elseif paren_string:sub(i, i) == ')' then
                paren_count = paren_count - 1
                if paren_count == 0 then
                    paren_end = i
                    paren_table[#paren_table + 1] = paren_string:sub(paren_start, paren_end)
                end
            end
        end
        return paren_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ofqln4m.lua:36:
    expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"(( )(
    ))\"}\nstack traceback:\n\t/tmp/tmp7ofqln4m.lua:36: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if paren_group ~= '' then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            else
                paren_group = paren_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswio9mcx.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpswio9mcx.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local group_start = 1
      local group_end = 1
      local group_count = 0
      local paren_count = 0
      for i = 1, #paren_string do
        local c = paren_string:sub(i, i)
        if c == '(' then
          paren_count = paren_count + 1
        elseif c == ')' then
          paren_count = paren_count - 1
        end
        if paren_count == 0 then
          group_end = i
          group_count = group_count + 1
          groups[group_count] = paren_string:sub(group_start, group_end)
          group_start = i + 1
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9el0pmx3.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\",
    \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\t/tmp/tmp9el0pmx3.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local paren_groups = {}
      local paren_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          paren_count = paren_count + 1
          paren_group = paren_group .. char
        elseif char == ')' then
          paren_count = paren_count - 1
          paren_group = paren_group .. char
          if paren_count == 0 then
            table.insert(paren_groups, paren_group)
            paren_group = ''
          end
        end
      end
      return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08_id_17.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp08_id_17.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcltoyrgc.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcltoyrgc.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and current_group ~= '' then
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjkw2f__.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnjkw2f__.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_count = 0
        local paren_start = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
                if paren_count == 1 then
                    paren_start = i
                end
            elseif char == ')' then
                paren_count = paren_count - 1
                if paren_count == 0 then
                    paren_groups[#paren_groups + 1] = paren_string:sub(paren_start, i)
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppr3c3vz7.lua:34:
    expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"(( )(
    ))\"}\nstack traceback:\n\t/tmp/tmppr3c3vz7.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                group = group .. char
                table.insert(groups, group)
                group = ''
            elseif char ~= ' ' then
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local level = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                level = level + 1
                group = group .. c
            elseif c == ')' then
                level = level - 1
                group = group .. c
                if level == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_count = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_count = open_count + 1
            elseif c == ')' then
                open_count = open_count - 1
            end
            if open_count == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_02h866r.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_02h866r.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and current_group ~= '' then
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif c ~= ' ' then
                current_group = current_group .. c
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tmj_a9e.lua:30:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp1tmj_a9e.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_count = open_count + 1
            elseif char == ')' then
                open_count = open_count - 1
            end
            if open_count == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85kfojhp.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp85kfojhp.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrwi6a5p.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqrwi6a5p.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3klja03s.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp3klja03s.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_count = open_count + 1
            elseif char == ')' then
                open_count = open_count - 1
            end
            if open_count == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvx5swyc.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmphvx5swyc.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp418z5x05.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp418z5x05.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl93kidw3.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpl93kidw3.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                paren_groups[#paren_groups + 1] = current_group
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjy50ksa.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcjy50ksa.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local start, stop = paren_string:find('%b()')
        while start do
            result[#result + 1] = paren_string:sub(start, stop)
            start, stop = paren_string:find('%b()', stop + 1)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo26955k.lua:23:
    expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"(( )(
    ))\"}\nstack traceback:\n\t/tmp/tmpmo26955k.lua:23: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open = open + 1
            elseif char == ')' then
                open = open - 1
            end
            if open == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77_ud0fu.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp77_ud0fu.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local level = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                level = level + 1
            elseif char == ')' then
                level = level - 1
            end
            if level == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihbung2h.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpihbung2h.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                depth = depth + 1
                group = group .. c
            elseif c == ')' then
                depth = depth - 1
                group = group .. c
                if depth == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local level = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                level = level + 1
            elseif c == ')' then
                level = level - 1
            end
            if level == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv82ha140.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpv82ha140.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local level = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                level = level + 1
                current_group = current_group .. char
            elseif char == ')' then
                level = level - 1
                current_group = current_group .. char
                if level == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                open_parens = open_parens + 1
                group = group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                group = group .. c
                if open_parens == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ne8rrvt.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp3ne8rrvt.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                if char == ')' then
                    group = group .. char
                    table.insert(groups, group)
                    group = ''
                else
                    group = group .. char
                end
            elseif char ~= ' ' then
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_paren_count = open_paren_count + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_paren_count = open_paren_count - 1
                current_group = current_group .. char
                if open_paren_count == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          open_parens = open_parens + 1
          current_group = current_group .. char
        elseif char == ')' then
          open_parens = open_parens - 1
          current_group = current_group .. char
          if open_parens == 0 then
            table.insert(paren_groups, current_group)
            current_group = ''
          end
        end
      end
      return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local group = ''
      local open_count = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          open_count = open_count + 1
        elseif char == ')' then
          open_count = open_count - 1
        end
        if open_count == 0 then
          if group ~= '' then
            table.insert(groups, group)
            group = ''
          end
        else
          group = group .. char
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxvc_lck.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwxvc_lck.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                depth = depth + 1
            elseif c == ')' then
                depth = depth - 1
            end
            if c ~= ' ' then
                group = group .. c
            end
            if depth == 0 then
                table.insert(groups, group)
                group = ''
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa0npj0d.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\",
    \"\", \"((()))\", \"\", \"()\", \"\", \"((())()())\"}\nstack traceback:\n\t/tmp/tmpwa0npj0d.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78ruy9qs.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp78ruy9qs.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested
    parentheses. Your goal is to\n-- separate those group into separate strings and
    return the table of those.\n-- Separate groups are balanced (each open brace is
    properly closed) and not nested within each other\n-- Ignore any spaces in the
    input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()', '(())',
    '(()())'}\nlocal function separate_paren_groups(paren_string)\n\tlocal paren_groups
    = {}\n\tlocal current_group = ''\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string
    do\n\t\tlocal c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\t\t\tparen_count
    = paren_count + 1\n\t\t\tcurrent_group = current_group .. c\n\t\telseif c == ')'
    then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group
    .. c\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(paren_groups, current_group)\n\t\t\t\tcurrent_group
    = ''\n\t\t\tend\n\t\tend\n\tend\n\treturn paren_groups\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())
    ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()
    (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),
    {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',
    '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe04c45oq.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpe04c45oq.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                paren_groups[#paren_groups + 1] = current_group
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rxzwqgo.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp4rxzwqgo.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string containing multiple groups of nested
    parentheses. Your goal is to\n-- separate those group into separate strings and
    return the table of those.\n-- Separate groups are balanced (each open brace is
    properly closed) and not nested within each other\n-- Ignore any spaces in the
    input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()', '(())',
    '(()())'}\nlocal function separate_paren_groups(paren_string)\n\tlocal groups
    = {}\n\tlocal group = ''\n\tlocal depth = 0\n\tfor i = 1, #paren_string do\n\t\tlocal
    char = paren_string:sub(i, i)\n\t\tif char == '(' then\n\t\t\tdepth = depth +
    1\n\t\t\tgroup = group .. char\n\t\telseif char == ')' then\n\t\t\tdepth = depth
    - 1\n\t\t\tgroup = group .. char\n\t\t\tif depth == 0 then\n\t\t\t\ttable.insert(groups,
    group)\n\t\t\t\tgroup = ''\n\t\t\tend\n\t\tend\n\tend\n\treturn groups\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = separate_paren_groups\n
    \   lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))',
    '()', '((())()())'})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'),
    {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),
    {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',
    '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                group = group .. char
                table.insert(groups, group)
                group = ''
            elseif char ~= ' ' then
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                paren_group = paren_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                paren_group = paren_group .. char
                if open_parens == 0 then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 then
                if current_group ~= '' then
                    table.insert(result, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9u24sh5.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpx9u24sh5.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_stack = {}
        for char in paren_string:gmatch('%S') do
            if char == '(' then
                paren_stack[#paren_stack + 1] = char
            elseif char == ')' then
                paren_stack[#paren_stack] = nil
                if #paren_stack == 0 then
                    paren_groups[#paren_groups + 1] = current_group
                    current_group = ''
                end
            end
            current_group = current_group .. char
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_xtw02t.lua:29:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \")((())\", \")(\", \")((())()()\"}\nstack traceback:\n\t/tmp/tmp3_xtw02t.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                group = group .. char
                table.insert(groups, group)
                group = ''
            elseif char ~= ' ' then
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24j8wehp.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp24j8wehp.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local group = ''
      local paren_count = 0
      for c in paren_string:gmatch('.') do
        if c == '(' then
          paren_count = paren_count + 1
        elseif c == ')' then
          paren_count = paren_count - 1
        end
        if paren_count == 0 then
          if group ~= '' then
            table.insert(groups, group)
            group = ''
          end
        else
          group = group .. c
        end
      end
      if group ~= '' then
        table.insert(groups, group)
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpteszwygz.lua:35:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpteszwygz.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == ' ' then
                -- ignore spaces
            elseif char == '(' then
                paren_count = paren_count + 1
                paren_group = paren_group .. char
            elseif char == ')' then
                paren_count = paren_count - 1
                paren_group = paren_group .. char
                if paren_count == 0 then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                depth = depth + 1
            elseif c == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd7hp3_3.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpmd7hp3_3.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string containing multiple groups of nested
    parentheses. Your goal is to\n-- separate those group into separate strings and
    return the table of those.\n-- Separate groups are balanced (each open brace is
    properly closed) and not nested within each other\n-- Ignore any spaces in the
    input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()', '(())',
    '(()())'}\nlocal function separate_paren_groups(paren_string)\n\tlocal groups
    = {}\n\tlocal current_group = ''\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string
    do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == '(' then\n\t\t\tparen_count
    = paren_count + 1\n\t\t\tcurrent_group = current_group .. char\n\t\telseif char
    == ')' then\n\t\t\tparen_count = paren_count - 1\n\t\t\tcurrent_group = current_group
    .. char\n\t\t\tif paren_count == 0 then\n\t\t\t\ttable.insert(groups, current_group)\n\t\t\t\tcurrent_group
    = ''\n\t\t\tend\n\t\tend\n\tend\n\treturn groups\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = separate_paren_groups\n    lu.assertEquals(candidate('(()())
    ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('()
    (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),
    {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',
    '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_count = open_count + 1
            elseif char == ')' then
                open_count = open_count - 1
            end
            if open_count == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sq8l328.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp4sq8l328.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_count = open_count + 1
            elseif char == ')' then
                open_count = open_count - 1
            end
            if open_count == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ipjnoaz.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp0ipjnoaz.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if #group > 0 then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhviwt89.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpwhviwt89.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if paren_group ~= '' then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            else
                paren_group = paren_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgifs7q0.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqgifs7q0.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local level = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                level = level + 1
            elseif c == ')' then
                level = level - 1
            end
            if level == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9536bl8q.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp9536bl8q.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                depth = depth + 1
                group = group .. c
            elseif c == ')' then
                depth = depth - 1
                group = group .. c
                if depth == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcumtyho.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbcumtyho.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                end
                current_group = ''
            else
                current_group = current_group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q5svfwy.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_q5svfwy.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                depth = depth + 1
            elseif c == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74lqagp2.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp74lqagp2.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hwlv2ne.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp5hwlv2ne.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(result, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9okbmcb.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpj9okbmcb.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and current_group ~= '' then
                paren_groups[#paren_groups + 1] = current_group
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0t0dp0c.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_0t0dp0c.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                depth = depth + 1
            elseif c == ')' then
                depth = depth - 1
            end
            if depth > 0 then
                group = group .. c
            elseif depth == 0 and group ~= '' then
                table.insert(groups, group)
                group = ''
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1lkdopb.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpa1lkdopb.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_m0tyv4.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpb_m0tyv4.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
            elseif c == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and c ~= ' ' then
                groups[#groups + 1] = group
                group = ''
            elseif c ~= ' ' then
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7dx0jyi.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpx7dx0jyi.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open = open + 1
            elseif c == ')' then
                open = open - 1
            end
            if open == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv8hhq5a.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpiv8hhq5a.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if char ~= ' ' then
                group = group .. char
            end
            if depth == 0 then
                table.insert(groups, group)
                group = ''
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibutjsv_.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\",
    \"\", \"((()))\", \"\", \"()\", \"\", \"((())()())\"}\nstack traceback:\n\t/tmp/tmpibutjsv_.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local paren_groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          open_parens = open_parens + 1
        elseif char == ')' then
          open_parens = open_parens - 1
        end
        if open_parens == 0 and char ~= ' ' then
          current_group = current_group .. char
        elseif open_parens == 0 and char == ' ' then
          table.insert(paren_groups, current_group)
          current_group = ''
        elseif open_parens ~= 0 and char ~= ' ' then
          current_group = current_group .. char
        end
      end
      return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dk0avsy.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\",
    \"((()))\", \"()\"}\nstack traceback:\n\t/tmp/tmp6dk0avsy.lua:33: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                group = group .. char
                table.insert(groups, group)
                group = ''
            elseif char ~= ' ' then
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcpo3zof.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpgcpo3zof.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if #group > 0 then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppz53pgoy.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppz53pgoy.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_count = open_count + 1
            elseif char == ')' then
                open_count = open_count - 1
            end
            if open_count == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbuigcita.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpbuigcita.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
            elseif c == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and c ~= ' ' then
                if c == ')' then
                    group = group .. c
                    table.insert(groups, group)
                    group = ''
                else
                    group = group .. c
                end
            elseif c ~= ' ' then
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9i3rkuq.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpg9i3rkuq.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_group_table = {}
        local paren_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if paren_group ~= '' then
                    table.insert(paren_group_table, paren_group)
                    paren_group = ''
                end
            else
                paren_group = paren_group .. c
            end
        end
        return paren_group_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxuiou_3.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmprxuiou_3.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                open = open + 1
            elseif c == ')' then
                open = open - 1
            end
            if open == 0 and c ~= ' ' then
                group = group .. c
            elseif open == 1 and c ~= ' ' then
                group = c
            elseif open == 0 and c == ' ' then
                table.insert(groups, group)
                group = ''
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzu35qm4.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"))\", \"))\",
    \"()\"}\nstack traceback:\n\t/tmp/tmphzu35qm4.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if paren_group ~= '' then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            else
                paren_group = paren_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvd4wrskn.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpvd4wrskn.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_siqyzt1.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_siqyzt1.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                depth = depth + 1
            elseif char == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9yn_5n4.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpa9yn_5n4.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                group = group .. char
                table.insert(groups, group)
                group = ''
            elseif char ~= ' ' then
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6dwekg.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmppf6dwekg.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_count = 0
        local start_index = 1
        local end_index = 1
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
                if paren_count == 1 then
                    start_index = i
                end
            elseif char == ')' then
                paren_count = paren_count - 1
                if paren_count == 0 then
                    end_index = i
                    table.insert(paren_groups, paren_string:sub(start_index, end_index))
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx698kom.lua:36:
    expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"(( )(
    ))\"}\nstack traceback:\n\t/tmp/tmpfx698kom.lua:36: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local level = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                level = level + 1
                group = group .. c
            elseif c == ')' then
                level = level - 1
                group = group .. c
                if level == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and group ~= '' then
                table.insert(paren_groups, group)
                group = ''
            elseif char ~= ' ' then
                group = group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhui_8f_.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpqhui_8f_.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_paren_count = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_paren_count = open_paren_count + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_paren_count = open_paren_count - 1
                current_group = current_group .. char
                if open_paren_count == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local group = ''
      local open_count = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          open_count = open_count + 1
        elseif char == ')' then
          open_count = open_count - 1
        end
        if open_count == 0 then
          if group ~= '' then
            table.insert(groups, group)
            group = ''
          end
        else
          group = group .. char
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqo334ku.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpxqo334ku.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if #current_group > 0 then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sbuh707.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp4sbuh707.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local current_level = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                current_level = current_level + 1
                current_group = current_group .. char
            elseif char == ')' then
                current_level = current_level - 1
                current_group = current_group .. char
                if current_level == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(result, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ir0xgl8.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp_ir0xgl8.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          paren_count = paren_count + 1
        elseif char == ')' then
          paren_count = paren_count - 1
        end
        if paren_count == 0 then
          if #current_group > 0 then
            table.insert(groups, current_group)
            current_group = ''
          end
        else
          current_group = current_group .. char
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1f29i8g.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpp1f29i8g.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. c
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9g7tizr.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpv9g7tizr.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if paren_group ~= '' then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            else
                paren_group = paren_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit_fwvy7.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpit_fwvy7.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local current_level = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                current_level = current_level + 1
                current_group = current_group .. char
            elseif char == ')' then
                current_level = current_level - 1
                current_group = current_group .. char
                if current_level == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnthhvt7_.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnthhvt7_.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local depth = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                depth = depth + 1
            elseif c == ')' then
                depth = depth - 1
            end
            if depth == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nlp4hgq.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp2nlp4hgq.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4nk2r6z.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpb4nk2r6z.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and current_group ~= '' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiwf6q8e.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpgiwf6q8e.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                depth = depth + 1
                group = group .. c
            elseif c == ')' then
                depth = depth - 1
                group = group .. c
                if depth == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                end
                current_group = ''
            else
                current_group = current_group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnub0lgsn.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpnub0lgsn.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local i = 1
        local j = 1
        local len = #paren_string
        while i <= len do
            local c = paren_string:sub(i, i)
            if c == '(' then
                j = i
                while j <= len do
                    local c2 = paren_string:sub(j, j)
                    if c2 == ')' then
                        groups[#groups + 1] = paren_string:sub(i, j)
                        i = j + 1
                        break
                    end
                    j = j + 1
                end
            else
                i = i + 1
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoavp2shn.lua:35:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()\",
    \"()\", \"((()\", \"()\", \"((()\", \"()\", \"()\"}\nstack traceback:\n\t/tmp/tmpoavp2shn.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and char == ')' then
                table.insert(groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0pvkzik.lua:31:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpl0pvkzik.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          open_parens = open_parens + 1
          current_group = current_group .. char
        elseif char == ')' then
          open_parens = open_parens - 1
          current_group = current_group .. char
          if open_parens == 0 then
            table.insert(groups, current_group)
            current_group = ''
          end
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
            elseif char == ')' then
                open_parens = open_parens - 1
            end
            if open_parens == 0 and char ~= ' ' then
                current_group = current_group .. char
                table.insert(paren_groups, current_group)
                current_group = ''
            elseif char ~= ' ' then
                current_group = current_group .. char
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local group = ''
      local depth = 0
      for i = 1, #paren_string do
        local c = paren_string:sub(i, i)
        if c == '(' then
          depth = depth + 1
        elseif c == ')' then
          depth = depth - 1
        end
        if depth == 0 then
          if group ~= '' then
            table.insert(groups, group)
            group = ''
          end
        else
          group = group .. c
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusfxnd6p.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpusfxnd6p.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                depth = depth + 1
                group = group .. c
            elseif c == ')' then
                depth = depth - 1
                group = group .. c
                if depth == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if paren_group ~= '' then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            else
                paren_group = paren_group .. c
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusjvp9k5.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpusjvp9k5.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local level = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                level = level + 1
            elseif char == ')' then
                level = level - 1
            end
            if level == 0 then
                if group ~= '' then
                    table.insert(groups, group)
                    group = ''
                end
            else
                group = group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0q2gw68.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpq0q2gw68.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(result, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. c
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn2h1hd_.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpdn2h1hd_.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local paren_groups = {}
      local current_group = ''
      local paren_count = 0
      for i = 1, #paren_string do
        local char = paren_string:sub(i, i)
        if char == '(' then
          paren_count = paren_count + 1
        elseif char == ')' then
          paren_count = paren_count - 1
        end
        if paren_count == 0 then
          if current_group ~= '' then
            table.insert(paren_groups, current_group)
            current_group = ''
          end
        else
          current_group = current_group .. char
        end
      end
      return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8js91q2v.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp8js91q2v.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_table = {}
        local paren_count = 0
        local paren_start = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                paren_count = paren_count + 1
                if paren_count == 1 then
                    paren_start = i
                end
            elseif c == ')' then
                paren_count = paren_count - 1
                if paren_count == 0 then
                    paren_table[#paren_table + 1] = paren_string:sub(paren_start, i)
                end
            end
        end
        return paren_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3elxn2xx.lua:34:
    expected: {\"()\", \"(())\", \"(()())\"}\nactual: {\"( )\", \"(( ))\", \"(( )(
    ))\"}\nstack traceback:\n\t/tmp/tmp3elxn2xx.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                paren_count = paren_count + 1
            elseif char == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            else
                current_group = current_group .. char
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8elh827r.lua:33:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmp8elh827r.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if current_group ~= '' then
                    table.insert(groups, current_group)
                end
                current_group = ''
            else
                current_group = current_group .. c
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnfbdwhs.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpgnfbdwhs.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 then
                if paren_group ~= '' then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            else
                paren_group = paren_group .. c
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcc5vnxcr.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpcc5vnxcr.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local current_group = ''
        local paren_count = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                paren_count = paren_count + 1
            elseif c == ')' then
                paren_count = paren_count - 1
            end
            if paren_count == 0 and c ~= ' ' then
                if current_group ~= '' then
                    table.insert(paren_groups, current_group)
                    current_group = ''
                end
            elseif c ~= ' ' then
                current_group = current_group .. c
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszclg65a.lua:32:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()()\",
    \"((())\", \"(\", \"((())()()\"}\nstack traceback:\n\t/tmp/tmpszclg65a.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(groups, current_group)
                    current_group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
      local groups = {}
      local current_group = ''
      local open_parens = 0
      for c in paren_string:gmatch('.') do
        if c == '(' then
          open_parens = open_parens + 1
          current_group = current_group .. c
        elseif c == ')' then
          open_parens = open_parens - 1
          current_group = current_group .. c
          if open_parens == 0 then
            table.insert(groups, current_group)
            current_group = ''
          end
        end
      end
      return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local depth = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                depth = depth + 1
                group = group .. c
            elseif c == ')' then
                depth = depth - 1
                group = group .. c
                if depth == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local c = paren_string:sub(i, i)
            if c == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. c
            elseif c == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. c
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local result = {}
        local current_group = ''
        local open_parens = 0
        for char in paren_string:gmatch('.') do
            if char == '(' then
                open_parens = open_parens + 1
                current_group = current_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                current_group = current_group .. char
                if open_parens == 0 then
                    table.insert(result, current_group)
                    current_group = ''
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local groups = {}
        local group = ''
        local level = 0
        for c in paren_string:gmatch('.') do
            if c == '(' then
                group = group .. c
                level = level + 1
            elseif c == ')' then
                group = group .. c
                level = level - 1
                if level == 0 then
                    table.insert(groups, group)
                    group = ''
                end
            end
        end
        return groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string containing multiple groups of nested
    parentheses. Your goal is to\n-- separate those group into separate strings and
    return the table of those.\n-- Separate groups are balanced (each open brace is
    properly closed) and not nested within each other\n-- Ignore any spaces in the
    input string.\n-- >>> separate_paren_groups('( ) (( )) (( )( ))')\n-- {'()', '(())',
    '(()())'}\nlocal function separate_paren_groups(paren_string)\n\tlocal result
    = {}\n\tlocal current_group = ''\n\tlocal paren_count = 0\n\tfor i = 1, #paren_string
    do\n\t\tlocal char = paren_string:sub(i, i)\n\t\tif char == '(' then\n\t\t\tparen_count
    = paren_count + 1\n\t\telseif char == ')' then\n\t\t\tparen_count = paren_count
    - 1\n\t\tend\n\t\tcurrent_group = current_group .. char\n\t\tif paren_count ==
    0 then\n\t\t\ttable.insert(result, current_group)\n\t\t\tcurrent_group = ''\n\t\tend\n\tend\n\treturn
    result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = separate_paren_groups\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),
    {'(()())', '((()))', '()', '((())()())'})\n    lu.assertEquals(candidate('() (())
    ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})\n    lu.assertEquals(candidate('(()(())((())))'),
    {'(()(())((())))'})\n    lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()',
    '(())', '(()())'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3l0c7fv1.lua:30:
    expected: {\"(()())\", \"((()))\", \"()\", \"((())()())\"}\nactual: {\"(()())\",
    \" \", \"((()))\", \" \", \"()\", \" \", \"((())()())\"}\nstack traceback:\n\t/tmp/tmp3l0c7fv1.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                paren_group = paren_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                paren_group = paren_group .. char
                if open_parens == 0 then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    -- separate those group into separate strings and return the table of those.
    -- Separate groups are balanced (each open brace is properly closed) and not nested within each other
    -- Ignore any spaces in the input string.
    -- >>> separate_paren_groups('( ) (( )) (( )( ))')
    -- {'()', '(())', '(()())'}
    local function separate_paren_groups(paren_string)
        local paren_groups = {}
        local paren_group = ''
        local open_parens = 0
        for i = 1, #paren_string do
            local char = paren_string:sub(i, i)
            if char == '(' then
                open_parens = open_parens + 1
                paren_group = paren_group .. char
            elseif char == ')' then
                open_parens = open_parens - 1
                paren_group = paren_group .. char
                if open_parens == 0 then
                    table.insert(paren_groups, paren_group)
                    paren_group = ''
                end
            end
        end
        return paren_groups
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = separate_paren_groups
        lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {'(()())', '((()))', '()', '((())()())'})
        lu.assertEquals(candidate('() (()) ((())) (((())))'), {'()', '(())', '((()))', '(((())))'})
        lu.assertEquals(candidate('(()(())((())))'), {'(()(())((())))'})
        lu.assertEquals(candidate('( ) (( )) (( )( ))'), {'()', '(())', '(()())'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
