---
name: HumanEval_13_greatest_common_divisor
language: lua
results:
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local a, b = math.abs(a), math.abs(b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        -- Euclidean algorithm
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a == 0 then
        return b
      elseif b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      a = math.abs(a)
      b = math.abs(b)
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            return greatest_common_divisor(b, a)
        end
        if b == 0 then
            return a
        end
        return greatest_common_divisor(b, a % b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a < b then
        a, b = b, a
      end
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,
    5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,
    b)\n\tlocal r = a % b\n\tif r == 0 then\n\t\treturn b\n\telse\n\t\treturn greatest_common_divisor(b,
    r)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,
    15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,
    60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a == 0 then
        return b
      elseif b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a == 0 then
        return b
      elseif b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a == 0 then
        return b
      elseif b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local a, b = math.abs(a), math.abs(b)
        if a == 0 or b == 0 then
            return a + b
        end
        local r = a % b
        while r ~= 0 do
            a, b = b, r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            return greatest_common_divisor(b, a)
        end
        if b == 0 then
            return a
        end
        return greatest_common_divisor(b, a % b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a == 0 then
        return b
      elseif b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a == 0 then
        return b
      elseif b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,
    5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,
    b)\n\tif a == 0 then\n\t\treturn b\n\telseif b == 0 then\n\t\treturn a\n\telse\n\t\treturn
    greatest_common_divisor(b, a % b)\n\tend\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,
    7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,
    14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      local a, b = math.abs(a), math.abs(b)
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            return greatest_common_divisor(b, a)
        end
        if b == 0 then
            return a
        end
        return greatest_common_divisor(b, a % b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local a, b = math.abs(a), math.abs(b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r
        while b ~= 0 do
            r = a % b
            a = b
            b = r
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            return greatest_common_divisor(b, a)
        end
        if b == 0 then
            return a
        end
        return greatest_common_divisor(b, a % b)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r
        while b ~= 0 do
            r = a % b
            a = b
            b = r
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if a == 0 then
        return b
      elseif b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a < b then
            a, b = b, a
        end
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      local r
      while b ~= 0 do
        r = a % b
        a = b
        b = r
      end
      return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        while r ~= 0 do
            a = b
            b = r
            r = a % b
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
      if b == 0 then
        return a
      else
        return greatest_common_divisor(b, a % b)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local r = a % b
        if r == 0 then
            return b
        else
            return greatest_common_divisor(b, r)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        local a, b = math.abs(a), math.abs(b)
        while b ~= 0 do
            a, b = b, a % b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if a == 0 then
            return b
        elseif b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return a greatest common divisor of two integers a and b
    -- >>> greatest_common_divisor(3, 5)
    -- 1
    -- >>> greatest_common_divisor(25, 15)
    -- 5
    local function greatest_common_divisor(a, b)
        if b == 0 then
            return a
        else
            return greatest_common_divisor(b, a % b)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = greatest_common_divisor
        lu.assertEquals(candidate(3, 7), 1)
        lu.assertEquals(candidate(10, 15), 5)
        lu.assertEquals(candidate(49, 14), 7)
        lu.assertEquals(candidate(144, 60), 12)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
