---
name: HumanEval_158_find_max
language: lua
prompt: |
  -- Write a function that accepts a table of strings.
  -- The table contains different words. Return the word with maximum number
  -- of unique characters. If multiple strings have maximum number of unique
  -- characters, return the one which comes first in lexicographical order.
  -- >>> find_max({'name', 'of', 'string'})
  -- 'string'
  -- >>> find_max({'name', 'enam', 'game'})
  -- 'enam'
  -- >>> find_max({'aaaaaaa', 'bb', 'cc'})
  -- 'aaaaaaa'
  local function find_max(words)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = find_max
      lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')
      lu.assertEquals(candidate({'name', 'enam', 'game'}), 'enam')
      lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}), 'aaaaaaa')
      lu.assertEquals(candidate({'abc', 'cba'}), 'abc')
      lu.assertEquals(candidate({'play', 'this', 'game', 'of', 'footbott'}), 'footbott')
      lu.assertEquals(candidate({'we', 'are', 'gonna', 'rock'}), 'gonna')
      lu.assertEquals(candidate({'we', 'are', 'a', 'mad', 'nation'}), 'nation')
      lu.assertEquals(candidate({'this', 'is', 'a', 'prrk'}), 'this')
      lu.assertEquals(candidate({'b'}), 'b')
      lu.assertEquals(candidate({'play', 'play', 'play'}), 'play')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not char:find(max_word) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_len = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local len = #unique_chars(word)
      if len > max_len then
        max_word = word
        max_len = len
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not char:find(max_word) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if not string.find(max_word, word:sub(i, i)) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = #unique_chars(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word, max_count = nil, 0
    for _, word in ipairs(words) do
      local count = 0
      for _ in word:gmatch('.') do
        count = count + 1
      end
      if count > max_count then
        max_word, max_count = word, count
      end
    end
    return max_word
  end
- |2-
      local max = 0
      local max_word = ''
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not char:find(max_word) then
                  count = count + 1
              end
          end
          if count > max then
              max = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_chars = 0
    for _, word in ipairs(words) do
      local chars = {}
      for c in word:gmatch('.') do
        chars[c] = true
      end
      local num_chars = 0
      for _ in pairs(chars) do
        num_chars = num_chars + 1
      end
      if num_chars > max_chars then
        max_chars = num_chars
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local count = #unique_chars(word)
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if not word:find(c, i + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, c in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, c in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local unique_chars = #unique_chars(word)
          if unique_chars > max_unique_chars then
              max_word = word
              max_unique_chars = unique_chars
          end
      end
      return max_word
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if word:find(c, i + 1) == nil then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for _, char in ipairs(word:split('')) do
              if not word:find(char, 2) then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in ipairs(word:to_chars()) do
              if not c:is_in(max_word) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_len = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local len = #unique_chars(word)
      if len > max_len then
        max_word = word
        max_len = len
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_unique_chars = 0
    for _, word in ipairs(words) do
      local unique_chars = 0
      for _, char in ipairs(word:chars()) do
        if not word:contains(char, 2) then
          unique_chars = unique_chars + 1
        end
      end
      if unique_chars > max_unique_chars then
        max_unique_chars = unique_chars
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _ in word:gmatch('.') do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not char:find(max_word) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _ in word:gmatch('.') do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not word:find(char, word:find(char) + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local unique_chars = #unique_chars(word)
          if unique_chars > max_unique_chars then
              max_word = word
              max_unique_chars = unique_chars
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local unique_chars = #unique_chars(word)
          if unique_chars > max_unique_chars then
              max_word = word
              max_unique_chars = unique_chars
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, c in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local len = #unique_chars(word)
          if len > max_len then
              max_word = word
              max_len = len
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local len = #unique_chars(word)
          if len > max_len then
              max_word = word
              max_len = len
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, ch in ipairs(word:split('')) do
              if not max_word:find(ch) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_chars = 0
    for _, word in ipairs(words) do
      local chars = {}
      for _, char in ipairs(word) do
        chars[char] = true
      end
      local num_chars = 0
      for _ in pairs(chars) do
        num_chars = num_chars + 1
      end
      if num_chars > max_chars then
        max_chars = num_chars
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, c in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local unique_chars = #unique_chars(word)
          if unique_chars > max_unique_chars then
              max_word = word
              max_unique_chars = unique_chars
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split("")) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = #unique_chars(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = count_unique(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = count_unique(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = ''
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for i = 1, #word do
        if word:find(word:sub(i, i), i + 1) == nil then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_unique_chars = 0
    for _, word in ipairs(words) do
      local unique_chars = 0
      for i = 1, #word do
        if not string.find(word, word:sub(i, i), i + 1) then
          unique_chars = unique_chars + 1
        end
      end
      if unique_chars > max_unique_chars then
        max_unique_chars = unique_chars
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, c in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if not word:find(word:sub(i, i), i + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = #unique_chars(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not char:find(max_word) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for i = 1, #word do
        local c = word:sub(i, i)
        if word:find(c, i + 1) == nil then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique = 0
      for _, word in ipairs(words) do
          local unique = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if not word:match(c, i + 1) then
                  unique = unique + 1
              end
          end
          if unique > max_unique then
              max_unique = unique
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local len = #unique_chars(word)
          if len > max_len then
              max_word = word
              max_len = len
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_unique_chars = 0
    for _, word in ipairs(words) do
      local unique_chars = 0
      for i = 1, #word do
        local c = word:sub(i, i)
        if word:find(c, i + 1) == nil then
          unique_chars = unique_chars + 1
        end
      end
      if unique_chars > max_unique_chars then
        max_unique_chars = unique_chars
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique = 0
      for _, word in ipairs(words) do
          local unique = 0
          for _, char in ipairs(word:split('')) do
              if word:find(char) == word:find_last(char) then
                  unique = unique + 1
              end
          end
          if unique > max_unique then
              max_unique = unique
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split("")) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local len = #unique_chars(word)
          if len > max_len then
              max_word = word
              max_len = len
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, c in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local count = unique_chars(word)
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_unique_chars = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local unique_chars = #unique_chars(word)
      if unique_chars > max_unique_chars then
        max_word = word
        max_unique_chars = unique_chars
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = count_unique(max_word)
    for i = 2, #words do
      local word = words[i]
      local count = count_unique(word)
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if word:find(word:sub(i, i), i + 1) == nil then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not char:find(max_word) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = count_unique(max_word)
    for i = 2, #words do
      local word = words[i]
      local count = count_unique(word)
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not char:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in ipairs(word:split('')) do
              if not max_word:find(c) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not table.contains(word:split(), char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local count = #unique_chars(word)
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = count_unique(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = count_unique(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if word:find(word:sub(i, i), i + 1) == nil then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if not word:sub(1, i - 1):find(c) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for _, char in ipairs(word:chars()) do
              if word:count(char) == 1 then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for i = 1, #words do
      local word = words[i]
      local count = 0
      for j = 1, #word do
        local char = word:sub(j, j)
        if not string.find(max_word, char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = #unique_chars(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      -- TODO: implement this function
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_chars = 0
    for _, word in ipairs(words) do
      local chars = {}
      for c in word:gmatch('.') do
        chars[c] = true
      end
      local num_chars = 0
      for _ in pairs(chars) do
        num_chars = num_chars + 1
      end
      if num_chars > max_chars then
        max_chars = num_chars
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local char = word:sub(i, i)
              if not word:find(char, i + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for _, char in ipairs(word:split('')) do
              if word:count(char) == 1 then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if not word:find(c, i + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local len = #unique_chars(word)
          if len > max_len then
              max_word = word
              max_len = len
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:chars()) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:chars()) do
        if not max_word:contains(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word, max_count = nil, 0
      for _, word in ipairs(words) do
          local count = 0
          for _ in pairs(unique_chars(word)) do
              count = count + 1
          end
          if count > max_count then
              max_word, max_count = word, count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if word:find(c, i + 1) == nil then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, c in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local count = #unique_chars(word)
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique = 0
      for _, word in ipairs(words) do
          local unique = 0
          for _, char in utf8.codes(word) do
              unique = unique + 1
          end
          if unique > max_unique then
              max_unique = unique
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique = 0
      for i = 1, #words do
          local word = words[i]
          local unique = 0
          for j = 1, #word do
              local char = word:sub(j, j)
              if word:find(char, j + 1) == nil then
                  unique = unique + 1
              end
          end
          if unique > max_unique then
              max_unique = unique
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if word:find(word:sub(i, i), i + 1) == nil then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_chars = 0
    for _, word in ipairs(words) do
      local chars = {}
      for i = 1, #word do
        chars[word:sub(i, i)] = true
      end
      local num_chars = 0
      for _ in pairs(chars) do
        num_chars = num_chars + 1
      end
      if num_chars > max_chars then
        max_chars = num_chars
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if not word:sub(1, i - 1):find(c) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local count = #unique_chars(word)
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = #unique_chars(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique = 0
      for _, word in ipairs(words) do
          local unique = 0
          for _, char in ipairs(word:split('')) do
              if not word:find(char, 2) then
                  unique = unique + 1
              end
          end
          if unique > max_unique then
              max_unique = unique
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if not string.find(max_word, word:sub(i, i)) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = count_unique_chars(word)
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if not word:find(word:sub(i, i), i + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for _, char in ipairs(word:split('')) do
              if not word:find(char, 2) then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word, max_count = nil, 0
      for _, word in ipairs(words) do
          local count = 0
          for _ in pairs(word:gsub('%a', '')) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for _, char in ipairs(word:split()) do
              if not word:find(char, 2) then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              if not char:find(max_word) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for i = 1, #words do
          local word = words[i]
          local count = 0
          for j = 1, #word do
              local c = word:sub(j, j)
              if not word:find(c, j + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for i = 1, #word do
        local c = word:sub(i, i)
        if not word:find(c, i + 1) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for i = 1, #words do
          local word = words[i]
          local count = 0
          for j = 1, #word do
              local char = word:sub(j, j)
              if not word:find(char, j + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in utf8.codes(word) do
        count = count + 1
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_len = #unique_chars(max_word)
      for _, word in ipairs(words) do
          local len = #unique_chars(word)
          if len > max_len then
              max_word = word
              max_len = len
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for _, char in ipairs(word:split('')) do
              if not word:find(char, 2) then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              if word:find(word:sub(i, i), i + 1) == nil then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for i = 1, #word do
              local c = word:sub(i, i)
              if not word:find(c, i + 1) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_len = #unique_chars(max_word)
    for i = 2, #words do
      local word = words[i]
      local len = #unique_chars(word)
      if len > max_len then
        max_word = word
        max_len = len
      end
    end
    return max_word
  end
- |2-
      local max_word, max_count = words[1], 0
      for _, word in ipairs(words) do
          local count = 0
          for _ in pairs(get_unique_chars(word)) do
              count = count + 1
          end
          if count > max_count then
              max_word, max_count = word, count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = #unique_chars(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_word = word
        max_count = count
      end
    end
    return max_word
  end
- |2-
    local max_word = words[1]
    local max_num = 0
    for _, word in ipairs(words) do
      local num = 0
      for _, char in ipairs(word:split('')) do
        if not max_word:find(char) then
          num = num + 1
        end
      end
      if num > max_num then
        max_word = word
        max_num = num
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for _, char in ipairs(word:split()) do
              if not word:find(char, 2) then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, c in utf8.codes(word) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for i = 1, #word do
              local char = word:sub(i, i)
              if word:find(char, i + 1) == nil then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = 0
      for _, word in ipairs(words) do
          local unique_chars = 0
          for i = 1, #word do
              local char = word:sub(i, i)
              if word:find(char, i + 1) == nil then
                  unique_chars = unique_chars + 1
              end
          end
          if unique_chars > max_unique_chars then
              max_unique_chars = unique_chars
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = count_unique(max_word)
      for i = 2, #words do
          local word = words[i]
          local count = count_unique(word)
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_count = 0
    for _, word in ipairs(words) do
      local count = 0
      for _, char in ipairs(word:split()) do
        if not max_word:find(char) then
          count = count + 1
        end
      end
      if count > max_count then
        max_count = count
        max_word = word
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:chars()) do
              if not char:is_in(max_word) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
    local max_word = words[1]
    local max_chars = 0
    for _, word in ipairs(words) do
      local chars = {}
      for i = 1, #word do
        chars[word:sub(i, i)] = true
      end
      local num_chars = 0
      for _ in pairs(chars) do
        num_chars = num_chars + 1
      end
      if num_chars > max_chars or
         (num_chars == max_chars and word < max_word) then
        max_word = word
        max_chars = num_chars
      end
    end
    return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split()) do
              count = count + 1
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:split('')) do
              if not max_word:find(char) then
                  count = count + 1
              end
          end
          if count > max_count then
              max_word = word
              max_count = count
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_count = 0
      for _, word in ipairs(words) do
          local count = 0
          for _, char in ipairs(word:chars()) do
              if not char:match('[a-z]') then
                  count = count + 1
              end
          end
          if count > max_count then
              max_count = count
              max_word = word
          end
      end
      return max_word
  end
- |2-
      local max_word = words[1]
      local max_unique_chars = #unique_chars(max_word)
      for i = 2, #words do
          local word = words[i]
          local unique_chars = #unique_chars(word)
          if unique_chars > max_unique_chars then
              max_word = word
              max_unique_chars = unique_chars
          end
      end
      return max_word
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
