---
name: HumanEval_114_minSubArraySum
language: lua
prompt: |
  -- Given a table of integers nums, find the minimum sum of any non-empty sub-table
  -- of nums.
  -- Example
  -- >>> minSubArraySum({2, 3, 4, 1, 2, 4})
  -- 1
  -- >>> minSubArraySum({-1, -2, -3})
  -- -6
  local function minSubArraySum(nums)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = minSubArraySum
      lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)
      lu.assertEquals(candidate({-1, -2, -3}), -6)
      lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)
      lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)
      lu.assertEquals(candidate({0, 10, 20, 1000000}), 0)
      lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)
      lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)
      lu.assertEquals(candidate({10, 11, 13, 8, 3, 4}), 3)
      lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}), -33)
      lu.assertEquals(candidate({-10}), -10)
      lu.assertEquals(candidate({7}), 7)
      lu.assertEquals(candidate({1, -1}), -1)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local min_sum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
      local minSum = nums[1]
      local sum = 0
      for i = 1, #nums do
          sum = sum + nums[i]
          if sum < minSum then
              minSum = sum
          end
          if sum > 0 then
              sum = 0
          end
      end
      return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = 0
    for i = 1, #nums do
      curSum = curSum + nums[i]
      if curSum < minSum then
        minSum = curSum
      end
      if curSum > 0 then
        curSum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      min = math.min(min, sum)
    end
    return min
  end
- |2-
    local min_sum = 0
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
    end
    return min_sum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      min = math.min(min, sum)
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local min_sum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = 0
    for i = 1, #nums do
      curSum = curSum + nums[i]
      if curSum < minSum then
        minSum = curSum
      end
      if curSum > 0 then
        curSum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
      local minSum = nums[1]
      local sum = 0
      for i = 1, #nums do
          sum = sum + nums[i]
          if sum < minSum then
              minSum = sum
          end
          if sum > 0 then
              sum = 0
          end
      end
      return minSum
  end
- |2-
    local min = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      min = math.min(min, sum)
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local min_sum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
      local minSum = nums[1]
      local sum = 0
      for i = 1, #nums do
          sum = sum + nums[i]
          if sum < minSum then
              minSum = sum
          end
          if sum > 0 then
              sum = 0
          end
      end
      return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min_sum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = 0
    for i = 1, #nums do
      curSum = curSum + nums[i]
      if curSum < minSum then
        minSum = curSum
      end
      if curSum > 0 then
        curSum = 0
      end
    end
    return minSum
  end
- |2-
    local min_sum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local curSum = 0
    for i = 1, #nums do
      curSum = curSum + nums[i]
      if curSum < minSum then
        minSum = curSum
      end
      if curSum > 0 then
        curSum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min_sum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(nums[i], sum + nums[i])
      min = math.min(min, sum)
    end
    return min
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local curSum = 0
    for i = 1, #nums do
      curSum = curSum + nums[i]
      if curSum < minSum then
        minSum = curSum
      end
      if curSum > 0 then
        curSum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = nums[1]
    for i = 2, #nums do
      sum = math.min(sum + nums[i], nums[i])
      minSum = math.min(minSum, sum)
    end
    return minSum
  end
- |2-
    local min_sum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min_sum then
        min_sum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min_sum
  end
- |2-
    local minSum = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    local min = math.huge
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < min then
        min = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return min
  end
- |2-
    local minSum = nums[1]
    local curSum = 0
    for i = 1, #nums do
      curSum = curSum + nums[i]
      if curSum < minSum then
        minSum = curSum
      end
      if curSum > 0 then
        curSum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = 0
    for i = 1, #nums do
      curSum = curSum + nums[i]
      if curSum < minSum then
        minSum = curSum
      end
      if curSum > 0 then
        curSum = 0
      end
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local curSum = nums[1]
    for i = 2, #nums do
      curSum = math.min(curSum + nums[i], nums[i])
      minSum = math.min(minSum, curSum)
    end
    return minSum
  end
- |2-
    local minSum = nums[1]
    local sum = 0
    for i = 1, #nums do
      sum = sum + nums[i]
      if sum < minSum then
        minSum = sum
      end
      if sum > 0 then
        sum = 0
      end
    end
    return minSum
  end
- |2-
    -- TODO: Implement me!
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
