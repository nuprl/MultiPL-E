name: HumanEval_110_exchange
language: lua
results:
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if\
    \ v % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n        return\
    \ 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y4_rfbc.lua:44:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp2y4_rfbc.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  for\
    \ i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n      for j = 1, #lst2 do\n \
    \       if lst2[j] % 2 == 1 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \          break\n        end\n      end\n    end\n  end\n  for i = 1, #lst1 do\n\
    \    if lst1[i] % 2 == 1 then\n      return 'NO'\n    end\n  end\n  return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf624e8qm.lua:36:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpf624e8qm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ n in ipairs(lst) do\n      if is_even(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if is_all_odd(lst1) then\n    return 'NO'\n  end\n  if is_all_even(lst2)\
    \ then\n    return 'NO'\n  end\n  if is_all_odd(lst2) then\n    return 'YES'\n\
    \  end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn1_hy6g.lua:56:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpcn1_hy6g.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even = 0\n    local odd = 0\n    for _, v in ipairs(lst1) do\n        if v %\
    \ 2 == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    if even % 2 == 0 then\n        return 'YES'\n\
    \    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_87nb9r.lua:44:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpv_87nb9r.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        local lst1_odd_idx\
    \ = {}\n        local lst2_even_idx = {}\n        for i, v in ipairs(lst1) do\n\
    \            if is_odd(v) then\n                table.insert(lst1_odd_idx, i)\n\
    \            end\n        end\n        for i, v in ipairs(lst2) do\n         \
    \   if is_even(v) then\n                table.insert(lst2_even_idx, i)\n     \
    \       end\n        end\n        if #lst1_odd_idx > #lst2_even_idx then\n   \
    \         return false\n        end\n        for i = 1, #lst1_odd_idx do\n   \
    \         local idx1 = lst1_odd_idx[i]\n            local idx2 = lst2_even_idx[i]\n\
    \            lst1[idx1], lst2[idx2] = lst2[idx2], lst1[idx1]\n        end\n  \
    \      return true\n    end\n    return exchange_elements(lst1, lst2) and is_all_even(lst1)\
    \ and \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_elements_helper(lst1, lst2, i, j)\n      if i > #lst1\
    \ then\n        return true\n      elseif is_even(lst1[i]) then\n        return\
    \ exchange_elements_helper(lst1, lst2, i + 1, j)\n      elseif j > #lst2 then\n\
    \        return false\n      elseif is_odd(lst2[j]) then\n        return exchange_elements_helper(lst1,\
    \ lst2, i, j + 1)\n      else\n        lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \       return exchange_elements_helper(lst1, lst2, i + 1, j + 1)\n      end\n\
    \    end\n    return exchange_elements_helper(lst1, lst2, 1, 1)\n  end\n  return\
    \ exchange_elements(lst1, lst2) and \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_even, lst1_odd = {}, {}\n    local lst2_even, lst2_odd = {}, {}\n\
    \    for _, n in ipairs(lst1) do\n      if is_even(n) then\n        table.insert(lst1_even,\
    \ n)\n      else\n        table.insert(lst1_odd, n)\n      end\n    end\n    for\
    \ _, n in ipairs(lst2) do\n      if is_even(n) then\n        table.insert(lst2_even,\
    \ n)\n      else\n        table.insert(lst2_odd, n)\n      end\n    end\n    if\
    \ #lst1_even == #lst1 then\n      return true\n    elseif #lst1_even > #lst1_odd\
    \ and #lst2_odd > #lst2_even then\n      return true\n    else\n      return false\n\
    \    end\n  end\n  if exchange_elements(lst1, lst2) then\n    return 'YES'\n \
    \ else\n    return 'NO'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yh_ilrx.lua:56:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp0yh_ilrx.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_even_count = 0\n    local lst2_odd_count = 0\n    for _, v in\
    \ ipairs(lst1) do\n      if is_even(v) then\n        lst1_even_count = lst1_even_count\
    \ + 1\n      end\n    end\n    for _, v in ipairs(lst2) do\n      if is_odd(v)\
    \ then\n        lst2_odd_count = lst2_odd_count + 1\n      end\n    end\n    return\
    \ lst1_even_count == lst2_odd_count\n  end\n  if is_all_even(lst1) then\n    return\
    \ \"YES\"\n  elseif exchange_elements(lst1, lst2) then\n    return \"YES\"\n \
    \ else\n    return \"NO\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if\
    \ v % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n        return\
    \ 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8ur4f_c.lua:44:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpj8ur4f_c.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_all_even(lst)\n\
    \        for _, x in ipairs(lst) do\n            if is_odd(x) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    if is_all_even(lst1) then\n        return \"YES\"\n    end\n    for i, x\
    \ in ipairs(lst1) do\n        if is_odd(x) then\n            for j, y in ipairs(lst2)\
    \ do\n                if is_even(y) then\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if is_all_even(lst1) then\n        \
    \                return \"YES\"\n                    end\n                   \
    \ lst1[i], lst2[j] = lst2[j], lst1[i]\n                end\n            end\n\
    \        end\n    end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wvx988t.lua:51:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp1wvx988t.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe93vyt69.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpe93vyt69.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even_count = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n\
    \            even_count = even_count + 1\n        end\n    end\n    for _, v in\
    \ ipairs(lst2) do\n        if v % 2 == 0 then\n            even_count = even_count\
    \ - 1\n        end\n    end\n    return even_count == 0 and \"YES\" or \"NO\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphapqxz_y.lua:35:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmphapqxz_y.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e0uvf50.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9e0uvf50.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(t)\n    for _, v in\
    \ ipairs(t) do\n      if is_odd(v) then\n        return false\n      end\n   \
    \ end\n    return true\n  end\n  local function exchange_elements(t1, t2)\n  \
    \  local t = {}\n    for i = 1, #t1 do\n      if is_odd(t1[i]) then\n        for\
    \ j = 1, #t2 do\n          if is_even(t2[j]) then\n            t1[i], t2[j] =\
    \ t2[j], t1[i]\n            t[#t + 1] = {i, j}\n            break\n          end\n\
    \        end\n      end\n    end\n    return t\n  end\n  local t = exchange_elements(lst1,\
    \ lst2)\n  if is_all_even(lst1) then\n    return 'YES', t\n  else\n    return\
    \ 'NO'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if is_all_odd(lst1) then\n    return 'NO'\n  end\n  for i, v in ipairs(lst1)\
    \ do\n    if is_odd(v) then\n      for j, w in ipairs(lst2) do\n        if is_even(w)\
    \ then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1,\
    \ lst2)\n        end\n      end\n    end\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjzpp40w.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpgjzpp40w.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    if is_all_even(lst1) then\n        return \"YES\"\n    else\n\
    \        while exchange_elements(lst1, lst2) do\n            if is_all_even(lst1)\
    \ then\n                return \"YES\"\n            end\n        end\n       \
    \ return \"NO\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local new_lst1 = {}\n    local new_lst2 = {}\n    for i = 1, #lst1 do\n \
    \     if is_even(lst1[i]) then\n        new_lst1[#new_lst1 + 1] = lst1[i]\n  \
    \    else\n        new_lst2[#new_lst2 + 1] = lst1[i]\n      end\n    end\n   \
    \ for i = 1, #lst2 do\n      if is_odd(lst2[i]) then\n        new_lst2[#new_lst2\
    \ + 1] = lst2[i]\n      else\n        new_lst1[#new_lst1 + 1] = lst2[i]\n    \
    \  end\n    end\n    return new_lst1, new_lst2\n  end\n  local function is_all_even(lst)\n\
    \    for i = 1, #lst do\n      if is_odd(lst[i]) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local new_lst1, new_lst2 = exchange_elements(lst1,\
    \ lst2)\n  if is_all_even(new_lst1) then\n    return 'YES'\n  else\n    return\
    \ 'NO'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5pnzbga.lua:60:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpt5pnzbga.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, v in ipairs(lst1) do\n        if is_odd(v) then\n  \
    \          for j, w in ipairs(lst2) do\n                if is_even(w) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ exchange(lst1, lst2)\n                end\n            end\n        end\n  \
    \  end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtq0te4j.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpxtq0te4j.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n \
    \ end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthdew7l9.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpthdew7l9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ YOUR CODE HERE\n    local odd1 = 0\n    local odd2 = 0\n    for i, v in ipairs(lst1)\
    \ do\n        if v % 2 == 1 then\n            odd1 = odd1 + 1\n        end\n \
    \   end\n    for i, v in ipairs(lst2) do\n        if v % 2 == 1 then\n       \
    \     odd2 = odd2 + 1\n        end\n    end\n    if odd1 == odd2 then\n      \
    \  return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiklcv9k.lua:41:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpgiklcv9k.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ evens = {}\n  local odds = {}\n  for _, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      table.insert(evens, v)\n    else\n      table.insert(odds, v)\n\
    \    end\n  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n     \
    \ table.insert(evens, v)\n    else\n      table.insert(odds, v)\n    end\n  end\n\
    \  return #evens >= #odds and 'YES' or 'NO'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, v in ipairs(lst1) do\n        if is_odd(v) then\n  \
    \          for j, w in ipairs(lst2) do\n                if is_even(w) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if\
    \ is_all_even(lst1) then\n                        return \"YES\"\n           \
    \         end\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \           end\n            end\n        end\n    end\n    return \"NO\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchxwgb4i.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpchxwgb4i.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzacha5ha.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpzacha5ha.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even = {}\n    local odd = {}\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            table.insert(even, v)\n        else\n           \
    \ table.insert(odd, v)\n        end\n    end\n    for _, v in ipairs(lst2) do\n\
    \        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n\
    \            table.insert(odd, v)\n        end\n    end\n    if #even >= #odd\
    \ then\n        return 'YES'\n    else\n        return 'NO'\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        local lst1_even, lst1_odd\
    \ = {}, {}\n        local lst2_even, lst2_odd = {}, {}\n        for _, v in ipairs(lst1)\
    \ do\n            if is_even(v) then\n                table.insert(lst1_even,\
    \ v)\n            else\n                table.insert(lst1_odd, v)\n          \
    \  end\n        end\n        for _, v in ipairs(lst2) do\n            if is_even(v)\
    \ then\n                table.insert(lst2_even, v)\n            else\n       \
    \         table.insert(lst2_odd, v)\n            end\n        end\n        for\
    \ _, v in ipairs(lst1_odd) do\n            table.insert(lst2_odd, v)\n       \
    \ end\n        for _, v in ipairs(lst2_even) do\n            table.insert(lst1_even,\
    \ v)\n        end\n        return lst1_even, lst2_odd\n    end\n    local lst1_even,\
    \ lst2_odd = exchange_elements(lst1, lst2)\n    if is_all_even(lst1_even) then\n\
    \        return 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu0ol3sy.lua:66:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpvu0ol3sy.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8lkkvwn.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpk8lkkvwn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_elements_helper(lst1, lst2, acc)\n      if #lst1\
    \ == 0 then\n        return acc\n      elseif is_even(lst1[1]) then\n        return\
    \ exchange_elements_helper(\n          table.slice(lst1, 2, #lst1),\n        \
    \  lst2,\n          acc\n        )\n      elseif is_odd(lst1[1]) then\n      \
    \  local i = 1\n        while i <= #lst2 do\n          if is_even(lst2[i]) then\n\
    \            local temp = lst1[1]\n            lst1[1] = lst2[i]\n           \
    \ lst2[i] = temp\n            return exchange_elements_helper(\n             \
    \ table.slice(lst1, 2, #lst1),\n              lst2,\n              acc + 1\n \
    \           )\n          end\n          i = i + 1\n        end\n        return\
    \ false\n      end\n    end\n    return exchange_elements_helper(lst1, lst2, 0)\n\
    \  end\n  local result = exchange_elements(lst1, lst2)\n  if result then\n   \
    \ return \"YES\"\n  else\n    return \"NO\"\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__wh2_oj.lua:39:\
    \ attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp__wh2_oj.lua:39:\
    \ in function </tmp/tmp__wh2_oj.lua:22>\n\t(...tail calls...)\n\t/tmp/tmp__wh2_oj.lua:51:\
    \ in local 'candidate'\n\t/tmp/tmp__wh2_oj.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6ahgwhw.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpv6ahgwhw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ exchange_elements(lst1, lst2)\n        local lst1_even = true\n        for _,\
    \ v in ipairs(lst1) do\n            if not is_even(v) then\n                lst1_even\
    \ = false\n                break\n            end\n        end\n        if lst1_even\
    \ then\n            return true\n        end\n        for i, v in ipairs(lst1)\
    \ do\n            if not is_even(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = w, v\n                        if exchange_elements(lst1, lst2) then\n\
    \                            return true\n                        end\n      \
    \                  lst1[i], lst2[j] = v, w\n                    end\n        \
    \        end\n            end\n        end\n        return false\n    end\n  \
    \  return exchange_elements(lst1, lst2) and \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even_count = 0\n    for i = 1, #lst1 do\n        if lst1[i] % 2 == 0 then\n\
    \            even_count = even_count + 1\n        end\n    end\n    for i = 1,\
    \ #lst2 do\n        if lst2[i] % 2 == 0 then\n            even_count = even_count\
    \ - 1\n        end\n    end\n    if even_count == 0 then\n        return 'YES'\n\
    \    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvgfromc.lua:39:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpyvgfromc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, n in ipairs(lst1)\
    \ do\n            if is_odd(n) then\n                for j, m in ipairs(lst2)\
    \ do\n                    if is_even(m) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 ~= 0\n    end\n    local function is_even_list(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_even_list(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk092zibq.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpk092zibq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function exchange_elements(lst1,\
    \ lst2)\n    local lst1_even = true\n    for _, v in ipairs(lst1) do\n      if\
    \ not is_even(v) then\n        lst1_even = false\n        break\n      end\n \
    \   end\n    if lst1_even then\n      return true\n    end\n    for i, v in ipairs(lst1)\
    \ do\n      if not is_even(v) then\n        for j, w in ipairs(lst2) do\n    \
    \      if is_even(w) then\n            lst1[i], lst2[j] = w, v\n            if\
    \ exchange_elements(lst1, lst2) then\n              return true\n            end\n\
    \            lst1[i], lst2[j] = v, w\n          end\n        end\n      end\n\
    \    end\n    return false\n  end\n  return exchange_elements(lst1, lst2) and\
    \ \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nljx61e.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0nljx61e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhsoj5lo.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpfhsoj5lo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function has_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_even(v) then\n        \
    \        return true\n            end\n        end\n        return false\n   \
    \ end\n    local function has_odd(lst)\n        for _, v in ipairs(lst) do\n \
    \           if is_odd(v) then\n                return true\n            end\n\
    \        end\n        return false\n    end\n    if has_even(lst1) and has_odd(lst2)\
    \ then\n        return 'YES'\n    elseif has_even(lst2) and has_odd(lst1) then\n\
    \        return 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqtz7t01.lua:50:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmppqtz7t01.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even = function(x) return x % 2 == 0 end\n    local odd = function(x) return\
    \ x % 2 ~= 0 end\n    local lst1_even = all(even, lst1)\n    local lst2_even =\
    \ all(even, lst2)\n    local lst1_odd = all(odd, lst1)\n    local lst2_odd = all(odd,\
    \ lst2)\n    if lst1_even and lst2_even then\n        return 'YES'\n    elseif\
    \ lst1_odd and lst2_odd then\n        return 'YES'\n    elseif lst1_even and lst2_odd\
    \ then\n        return 'YES'\n    elseif lst1_odd and lst2_even then\n       \
    \ return 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvapjgkss.lua:17:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmpvapjgkss.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpvapjgkss.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, n in ipairs(lst1)\
    \ do\n            if is_odd(n) then\n                for j, m in ipairs(lst2)\
    \ do\n                    if is_even(m) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if\
    \ v % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n        return\
    \ 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs366c41.lua:44:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpzs366c41.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkoacaooo.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkoacaooo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(num)\n    return num % 2 == 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu_r_hvdz.lua:31: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8b_r1ko.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpk8b_r1ko.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ia2u33a.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmp7ia2u33a.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even_count = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n\
    \            even_count = even_count + 1\n        end\n    end\n    local odd_count\
    \ = #lst1 - even_count\n    local even_count2 = 0\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            even_count2 = even_count2 + 1\n\
    \        end\n    end\n    local odd_count2 = #lst2 - even_count2\n    if odd_count\
    \ == 0 then\n        return \"YES\"\n    elseif odd_count > even_count2 then\n\
    \        return \"NO\"\n    else\n        return \"YES\"\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjudpalkm.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpjudpalkm.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, n in ipairs(lst1)\
    \ do\n            if is_odd(n) then\n                for j, m in ipairs(lst2)\
    \ do\n                    if is_even(m) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, n in ipairs(lst1)\
    \ do\n            if is_odd(n) then\n                for j, m in ipairs(lst2)\
    \ do\n                    if is_even(m) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    if is_all_even(lst1) then\n        return \"YES\"\n    end\n    for i, v\
    \ in ipairs(lst1) do\n        if is_odd(v) then\n            for j, w in ipairs(lst2)\
    \ do\n                if is_even(w) then\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if is_all_even(lst1) then\n        \
    \                return \"YES\"\n                    end\n                   \
    \ lst1[i], lst2[j] = lst2[j], lst1[i]\n                end\n            end\n\
    \        end\n    end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ipl49yl.lua:51:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp9ipl49yl.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        local lst1_odd_idx\
    \ = {}\n        local lst2_even_idx = {}\n        for i, n in ipairs(lst1) do\n\
    \            if is_odd(n) then\n                table.insert(lst1_odd_idx, i)\n\
    \            end\n        end\n        for i, n in ipairs(lst2) do\n         \
    \   if is_even(n) then\n                table.insert(lst2_even_idx, i)\n     \
    \       end\n        end\n        if #lst1_odd_idx == 0 or #lst2_even_idx == 0\
    \ then\n            return false\n        end\n        for _, i in ipairs(lst1_odd_idx)\
    \ do\n            for _, j in ipairs(lst2_even_idx) do\n                lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                if is_all_even(lst1) then\n    \
    \                return true\n                end\n                lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            end\n        end\n        return false\n   \
    \ end\n    if is_all_even(lst1) then\n        return 'YES'\n    end\n    if exchange_elements(lst1,\
    \ lst2) then\n        return 'YES'\n    end\n    return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfbxmz16.lua:68:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpxfbxmz16.lua:68:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for i = 1, #lst1 do\n        if lst1[i]\
    \ % 2 == 0 then\n            table.insert(evens, lst1[i])\n        else\n    \
    \        table.insert(odds, lst1[i])\n        end\n    end\n    for i = 1, #lst2\
    \ do\n        if lst2[i] % 2 == 0 then\n            table.insert(evens, lst2[i])\n\
    \        else\n            table.insert(odds, lst2[i])\n        end\n    end\n\
    \    if #evens >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7oyen7a.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpo7oyen7a.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_element(lst1, lst2, i, j)\n        local tmp = lst1[i]\n\
    \        lst1[i] = lst2[j]\n        lst2[j] = tmp\n    end\n    local function\
    \ exchange_elements(lst1, lst2, i, j)\n        if is_all_even(lst1) then\n   \
    \         return true\n        end\n        if i > #lst1 then\n            return\
    \ false\n        end\n        for j = 1, #lst2 do\n            if is_odd(lst1[i])\
    \ and is_even(lst2[j]) then\n                exchange_element(lst1, lst2, i, j)\n\
    \                if exchange_elements(lst1, lst2, i + 1, j) then\n           \
    \         return true\n                end\n                exchange_element(lst1,\
    \ lst2, i, j)\n            end\n        end\n        return exchange_elements(lst1,\
    \ lst2, i + 1, j)\n    end\n    if exchange_elements(lst1, lst2, 1, 1) then\n\
    \        return 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(t)\n\
    \        for _, v in ipairs(t) do\n            if is_odd(v) then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(t1, t2)\n        local t = {}\n        for\
    \ i = 1, #t1 do\n            if is_odd(t1[i]) then\n                for j = 1,\
    \ #t2 do\n                    if is_even(t2[j]) then\n                       \
    \ t1[i], t2[j] = t2[j], t1[i]\n                        t[#t + 1] = {i, j}\n  \
    \                      break\n                    end\n                end\n \
    \           end\n        end\n        return t\n    end\n    local t = exchange_elements(lst1,\
    \ lst2)\n    if is_all_even(lst1) then\n        return \"YES\", t\n    else\n\
    \        return \"NO\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun2an02x.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpun2an02x.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_odd_idx = {}\n    local lst2_even_idx = {}\n    for i, v in ipairs(lst1)\
    \ do\n      if is_odd(v) then\n        table.insert(lst1_odd_idx, i)\n      end\n\
    \    end\n    for i, v in ipairs(lst2) do\n      if is_even(v) then\n        table.insert(lst2_even_idx,\
    \ i)\n      end\n    end\n    if #lst1_odd_idx ~= #lst2_even_idx then\n      return\
    \ false\n    end\n    for i = 1, #lst1_odd_idx do\n      lst1[lst1_odd_idx[i]],\
    \ lst2[lst2_even_idx[i]] =\n        lst2[lst2_even_idx[i]], lst1[lst1_odd_idx[i]]\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if exchange_elements(lst1, lst2) then\n    return 'YES'\n  end\n  return\
    \ 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  for i, n in ipairs(lst1) do\n    if is_odd(n) then\n      for j, m in\
    \ ipairs(lst2) do\n        if is_even(m) then\n          lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n          if is_all_even(lst1) then\n            return 'YES'\n   \
    \       end\n        end\n      end\n    end\n  end\n  return 'NO'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even_count = 0\n    for _, v in ipairs(lst1) do\n        if v % 2 == 0 then\n\
    \            even_count = even_count + 1\n        end\n    end\n    if even_count\
    \ == #lst1 then\n        return 'YES'\n    end\n    for _, v in ipairs(lst2) do\n\
    \        if v % 2 == 0 then\n            return 'YES'\n        end\n    end\n\
    \    return 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirfs5jy6.lua:36:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpirfs5jy6.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3u8zbm0.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpk3u8zbm0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, n in ipairs(lst1)\
    \ do\n            if is_odd(n) then\n                for j, m in ipairs(lst2)\
    \ do\n                    if is_even(m) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznufy7hc.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpznufy7hc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9m2rb6x.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu9m2rb6x.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    for\
    \ _, v in ipairs(lst1) do\n        if v % 2 == 1 then\n            for _, v2 in\
    \ ipairs(lst2) do\n                if v2 % 2 == 0 then\n                    return\
    \ 'YES'\n                end\n            end\n            return 'NO'\n     \
    \   end\n    end\n    return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyd9utrlv.lua:32:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpyd9utrlv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcid7soz1.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcid7soz1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2xvcmgr.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl2xvcmgr.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8li6f5_1.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8li6f5_1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function has_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_even(v) then\n        \
    \        return true\n            end\n        end\n        return false\n   \
    \ end\n    local function has_odd(lst)\n        for _, v in ipairs(lst) do\n \
    \           if is_odd(v) then\n                return true\n            end\n\
    \        end\n        return false\n    end\n    if has_even(lst1) and has_odd(lst2)\
    \ then\n        return 'YES'\n    elseif has_even(lst2) and has_odd(lst1) then\n\
    \        return 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj60c_qv.lua:50:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpkj60c_qv.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicmit55t.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpicmit55t.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, x\
    \ in ipairs(lst) do\n      if is_odd(x) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, x in ipairs(lst1) do\n      if is_odd(x) then\n        for j, y in\
    \ ipairs(lst2) do\n          if is_even(y) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return \"NO\"\n    end\n\
    \  end\n  return \"YES\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_even_table(t)\n\
    \        for _, v in ipairs(t) do\n            if is_odd(v) then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    if is_even_table(lst1) then\n        return \"YES\"\n    end\n    for i,\
    \ v in ipairs(lst1) do\n        if is_odd(v) then\n            for j, w in ipairs(lst2)\
    \ do\n                if is_even(w) then\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if is_even_table(lst1) then\n      \
    \                  return \"YES\"\n                    end\n                 \
    \   lst1[i], lst2[j] = lst2[j], lst1[i]\n                end\n            end\n\
    \        end\n    end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58oyk5dn.lua:51:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp58oyk5dn.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, n in ipairs(lst1) do\n      if is_odd(n) then\n        for j, m in\
    \ ipairs(lst2) do\n          if is_even(m) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n \
    \ end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n \
    \ end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(num)\n    return num % 2 == 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpikx31q3n.lua:31: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_even_list(lst)\n\
    \        for _, x in ipairs(lst) do\n            if is_odd(x) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    if is_even_list(lst1) then\n        return \"YES\"\n    end\n    for i, x\
    \ in ipairs(lst1) do\n        if is_odd(x) then\n            for j, y in ipairs(lst2)\
    \ do\n                if is_even(y) then\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if is_even_list(lst1) then\n       \
    \                 return \"YES\"\n                    end\n                  \
    \  lst1[i], lst2[j] = lst2[j], lst1[i]\n                end\n            end\n\
    \        end\n    end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptibrxpum.lua:51:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmptibrxpum.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(num)\n    return num % 2 == 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj7hqlzxu.lua:31: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ YOUR CODE HERE\n    local evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(evens,\
    \ v)\n        else\n            table.insert(odds, v)\n        end\n    end\n\
    \    if #evens >= #odds then\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprxr_rwv.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpprxr_rwv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return \"NO\"\n    end\n\
    \  end\n  return \"YES\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function contains_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_odd(v) then\n        return true\n      end\n\
    \    end\n    return false\n  end\n  if contains_odd(lst1) then\n    for _, v\
    \ in ipairs(lst2) do\n      if is_even(v) then\n        return 'YES'\n      end\n\
    \    end\n  else\n    return 'YES'\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0bqppf5.lua:45:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpx0bqppf5.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_odd = {}\n    local lst2_even = {}\n    for _, x in ipairs(lst1)\
    \ do\n      if is_odd(x) then\n        table.insert(lst1_odd, x)\n      end\n\
    \    end\n    for _, x in ipairs(lst2) do\n      if is_even(x) then\n        table.insert(lst2_even,\
    \ x)\n      end\n    end\n    if #lst1_odd == #lst2_even then\n      return true\n\
    \    else\n      return false\n    end\n  end\n  if exchange_elements(lst1, lst2)\
    \ then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvywf6exy.lua:56:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpvywf6exy.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, n in ipairs(lst) do\n    \
    \        if is_even(n) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, n in ipairs(lst1) do\n        if is_odd(n) then\n  \
    \          for j, m in ipairs(lst2) do\n                if is_even(m) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if\
    \ is_all_even(lst1) then\n                        return \"YES\"\n           \
    \         end\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \           end\n            end\n        end\n    end\n    return \"NO\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp9skwl3.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmphp9skwl3.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if is_all_odd(lst1) then\n    return 'NO'\n  end\n  for i, v in ipairs(lst1)\
    \ do\n    if is_odd(v) then\n      for j, w in ipairs(lst2) do\n        if is_even(w)\
    \ then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1,\
    \ lst2)\n        end\n      end\n    end\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3xz7l3c.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpr3xz7l3c.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, v in ipairs(lst1) do\n        if is_odd(v) then\n  \
    \          for j, w in ipairs(lst2) do\n                if is_even(w) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if\
    \ is_all_even(lst1) then\n                        return \"YES\"\n           \
    \         end\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \           end\n            end\n        end\n    end\n    return \"NO\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32p7z6rh.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp32p7z6rh.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiju46bq3.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpiju46bq3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoa922ur4.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpoa922ur4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- Write\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva1jb4il.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpva1jb4il.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, v in ipairs(lst1) do\n        if is_odd(v) then\n  \
    \          for j, w in ipairs(lst2) do\n                if is_even(w) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if\
    \ is_all_even(lst1) then\n                        return \"YES\"\n           \
    \         end\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n     \
    \           end\n            end\n        end\n    end\n    return \"NO\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphm6famcs.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmphm6famcs.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        local lst = {}\n  \
    \      for _, v in ipairs(lst1) do\n            if is_odd(v) then\n          \
    \      for i, w in ipairs(lst2) do\n                    if is_even(w) then\n \
    \                       lst1[i] = w\n                        lst2[i] = v\n   \
    \                     table.insert(lst, {v, w})\n                        break\n\
    \                    end\n                end\n            end\n        end\n\
    \        return lst\n    end\n    if is_all_even(lst1) then\n        return 'YES'\n\
    \    else\n        local lst = exchange_elements(lst1, lst2)\n        if is_all_even(lst1)\
    \ then\n            return 'YES'\n        else\n            return 'NO'\n    \
    \    end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddzvaf64.lua:60:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpddzvaf64.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i)\n      if i > #lst1 then\n\
    \        return true\n      end\n      local n = lst1[i]\n      if is_even(n)\
    \ then\n        return exchange_element(lst1, lst2, i + 1)\n      end\n      for\
    \ j = 1, #lst2 do\n        if is_even(lst2[j]) then\n          lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n          if exchange_element(lst1, lst2, i + 1) then\n\
    \            return true\n          end\n          lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n        end\n      end\n      return false\n    end\n    return exchange_element(lst1,\
    \ lst2, 1)\n  end\n  return exchange_elements(lst1, lst2) and \"YES\" or \"NO\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even = 0\n    local odd = 0\n    for _, v in ipairs(lst1) do\n        if v %\
    \ 2 == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if v % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    if even % 2 == 0 then\n        return 'YES'\n\
    \    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgjathq4.lua:44:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpsgjathq4.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement the function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8o3qbu7.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu8o3qbu7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm230zmy9.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpm230zmy9.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_elements_helper(lst1, lst2, i, j)\n      if i > #lst1\
    \ then\n        return true\n      elseif is_even(lst1[i]) then\n        return\
    \ exchange_elements_helper(lst1, lst2, i + 1, j)\n      elseif j > #lst2 then\n\
    \        return false\n      elseif is_odd(lst2[j]) then\n        return exchange_elements_helper(lst1,\
    \ lst2, i, j + 1)\n      else\n        lst1[i], lst2[j] = lst2[j], lst1[i]\n \
    \       return exchange_elements_helper(lst1, lst2, i + 1, j + 1)\n      end\n\
    \    end\n    return exchange_elements_helper(lst1, lst2, 1, 1)\n  end\n  if exchange_elements(lst1,\
    \ lst2) then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    if is_all_even(lst2) then\n        return \"NO\"\n    end\n\
    \    if is_all_odd(lst2) then\n        return \"YES\"\n    end\n    return \"\
    YES\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4yhil80.lua:56:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpj4yhil80.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i)\n      if i > #lst1 then\n\
    \        return lst1, lst2\n      end\n      if is_even(lst1[i]) then\n      \
    \  return exchange_element(lst1, lst2, i + 1)\n      end\n      for j = 1, #lst2\
    \ do\n        if is_even(lst2[j]) then\n          lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n          return exchange_element(lst1, lst2, i + 1)\n        end\n\
    \      end\n      return lst1, lst2\n    end\n    return exchange_element(lst1,\
    \ lst2, 1)\n  end\n  local lst1, lst2 = exchange_elements(lst1, lst2)\n  if is_all_even(lst1)\
    \ then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(t)\n\
    \        for _, v in ipairs(t) do\n            if is_odd(v) then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(t1, t2)\n        for i, v in ipairs(t1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(t2) do\n\
    \                    if is_even(w) then\n                        t1[i], t2[j]\
    \ = t2[j], t1[i]\n                        return true\n                    end\n\
    \                end\n            end\n        end\n        return false\n   \
    \ end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnfjufdv.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmphnfjufdv.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    if is_all_even(lst1) then\n        return 'YES'\n    end\n    for i, v in\
    \ ipairs(lst1) do\n        if is_odd(v) then\n            for j, w in ipairs(lst2)\
    \ do\n                if is_even(w) then\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if is_all_even(lst1) then\n        \
    \                return 'YES'\n                    end\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                end\n            end\n        end\n\
    \    end\n    return 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi8l0eje.lua:51:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpwi8l0eje.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    local function exchange_once(lst1,\
    \ lst2)\n        for i, v in ipairs(lst1) do\n            if is_odd(v) then\n\
    \                for j, w in ipairs(lst2) do\n                    if is_even(w)\
    \ then\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n        \
    \                return true\n                    end\n                end\n \
    \           end\n        end\n        return false\n    end\n    if is_all_even(lst1)\
    \ then\n        return \"YES\"\n    elseif is_all_odd(lst2) then\n        return\
    \ \"NO\"\n    else\n        return exchange_once(lst1, lst2) and exchange(lst1,\
    \ lst2) or \"NO\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_one(lst1, lst2)\n\
    \    for i, n in ipairs(lst1) do\n      if is_odd(n) then\n        for j, m in\
    \ ipairs(lst2) do\n          if is_even(m) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_one(lst1, lst2) then\n      return 'NO'\n    end\n  end\n\
    \  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_elements_helper(lst1, lst2, acc)\n      if #lst1\
    \ == 0 then\n        return acc\n      elseif is_even(lst1[1]) then\n        return\
    \ exchange_elements_helper(\n          {table.unpack(lst1, 2)},\n          lst2,\n\
    \          acc\n        )\n      elseif is_odd(lst1[1]) then\n        local new_lst1\
    \ = {table.unpack(lst1, 2)}\n        local new_lst2 = {table.unpack(lst2, 2)}\n\
    \        local new_acc = {table.unpack(acc)}\n        table.insert(new_acc, lst1[1])\n\
    \        table.insert(new_acc, lst2[1])\n        return exchange_elements_helper(\n\
    \          new_lst1,\n          new_lst2,\n          new_acc\n        )\n    \
    \  end\n    end\n    return exchange_elements_helper(lst1, lst2, {})\n  end\n\
    \  local function is_all_even(lst)\n    local function is_all_even_helper(lst,\
    \ acc)\n      if #lst == 0 then\n        return acc\n      elseif is_even(lst[1])\
    \ then\n        return is_all_even_helper(\n          {table.unpack(lst, 2)},\n\
    \          true\n        )\n      elseif is_odd(lst[1]) then\n        return is_all_even_helper(\n\
    \          {table.unpack(lst, 2)},\n          false\n        )\n      end\n  \
    \  end\n    return is_all_even_helper(lst, true)\n  end\n  local exchanged_lst\
    \ = exchange_elements(lst1, lst2)\n  if is_all_even(exchanged\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxrw5cwwv.lua:66: ')' expected (to close '(' at line 65) near\
    \ 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return \"NO\"\n    end\n\
    \  end\n  return \"YES\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, x\
    \ in ipairs(lst) do\n      if is_odd(x) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, x in ipairs(lst1) do\n      if is_odd(x) then\n        for j, y in\
    \ ipairs(lst2) do\n          if is_even(y) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return \"NO\"\n    end\n\
    \  end\n  return \"YES\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, n in ipairs(lst1)\
    \ do\n            if is_odd(n) then\n                for j, m in ipairs(lst2)\
    \ do\n                    if is_even(m) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(x)\n    return x % 2 == 0\n  end\n  local function is_odd(x)\n\
    \    return x % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_one(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_one(lst1, lst2) then\n      return 'NO'\n    end\n  end\n\
    \  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple9m7o8r.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmple9m7o8r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = 0\n    local odds = 0\n    for _, v in ipairs(lst1) do\n        if v\
    \ % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    for _, v in ipairs(lst2) do\n        if\
    \ v % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n        return\
    \ 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6h66s35.lua:44:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpp6h66s35.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for i, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for i, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n \
    \ end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_even_table(t)\n\
    \        for _, n in ipairs(t) do\n            if is_odd(n) then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(t1, t2)\n        local t = {}\n        for\
    \ _, n in ipairs(t1) do\n            if is_odd(n) then\n                for i,\
    \ m in ipairs(t2) do\n                    if is_even(m) then\n               \
    \         t[#t + 1] = {i, n}\n                        break\n                \
    \    end\n                end\n            end\n        end\n        return t\n\
    \    end\n    local function exchange_table(t1, t2, ex)\n        for _, v in ipairs(ex)\
    \ do\n            t1[v[1]], t2[v[2]] = t2[v[2]], t1[v[1]]\n        end\n    end\n\
    \    local ex = exchange_elements(lst1, lst2)\n    if #ex == 0 then\n        return\
    \ is_even_table(lst1) and \"YES\" or \"NO\"\n    end\n    exchange_table(lst1,\
    \ lst2, ex)\n    return is_even_table(lst1) and \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_flhjt7_.lua:59:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp_flhjt7_.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9pfgwy_.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmps9pfgwy_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwerbtkc.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvwerbtkc.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i)\n      if i > #lst1 then\n\
    \        return lst1, lst2\n      end\n      if is_even(lst1[i]) then\n      \
    \  return exchange_element(lst1, lst2, i + 1)\n      end\n      for j = 1, #lst2\
    \ do\n        if is_even(lst2[j]) then\n          lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n          return exchange_element(lst1, lst2, i + 1)\n        end\n\
    \      end\n      return lst1, lst2\n    end\n    return exchange_element(lst1,\
    \ lst2, 1)\n  end\n  local function is_all_even(lst)\n    for i = 1, #lst do\n\
    \      if is_odd(lst[i]) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local lst1, lst2 = exchange_elements(lst1, lst2)\n  return is_all_even(lst1)\
    \ and \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, n in ipairs(lst1)\
    \ do\n            if is_odd(n) then\n                for j, m in ipairs(lst2)\
    \ do\n                    if is_even(m) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(t)\n\
    \        for _, v in ipairs(t) do\n            if is_odd(v) then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(t)\n        for _, v in ipairs(t) do\n        \
    \    if is_even(v) then\n                return false\n            end\n     \
    \   end\n        return true\n    end\n    if is_all_even(lst1) then\n       \
    \ return 'YES'\n    end\n    if is_all_odd(lst2) then\n        return 'NO'\n \
    \   end\n    for i, v in ipairs(lst1) do\n        if is_odd(v) then\n        \
    \    for j, w in ipairs(lst2) do\n                if is_even(w) then\n       \
    \             lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ exchange(lst1, lst2)\n                end\n            end\n        end\n  \
    \  end\n    return 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo1jbjer.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvo1jbjer.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if is_all_odd(lst1) then\n    return 'NO'\n  end\n  for i, v in ipairs(lst1)\
    \ do\n    if is_odd(v) then\n      for j, w in ipairs(lst2) do\n        if is_even(w)\
    \ then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1,\
    \ lst2)\n        end\n      end\n    end\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbssie36.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmptbssie36.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if is_all_odd(lst1) then\n    return 'NO'\n  end\n  if is_all_even(lst2)\
    \ then\n    return 'NO'\n  end\n  if is_all_odd(lst2) then\n    return 'YES'\n\
    \  end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40aa_qab.lua:56:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmp40aa_qab.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for i =\
    \ 1, #lst do\n      if is_odd(lst[i]) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i = 1, #lst1 do\n      if is_odd(lst1[i]) then\n        for j = 1, #lst2\
    \ do\n          if is_even(lst2[j]) then\n            lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n            return true\n          end\n        end\n      end\n  \
    \  end\n    return false\n  end\n  while not is_all_even(lst1) do\n    if not\
    \ exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst = {}\n    for _, v in ipairs(lst1) do\n      if is_odd(v) then\n\
    \        table.insert(lst, v)\n      end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n      if is_even(v) then\n        table.insert(lst, v)\n      end\n    end\n\
    \    return lst\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n  elseif\
    \ is_all_odd(lst2) then\n    return 'NO'\n  else\n    return exchange_elements(lst1,\
    \ lst2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0i8guph.lua:63:\
    \ expected: \"YES\"\nactual: {1, 3, 2, 4}\nstack traceback:\n\t/tmp/tmpf0i8guph.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8vhlht_.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpo8vhlht_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    if is_all_even(lst1) then\n        return \"YES\"\n    else\n\
    \        while exchange_elements(lst1, lst2) do\n            if is_all_even(lst1)\
    \ then\n                return \"YES\"\n            end\n        end\n       \
    \ return \"NO\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- YOUR\
    \ CODE HERE\n  local odd_count = 0\n  for _, v in ipairs(lst1) do\n    if v %\
    \ 2 == 1 then\n      odd_count = odd_count + 1\n    end\n  end\n  for _, v in\
    \ ipairs(lst2) do\n    if v % 2 == 1 then\n      odd_count = odd_count - 1\n \
    \   end\n  end\n  if odd_count == 0 then\n    return 'YES'\n  else\n    return\
    \ 'NO'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvu9q27j.lua:40:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpfvu9q27j.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cqbyuea.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6cqbyuea.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_odd_idx = {}\n    local lst2_even_idx = {}\n    for i, n in ipairs(lst1)\
    \ do\n      if is_odd(n) then\n        table.insert(lst1_odd_idx, i)\n      end\n\
    \    end\n    for i, n in ipairs(lst2) do\n      if is_even(n) then\n        table.insert(lst2_even_idx,\
    \ i)\n      end\n    end\n    if #lst1_odd_idx == 0 or #lst2_even_idx == 0 then\n\
    \      return false\n    end\n    for _, i in ipairs(lst1_odd_idx) do\n      for\
    \ _, j in ipairs(lst2_even_idx) do\n        lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \        if is_all_even(lst1) then\n          return true\n        end\n     \
    \   lst1[i], lst2[j] = lst2[j], lst1[i]\n      end\n    end\n    return false\n\
    \  end\n  return exchange_elements(lst1, lst2) and 'YES' or 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmelpttv.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpdmelpttv.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ even_numbers = {}\n    local odd_numbers = {}\n    for _, v in ipairs(lst1)\
    \ do\n        if v % 2 == 0 then\n            table.insert(even_numbers, v)\n\
    \        else\n            table.insert(odd_numbers, v)\n        end\n    end\n\
    \    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n            table.insert(even_numbers,\
    \ v)\n        else\n            table.insert(odd_numbers, v)\n        end\n  \
    \  end\n    if #even_numbers >= #odd_numbers then\n        return 'YES'\n    else\n\
    \        return 'NO'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy1a8fzf.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpwy1a8fzf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(num)\n        return num % 2 == 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphkqw9li1.lua:31: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for i = 1, #lst do\n            if is_odd(lst[i]) then\n            \
    \    return false\n            end\n        end\n        return true\n    end\n\
    \    if is_all_even(lst1) then\n        return \"YES\"\n    end\n    for i = 1,\
    \ #lst1 do\n        for j = 1, #lst2 do\n            if is_even(lst1[i]) and is_odd(lst2[j])\
    \ then\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if\
    \ is_all_even(lst1) then\n                    return \"YES\"\n               \
    \ end\n            end\n        end\n    end\n    return \"NO\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupyi0ryf.lua:48:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpupyi0ryf.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_even_list(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_odd_list(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_even_list(lst1) then\n    return 'YES'\n\
    \  end\n  if is_odd_list(lst2) then\n    return 'NO'\n  end\n  for i, v in ipairs(lst1)\
    \ do\n    if is_odd(v) then\n      for j, w in ipairs(lst2) do\n        if is_even(w)\
    \ then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1,\
    \ lst2)\n        end\n      end\n    end\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fpi4o46.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9fpi4o46.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    if is_all_even(lst1) then\n        return 'YES'\n    end\n    for i, v in\
    \ ipairs(lst1) do\n        if is_odd(v) then\n            for j, w in ipairs(lst2)\
    \ do\n                if is_even(w) then\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    if is_all_even(lst1) then\n        \
    \                return 'YES'\n                    end\n                    lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                end\n            end\n        end\n\
    \    end\n    return 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s3kgdgx.lua:51:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp1s3kgdgx.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for i =\
    \ 1, #lst do\n      if is_odd(lst[i]) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i = 1, #lst1 do\n      if is_odd(lst1[i]) then\n        for j = 1, #lst2\
    \ do\n          if is_even(lst2[j]) then\n            lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n            return true\n          end\n        end\n      end\n  \
    \  end\n    return false\n  end\n  while not is_all_even(lst1) do\n    if not\
    \ exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n  end\n  return\
    \ 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdibukw2t.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdibukw2t.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function exchange_elements(lst1,\
    \ lst2)\n    local function exchange_element(lst1, lst2)\n      local function\
    \ exchange_element_with_odd(lst1, lst2)\n        local function exchange_element_with_odd_at(lst1,\
    \ lst2, i)\n          local function exchange_element_with_odd_at_from(lst1, lst2,\
    \ i, j)\n            if j > #lst2 then\n              return false\n         \
    \   elseif is_even(lst2[j]) then\n              return false\n            else\n\
    \              lst1[i], lst2[j] = lst2[j], lst1[i]\n              return true\n\
    \            end\n          end\n          return exchange_element_with_odd_at_from(lst1,\
    \ lst2, i, 1)\n        end\n        return exchange_element_with_odd_at(lst1,\
    \ lst2, 1)\n      end\n      return exchange_element_with_odd(lst1, lst2)\n  \
    \  end\n    return exchange_element(lst1, lst2)\n  end\n  local function exchange_elements_until_all_even(lst1,\
    \ lst2)\n    local function exchange_elements_until_all_even_from(lst1, lst2,\
    \ i)\n      if i > #lst1 then\n        return true\n      elseif is_even(lst1[i])\
    \ then\n        return exchange_elements_until_all_even_from(lst1, lst2, i + 1)\n\
    \      else\n        return exchange_elements(lst1, lst2) and\n              \
    \ exchange_elements_until_all_even_from(lst1, lst2, i)\n      end\n    end\n \
    \   return exchange_elements_until_all_even_from(lst1, lst2, 1)\n  end\n  return\
    \ exchange_elements_until_all_even(lst1, lst2) and 'YES' or 'NO'\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp81sbzcs4.lua:54: 'end' expected (to close 'function' at line\
    \ 14) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ even = {}\n  local odd = {}\n  for i, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      even[#even + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n\
    \  end\n  for i, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      even[#even\
    \ + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n  end\n  if #even >= #odd\
    \ then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcthxot4.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmplcthxot4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = 0\n    local odds = 0\n    for i = 1, #lst1 do\n        if lst1[i] %\
    \ 2 == 0 then\n            evens = evens + 1\n        else\n            odds =\
    \ odds + 1\n        end\n    end\n    for i = 1, #lst2 do\n        if lst2[i]\
    \ % 2 == 0 then\n            evens = evens + 1\n        else\n            odds\
    \ = odds + 1\n        end\n    end\n    if evens % 2 == 0 then\n        return\
    \ 'YES'\n    else\n        return 'NO'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogme2nwc.lua:44:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpogme2nwc.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpus84y774.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpus84y774.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if is_all_odd(lst1) then\n    return 'NO'\n  end\n  for i, v in ipairs(lst1)\
    \ do\n    if is_odd(v) then\n      for j, w in ipairs(lst2) do\n        if is_even(w)\
    \ then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return exchange(lst1,\
    \ lst2)\n        end\n      end\n    end\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4ddteqz.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpb4ddteqz.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  for\
    \ i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n      for j = 1, #lst2 do\n \
    \       if lst2[j] % 2 == 1 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \          return 'YES'\n        end\n      end\n      return 'NO'\n    end\n\
    \  end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29ygw0hy.lua:33:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmp29ygw0hy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ n in ipairs(lst) do\n      if is_even(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i, j)\n      local tmp = lst1[i]\n\
    \      lst1[i] = lst2[j]\n      lst2[j] = tmp\n    end\n    for i, n in ipairs(lst1)\
    \ do\n      if is_odd(n) then\n        for j, m in ipairs(lst2) do\n         \
    \ if is_even(m) then\n            exchange_element(lst1, lst2, i, j)\n       \
    \     return true\n          end\n        end\n      end\n    end\n    return\
    \ false\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n  elseif is_all_odd(lst2)\
    \ then\n    return 'NO'\n  else\n    while exchange_elements(lst1, lst2) do\n\
    \      if is_all_even(lst1) then\n        return 'YES'\n      end\n    end\n \
    \   return 'NO'\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_one(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_one(lst1, lst2) then\n      return 'NO'\n    end\n  end\n\
    \  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n\tlocal\
    \ function is_even(n)\n\t\treturn n % 2 == 0\n\tend\n\tlocal function is_odd(n)\n\
    \t\treturn n % 2 ~= 0\n\tend\n\tlocal function is_all_even(lst)\n\t\tfor _, v\
    \ in ipairs(lst) do\n\t\t\tif is_odd(v) then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\tlocal function exchange_elements(lst1, lst2)\n\
    \t\tfor i, v in ipairs(lst1) do\n\t\t\tif is_odd(v) then\n\t\t\t\tfor j, w in\
    \ ipairs(lst2) do\n\t\t\t\t\tif is_even(w) then\n\t\t\t\t\t\tlst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\t\treturn false\n\tend\n\twhile not is_all_even(lst1) do\n\t\t\
    if not exchange_elements(lst1, lst2) then\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\
    \treturn \"YES\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n\tlocal\
    \ evens = {}\n\tlocal odds = {}\n\tfor i, v in ipairs(lst1) do\n\t\tif v % 2 ==\
    \ 0 then\n\t\t\tevens[#evens + 1] = v\n\t\telse\n\t\t\todds[#odds + 1] = v\n\t\
    \tend\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\tif v % 2 == 0 then\n\t\t\tevens[#evens\
    \ + 1] = v\n\t\telse\n\t\t\todds[#odds + 1] = v\n\t\tend\n\tend\n\tif #evens >=\
    \ #odds then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm53dw8no.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpm53dw8no.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, n in ipairs(lst1) do\n      if is_odd(n) then\n        for j, m in\
    \ ipairs(lst2) do\n          if is_even(m) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n \
    \ end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_2da_28.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpp_2da_28.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_odd_in_lst1(n)\n\
    \        return is_odd(n) and not is_even(n)\n    end\n    local function is_even_in_lst2(n)\n\
    \        return is_even(n) and not is_odd(n)\n    end\n    local function is_odd_in_lst2(n)\n\
    \        return is_odd(n) and not is_even(n)\n    end\n    local function is_even_in_lst1(n)\n\
    \        return is_even(n) and not is_odd(n)\n    end\n    local function is_odd_in_lst1_and_even_in_lst2(n)\n\
    \        return is_odd_in_lst1(n) and is_even_in_lst2(n)\n    end\n    local function\
    \ is_even_in_lst1_and_odd_in_lst2(n)\n        return is_even_in_lst1(n) and is_odd_in_lst2(n)\n\
    \    end\n    local function is_odd_in_lst1_and_odd_in_lst2(n)\n        return\
    \ is_odd_in_lst1(n) and is_odd_in_lst2(n)\n    end\n    local function is_even_in_lst1_and_even_in_lst2(n)\n\
    \        return is_even_in_lst1(n) and is_even_in_lst2(n)\n    end\n    local\
    \ function is_odd_in_lst1_and_even_in_lst2_or_even_in_lst1_and_odd_in_lst2(n)\n\
    \        return is_odd_in_lst1_and_even_in_lst2(n) or is_even_in_lst1_and_odd_in_lst2(n)\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppz_usmnu.lua:61: 'end' expected (to close 'function' at line\
    \ 14) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmme4d1zj.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmme4d1zj.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_odd_indexes = {}\n    local lst2_even_indexes = {}\n    for i,\
    \ v in ipairs(lst1) do\n      if is_odd(v) then\n        table.insert(lst1_odd_indexes,\
    \ i)\n      end\n    end\n    for i, v in ipairs(lst2) do\n      if is_even(v)\
    \ then\n        table.insert(lst2_even_indexes, i)\n      end\n    end\n    if\
    \ #lst1_odd_indexes == #lst2_even_indexes then\n      for i, v in ipairs(lst1_odd_indexes)\
    \ do\n        lst1[v] = lst2[lst2_even_indexes[i]]\n      end\n      return true\n\
    \    end\n    return false\n  end\n  if exchange_elements(lst1, lst2) then\n \
    \   return 'YES'\n  end\n  return 'NO'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud6oai_s.lua:57:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpud6oai_s.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnwp8ppu.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpwnwp8ppu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function is_all_odd(lst)\n    for _,\
    \ v in ipairs(lst) do\n      if is_even(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  if is_all_even(lst1) then\n    return 'YES'\n\
    \  end\n  if is_all_odd(lst1) then\n    return 'NO'\n  end\n  if is_all_even(lst2)\
    \ then\n    return 'NO'\n  end\n  if is_all_odd(lst2) then\n    return 'YES'\n\
    \  end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwau9zdd.lua:56:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpxwau9zdd.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_all_even(lst)\n\
    \        for _, x in ipairs(lst) do\n            if is_odd(x) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, x in ipairs(lst) do\n    \
    \        if is_even(x) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    if is_all_even(lst2) then\n        return \"NO\"\n    end\n\
    \    if is_all_odd(lst2) then\n        return \"YES\"\n    end\n    return \"\
    YES\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklds_hhc.lua:56:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpklds_hhc.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function exchange_elements(lst1,\
    \ lst2)\n        local lst1_odd_elements = {}\n        local lst2_even_elements\
    \ = {}\n        for i = 1, #lst1 do\n            if is_odd(lst1[i]) then\n   \
    \             table.insert(lst1_odd_elements, lst1[i])\n            end\n    \
    \    end\n        for i = 1, #lst2 do\n            if is_even(lst2[i]) then\n\
    \                table.insert(lst2_even_elements, lst2[i])\n            end\n\
    \        end\n        if #lst1_odd_elements == #lst2_even_elements then\n    \
    \        return true\n        else\n            return false\n        end\n  \
    \  end\n    if exchange_elements(lst1, lst2) then\n        return 'YES'\n    else\n\
    \        return 'NO'\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv6oa4l3.lua:56:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpmv6oa4l3.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, n in ipairs(lst) do\n    \
    \        if is_even(n) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, n in ipairs(lst1) do\n        if is_odd(n) then\n  \
    \          for j, m in ipairs(lst2) do\n                if is_even(m) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ exchange(lst1, lst2)\n                end\n            end\n        end\n  \
    \  end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf321ci7.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmphf321ci7.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function exchange_elements(lst1,\
    \ lst2)\n    local lst1_even = true\n    for _, v in ipairs(lst1) do\n      if\
    \ not is_even(v) then\n        lst1_even = false\n        break\n      end\n \
    \   end\n    if lst1_even then\n      return true\n    end\n    for i, v in ipairs(lst1)\
    \ do\n      if not is_even(v) then\n        for j, w in ipairs(lst2) do\n    \
    \      if is_even(w) then\n            lst1[i], lst2[j] = w, v\n            if\
    \ exchange_elements(lst1, lst2) then\n              return true\n            end\n\
    \            lst1[i], lst2[j] = v, w\n          end\n        end\n      end\n\
    \    end\n    return false\n  end\n  return exchange_elements(lst1, lst2) and\
    \ \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_elements_helper(lst1, lst2, acc)\n      if #lst1\
    \ == 0 then\n        return acc\n      elseif is_even(lst1[1]) then\n        return\
    \ exchange_elements_helper(\n          table.slice(lst1, 2, #lst1),\n        \
    \  lst2,\n          acc\n        )\n      elseif is_odd(lst1[1]) then\n      \
    \  local new_lst1 = table.slice(lst1, 2, #lst1)\n        local new_lst2 = table.slice(lst2,\
    \ 2, #lst2)\n        local new_acc = table.slice(acc, 1, #acc)\n        table.insert(new_acc,\
    \ lst1[1])\n        table.insert(new_acc, lst2[1])\n        return exchange_elements_helper(new_lst1,\
    \ new_lst2, new_acc)\n      end\n    end\n    return exchange_elements_helper(lst1,\
    \ lst2, {})\n  end\n  local function is_exchange_possible(lst1, lst2)\n    local\
    \ function is_exchange_possible_helper(lst1, lst2)\n      if #lst1 == 0 then\n\
    \        return true\n      elseif is_even(lst1[1]) then\n        return is_exchange_possible_helper(\n\
    \          table.slice(lst1, 2, #lst1),\n          lst2\n        )\n      elseif\
    \ is_odd(lst1[1]) then\n        return false\n      end\n    end\n    return is_exchange_possible_helper(lst1,\
    \ lst2)\n  end\n  local exchanged_lst = exchange_elements(lst1, lst2)\n  return\
    \ is_exchange_p\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjzy54bcv.lua:59: 'end' expected (to close 'function' at line\
    \ 14) near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3,\
    \ 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwhwpgmo.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpgwhwpgmo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, x in ipairs(lst) do\n            if is_odd(x) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, x in ipairs(lst) do\n    \
    \        if is_even(x) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    elseif is_all_odd(lst1) then\n        return \"NO\"\n\
    \    else\n        for i, x in ipairs(lst1) do\n            if is_odd(x) then\n\
    \                for j, y in ipairs(lst2) do\n                    if is_even(y)\
    \ then\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n        \
    \                return exchange(lst1, lst2)\n                    end\n      \
    \          end\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5i7q3bx.lua:59:\
    \ expected: \"NO\"\nactual: nil\nstack traceback:\n\t/tmp/tmps5i7q3bx.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5vyf3po.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpi5vyf3po.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(x)\n        return x % 2 == 0\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, x in ipairs(lst) do\n            if is_odd(x) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        local lst1_odd_elements\
    \ = {}\n        local lst2_even_elements = {}\n        for _, x in ipairs(lst1)\
    \ do\n            if is_odd(x) then\n                table.insert(lst1_odd_elements,\
    \ x)\n            end\n        end\n        for _, x in ipairs(lst2) do\n    \
    \        if is_even(x) then\n                table.insert(lst2_even_elements,\
    \ x)\n            end\n        end\n        for _, x in ipairs(lst1_odd_elements)\
    \ do\n            for i, y in ipairs(lst2_even_elements) do\n                lst1[x]\
    \ = y\n                lst2[y] = x\n                lst2_even_elements[i] = nil\n\
    \                break\n            end\n        end\n    end\n    if is_all_even(lst1)\
    \ then\n        return 'YES'\n    else\n        exchange_elements(lst1, lst2)\n\
    \        if is_all_even(lst1) then\n            return 'YES'\n        else\n \
    \           return 'NO'\n        end\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpboslv7qo.lua:66:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpboslv7qo.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ evens = 0\n  local odds = 0\n  for _, v in ipairs(lst1) do\n    if v % 2 ==\
    \ 0 then\n      evens = evens + 1\n    else\n      odds = odds + 1\n    end\n\
    \  end\n  for _, v in ipairs(lst2) do\n    if v % 2 == 0 then\n      evens = evens\
    \ + 1\n    else\n      odds = odds + 1\n    end\n  end\n  return odds % 2 == 0\
    \ and 'YES' or 'NO'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ug1s7dr.lua:40:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp0ug1s7dr.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, n\
    \ in ipairs(lst) do\n      if is_odd(n) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local lst1_copy = table.copy(lst1)\n    local lst2_copy = table.copy(lst2)\n\
    \    for i = 1, #lst1_copy do\n      if is_odd(lst1_copy[i]) then\n        for\
    \ j = 1, #lst2_copy do\n          if is_even(lst2_copy[j]) then\n            lst1_copy[i]\
    \ = lst2_copy[j]\n            lst2_copy[j] = lst1_copy[i]\n            break\n\
    \          end\n        end\n      end\n    end\n    return lst1_copy, lst2_copy\n\
    \  end\n  local lst1_copy, lst2_copy = exchange_elements(lst1, lst2)\n  if is_all_even(lst1_copy)\
    \ then\n    return 'YES'\n  else\n    return 'NO'\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpycx1_1_5.lua:30:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpycx1_1_5.lua:30:\
    \ in local 'exchange_elements'\n\t/tmp/tmpycx1_1_5.lua:45: in local 'candidate'\n\
    \t/tmp/tmpycx1_1_5.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement the function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqabi7nhk.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqabi7nhk.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_one(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_one(lst1,\
    \ lst2) then\n            return 'NO'\n        end\n    end\n    return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function is_all_even(lst)\n    for _, v\
    \ in ipairs(lst) do\n      if is_odd(v) then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    for i, v in ipairs(lst1) do\n      if is_odd(v) then\n        for j, w in\
    \ ipairs(lst2) do\n          if is_even(w) then\n            lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n            return true\n          end\n        end\n  \
    \    end\n    end\n    return false\n  end\n  while not is_all_even(lst1) do\n\
    \    if not exchange_elements(lst1, lst2) then\n      return 'NO'\n    end\n \
    \ end\n  return 'YES'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, n in ipairs(lst) do\n            if is_odd(n) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, n in ipairs(lst) do\n    \
    \        if is_even(n) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, n in ipairs(lst1) do\n        if is_odd(n) then\n  \
    \          for j, m in ipairs(lst2) do\n                if is_even(m) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ exchange(lst1, lst2)\n                end\n            end\n        end\n  \
    \  end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqq10jogt.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpqq10jogt.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ evens = {}\n    local odds = {}\n    for _, v in ipairs(lst1) do\n        if\
    \ v % 2 == 0 then\n            table.insert(evens, v)\n        else\n        \
    \    table.insert(odds, v)\n        end\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        if v % 2 == 0 then\n            table.insert(evens, v)\n       \
    \ else\n            table.insert(odds, v)\n        end\n    end\n    if #evens\
    \ >= #odds then\n        return 'YES'\n    else\n        return 'NO'\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ implement the function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxen775vy.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxen775vy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx08tykv7.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpx08tykv7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  local\
    \ function is_even(n)\n    return n % 2 == 0\n  end\n  local function is_odd(n)\n\
    \    return n % 2 ~= 0\n  end\n  local function exchange_elements(lst1, lst2)\n\
    \    local function exchange_element(lst1, lst2, i)\n      if i > #lst1 then\n\
    \        return lst1, lst2\n      end\n      if is_even(lst1[i]) then\n      \
    \  return exchange_element(lst1, lst2, i + 1)\n      end\n      for j = 1, #lst2\
    \ do\n        if is_even(lst2[j]) then\n          lst1[i], lst2[j] = lst2[j],\
    \ lst1[i]\n          return exchange_element(lst1, lst2, i + 1)\n        end\n\
    \      end\n      return lst1, lst2\n    end\n    return exchange_element(lst1,\
    \ lst2, 1)\n  end\n  local function is_all_even(lst)\n    for i = 1, #lst do\n\
    \      if is_odd(lst[i]) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local lst1, lst2 = exchange_elements(lst1, lst2)\n  return is_all_even(lst1)\
    \ and \"YES\" or \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, v in ipairs(lst1) do\n        if is_odd(v) then\n  \
    \          for j, w in ipairs(lst2) do\n                if is_even(w) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ exchange(lst1, lst2)\n                end\n            end\n        end\n  \
    \  end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_2ggtdl.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpy_2ggtdl.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  for\
    \ i = 1, #lst1 do\n    if lst1[i] % 2 == 1 then\n      for j = 1, #lst2 do\n \
    \       if lst2[j] % 2 == 1 then\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \          break\n        end\n      end\n    end\n  end\n  for i = 1, #lst1 do\n\
    \    if lst1[i] % 2 == 1 then\n      return 'NO'\n    end\n  end\n  return 'YES'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = exchange\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}),\
    \ 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p_8w66d.lua:36:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmp5p_8w66d.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function has_odd(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return true\n            end\n        end\n        return false\n    end\n\
    \    if has_odd(lst1) then\n        for i, v in ipairs(lst2) do\n            if\
    \ is_even(v) then\n                lst2[i] = lst1[i]\n                lst1[i]\
    \ = v\n            end\n        end\n        if has_odd(lst1) then\n         \
    \   return 'NO'\n        end\n    end\n    return 'YES'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaxli61p.lua:46:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmppaxli61p.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpid14ctlf.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpid14ctlf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    --\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfkfahwk.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdfkfahwk.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function is_all_odd(lst)\n        for _, v in ipairs(lst) do\n    \
    \        if is_even(v) then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    if is_all_even(lst1) then\n   \
    \     return \"YES\"\n    end\n    if is_all_odd(lst1) then\n        return \"\
    NO\"\n    end\n    for i, v in ipairs(lst1) do\n        if is_odd(v) then\n  \
    \          for j, w in ipairs(lst2) do\n                if is_even(w) then\n \
    \                   lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return\
    \ exchange(lst1, lst2)\n                end\n            end\n        end\n  \
    \  end\n    return \"NO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdeckhjb.lua:62:\
    \ expected: \"YES\"\nactual: \"NO\"\nstack traceback:\n\t/tmp/tmpwdeckhjb.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ lst1_odd = {}\n    local lst2_even = {}\n    for _, v in ipairs(lst1) do\n \
    \       if v % 2 == 1 then\n            table.insert(lst1_odd, v)\n        end\n\
    \    end\n    for _, v in ipairs(lst2) do\n        if v % 2 == 0 then\n      \
    \      table.insert(lst2_even, v)\n        end\n    end\n    if #lst1_odd == 0\
    \ then\n        return 'YES'\n    elseif #lst2_even == 0 then\n        return\
    \ 'NO'\n    else\n        return 'YES'\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = exchange\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4},\
    \ {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4,\
    \ 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')\n \
    \   lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n    lu.assertEquals(candidate({3,\
    \ 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n    lu.assertEquals(candidate({100,\
    \ 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwsyxv1b.lua:40:\
    \ expected: \"NO\"\nactual: \"YES\"\nstack traceback:\n\t/tmp/tmpbwsyxv1b.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n  -- TODO:\
    \ Implement this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2,\
    \ 3, 4}), 'YES')\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5,\
    \ 7, 3}, {2, 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}),\
    \ 'NO')\n    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}),\
    \ 'NO')\n    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb8rgomas.lua:21:\
    \ expected: \"YES\"\nactual: nil\nstack traceback:\n\t/tmp/tmpb8rgomas.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- In this problem, you will implement a function that takes two tables\
    \ of numbers,\n-- and determines whether it is possible to perform an exchange\
    \ of elements\n-- between them to make lst1 a table of only even numbers.\n--\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    -- If it is possible to exchange elements between the lst1 and lst2 to make\n\
    -- all the elements of lst1 to be even, return \"YES\".\n-- Otherwise, return\
    \ \"NO\".\n-- For example:\n-- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})\n-- 'YES'\n\
    -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})\n-- 'NO'\n-- It is assumed that the\
    \ input tables will be non-empty.\nlocal function exchange(lst1, lst2)\n    local\
    \ function is_even(n)\n        return n % 2 == 0\n    end\n    local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n    end\n    local function is_all_even(lst)\n\
    \        for _, v in ipairs(lst) do\n            if is_odd(v) then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    local function exchange_elements(lst1, lst2)\n        for i, v in ipairs(lst1)\
    \ do\n            if is_odd(v) then\n                for j, w in ipairs(lst2)\
    \ do\n                    if is_even(w) then\n                        lst1[i],\
    \ lst2[j] = lst2[j], lst1[i]\n                        return true\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ false\n    end\n    while not is_all_even(lst1) do\n        if not exchange_elements(lst1,\
    \ lst2) then\n            return \"NO\"\n        end\n    end\n    return \"YES\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ exchange\n    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}, {2, 1, 4, 3}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2,\
    \ 6, 4}), 'YES')\n    lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')\n\
    \    lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')\n\
    \    lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
