---
language: lua
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfsgo4fgq.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfsgo4fgq.lua:21:
    in local 'candidate'\n\t/tmp/tmpfsgo4fgq.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib_n = fib(n)
        while not is_prime(fib_n) do
            n = n + 1
            fib_n = fib(n)
        end
        return fib_n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62qje5hm.lua:13:
    attempt to call a nil value (global 'fib')\nstack traceback:\n\t/tmp/tmp62qje5hm.lua:13:
    in local 'candidate'\n\t/tmp/tmp62qje5hm.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjof9h1z3.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjof9h1z3.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i + j\n\t\tif
    is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),
    2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n
    \   lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n
    \   lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n
    \   lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n
    \   lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9xruzx_.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw9xruzx_.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99dt5tma.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp99dt5tma.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci(n)
        while not is_prime(fib) do
            fib = fibonacci(n)
            n = n + 1
        end
        return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni_mxfhh.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpni_mxfhh.lua:13:
    in local 'candidate'\n\t/tmp/tmpni_mxfhh.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffnzwrcy.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpffnzwrcy.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal count = 0\n\twhile count < n do\n\t\tk
    = i + j\n\t\ti = j\n\t\tj = k\n\t\tif is_prime(k) then\n\t\t\tcount = count +
    1\n\t\tend\n\tend\n\treturn k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),
    3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n
    \   lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n
    \   lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n
    \   lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),
    433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqzaphio.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvqzaphio.lua:21:
    in local 'candidate'\n\t/tmp/tmpvqzaphio.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local a, b = 2, 3
      local i = 2
      while i < n do
        a, b = b, a + b
        if is_prime(b) then
          i = i + 1
        end
      end
      return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq76adbb.lua:27:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmppq76adbb.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
        k = i + j
        if is_prime(k) then
          count = count + 1
        end
        i = j
        j = k
      end
      return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z19disc.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp4z19disc.lua:19:
    in local 'candidate'\n\t/tmp/tmp4z19disc.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2etzhed0.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2etzhed0.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 2
        local k = 3
        local count = 3
        while count < n do
            i = j
            j = k
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchzidww6.lua:31:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpchzidww6.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo9injkm.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyo9injkm.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0xon939.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpc0xon939.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci()
        local prime = prime_numbers()
        local i = 1
        local f, p
        while i < n do
            f = fib()
            p = prime()
            if f == p then
                i = i + 1
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjyyjuuk.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpkjyyjuuk.lua:13:
    in local 'candidate'\n\t/tmp/tmpkjyyjuuk.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 0
        local f = 0
        local f1 = 0
        local f2 = 1
        while i < n do
            f = f1 + f2
            f1 = f2
            f2 = f
            if is_prime(f) then
                i = i + 1
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpduial_gr.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpduial_gr.lua:21:
    in local 'candidate'\n\t/tmp/tmpduial_gr.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local a, b = 2, 3
        local i = 2
        while i < n do
            a, b = b, a + b
            if is_prime(b) then
                i = i + 1
            end
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkan5h04.lua:27:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpfkan5h04.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci()
        local prime = primes()
        local i = 0
        local f, p
        repeat
            i = i + 1
            f = fib()
            p = prime()
        until i == n
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo07mxtcz.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpo07mxtcz.lua:13:
    in local 'candidate'\n\t/tmp/tmpo07mxtcz.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci(n)
        while not is_prime(fib) do
            fib = fibonacci(n)
            n = n + 1
        end
        return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni_mxfhh.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpni_mxfhh.lua:13:
    in local 'candidate'\n\t/tmp/tmpni_mxfhh.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\tlocal t = i + j\n\t\ti
    = j\n\t\tj = t\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn
    j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),
    3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n
    \   lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n
    \   lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n
    \   lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),
    433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0eqoegq.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy0eqoegq.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            if is_prime(i) then
                j = i
                k = k + 1
            end
            i = i + 1
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuce87nv.lua:29:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnuce87nv.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = i + j, i
            if is_prime(i) then
                k = k + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqvp9y8f.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptqvp9y8f.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci()
        local i = 1
        local f = fib()
        while i < n do
            f = fib()
            if is_prime(f) then
                i = i + 1
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebwotkzy.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpebwotkzy.lua:13:
    in local 'candidate'\n\t/tmp/tmpebwotkzy.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local f = 2
      while i < n do
        f = next_prime_fib(f)
        i = i + 1
      end
      return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpujlx62e0.lua:16:
    attempt to call a nil value (global 'next_prime_fib')\nstack traceback:\n\t/tmp/tmpujlx62e0.lua:16:
    in local 'candidate'\n\t/tmp/tmpujlx62e0.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local fib = 1
      while i < n do
        fib = fib + 1
        while not is_prime(fib) do
          fib = fib + 1
        end
        i = i + 1
      end
      return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4ylvcke.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw4ylvcke.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local f = fib()
        local i = 1
        local v
        repeat
            v = f()
            i = i + 1
        until is_prime(v) and i == n
        return v
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvmss4k6p.lua:13:
    attempt to call a nil value (global 'fib')\nstack traceback:\n\t/tmp/tmpvmss4k6p.lua:13:
    in local 'candidate'\n\t/tmp/tmpvmss4k6p.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local fib = 1
        local prime_fib = 1
        while i < n do
            fib = fibonacci(i)
            if is_prime(fib) then
                prime_fib = fib
                i = i + 1
            end
        end
        return prime_fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd1ae_30.lua:29:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprd1ae_30.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal count = 1\n\twhile count < n do\n\t\tlocal k = i
    + j\n\t\ti = j\n\t\tj = k\n\t\tif is_prime(k) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn
    j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),
    3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n
    \   lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n
    \   lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n
    \   lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),
    433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i4gudgd.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6i4gudgd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 2
        local k = 1
        while k < n do
            if is_prime(j) then
                k = k + 1
            end
            local t = i + j
            i = j
            j = t
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp72ff6vpc.lua:17:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp72ff6vpc.lua:17:
    in local 'candidate'\n\t/tmp/tmp72ff6vpc.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        local t = i + j
        i = j
        j = t
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vv7ros1.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9vv7ros1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzi0pvip.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzzi0pvip.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 1
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwlm_u1m.lua:31:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdwlm_u1m.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yi639_t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_yi639_t.lua:19:
    in local 'candidate'\n\t/tmp/tmp_yi639_t.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal count = 0\n\twhile count < n do\n\t\tk
    = i + j\n\t\ti = j\n\t\tj = k\n\t\tif is_prime(k) then\n\t\t\tcount = count +
    1\n\t\tend\n\tend\n\treturn k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),
    3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n
    \   lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n
    \   lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n
    \   lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),
    433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqzaphio.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvqzaphio.lua:21:
    in local 'candidate'\n\t/tmp/tmpvqzaphio.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci()
        local prime = prime_numbers()
        local i = 1
        local f, p = fib(), prime()
        while i < n do
            if f == p then
                i = i + 1
                p = prime()
            elseif f < p then
                f = fib()
            else
                p = prime()
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjeo41g7b.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpjeo41g7b.lua:13:
    in local 'candidate'\n\t/tmp/tmpjeo41g7b.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yi639_t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_yi639_t.lua:19:
    in local 'candidate'\n\t/tmp/tmp_yi639_t.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
        if is_prime(i) then
          count = count + 1
        end
        if count == n then
          return i
        end
        k = i + j
        i = j
        j = k
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptl8nl0qk.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptl8nl0qk.lua:18:
    in local 'candidate'\n\t/tmp/tmptl8nl0qk.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
        k = i + j
        i = j
        j = k
        if is_prime(k) then
          count = count + 1
        end
      end
      return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5xdmx55.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpd5xdmx55.lua:21:
    in local 'candidate'\n\t/tmp/tmpd5xdmx55.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local a, b = 2, 3
        local i = 2
        while i < n do
            a, b = b, a + b
            if is_prime(b) then
                i = i + 1
            end
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkan5h04.lua:27:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpfkan5h04.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local fib = 1
        local prime_fib = 1
        while i < n do
            fib = fibonacci(i)
            if is_prime(fib) then
                prime_fib = fib
                i = i + 1
            end
        end
        return prime_fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd1ae_30.lua:29:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprd1ae_30.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local f = 1
        local p = 2
        while i < n do
            f = fib(p)
            if is_prime(f) then
                i = i + 1
            end
            p = p + 1
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijpildce.lua:29:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpijpildce.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        local t = i + j
        i = j
        j = t
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vv7ros1.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9vv7ros1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        local t = i + j
        i = j
        j = t
        if is_prime(t) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufi_kj9u.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpufi_kj9u.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local f = 1
        local f1 = 1
        local f2 = 1
        while i < n do
            f = f1 + f2
            f1 = f2
            f2 = f
            if is_prime(f) then
                i = i + 1
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88w_lf01.lua:31:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp88w_lf01.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci(n)
        while not is_prime(fib) do
            fib = fibonacci(n)
            n = n + 1
        end
        return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni_mxfhh.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpni_mxfhh.lua:13:
    in local 'candidate'\n\t/tmp/tmpni_mxfhh.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local a, b = 2, 3
      local i = 2
      while i < n do
        a, b = b, a + b
        if is_prime(b) then
          i = i + 1
        end
      end
      return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq76adbb.lua:27:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmppq76adbb.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i + j\n\t\tif
    is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),
    2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n
    \   lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n
    \   lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n
    \   lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n
    \   lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9xruzx_.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw9xruzx_.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local f = 1
        local p = 2
        while i < n do
            f = f + p
            if is_prime(f) then
                p = f
                i = i + 1
            end
        end
        return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02vkymm5.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp02vkymm5.lua:18:
    in local 'candidate'\n\t/tmp/tmp02vkymm5.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local a, b = 2, 3
        local i = 1
        while i < n do
            if is_prime(b) then
                i = i + 1
            end
            a, b = b, a + b
        end
        return a
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatec3g31.lua:16:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpatec3g31.lua:16:
    in local 'candidate'\n\t/tmp/tmpatec3g31.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
        if is_prime(i) then
          count = count + 1
        end
        if count == n then
          return i
        end
        k = i + j
        i = j
        j = k
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptl8nl0qk.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptl8nl0qk.lua:18:
    in local 'candidate'\n\t/tmp/tmptl8nl0qk.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 0
        local f = 0
        while i < n do
            f = fib(f)
            if is_prime(f) then
                i = i + 1
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjw6sa79.lua:16:
    attempt to call a nil value (global 'fib')\nstack traceback:\n\t/tmp/tmpxjw6sa79.lua:16:
    in local 'candidate'\n\t/tmp/tmpxjw6sa79.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            if is_prime(i) then
                count = count + 1
            end
            if count == n then
                return i
            end
            k = i + j
            i = j
            j = k
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppcjmj0du.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmppcjmj0du.lua:18:
    in local 'candidate'\n\t/tmp/tmppcjmj0du.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            if is_prime(i) then
                count = count + 1
            end
            if count == n then
                return i
            end
            k = i + j
            i = j
            j = k
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppcjmj0du.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmppcjmj0du.lua:18:
    in local 'candidate'\n\t/tmp/tmppcjmj0du.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcob5h6oe.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcob5h6oe.lua:19:
    in local 'candidate'\n\t/tmp/tmpcob5h6oe.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        local t = i + j
        i = j
        j = t
        if is_prime(t) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufi_kj9u.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpufi_kj9u.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local f = 1
        local p = 1
        while i < n do
            f = fib(p)
            if is_prime(f) then
                i = i + 1
            end
            p = p + 1
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuibizzwj.lua:29:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpuibizzwj.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yi639_t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_yi639_t.lua:19:
    in local 'candidate'\n\t/tmp/tmp_yi639_t.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local fib = 1
        local fib_prev = 1
        while i < n do
            local fib_next = fib + fib_prev
            fib_prev = fib
            fib = fib_next
            if is_prime(fib) then
                i = i + 1
            end
        end
        return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7tuopfq.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn7tuopfq.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzi0pvip.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzzi0pvip.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i + j\n\t\tif
    is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),
    2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n
    \   lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n
    \   lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n
    \   lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n
    \   lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9xruzx_.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw9xruzx_.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzi0pvip.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzzi0pvip.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfh2tki_g.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpfh2tki_g.lua:21:
    in local 'candidate'\n\t/tmp/tmpfh2tki_g.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i + j\n\t\tif
    is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),
    2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n
    \   lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n
    \   lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n
    \   lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n
    \   lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9xruzx_.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw9xruzx_.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local a, b = 2, 3
        local i = 2
        while i < n do
            a, b = b, a + b
            if is_prime(b) then
                i = i + 1
            end
        end
        return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkan5h04.lua:27:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpfkan5h04.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local fib = fibonacci()
      local i = 0
      while i < n do
        local f = fib()
        if is_prime(f) then
          i = i + 1
        end
      end
      return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9sbblir.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpz9sbblir.lua:13:
    in local 'candidate'\n\t/tmp/tmpz9sbblir.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 2
        local j = 3
        local k = 5
        local count = 5
        while count < n do
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
            k = i + j
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9363ev8g.lua:31:
    expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmp9363ev8g.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local a, b = 1, 1
      local i = 1
      while i < n do
        a, b = b, a + b
        if is_prime(b) then
          i = i + 1
        end
      end
      return b
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg65t32f.lua:27:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqg65t32f.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
        if is_prime(i) then
          count = count + 1
        end
        if count == n then
          return i
        end
        k = i + j
        i = j
        j = k
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptl8nl0qk.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptl8nl0qk.lua:18:
    in local 'candidate'\n\t/tmp/tmptl8nl0qk.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local f1, f2 = 2, 3
        local i = 2
        while i < n do
            f1, f2 = f2, f1 + f2
            if is_prime(f2) then
                i = i + 1
            end
        end
        return f2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzx60rgh.lua:27:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpvzx60rgh.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 2
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpji_0iyh4.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpji_0iyh4.lua:19:
    in local 'candidate'\n\t/tmp/tmpji_0iyh4.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
        k = i + j
        i = j
        j = k
        if is_prime(k) then
          count = count + 1
        end
      end
      return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5xdmx55.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpd5xdmx55.lua:21:
    in local 'candidate'\n\t/tmp/tmpd5xdmx55.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local f = 1
        local f1 = 1
        local f2 = 1
        while i < n do
            f = f1 + f2
            f1 = f2
            f2 = f
            if is_prime(f) then
                i = i + 1
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88w_lf01.lua:31:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp88w_lf01.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib_num = fib(n)
        while not is_prime(fib_num) do
            n = n + 1
            fib_num = fib(n)
        end
        return fib_num
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xu7z83i.lua:13:
    attempt to call a nil value (global 'fib')\nstack traceback:\n\t/tmp/tmp6xu7z83i.lua:13:
    in local 'candidate'\n\t/tmp/tmp6xu7z83i.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        local t = i + j
        i = j
        j = t
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vv7ros1.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9vv7ros1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzi0pvip.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzzi0pvip.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 0
      local f = 0
      while i < n do
        f = fib(f)
        if is_prime(f) then
          i = i + 1
        end
      end
      return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnk3w7tpy.lua:16:
    attempt to call a nil value (global 'fib')\nstack traceback:\n\t/tmp/tmpnk3w7tpy.lua:16:
    in local 'candidate'\n\t/tmp/tmpnk3w7tpy.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci(n)
        while not is_prime(fib) do
            fib = fibonacci(n)
            n = n + 1
        end
        return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni_mxfhh.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpni_mxfhh.lua:13:
    in local 'candidate'\n\t/tmp/tmpni_mxfhh.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 2
      local k = 3
      local count = 2
      while count < n do
        i = j
        j = k
        k = i + j
        if is_prime(k) then
          count = count + 1
        end
      end
      return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9jhr1kk.lua:31:
    expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpf9jhr1kk.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yi639_t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_yi639_t.lua:19:
    in local 'candidate'\n\t/tmp/tmp_yi639_t.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci()
        local i = 1
        while i < n do
            local f = fib()
            if is_prime(f) then
                i = i + 1
            end
        end
        return fib()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpry9v8_zz.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpry9v8_zz.lua:13:
    in local 'candidate'\n\t/tmp/tmpry9v8_zz.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 0
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4etmz_w.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpx4etmz_w.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while n > 0 do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                n = n - 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatc8sbbb.lua:20:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpatc8sbbb.lua:20:
    in local 'candidate'\n\t/tmp/tmpatc8sbbb.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal f = 1\n\tlocal p = 1\n\twhile i < n do\n\t\tf = fib(p)\n\t\tif
    is_prime(f) then\n\t\t\ti = i + 1\n\t\tend\n\t\tp = p + 1\n\tend\n\treturn f\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n
    \   lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),
    5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n
    \   lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n
    \   lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n
    \   lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3t0cm1k.lua:29:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb3t0cm1k.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzi0pvip.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzzi0pvip.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i + j\n\t\tif
    is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),
    2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n
    \   lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n
    \   lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n
    \   lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n
    \   lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9xruzx_.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw9xruzx_.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci(n)
        while not is_prime(fib) do
            fib = fibonacci(n)
            n = n + 1
        end
        return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni_mxfhh.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpni_mxfhh.lua:13:
    in local 'candidate'\n\t/tmp/tmpni_mxfhh.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal count = 1\n\twhile count < n do\n\t\tk
    = i + j\n\t\tif is_prime(k) then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = j\n\t\tj
    = k\n\tend\n\treturn k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),
    3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n
    \   lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n
    \   lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n
    \   lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),
    433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjmmf662.lua:31:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyjmmf662.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local c = 0
        while c < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                c = c + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qex10vg.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9qex10vg.lua:21:
    in local 'candidate'\n\t/tmp/tmp9qex10vg.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib_n = fib(n)
        if is_prime(fib_n) then
            return fib_n
        else
            return prime_fib(n + 1)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7lmoh1ro.lua:13:
    attempt to call a nil value (global 'fib')\nstack traceback:\n\t/tmp/tmp7lmoh1ro.lua:13:
    in local 'candidate'\n\t/tmp/tmp7lmoh1ro.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local fib = 1
        while i < n do
            fib = fib + 1
            if is_prime(fib) and is_fib(fib) then
                i = i + 1
            end
        end
        return fib
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss41ei9v.lua:27:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpss41ei9v.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        i, j = j, i + j
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5etpjwn5.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5etpjwn5.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yi639_t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_yi639_t.lua:19:
    in local 'candidate'\n\t/tmp/tmp_yi639_t.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also
    prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n--
    5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\tlocal
    i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i + j\n\t\tif
    is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),
    2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3), 5)\n
    \   lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5), 89)\n
    \   lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7), 1597)\n
    \   lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9), 514229)\n
    \   lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9xruzx_.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw9xruzx_.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            k = i + j
            if is_prime(k) then
                count = count + 1
            end
            i = j
            j = k
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yi639_t.lua:19:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_yi639_t.lua:19:
    in local 'candidate'\n\t/tmp/tmp_yi639_t.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
        k = i + j
        i = j
        j = k
        if is_prime(k) then
          count = count + 1
        end
      end
      return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5xdmx55.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpd5xdmx55.lua:21:
    in local 'candidate'\n\t/tmp/tmpd5xdmx55.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
      local i = 1
      local j = 1
      local k = 1
      while k < n do
        local t = i + j
        i = j
        j = t
        if is_prime(j) then
          k = k + 1
        end
      end
      return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vv7ros1.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9vv7ros1.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local fib = fibonacci()
        local prime = prime_numbers()
        local i = 1
        local f, p = fib(), prime()
        while i < n do
            if f < p then
                f = fib()
            elseif f > p then
                p = prime()
            else
                i = i + 1
                f, p = fib(), prime()
            end
        end
        return f
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb6ttr0l_.lua:13:
    attempt to call a nil value (global 'fibonacci')\nstack traceback:\n\t/tmp/tmpb6ttr0l_.lua:13:
    in local 'candidate'\n\t/tmp/tmpb6ttr0l_.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            local t = i + j
            i = j
            j = t
            if is_prime(t) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiczwkvt5.lua:30:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiczwkvt5.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        local count = 0
        while count < n do
            if is_prime(i) then
                count = count + 1
            end
            if count == n then
                return i
            end
            k = i + j
            i = j
            j = k
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppcjmj0du.lua:18:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmppcjmj0du.lua:18:
    in local 'candidate'\n\t/tmp/tmppcjmj0du.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 1
        while k < n do
            i, j = j, i + j
            if is_prime(j) then
                k = k + 1
            end
        end
        return j
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gzh6wu.lua:28:
    expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg6gzh6wu.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    -- >>> prime_fib(1)
    -- 2
    -- >>> prime_fib(2)
    -- 3
    -- >>> prime_fib(3)
    -- 5
    -- >>> prime_fib(4)
    -- 13
    -- >>> prime_fib(5)
    -- 89
    local function prime_fib(n)
        local i = 1
        local j = 1
        local k = 0
        local count = 0
        while count < n do
            k = i + j
            i = j
            j = k
            if is_prime(k) then
                count = count + 1
            end
        end
        return k
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prime_fib
        lu.assertEquals(candidate(1), 2)
        lu.assertEquals(candidate(2), 3)
        lu.assertEquals(candidate(3), 5)
        lu.assertEquals(candidate(4), 13)
        lu.assertEquals(candidate(5), 89)
        lu.assertEquals(candidate(6), 233)
        lu.assertEquals(candidate(7), 1597)
        lu.assertEquals(candidate(8), 28657)
        lu.assertEquals(candidate(9), 514229)
        lu.assertEquals(candidate(10), 433494437)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82xa_eoj.lua:21:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp82xa_eoj.lua:21:
    in local 'candidate'\n\t/tmp/tmp82xa_eoj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
