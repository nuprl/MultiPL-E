---
name: HumanEval_12_longest
language: lua
prompt: |
  -- Out of table of strings, return the longest one. Return the first one in case of multiple
  -- strings of the same length. Return None in case the input table is empty.
  -- >>> longest({})
  -- None
  -- >>> longest({'a', 'b', 'c'})
  -- 'a'
  -- >>> longest({'a', 'bb', 'ccc'})
  -- 'ccc'
  local function longest(strings)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = longest
      lu.assertEquals(candidate({}), None)
      lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')
      lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, string in ipairs(strings) do
      local length = string.len(string)
      if length > longest_length then
        longest_length = length
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local max_len = 0
      local max_str = nil
      for _, str in ipairs(strings) do
          if #str > max_len then
              max_len = #str
              max_str = str
          end
      end
      return max_str
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, string in ipairs(strings) do
          if #string > #longest_string then
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
    local max_length = 0
    local max_string = nil
    for _, s in ipairs(strings) do
      if #s > max_length then
        max_length = #s
        max_string = s
      end
    end
    return max_string
  end
- |2-
    local longest_string = nil
    local longest_string_length = 0
    for _, string in ipairs(strings) do
      if string:len() > longest_string_length then
        longest_string = string
        longest_string_length = string:len()
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local max_len = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_len then
              max_len = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for i = 2, #strings do
      if #strings[i] > #longest_string then
        longest_string = strings[i]
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
      local longest = nil
      for _, s in ipairs(strings) do
          if not longest or #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, str in ipairs(strings) do
          if #str > longest_length then
              longest_string = str
              longest_length = #str
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    local max_length = 0
    local max_string = nil
    for _, s in ipairs(strings) do
      if #s > max_length then
        max_length = #s
        max_string = s
      end
    end
    return max_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest then
        longest = s
      end
    end
    return longest
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local max_len = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_len then
              max_len = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local max_len = 0
      local max_str = nil
      for _, str in ipairs(strings) do
          if #str > max_len then
              max_len = #str
              max_str = str
          end
      end
      return max_str
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for i = 2, #strings do
          if #strings[i] > #longest_string then
              longest_string = strings[i]
          end
      end
      return longest_string
  end
- |2-
      local max_len = 0
      local max_str = nil
      for _, str in ipairs(strings) do
          if str:len() > max_len then
              max_len = str:len()
              max_str = str
          end
      end
      return max_str
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
    local max_length = 0
    local max_string = nil
    for _, str in ipairs(strings) do
      if #str > max_length then
        max_length = #str
        max_string = str
      end
    end
    return max_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local max_length = 0
      local max_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              max_string = s
          end
      end
      return max_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local max_len = 0
      local max_str = nil
      for _, str in ipairs(strings) do
          if #str > max_len then
              max_len = #str
              max_str = str
          end
      end
      return max_str
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    local max_len = 0
    local max_string = nil
    for _, s in ipairs(strings) do
      if #s > max_len then
        max_len = #s
        max_string = s
      end
    end
    return max_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest then
        longest = s
      end
    end
    return longest
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
    local max_length = 0
    local max_string = nil
    for _, s in ipairs(strings) do
      if #s > max_length then
        max_length = #s
        max_string = s
      end
    end
    return max_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for i = 2, #strings do
          if #strings[i] > #longest_string then
              longest_string = strings[i]
          end
      end
      return longest_string
  end
- |2-
    local max_length = 0
    local longest_string = nil
    for _, s in ipairs(strings) do
      if #s > max_length then
        max_length = #s
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local max_length = 0
    local longest_string = nil
    for _, s in ipairs(strings) do
      if #s > max_length then
        max_length = #s
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for i = 2, #strings do
      if #strings[i] > #longest_string then
        longest_string = strings[i]
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local max_len = 0
      local max_str = nil
      for _, str in ipairs(strings) do
          if str:len() > max_len then
              max_len = str:len()
              max_str = str
          end
      end
      return max_str
  end
- |2-
      local max = 0
      local result = nil
      for _, s in ipairs(strings) do
          if #s > max then
              max = #s
              result = s
          end
      end
      return result
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, str in ipairs(strings) do
      if #str > longest_length then
        longest_string = str
        longest_length = #str
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    local max_length = 0
    local max_string = nil
    for _, s in ipairs(strings) do
      if s:len() > max_length then
        max_length = s:len()
        max_string = s
      end
    end
    return max_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for i = 2, #strings do
      if #strings[i] > #longest_string then
        longest_string = strings[i]
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, str in ipairs(strings) do
      if #str > #longest_string then
        longest_string = str
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    local max_len = 0
    local max_str = nil
    for _, str in ipairs(strings) do
      if #str > max_len then
        max_len = #str
        max_str = str
      end
    end
    return max_str
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for i = 2, #strings do
          if #strings[i] > #longest_string then
              longest_string = strings[i]
          end
      end
      return longest_string
  end
- |2-
      local longest = nil
      for _, s in ipairs(strings) do
          if longest == nil or #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, str in ipairs(strings) do
      if #str > #longest_string then
        longest_string = str
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, string in ipairs(strings) do
          if #string > #longest_string then
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for i = 2, #strings do
      if #strings[i] > #longest_string then
        longest_string = strings[i]
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for i = 2, #strings do
          if #strings[i] > #longest_string then
              longest_string = strings[i]
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, string in ipairs(strings) do
      local length = string.len(string)
      if length > longest_length then
        longest_length = length
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_len = 0
      local longest_str = nil
      for _, s in ipairs(strings) do
          if #s > longest_len then
              longest_len = #s
              longest_str = s
          end
      end
      return longest_str
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest then
        longest = s
      end
    end
    return longest
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, string in ipairs(strings) do
          if #string > #longest_string then
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      local max_length = 0
      local max_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              max_string = s
          end
      end
      return max_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if s:len() > longest_length then
              longest_string = s
              longest_length = s:len()
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_string_length = 0
    for _, s in ipairs(strings) do
      if s:len() > longest_string_length then
        longest_string = s
        longest_string_length = s:len()
      end
    end
    return longest_string
  end
- |2-
      local max_length = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for i = 2, #strings do
          if #strings[i] > #longest_string then
              longest_string = strings[i]
          end
      end
      return longest_string
  end
- |2-
    local max_length = 0
    local longest_string = nil
    for _, s in ipairs(strings) do
      if #s > max_length then
        max_length = #s
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local max_len = 0
      local max_str = nil
      for _, str in ipairs(strings) do
          if #str > max_len then
              max_len = #str
              max_str = str
          end
      end
      return max_str
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local max_len = 0
      local max_str = nil
      for _, str in ipairs(strings) do
          if #str > max_len then
              max_len = #str
              max_str = str
          end
      end
      return max_str
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if s:len() > longest_length then
        longest_string = s
        longest_length = s:len()
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_str = nil
      local longest_len = 0
      for _, str in ipairs(strings) do
          local len = #str
          if len > longest_len then
              longest_len = len
              longest_str = str
          end
      end
      return longest_str
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_string_length = 0
    for _, string in ipairs(strings) do
      if #string > longest_string_length then
        longest_string = string
        longest_string_length = #string
      end
    end
    return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    local max_len = 0
    local max_str = nil
    for _, s in ipairs(strings) do
      if #s > max_len then
        max_len = #s
        max_str = s
      end
    end
    return max_str
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    local max_len = 0
    local max_str = nil
    for _, str in ipairs(strings) do
      if #str > max_len then
        max_len = #str
        max_str = str
      end
    end
    return max_str
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local max_len = 0
      local max_str = nil
      for _, s in ipairs(strings) do
          if #s > max_len then
              max_len = #s
              max_str = s
          end
      end
      return max_str
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if s:len() > longest_length then
              longest_string = s
              longest_length = s:len()
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      local max_length = 0
      local max_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              max_string = s
          end
      end
      return max_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, string in ipairs(strings) do
      local length = string.len(string)
      if length > longest_length then
        longest_length = length
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string:len()
          if length > longest_length then
              longest_string = string
              longest_length = length
          end
      end
      return longest_string
  end
- |2-
    local max_len = 0
    local max_str = nil
    for _, str in ipairs(strings) do
      if str:len() > max_len then
        max_len = str:len()
        max_str = str
      end
    end
    return max_str
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    local max_length = 0
    local longest_string = nil
    for _, s in ipairs(strings) do
      if s:len() > max_length then
        max_length = s:len()
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    local max_len = 0
    local max_str = nil
    for _, str in ipairs(strings) do
      if #str > max_len then
        max_len = #str
        max_str = str
      end
    end
    return max_str
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      local longest_string = None
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local max_length = 0
    local longest_string = nil
    for _, str in ipairs(strings) do
      if #str > max_length then
        max_length = #str
        longest_string = str
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      local max_len = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_len then
              max_len = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if s:len() > longest_length then
              longest_string = s
              longest_length = s:len()
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local max_length = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, string in ipairs(strings) do
      local length = string.len(string)
      if length > longest_length then
        longest_length = length
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
    local longest_string = nil
    local longest_string_length = 0
    for _, string in ipairs(strings) do
      if string:len() > longest_string_length then
        longest_string = string
        longest_string_length = string:len()
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local max_len = 0
    local max_str = nil
    for _, str in ipairs(strings) do
      if #str > max_len then
        max_len = #str
        max_str = str
      end
    end
    return max_str
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, string in ipairs(strings) do
      local length = string.len(string)
      if length > longest_length then
        longest_length = length
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest then
              longest = s
          end
      end
      return longest
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for i = 2, #strings do
          if #strings[i] > #longest_string then
              longest_string = strings[i]
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if s:len() > longest_length then
        longest_string = s
        longest_length = s:len()
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local max_length = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest_string then
        longest_string = s
      end
    end
    return longest_string
  end
- |2-
    local max_length = 0
    local max_string = nil
    for _, s in ipairs(strings) do
      if #s > max_length then
        max_length = #s
        max_string = s
      end
    end
    return max_string
  end
- |2-
      local max_length = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest = strings[1]
    for _, s in ipairs(strings) do
      if #s > #longest then
        longest = s
      end
    end
    return longest
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, string in ipairs(strings) do
          if #string > #longest_string then
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local longest_string = strings[1]
    for _, string in ipairs(strings) do
      if #string > #longest_string then
        longest_string = string
      end
    end
    return longest_string
  end
- |2-
    local max_len = 0
    local max_str = nil
    for _, str in ipairs(strings) do
      if #str > max_len then
        max_len = #str
        max_str = str
      end
    end
    return max_str
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
    if #strings == 0 then
      return nil
    end
    local max_len = 0
    local max_str = nil
    for _, str in ipairs(strings) do
      if #str > max_len then
        max_len = #str
        max_str = str
      end
    end
    return max_str
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
      local longest = nil
      for _, str in ipairs(strings) do
          if longest == nil or #str > #longest then
              longest = str
          end
      end
      return longest
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, string in ipairs(strings) do
          local length = string.len(string)
          if length > longest_length then
              longest_length = length
              longest_string = string
          end
      end
      return longest_string
  end
- |2-
      local max_length = 0
      local longest_string = nil
      for _, s in ipairs(strings) do
          if #s > max_length then
              max_length = #s
              longest_string = s
          end
      end
      return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
    local longest_string = nil
    local longest_length = 0
    for _, s in ipairs(strings) do
      if #s > longest_length then
        longest_string = s
        longest_length = #s
      end
    end
    return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      local longest_string = nil
      local longest_length = 0
      for _, s in ipairs(strings) do
          if #s > longest_length then
              longest_string = s
              longest_length = #s
          end
      end
      return longest_string
  end
- |2-
      if #strings == 0 then
          return nil
      end
      local longest_string = strings[1]
      for _, s in ipairs(strings) do
          if #s > #longest_string then
              longest_string = s
          end
      end
      return longest_string
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
