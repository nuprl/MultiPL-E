name: HumanEval_57_monotonic
language: lua
prompt: "-- Return true is table elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local n = #l\n    if n < 2 then\n        return true\n    end\n\
    \    local inc = l[2] > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i\
    \ - 1]) then\n            return false\n        end\n    end\n    return true\n\
    end", "  local increasing = true\n  local decreasing = true\n  for i = 2, #l do\n\
    \    if l[i] < l[i - 1] then\n      increasing = false\n    elseif l[i] > l[i\
    \ - 1] then\n      decreasing = false\n    end\n  end\n  return increasing or\
    \ decreasing\nend", "    local increasing = true\n    local decreasing = true\n\
    \    for i = 2, #l do\n        if l[i] < l[i - 1] then\n            increasing\
    \ = false\n        elseif l[i] > l[i - 1] then\n            decreasing = false\n\
    \        end\n    end\n    return increasing or decreasing\nend", "    local n\
    \ = #l\n    if n < 2 then\n        return true\n    end\n    local inc = l[2]\
    \ > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  local direction\
    \ = 0\n  for i = 2, #l do\n    local diff = l[i] - l[i - 1]\n    if diff == 0\
    \ then\n      -- Do nothing\n    elseif diff > 0 then\n      if direction == -1\
    \ then\n        return false\n      else\n        direction = 1\n      end\n \
    \   elseif diff < 0 then\n      if direction == 1 then\n        return false\n\
    \      else\n        direction = -1\n      end\n    end\n  end\n  return true\n\
    end", "    local direction = 0\n    for i = 2, #l do\n        local d = l[i] -\
    \ l[i - 1]\n        if direction == 0 then\n            direction = d\n      \
    \  elseif direction * d < 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local direction = 0\n    for i = 2, #l do\n     \
    \   local diff = l[i] - l[i - 1]\n        if diff == 0 then\n            -- do\
    \ nothing\n        elseif diff > 0 then\n            if direction == 0 then\n\
    \                direction = 1\n            elseif direction == -1 then\n    \
    \            return false\n            end\n        elseif diff < 0 then\n   \
    \         if direction == 0 then\n                direction = -1\n           \
    \ elseif direction == 1 then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "    local inc = true\n    local\
    \ dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n        \
    \    inc = false\n        elseif l[i] > l[i - 1] then\n            dec = false\n\
    \        end\n    end\n    return inc or dec\nend", "  local inc = true\n  local\
    \ dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n\
    \    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "\tlocal inc = true\n\tlocal dec = true\n\tfor i = 2, #l do\n\t\
    \tif l[i] < l[i - 1] then\n\t\t\tinc = false\n\t\tend\n\t\tif l[i] > l[i - 1]\
    \ then\n\t\t\tdec = false\n\t\tend\n\tend\n\treturn inc or dec\nend", "    local\
    \ inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local n = #l\n    if n < 2 then\n        return true\n    end\n    local incr\
    \ = l[2] > l[1]\n    for i = 3, n do\n        if l[i] > l[i - 1] ~= incr then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n \
    \       if direction == nil then\n            direction = d\n        elseif direction\
    \ * d < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n    \
    \    if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i\
    \ - 1] then\n            dec = false\n        end\n    end\n    return inc or\
    \ dec\nend", "    local direction = 0\n    for i = 2, #l do\n        local d =\
    \ l[i] - l[i - 1]\n        if d == 0 then\n            -- ignore\n        elseif\
    \ direction == 0 then\n            direction = d\n        elseif direction * d\
    \ < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local direction = 0\n    for i = 2, #l do\n        local d = l[i] -\
    \ l[i - 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ last = l[1]\n    local increasing = true\n    for i = 2, #l do\n        if l[i]\
    \ < last then\n            increasing = false\n            break\n        end\n\
    \        last = l[i]\n    end\n    if increasing then\n        return true\n \
    \   end\n    last = l[1]\n    for i = 2, #l do\n        if l[i] > last then\n\
    \            return false\n        end\n        last = l[i]\n    end\n    return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i]\
    \ > l[i - 1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "    local increasing = true\n    local decreasing = true\n  \
    \  for i = 2, #l do\n        if l[i] < l[i - 1] then\n            increasing =\
    \ false\n        elseif l[i] > l[i - 1] then\n            decreasing = false\n\
    \        end\n    end\n    return increasing or decreasing\nend", "    local d\
    \ = l[2] - l[1]\n    for i = 2, #l - 1 do\n        if d * (l[i + 1] - l[i]) <\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "    local direction = nil\n    for i = 2, #l do\n        local diff = l[i] - l[i\
    \ - 1]\n        if diff == 0 then\n            return false\n        elseif direction\
    \ == nil then\n            direction = diff\n        elseif direction * diff <\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n\
    \      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "  local inc = true\n  local dec = true\n \
    \ for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n    elseif l[i]\
    \ > l[i-1] then\n      dec = false\n    end\n  end\n  return inc or dec\nend",
  "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend", "  local last = l[1]\n  local inc\
    \ = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < last then\n  \
    \    inc = false\n    elseif l[i] > last then\n      dec = false\n    end\n  \
    \  last = l[i]\n  end\n  return inc or dec\nend", "    local inc, dec = true,\
    \ true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc =\
    \ false\n        elseif l[i] > l[i-1] then\n            dec = false\n        end\n\
    \    end\n    return inc or dec\nend", "    local inc = l[1] < l[2]\n    for i\
    \ = 2, #l - 1 do\n        if inc and l[i] > l[i + 1] then\n            return\
    \ false\n        elseif not inc and l[i] < l[i + 1] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local inc = l[1] < l[2]\n \
    \   for i = 2, #l - 1 do\n        if inc and l[i] > l[i + 1] then\n          \
    \  return false\n        elseif not inc and l[i] < l[i + 1] then\n           \
    \ return false\n        end\n    end\n    return true\nend", "  local incr = l[1]\
    \ < l[2]\n  for i = 2, #l - 1 do\n    if incr and l[i] > l[i + 1] then return\
    \ false end\n    if not incr and l[i] < l[i + 1] then return false end\n  end\n\
    \  return true\nend", "    local direction = nil\n    for i = 2, #l do\n     \
    \   local d = l[i] - l[i - 1]\n        if direction == nil then\n            direction\
    \ = d\n        elseif direction * d < 0 then\n            return false\n     \
    \   end\n    end\n    return true\nend", "    local inc = true\n    local dec\
    \ = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n            inc\
    \ = false\n        elseif l[i] > l[i - 1] then\n            dec = false\n    \
    \    end\n    end\n    return inc or dec\nend", "    local direction = 0\n   \
    \ for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction ==\
    \ 0 then\n            direction = d\n        elseif direction * d < 0 then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n\
    \      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "    local n = #l\n    if n < 2 then\n    \
    \    return true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n\
    \        if l[i] == l[i - 1] then\n            return false\n        end\n   \
    \     if inc ~= (l[i] > l[i - 1]) then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local increasing = true\n    local decreasing\
    \ = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n            increasing\
    \ = false\n        elseif l[i] > l[i - 1] then\n            decreasing = false\n\
    \        end\n    end\n    return increasing or decreasing\nend", "    local inc\
    \ = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i -\
    \ 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n    \
    \        dec = false\n        end\n    end\n    return inc or dec\nend", "   \
    \ local inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i]\
    \ < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n\
    \            dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local last = l[1]\n    local increasing = true\n    for _, v in ipairs(l)\
    \ do\n        if v < last then\n            increasing = false\n            break\n\
    \        end\n        last = v\n    end\n    if increasing then\n        return\
    \ true\n    end\n    local last = l[1]\n    local decreasing = true\n    for _,\
    \ v in ipairs(l) do\n        if v > last then\n            decreasing = false\n\
    \            break\n        end\n        last = v\n    end\n    return decreasing\n\
    end", "    local prev = l[1]\n    local increasing = true\n    for i = 2, #l do\n\
    \        if l[i] < prev then\n            increasing = false\n            break\n\
    \        end\n        prev = l[i]\n    end\n    if increasing then\n        return\
    \ true\n    end\n    local prev = l[1]\n    local decreasing = true\n    for i\
    \ = 2, #l do\n        if l[i] > prev then\n            decreasing = false\n  \
    \          break\n        end\n        prev = l[i]\n    end\n    return decreasing\n\
    end", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n    \
    \    if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i\
    \ - 1] then\n            dec = false\n        end\n    end\n    return inc or\
    \ dec\nend", "    local m = l[1]\n    local d = l[2] - l[1]\n    for i = 2, #l\
    \ do\n        if (l[i] - m) * d < 0 then\n            return false\n        end\n\
    \        m = l[i]\n    end\n    return true\nend", "    local n = #l\n    if n\
    \ < 2 then\n        return true\n    end\n    local inc = l[2] > l[1]\n    for\
    \ i = 3, n do\n        if inc and l[i] < l[i - 1] then\n            return false\n\
    \        elseif not inc and l[i] > l[i - 1] then\n            return false\n \
    \       end\n    end\n    return true\nend", "    local n = #l\n    if n < 2 then\n\
    \        return true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n\
    \        if inc and l[i] < l[i - 1] then\n            return false\n        elseif\
    \ not inc and l[i] > l[i - 1] then\n            return false\n        end\n  \
    \  end\n    return true\nend", "    local direction = 0\n    for i = 2, #l do\n\
    \        local d = l[i] - l[i - 1]\n        if d == 0 then\n            return\
    \ false\n        elseif direction == 0 then\n            direction = d\n     \
    \   elseif direction * d < 0 then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local n = #l\n    if n < 2 then\n        return\
    \ true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n        if\
    \ inc ~= (l[i] > l[i - 1]) then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local direction = 0\n  for i = 2, #l do\n    local\
    \ d = l[i] - l[i - 1]\n    if direction == 0 then\n      direction = d\n    elseif\
    \ direction * d < 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec =\
    \ false\n    end\n  end\n  return inc or dec\nend", "    local inc = true\n  \
    \  local dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n \
    \           inc = false\n        elseif l[i] > l[i - 1] then\n            dec\
    \ = false\n        end\n    end\n    return inc or dec\nend", "    local inc =\
    \ true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1]\
    \ then\n            inc = false\n        elseif l[i] > l[i - 1] then\n       \
    \     dec = false\n        end\n    end\n    return inc or dec\nend", "  local\
    \ n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n  for i\
    \ = 3, n do\n    if inc and l[i] < l[i-1] then return false end\n    if not inc\
    \ and l[i] > l[i-1] then return false end\n  end\n  return true\nend", "    local\
    \ n = #l\n    if n < 2 then\n        return true\n    end\n    local inc = l[2]\
    \ > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  local is_increasing\
    \ = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if is_increasing then\n      if l[i]\
    \ > l[i + 1] then\n        return false\n      end\n    else\n      if l[i] <\
    \ l[i + 1] then\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "    local direction = nil\n    for i = 2, #l do\n        local d = l[i]\
    \ - l[i - 1]\n        if direction == nil then\n            direction = d\n  \
    \      elseif direction * d < 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local n = #l\n  if n == 0 then return true\
    \ end\n  local inc = l[1] <= l[2]\n  for i = 2, n-1 do\n    if inc and l[i] >\
    \ l[i+1] then return false end\n    if not inc and l[i] < l[i+1] then return false\
    \ end\n  end\n  return true\nend", "    local direction = nil\n    for i = 2,\
    \ #l do\n        local diff = l[i] - l[i - 1]\n        if direction == nil then\n\
    \            direction = diff\n        elseif direction * diff < 0 then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  local inc\
    \ = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n\
    \      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "  local prev = l[1]\n  local incr = true\n\
    \  local decr = true\n  for i = 2, #l do\n    local curr = l[i]\n    if curr <\
    \ prev then\n      incr = false\n    elseif curr > prev then\n      decr = false\n\
    \    end\n    prev = curr\n  end\n  return incr or decr\nend", "    local last\
    \ = l[1]\n    local increasing = true\n    for i = 2, #l do\n        if l[i] <\
    \ last then\n            increasing = false\n            break\n        end\n\
    \        last = l[i]\n    end\n    if increasing then\n        return true\n \
    \   end\n    last = l[1]\n    for i = 2, #l do\n        if l[i] > last then\n\
    \            return false\n        end\n        last = l[i]\n    end\n    return\
    \ true\nend", "    local direction = nil\n    for i = 2, #l do\n        local\
    \ d = l[i] - l[i - 1]\n        if direction == nil then\n            direction\
    \ = d\n        elseif direction * d < 0 then\n            return false\n     \
    \   end\n    end\n    return true\nend", "    local direction = nil\n    for i\
    \ = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction == nil then\n\
    \            direction = d\n        elseif direction * d < 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    local direction\
    \ = 0\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction\
    \ == 0 then\n            direction = d\n        elseif d * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n  for i\
    \ = 3, n do\n    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n  return\
    \ true\nend", "    local increasing = true\n    local decreasing = true\n    for\
    \ i = 2, #l do\n        if l[i] < l[i - 1] then\n            increasing = false\n\
    \        elseif l[i] > l[i - 1] then\n            decreasing = false\n       \
    \ end\n    end\n    return increasing or decreasing\nend", "    local inc = true\n\
    \    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n\
    \            inc = false\n        elseif l[i] > l[i - 1] then\n            dec\
    \ = false\n        end\n    end\n    return inc or dec\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then\n      inc\
    \ = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n    end\n  end\n\
    \  return inc or dec\nend", "    local inc = true\n    local dec = true\n    for\
    \ i = 2, #l do\n        if l[i] < l[i - 1] then\n            inc = false\n   \
    \     elseif l[i] > l[i - 1] then\n            dec = false\n        end\n    end\n\
    \    return inc or dec\nend", "  local inc = true\n  local dec = true\n  for i\
    \ = 2, #l do\n    if l[i] < l[i - 1] then\n      inc = false\n    elseif l[i]\
    \ > l[i - 1] then\n      dec = false\n    end\n  end\n  return inc or dec\nend",
  "    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i]\
    \ < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n\
    \            dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local n = #l\n    if n < 2 then\n        return true\n    end\n    local incr\
    \ = l[2] > l[1]\n    for i = 3, n do\n        if incr and l[i] < l[i - 1] then\n\
    \            return false\n        elseif not incr and l[i] > l[i - 1] then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ n = #l\n    if n < 2 then\n        return true\n    end\n    local inc = l[2]\
    \ > l[1]\n    for i = 3, n do\n        if inc and l[i] < l[i - 1] then\n     \
    \       return false\n        elseif not inc and l[i] > l[i - 1] then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  local last\
    \ = l[1]\n  local increasing = true\n  for _, v in ipairs(l) do\n    if increasing\
    \ then\n      if v < last then\n        increasing = false\n      end\n    else\n\
    \      if v > last then\n        return false\n      end\n    end\n    last =\
    \ v\n  end\n  return true\nend", "  local inc = true\n  local dec = true\n  for\
    \ i = 2, #l do\n    if l[i] < l[i - 1] then\n      inc = false\n    elseif l[i]\
    \ > l[i - 1] then\n      dec = false\n    end\n  end\n  return inc or dec\nend",
  "    local n = #l\n    if n < 2 then\n        return true\n    end\n    local inc\
    \ = l[2] > l[1]\n    for i = 3, n do\n        if l[i] == l[i - 1] then\n     \
    \       return false\n        end\n        if inc and l[i] < l[i - 1] then\n \
    \           return false\n        end\n        if not inc and l[i] > l[i - 1]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n    if\
    \ direction == 0 then\n      direction = d\n    elseif direction * d < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local direction\
    \ = 0\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if d ==\
    \ 0 then\n            -- ignore\n        elseif direction == 0 then\n        \
    \    direction = d\n        elseif direction * d < 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local n = #l\n    if\
    \ n < 2 then\n        return true\n    end\n    local inc = l[2] > l[1]\n    for\
    \ i = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local direction = nil\n   \
    \ for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction ==\
    \ nil then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then\n\
    \      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "    local inc = true\n    local dec = true\n\
    \    for i = 2, #l do\n        if l[i] < l[i - 1] then\n            inc = false\n\
    \        elseif l[i] > l[i - 1] then\n            dec = false\n        end\n \
    \   end\n    return inc or dec\nend", "  local n = #l\n  if n < 2 then return\
    \ true end\n  local inc = l[2] > l[1]\n  for i = 3, n do\n    if inc ~= (l[i]\
    \ > l[i-1]) then return false end\n  end\n  return true\nend", "  local direction\
    \ = l[2] - l[1]\n  for i = 2, #l - 1 do\n    if direction * (l[i + 1] - l[i])\
    \ < 0 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i - 1]) < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local inc = true\n\
    \    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n\
    \            inc = false\n        elseif l[i] > l[i - 1] then\n            dec\
    \ = false\n        end\n    end\n    return inc or dec\nend", "    local inc =\
    \ true\n    local dec = true\n    for i = 2, #l do\n        inc = inc and l[i]\
    \ >= l[i - 1]\n        dec = dec and l[i] <= l[i - 1]\n    end\n    return inc\
    \ or dec\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l\
    \ do\n        if l[i] < l[i - 1] then\n            inc = false\n        elseif\
    \ l[i] > l[i - 1] then\n            dec = false\n        end\n    end\n    return\
    \ inc or dec\nend", "  local direction = l[2] - l[1]\n  for i = 3, #l do\n   \
    \ if direction * (l[i] - l[i - 1]) < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local last = l[1]\n    local direction = 0\n    for\
    \ i = 2, #l do\n        local d = l[i] - last\n        if direction == 0 then\n\
    \            direction = d\n        elseif d * direction < 0 then\n          \
    \  return false\n        end\n        last = l[i]\n    end\n    return true\n\
    end", "    local increasing = true\n    local decreasing = true\n    for i = 2,\
    \ #l do\n        if l[i] < l[i - 1] then\n            increasing = false\n   \
    \     elseif l[i] > l[i - 1] then\n            decreasing = false\n        end\n\
    \    end\n    return increasing or decreasing\nend", "    local inc = true\n \
    \   local dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n\
    \            inc = false\n        elseif l[i] > l[i - 1] then\n            dec\
    \ = false\n        end\n    end\n    return inc or dec\nend", "  local n = #l\n\
    \  if n < 2 then return true end\n  local inc = l[2] > l[1]\n  for i = 3, n do\n\
    \    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n  return true\nend",
  "  local n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n  for\
    \ i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n  return\
    \ true\nend", "    local last = l[1]\n    local increasing = true\n    for i =\
    \ 2, #l do\n        if l[i] < last then\n            increasing = false\n    \
    \        break\n        end\n        last = l[i]\n    end\n    if increasing then\n\
    \        return true\n    end\n    local last = l[1]\n    local decreasing = true\n\
    \    for i = 2, #l do\n        if l[i] > last then\n            decreasing = false\n\
    \            break\n        end\n        last = l[i]\n    end\n    return decreasing\n\
    end", "    local last = l[1]\n    local increasing = true\n    for i = 2, #l do\n\
    \        if l[i] < last then\n            increasing = false\n            break\n\
    \        end\n        last = l[i]\n    end\n    if increasing then\n        return\
    \ true\n    end\n    local last = l[1]\n    local decreasing = true\n    for i\
    \ = 2, #l do\n        if l[i] > last then\n            decreasing = false\n  \
    \          break\n        end\n        last = l[i]\n    end\n    return decreasing\n\
    end", "    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if inc and\
    \ l[i] > l[i + 1] then\n            return false\n        elseif not inc and l[i]\
    \ < l[i + 1] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i]\
    \ > l[i - 1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "    local prev = l[1]\n    local increasing = true\n    for i\
    \ = 2, #l do\n        if l[i] < prev then\n            increasing = false\n  \
    \          break\n        end\n        prev = l[i]\n    end\n    if increasing\
    \ then\n        return true\n    end\n    local prev = l[1]\n    local decreasing\
    \ = true\n    for i = 2, #l do\n        if l[i] > prev then\n            decreasing\
    \ = false\n            break\n        end\n        prev = l[i]\n    end\n    return\
    \ decreasing\nend", "  local n = #l\n  if n < 2 then return true end\n  local\
    \ inc = l[2] > l[1]\n  for i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then return\
    \ false end\n  end\n  return true\nend", "  local inc = true\n  local dec = true\n\
    \  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n    elseif\
    \ l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc or dec\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec =\
    \ false\n    end\n  end\n  return inc or dec\nend", "\tlocal inc, dec = true,\
    \ true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i-1] then\n\t\t\tinc = false\n\t\t\
    elseif l[i] > l[i-1] then\n\t\t\tdec = false\n\t\tend\n\tend\n\treturn inc or\
    \ dec\nend", "    local last = l[1]\n    local increasing = true\n    for i =\
    \ 2, #l do\n        if l[i] < last then\n            increasing = false\n    \
    \        break\n        end\n        last = l[i]\n    end\n    if increasing then\n\
    \        return true\n    end\n    last = l[1]\n    for i = 2, #l do\n       \
    \ if l[i] > last then\n            return false\n        end\n        last = l[i]\n\
    \    end\n    return true\nend", "  local direction = 0\n  for i = 2, #l do\n\
    \    local d = l[i] - l[i - 1]\n    if d == 0 then\n      -- do nothing\n    elseif\
    \ direction == 0 then\n      direction = d\n    elseif direction * d < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc\
    \ = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n\
    \  return inc or dec\nend", "    local direction = nil\n    for i = 2, #l do\n\
    \        local d = l[i] - l[i - 1]\n        if direction == nil then\n       \
    \     direction = d\n        elseif d * direction < 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local direction = 0\n\
    \    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if d == 0 then\n\
    \            -- ignore\n        elseif direction == 0 then\n            direction\
    \ = d\n        elseif direction * d < 0 then\n            return false\n     \
    \   end\n    end\n    return true\nend", "    local prev = l[1]\n    local direction\
    \ = nil\n    for i = 2, #l do\n        local cur = l[i]\n        if direction\
    \ == nil then\n            if cur > prev then\n                direction = 1\n\
    \            elseif cur < prev then\n                direction = -1\n        \
    \    end\n        elseif cur - prev ~= direction then\n            return false\n\
    \        end\n        prev = cur\n    end\n    return true\nend", "    local n\
    \ = #l\n    if n < 2 then\n        return true\n    end\n    local inc = l[2]\
    \ > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "    local\
    \ inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \ local n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n \
    \ for i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n\
    \  return true\nend", "  local increasing = true\n  local decreasing = true\n\
    \  for i = 2, #l do\n    if l[i] < l[i - 1] then\n      increasing = false\n \
    \   elseif l[i] > l[i - 1] then\n      decreasing = false\n    end\n  end\n  return\
    \ increasing or decreasing\nend", "  local direction = 0\n  for i = 2, #l do\n\
    \    local d = l[i] - l[i - 1]\n    if direction == 0 then\n      direction =\
    \ d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n \
    \ return true\nend", "    local last = l[1]\n    local increasing = true\n   \
    \ for i = 2, #l do\n        if l[i] < last then\n            increasing = false\n\
    \            break\n        end\n        last = l[i]\n    end\n    if increasing\
    \ then\n        return true\n    end\n    last = l[1]\n    for i = 2, #l do\n\
    \        if l[i] > last then\n            return false\n        end\n        last\
    \ = l[i]\n    end\n    return true\nend", "  local direction = l[2] - l[1]\n \
    \ for i = 3, #l do\n    if direction * (l[i] - l[i - 1]) < 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local direction = 0\n    for\
    \ i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction == 0 then\n\
    \            direction = d\n        elseif d * direction < 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    inc = inc and l[i] >= l[i - 1]\n\
    \    dec = dec and l[i] <= l[i - 1]\n  end\n  return inc or dec\nend", "    local\
    \ direction = nil\n    for i = 2, #l do\n        local diff = l[i] - l[i - 1]\n\
    \        if direction == nil then\n            direction = diff\n        elseif\
    \ direction * diff < 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local m = l[1]\n    local n = l[2]\n    local inc\
    \ = n > m\n    for i = 3, #l do\n        if inc then\n            if l[i] < n\
    \ then\n                return false\n            end\n        else\n        \
    \    if l[i] > n then\n                return false\n            end\n       \
    \ end\n        n = l[i]\n    end\n    return true\nend", "    local direction\
    \ = nil\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction\
    \ == nil then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n    if direction\
    \ == 0 then\n      direction = d\n    elseif direction * d < 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local n = #l\n  if n < 2 then\
    \ return true end\n  local inc = l[2] > l[1]\n  for i = 3, n do\n    if inc ~=\
    \ (l[i] > l[i-1]) then return false end\n  end\n  return true\nend", "  local\
    \ n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n  for i\
    \ = 3, n do\n    if l[i] > l[i-1] ~= inc then return false end\n  end\n  return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i]\
    \ > l[i - 1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "    if #l < 2 then\n        return true\n    end\n    local inc\
    \ = l[2] > l[1]\n    for i = 3, #l do\n        if l[i] > l[i - 1] ~= inc then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n   \
    \     if direction == 0 then\n            direction = d\n        elseif direction\
    \ * d < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i -\
    \ 1]\n    if direction == nil then\n      direction = d\n    elseif direction\
    \ * d < 0 then\n      return false\n    end\n  end\n  return true\nend", "   \
    \ local n = #l\n    if n < 2 then\n        return true\n    end\n    local inc\
    \ = l[2] > l[1]\n    for i = 3, n do\n        if inc and l[i] < l[i - 1] then\n\
    \            return false\n        elseif not inc and l[i] > l[i - 1] then\n \
    \           return false\n        end\n    end\n    return true\nend", "    local\
    \ inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend", "  local increasing = l[1] < l[2]\n  for i = 2, #l - 1 do\n\
    \    if increasing and l[i] > l[i + 1] then\n      return false\n    elseif not\
    \ increasing and l[i] < l[i + 1] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local inc = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if l[i]\
    \ < l[i + 1] ~= inc then\n      return false\n    end\n  end\n  return true\n\
    end", "  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if d == 0 then\n      -- do nothing\n    elseif direction == 0 then\n   \
    \   direction = d\n    elseif direction * d < 0 then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  local direction = nil\n  for i = 2, #l do\n\
    \    local d = l[i] - l[i - 1]\n    if direction == nil then\n      direction\
    \ = d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local prev = l[1]\n  local inc = nil\n  for i = 2, #l\
    \ do\n    if l[i] ~= prev then\n      if inc == nil then\n        inc = l[i] >\
    \ prev\n      elseif inc ~= (l[i] > prev) then\n        return false\n      end\n\
    \    end\n    prev = l[i]\n  end\n  return true\nend", "    local inc = l[1] <\
    \ l[2]\n    for i = 2, #l - 1 do\n        if inc and l[i] > l[i + 1] then\n  \
    \          return false\n        elseif not inc and l[i] < l[i + 1] then\n   \
    \         return false\n        end\n    end\n    return true\nend", "  local\
    \ inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then\n\
    \      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "    local direction = 0\n    for i = 2, #l\
    \ do\n        local d = l[i] - l[i - 1]\n        if d == 0 then\n            --\
    \ ignore\n        elseif direction == 0 then\n            direction = d\n    \
    \    elseif d * direction < 0 then\n            return false\n        end\n  \
    \  end\n    return true\nend", "    local direction = 0\n    for i = 2, #l do\n\
    \        local d = l[i] - l[i - 1]\n        if d == 0 then\n            -- ignore\n\
    \        elseif direction == 0 then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local direction = 0\n    for i = 2, #l do\n        local\
    \ delta = l[i] - l[i - 1]\n        if delta == 0 then\n            -- do nothing\n\
    \        elseif direction == 0 then\n            direction = delta\n        elseif\
    \ direction * delta < 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local inc = l[1] < l[2]\n  for i = 2, #l - 1 do\n \
    \   if inc and l[i] > l[i + 1] then return false end\n    if not inc and l[i]\
    \ < l[i + 1] then return false end\n  end\n  return true\nend", "    local direction\
    \ = 0\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if d ==\
    \ 0 then\n            -- do nothing\n        elseif direction == 0 then\n    \
    \        direction = d\n        elseif d * direction < 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local direction = nil\n\
    \    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction\
    \ == nil then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend", "\t\
    local direction = 0\n\tfor i = 2, #l do\n\t\tlocal d = l[i] - l[i - 1]\n\t\tif\
    \ direction == 0 then\n\t\t\tdirection = d\n\t\telseif direction * d < 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local inc = true\n\
    \    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n\
    \            inc = false\n        elseif l[i] > l[i - 1] then\n            dec\
    \ = false\n        end\n    end\n    return inc or dec\nend", "    local prev\
    \ = l[1]\n    local increasing = true\n    local decreasing = true\n    for i\
    \ = 2, #l do\n        if l[i] > prev then\n            decreasing = false\n  \
    \      elseif l[i] < prev then\n            increasing = false\n        end\n\
    \        prev = l[i]\n    end\n    return increasing or decreasing\nend", "  \
    \  local direction = nil\n    for i = 2, #l do\n        local diff = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = diff\n     \
    \   elseif direction * diff < 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local direction = 0\n    for i = 2, #l do\n\
    \        local d = l[i] - l[i - 1]\n        if d == 0 then\n            -- do\
    \ nothing\n        elseif direction == 0 then\n            direction = d\n   \
    \     elseif direction * d < 0 then\n            return false\n        end\n \
    \   end\n    return true\nend", "    local n = #l\n    if n < 2 then\n       \
    \ return true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n   \
    \     if inc ~= (l[i] > l[i - 1]) then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local increasing = true\n  local decreasing\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then\n      increasing =\
    \ false\n    elseif l[i] > l[i - 1] then\n      decreasing = false\n    end\n\
    \  end\n  return increasing or decreasing\nend", "    local n = #l\n    if n <\
    \ 2 then\n        return true\n    end\n    local inc = l[2] > l[1]\n    for i\
    \ = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local prev = l[1]\n    local\
    \ direction = nil\n    for i = 2, #l do\n        local cur = l[i]\n        if\
    \ direction == nil then\n            if cur > prev then\n                direction\
    \ = 1\n            elseif cur < prev then\n                direction = -1\n  \
    \          end\n        elseif direction == 1 and cur < prev then\n          \
    \  return false\n        elseif direction == -1 and cur > prev then\n        \
    \    return false\n        end\n        prev = cur\n    end\n    return true\n\
    end", "    local last = l[1]\n    local increasing = true\n    for i = 2, #l do\n\
    \        if l[i] < last then\n            increasing = false\n            break\n\
    \        end\n        last = l[i]\n    end\n    if increasing then\n        return\
    \ true\n    end\n    last = l[1]\n    for i = 2, #l do\n        if l[i] > last\
    \ then\n            return false\n        end\n        last = l[i]\n    end\n\
    \    return true\nend", "  local direction = 0\n  for i = 2, #l do\n    local\
    \ d = l[i] - l[i - 1]\n    if direction == 0 then\n      direction = d\n    elseif\
    \ d * direction < 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    local last = l[1]\n    local inc = true\n    local dec = true\n   \
    \ for i = 2, #l do\n        if l[i] < last then\n            inc = false\n   \
    \     elseif l[i] > last then\n            dec = false\n        end\n        last\
    \ = l[i]\n    end\n    return inc or dec\nend", "    local inc = l[1] < l[2]\n\
    \    for i = 2, #l - 1 do\n        if l[i] < l[i + 1] ~= inc then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    local n = #l\n\
    \    if n < 2 then\n        return true\n    end\n    local inc = l[2] > l[1]\n\
    \    for i = 3, n do\n        if inc and l[i] < l[i - 1] then\n            return\
    \ false\n        elseif not inc and l[i] > l[i - 1] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local inc = true\n    local\
    \ dec = true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n        \
    \    inc = false\n        elseif l[i] > l[i - 1] then\n            dec = false\n\
    \        end\n    end\n    return inc or dec\nend", "    local direction = 0\n\
    \    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if d ~= 0 then\n\
    \            if direction == 0 then\n                direction = d\n         \
    \   elseif direction * d < 0 then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "  local n = #l\n  if n < 2 then\
    \ return true end\n  local inc = l[2] > l[1]\n  for i = 3, n do\n    if inc ~=\
    \ (l[i] > l[i-1]) then return false end\n  end\n  return true\nend", "    local\
    \ direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n   \
    \     if d == 0 then\n            -- ignore\n        elseif direction == 0 then\n\
    \            direction = d\n        elseif d * direction < 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  local n = #l\n\
    \  if n < 2 then return true end\n  local inc = l[2] > l[1]\n  for i = 3, n do\n\
    \    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n  return true\nend",
  "  local inc = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if l[i] < l[i + 1] ~= inc\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    local direction\
    \ = 0\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if d ==\
    \ 0 then\n            return false\n        elseif direction == 0 then\n     \
    \       direction = d\n        elseif direction * d < 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local last = l[1]\n \
    \ local increasing = true\n  for i = 2, #l do\n    if l[i] < last then\n     \
    \ increasing = false\n      break\n    end\n    last = l[i]\n  end\n  if increasing\
    \ then return true end\n  last = l[1]\n  for i = 2, #l do\n    if l[i] > last\
    \ then\n      return false\n    end\n    last = l[i]\n  end\n  return true\nend",
  "  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n  \
    \  if direction == nil then\n      direction = d\n    elseif direction * d < 0\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    local inc\
    \ = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i -\
    \ 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n    \
    \        dec = false\n        end\n    end\n    return inc or dec\nend", "   \
    \ local inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i]\
    \ < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n\
    \            dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i]\
    \ > l[i - 1] then\n            dec = false\n        elseif l[i] < l[i - 1] then\n\
    \            inc = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i]\
    \ < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n\
    \            dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend", "    local n = #l\n    if n < 2 then\n\
    \        return true\n    end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n\
    \        if l[i] > l[i - 1] ~= inc then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local inc = true\n  local dec = true\n  for\
    \ i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n    elseif l[i]\
    \ > l[i-1] then\n      dec = false\n    end\n  end\n  return inc or dec\nend",
  "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i -\
    \ 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend", "    local direction = 0\n    for\
    \ i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if d == 0 then\n  \
    \          return false\n        elseif direction == 0 then\n            direction\
    \ = d\n        elseif d * direction < 0 then\n            return false\n     \
    \   end\n    end\n    return true\nend", "  local inc = true\n  local dec = true\n\
    \  for i = 2, #l do\n    if l[i] < l[i - 1] then\n      inc = false\n    elseif\
    \ l[i] > l[i - 1] then\n      dec = false\n    end\n  end\n  return inc or dec\n\
    end", "    local direction = 0\n    for i = 2, #l do\n        local d = l[i] -\
    \ l[i - 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ last = l[1]\n  local increasing = true\n  for i = 2, #l do\n    if l[i] < last\
    \ then\n      increasing = false\n      break\n    end\n    last = l[i]\n  end\n\
    \  if increasing then return true end\n  last = l[1]\n  for i = 2, #l do\n   \
    \ if l[i] > last then\n      return false\n    end\n    last = l[i]\n  end\n \
    \ return true\nend", "    local inc = true\n    local dec = true\n    for i =\
    \ 2, #l do\n        inc = inc and l[i] >= l[i - 1]\n        dec = dec and l[i]\
    \ <= l[i - 1]\n    end\n    return inc or dec\nend", "  local n = #l\n  local\
    \ inc = l[1] < l[2]\n  for i = 2, n-1 do\n    if inc and l[i] > l[i+1] then return\
    \ false end\n    if not inc and l[i] < l[i+1] then return false end\n  end\n \
    \ return true\nend", "    local direction = 0\n    for i = 2, #l do\n        local\
    \ d = l[i] - l[i - 1]\n        if d == 0 then\n            return false\n    \
    \    elseif direction == 0 then\n            direction = d\n        elseif direction\
    \ * d < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local direction = 0\n    for i = 2, #l do\n        local d = l[i] -\
    \ l[i - 1]\n        if direction == 0 then\n            direction = d\n      \
    \  elseif direction * d < 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local inc = true\n  local dec = true\n  for i = 2,\
    \ #l do\n    if l[i] < l[i - 1] then\n      inc = false\n    elseif l[i] > l[i\
    \ - 1] then\n      dec = false\n    end\n  end\n  return inc or dec\nend", " \
    \ local last = l[1]\n  local increasing = true\n  for i = 2, #l do\n    if l[i]\
    \ < last then\n      increasing = false\n      break\n    end\n    last = l[i]\n\
    \  end\n  if increasing then return true end\n  last = l[1]\n  for i = 2, #l do\n\
    \    if l[i] > last then\n      return false\n    end\n    last = l[i]\n  end\n\
    \  return true\nend", "  local direction = 0\n  for i = 2, #l do\n    local d\
    \ = l[i] - l[i - 1]\n    if d == 0 then\n      -- no change\n    elseif direction\
    \ == 0 then\n      direction = d\n    elseif direction * d < 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local inc, dec = true, true\n\
    \    for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc = false\n\
    \        elseif l[i] > l[i-1] then\n            dec = false\n        end\n   \
    \ end\n    return inc or dec\nend", "  local direction = 0\n  for i = 2, #l do\n\
    \    local d = l[i] - l[i - 1]\n    if direction == 0 then\n      direction =\
    \ d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n \
    \ return true\nend", "    local prev = l[1]\n    local inc = true\n    local dec\
    \ = true\n    for i = 2, #l do\n        if l[i] > prev then\n            dec =\
    \ false\n        elseif l[i] < prev then\n            inc = false\n        end\n\
    \        if not inc and not dec then\n            return false\n        end\n\
    \        prev = l[i]\n    end\n    return true\nend", "  local inc = l[1] < l[2]\n\
    \  for i = 2, #l - 1 do\n    if l[i] < l[i + 1] ~= inc then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local inc = true\n    local dec = true\n\
    \    for i = 2, #l do\n        if l[i] < l[i - 1] then\n            inc = false\n\
    \        elseif l[i] > l[i - 1] then\n            dec = false\n        end\n \
    \   end\n    return inc or dec\nend", "  local inc = true\n  local dec = true\n\
    \  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n    elseif\
    \ l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc or dec\n\
    end", "    local inc = nil\n    for i = 2, #l do\n        if l[i] ~= l[i-1] then\n\
    \            if inc == nil then\n                inc = l[i] > l[i-1]\n       \
    \     elseif inc ~= (l[i] > l[i-1]) then\n                return false\n     \
    \       end\n        end\n    end\n    return true\nend", "    local direction\
    \ = nil\n    for i = 2, #l do\n        local d = l[i] - l[i - 1]\n        if direction\
    \ == nil then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \   local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            return false\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ direction = l[2] - l[1]\n    for i = 2, #l - 1 do\n        if direction * (l[i\
    \ + 1] - l[i]) < 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            inc = false\n        elseif l[i]\
    \ > l[i - 1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "  local direction = nil\n  for i = 2, #l do\n    local d = l[i]\
    \ - l[i - 1]\n    if direction == nil then\n      direction = d\n    elseif d\
    \ * direction < 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    local n = #l\n    if n < 2 then\n        return true\n    end\n    local inc\
    \ = l[2] > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ n = #l\n    if n < 2 then\n        return true\n    end\n    local inc = l[2]\
    \ > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i - 1]) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "    local\
    \ inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
