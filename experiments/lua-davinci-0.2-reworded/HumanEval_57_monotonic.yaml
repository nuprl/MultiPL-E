---
name: HumanEval_57_monotonic
language: lua
prompt: |
  -- Return true is table elements are monotonically increasing or decreasing.
  -- >>> monotonic({1, 2, 4, 20})
  -- true
  -- >>> monotonic({1, 20, 4, 10})
  -- false
  -- >>> monotonic({4, 1, 0, -10})
  -- true
  local function monotonic(l)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = monotonic
      lu.assertEquals(candidate({1, 2, 4, 10}), true)
      lu.assertEquals(candidate({1, 2, 4, 20}), true)
      lu.assertEquals(candidate({1, 20, 4, 10}), false)
      lu.assertEquals(candidate({4, 1, 0, -10}), true)
      lu.assertEquals(candidate({4, 1, 1, 0}), true)
      lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)
      lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)
      lu.assertEquals(candidate({9, 9, 9, 9}), true)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
    local increasing = true
    local decreasing = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        increasing = false
      elseif l[i] > l[i - 1] then
        decreasing = false
      end
    end
    return increasing or decreasing
  end
- |2-
      local increasing = true
      local decreasing = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              increasing = false
          elseif l[i] > l[i - 1] then
              decreasing = false
          end
      end
      return increasing or decreasing
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local diff = l[i] - l[i - 1]
      if diff == 0 then
        -- Do nothing
      elseif diff > 0 then
        if direction == -1 then
          return false
        else
          direction = 1
        end
      elseif diff < 0 then
        if direction == 1 then
          return false
        else
          direction = -1
        end
      end
    end
    return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local diff = l[i] - l[i - 1]
          if diff == 0 then
              -- do nothing
          elseif diff > 0 then
              if direction == 0 then
                  direction = 1
              elseif direction == -1 then
                  return false
              end
          elseif diff < 0 then
              if direction == 0 then
                  direction = -1
              elseif direction == 1 then
                  return false
              end
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- "\tlocal inc = true\n\tlocal dec = true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i -
  1] then\n\t\t\tinc = false\n\t\tend\n\t\tif l[i] > l[i - 1] then\n\t\t\tdec = false\n\t\tend\n\tend\n\treturn
  inc or dec\nend"
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local incr = l[2] > l[1]
      for i = 3, n do
          if l[i] > l[i - 1] ~= incr then
              return false
          end
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local last = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < last then
              increasing = false
              break
          end
          last = l[i]
      end
      if increasing then
          return true
      end
      last = l[1]
      for i = 2, #l do
          if l[i] > last then
              return false
          end
          last = l[i]
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local increasing = true
      local decreasing = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              increasing = false
          elseif l[i] > l[i - 1] then
              decreasing = false
          end
      end
      return increasing or decreasing
  end
- |2-
      local d = l[2] - l[1]
      for i = 2, #l - 1 do
          if d * (l[i + 1] - l[i]) < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local diff = l[i] - l[i - 1]
          if diff == 0 then
              return false
          elseif direction == nil then
              direction = diff
          elseif direction * diff < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc, dec = true, true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
    local last = l[1]
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < last then
        inc = false
      elseif l[i] > last then
        dec = false
      end
      last = l[i]
    end
    return inc or dec
  end
- |2-
      local inc, dec = true, true
      for i = 2, #l do
          if l[i] < l[i-1] then
              inc = false
          elseif l[i] > l[i-1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local inc = l[1] < l[2]
      for i = 2, #l - 1 do
          if inc and l[i] > l[i + 1] then
              return false
          elseif not inc and l[i] < l[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
      local inc = l[1] < l[2]
      for i = 2, #l - 1 do
          if inc and l[i] > l[i + 1] then
              return false
          elseif not inc and l[i] < l[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    local incr = l[1] < l[2]
    for i = 2, #l - 1 do
      if incr and l[i] > l[i + 1] then return false end
      if not incr and l[i] < l[i + 1] then return false end
    end
    return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if l[i] == l[i - 1] then
              return false
          end
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
      local increasing = true
      local decreasing = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              increasing = false
          elseif l[i] > l[i - 1] then
              decreasing = false
          end
      end
      return increasing or decreasing
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local last = l[1]
      local increasing = true
      for _, v in ipairs(l) do
          if v < last then
              increasing = false
              break
          end
          last = v
      end
      if increasing then
          return true
      end
      local last = l[1]
      local decreasing = true
      for _, v in ipairs(l) do
          if v > last then
              decreasing = false
              break
          end
          last = v
      end
      return decreasing
  end
- |2-
      local prev = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < prev then
              increasing = false
              break
          end
          prev = l[i]
      end
      if increasing then
          return true
      end
      local prev = l[1]
      local decreasing = true
      for i = 2, #l do
          if l[i] > prev then
              decreasing = false
              break
          end
          prev = l[i]
      end
      return decreasing
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local m = l[1]
      local d = l[2] - l[1]
      for i = 2, #l do
          if (l[i] - m) * d < 0 then
              return false
          end
          m = l[i]
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc and l[i] < l[i - 1] then
              return false
          elseif not inc and l[i] > l[i - 1] then
              return false
          end
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc and l[i] < l[i - 1] then
              return false
          elseif not inc and l[i] > l[i - 1] then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              return false
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc and l[i] < l[i-1] then return false end
      if not inc and l[i] > l[i-1] then return false end
    end
    return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
    local is_increasing = l[1] < l[2]
    for i = 2, #l - 1 do
      if is_increasing then
        if l[i] > l[i + 1] then
          return false
        end
      else
        if l[i] < l[i + 1] then
          return false
        end
      end
    end
    return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local n = #l
    if n == 0 then return true end
    local inc = l[1] <= l[2]
    for i = 2, n-1 do
      if inc and l[i] > l[i+1] then return false end
      if not inc and l[i] < l[i+1] then return false end
    end
    return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local diff = l[i] - l[i - 1]
          if direction == nil then
              direction = diff
          elseif direction * diff < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
    local prev = l[1]
    local incr = true
    local decr = true
    for i = 2, #l do
      local curr = l[i]
      if curr < prev then
        incr = false
      elseif curr > prev then
        decr = false
      end
      prev = curr
    end
    return incr or decr
  end
- |2-
      local last = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < last then
              increasing = false
              break
          end
          last = l[i]
      end
      if increasing then
          return true
      end
      last = l[1]
      for i = 2, #l do
          if l[i] > last then
              return false
          end
          last = l[i]
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == 0 then
              direction = d
          elseif d * direction < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
      local increasing = true
      local decreasing = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              increasing = false
          elseif l[i] > l[i - 1] then
              decreasing = false
          end
      end
      return increasing or decreasing
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local incr = l[2] > l[1]
      for i = 3, n do
          if incr and l[i] < l[i - 1] then
              return false
          elseif not incr and l[i] > l[i - 1] then
              return false
          end
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc and l[i] < l[i - 1] then
              return false
          elseif not inc and l[i] > l[i - 1] then
              return false
          end
      end
      return true
  end
- |2-
    local last = l[1]
    local increasing = true
    for _, v in ipairs(l) do
      if increasing then
        if v < last then
          increasing = false
        end
      else
        if v > last then
          return false
        end
      end
      last = v
    end
    return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if l[i] == l[i - 1] then
              return false
          end
          if inc and l[i] < l[i - 1] then
              return false
          end
          if not inc and l[i] > l[i - 1] then
              return false
          end
      end
      return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
    local direction = l[2] - l[1]
    for i = 2, #l - 1 do
      if direction * (l[i + 1] - l[i]) < 0 then
        return false
      end
    end
    return true
  end
- |2-
    local d = l[2] - l[1]
    for i = 3, #l do
      if d * (l[i] - l[i - 1]) < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          inc = inc and l[i] >= l[i - 1]
          dec = dec and l[i] <= l[i - 1]
      end
      return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local direction = l[2] - l[1]
    for i = 3, #l do
      if direction * (l[i] - l[i - 1]) < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local last = l[1]
      local direction = 0
      for i = 2, #l do
          local d = l[i] - last
          if direction == 0 then
              direction = d
          elseif d * direction < 0 then
              return false
          end
          last = l[i]
      end
      return true
  end
- |2-
      local increasing = true
      local decreasing = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              increasing = false
          elseif l[i] > l[i - 1] then
              decreasing = false
          end
      end
      return increasing or decreasing
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
      local last = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < last then
              increasing = false
              break
          end
          last = l[i]
      end
      if increasing then
          return true
      end
      local last = l[1]
      local decreasing = true
      for i = 2, #l do
          if l[i] > last then
              decreasing = false
              break
          end
          last = l[i]
      end
      return decreasing
  end
- |2-
      local last = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < last then
              increasing = false
              break
          end
          last = l[i]
      end
      if increasing then
          return true
      end
      local last = l[1]
      local decreasing = true
      for i = 2, #l do
          if l[i] > last then
              decreasing = false
              break
          end
          last = l[i]
      end
      return decreasing
  end
- |2-
      local inc = l[1] < l[2]
      for i = 2, #l - 1 do
          if inc and l[i] > l[i + 1] then
              return false
          elseif not inc and l[i] < l[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local prev = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < prev then
              increasing = false
              break
          end
          prev = l[i]
      end
      if increasing then
          return true
      end
      local prev = l[1]
      local decreasing = true
      for i = 2, #l do
          if l[i] > prev then
              decreasing = false
              break
          end
          prev = l[i]
      end
      return decreasing
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- "\tlocal inc, dec = true, true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i-1] then\n\t\t\tinc
  = false\n\t\telseif l[i] > l[i-1] then\n\t\t\tdec = false\n\t\tend\n\tend\n\treturn
  inc or dec\nend"
- |2-
      local last = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < last then
              increasing = false
              break
          end
          last = l[i]
      end
      if increasing then
          return true
      end
      last = l[1]
      for i = 2, #l do
          if l[i] > last then
              return false
          end
          last = l[i]
      end
      return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if d == 0 then
        -- do nothing
      elseif direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif d * direction < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local prev = l[1]
      local direction = nil
      for i = 2, #l do
          local cur = l[i]
          if direction == nil then
              if cur > prev then
                  direction = 1
              elseif cur < prev then
                  direction = -1
              end
          elseif cur - prev ~= direction then
              return false
          end
          prev = cur
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
    local increasing = true
    local decreasing = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        increasing = false
      elseif l[i] > l[i - 1] then
        decreasing = false
      end
    end
    return increasing or decreasing
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local last = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < last then
              increasing = false
              break
          end
          last = l[i]
      end
      if increasing then
          return true
      end
      last = l[1]
      for i = 2, #l do
          if l[i] > last then
              return false
          end
          last = l[i]
      end
      return true
  end
- |2-
    local direction = l[2] - l[1]
    for i = 3, #l do
      if direction * (l[i] - l[i - 1]) < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == 0 then
              direction = d
          elseif d * direction < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      inc = inc and l[i] >= l[i - 1]
      dec = dec and l[i] <= l[i - 1]
    end
    return inc or dec
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local diff = l[i] - l[i - 1]
          if direction == nil then
              direction = diff
          elseif direction * diff < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local m = l[1]
      local n = l[2]
      local inc = n > m
      for i = 3, #l do
          if inc then
              if l[i] < n then
                  return false
              end
          else
              if l[i] > n then
                  return false
              end
          end
          n = l[i]
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if l[i] > l[i-1] ~= inc then return false end
    end
    return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      if #l < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, #l do
          if l[i] > l[i - 1] ~= inc then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local direction = nil
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == nil then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc and l[i] < l[i - 1] then
              return false
          elseif not inc and l[i] > l[i - 1] then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local increasing = l[1] < l[2]
    for i = 2, #l - 1 do
      if increasing and l[i] > l[i + 1] then
        return false
      elseif not increasing and l[i] < l[i + 1] then
        return false
      end
    end
    return true
  end
- |2-
    local inc = l[1] < l[2]
    for i = 2, #l - 1 do
      if l[i] < l[i + 1] ~= inc then
        return false
      end
    end
    return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if d == 0 then
        -- do nothing
      elseif direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
    local direction = nil
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == nil then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
    local prev = l[1]
    local inc = nil
    for i = 2, #l do
      if l[i] ~= prev then
        if inc == nil then
          inc = l[i] > prev
        elseif inc ~= (l[i] > prev) then
          return false
        end
      end
      prev = l[i]
    end
    return true
  end
- |2-
      local inc = l[1] < l[2]
      for i = 2, #l - 1 do
          if inc and l[i] > l[i + 1] then
              return false
          elseif not inc and l[i] < l[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif d * direction < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local delta = l[i] - l[i - 1]
          if delta == 0 then
              -- do nothing
          elseif direction == 0 then
              direction = delta
          elseif direction * delta < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc = l[1] < l[2]
    for i = 2, #l - 1 do
      if inc and l[i] > l[i + 1] then return false end
      if not inc and l[i] < l[i + 1] then return false end
    end
    return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- do nothing
          elseif direction == 0 then
              direction = d
          elseif d * direction < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- "\tlocal direction = 0\n\tfor i = 2, #l do\n\t\tlocal d = l[i] - l[i - 1]\n\t\tif
  direction == 0 then\n\t\t\tdirection = d\n\t\telseif direction * d < 0 then\n\t\t\treturn
  false\n\t\tend\n\tend\n\treturn true\nend"
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local prev = l[1]
      local increasing = true
      local decreasing = true
      for i = 2, #l do
          if l[i] > prev then
              decreasing = false
          elseif l[i] < prev then
              increasing = false
          end
          prev = l[i]
      end
      return increasing or decreasing
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local diff = l[i] - l[i - 1]
          if direction == nil then
              direction = diff
          elseif direction * diff < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- do nothing
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
    local increasing = true
    local decreasing = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        increasing = false
      elseif l[i] > l[i - 1] then
        decreasing = false
      end
    end
    return increasing or decreasing
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
      local prev = l[1]
      local direction = nil
      for i = 2, #l do
          local cur = l[i]
          if direction == nil then
              if cur > prev then
                  direction = 1
              elseif cur < prev then
                  direction = -1
              end
          elseif direction == 1 and cur < prev then
              return false
          elseif direction == -1 and cur > prev then
              return false
          end
          prev = cur
      end
      return true
  end
- |2-
      local last = l[1]
      local increasing = true
      for i = 2, #l do
          if l[i] < last then
              increasing = false
              break
          end
          last = l[i]
      end
      if increasing then
          return true
      end
      last = l[1]
      for i = 2, #l do
          if l[i] > last then
              return false
          end
          last = l[i]
      end
      return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == 0 then
        direction = d
      elseif d * direction < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local last = l[1]
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < last then
              inc = false
          elseif l[i] > last then
              dec = false
          end
          last = l[i]
      end
      return inc or dec
  end
- |2-
      local inc = l[1] < l[2]
      for i = 2, #l - 1 do
          if l[i] < l[i + 1] ~= inc then
              return false
          end
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc and l[i] < l[i - 1] then
              return false
          elseif not inc and l[i] > l[i - 1] then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d ~= 0 then
              if direction == 0 then
                  direction = d
              elseif direction * d < 0 then
                  return false
              end
          end
      end
      return true
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif d * direction < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local n = #l
    if n < 2 then return true end
    local inc = l[2] > l[1]
    for i = 3, n do
      if inc ~= (l[i] > l[i-1]) then return false end
    end
    return true
  end
- |2-
    local inc = l[1] < l[2]
    for i = 2, #l - 1 do
      if l[i] < l[i + 1] ~= inc then
        return false
      end
    end
    return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              return false
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local last = l[1]
    local increasing = true
    for i = 2, #l do
      if l[i] < last then
        increasing = false
        break
      end
      last = l[i]
    end
    if increasing then return true end
    last = l[1]
    for i = 2, #l do
      if l[i] > last then
        return false
      end
      last = l[i]
    end
    return true
  end
- |2-
    local direction = nil
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == nil then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] > l[i - 1] then
              dec = false
          elseif l[i] < l[i - 1] then
              inc = false
          end
      end
      return inc or dec
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local increasing = true
      local decreasing = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              increasing = false
          elseif l[i] > l[i - 1] then
              decreasing = false
          end
      end
      return increasing or decreasing
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if l[i] > l[i - 1] ~= inc then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              return false
          elseif direction == 0 then
              direction = d
          elseif d * direction < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              -- ignore
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local last = l[1]
    local increasing = true
    for i = 2, #l do
      if l[i] < last then
        increasing = false
        break
      end
      last = l[i]
    end
    if increasing then return true end
    last = l[1]
    for i = 2, #l do
      if l[i] > last then
        return false
      end
      last = l[i]
    end
    return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          inc = inc and l[i] >= l[i - 1]
          dec = dec and l[i] <= l[i - 1]
      end
      return inc or dec
  end
- |2-
    local n = #l
    local inc = l[1] < l[2]
    for i = 2, n-1 do
      if inc and l[i] > l[i+1] then return false end
      if not inc and l[i] < l[i+1] then return false end
    end
    return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              return false
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i - 1] then
        inc = false
      elseif l[i] > l[i - 1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
    local last = l[1]
    local increasing = true
    for i = 2, #l do
      if l[i] < last then
        increasing = false
        break
      end
      last = l[i]
    end
    if increasing then return true end
    last = l[1]
    for i = 2, #l do
      if l[i] > last then
        return false
      end
      last = l[i]
    end
    return true
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if d == 0 then
        -- no change
      elseif direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local inc, dec = true, true
      for i = 2, #l do
          if l[i] < l[i-1] then
              inc = false
          elseif l[i] > l[i-1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local direction = 0
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == 0 then
        direction = d
      elseif direction * d < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local prev = l[1]
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] > prev then
              dec = false
          elseif l[i] < prev then
              inc = false
          end
          if not inc and not dec then
              return false
          end
          prev = l[i]
      end
      return true
  end
- |2-
    local inc = l[1] < l[2]
    for i = 2, #l - 1 do
      if l[i] < l[i + 1] ~= inc then
        return false
      end
    end
    return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local inc = true
    local dec = true
    for i = 2, #l do
      if l[i] < l[i-1] then
        inc = false
      elseif l[i] > l[i-1] then
        dec = false
      end
    end
    return inc or dec
  end
- |2-
      local inc = nil
      for i = 2, #l do
          if l[i] ~= l[i-1] then
              if inc == nil then
                  inc = l[i] > l[i-1]
              elseif inc ~= (l[i] > l[i-1]) then
                  return false
              end
          end
      end
      return true
  end
- |2-
      local direction = nil
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if direction == nil then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
      local direction = 0
      for i = 2, #l do
          local d = l[i] - l[i - 1]
          if d == 0 then
              return false
          elseif direction == 0 then
              direction = d
          elseif direction * d < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local direction = l[2] - l[1]
      for i = 2, #l - 1 do
          if direction * (l[i + 1] - l[i]) < 0 then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
- |2-
    local direction = nil
    for i = 2, #l do
      local d = l[i] - l[i - 1]
      if direction == nil then
        direction = d
      elseif d * direction < 0 then
        return false
      end
    end
    return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
      local n = #l
      if n < 2 then
          return true
      end
      local inc = l[2] > l[1]
      for i = 3, n do
          if inc ~= (l[i] > l[i - 1]) then
              return false
          end
      end
      return true
  end
- |2-
      local inc = true
      local dec = true
      for i = 2, #l do
          if l[i] < l[i - 1] then
              inc = false
          elseif l[i] > l[i - 1] then
              dec = false
          end
      end
      return inc or dec
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
