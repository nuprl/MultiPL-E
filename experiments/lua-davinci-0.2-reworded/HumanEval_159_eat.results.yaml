name: HumanEval_159_eat
language: lua
results:
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwc51znq.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpvwc51znq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot2sbla2.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpot2sbla2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\n    local\
    \ total = number + need\n    local left = remaining - need\n    if left < 0 then\n\
    \        left = 0\n    end\n    return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuv_1y9n.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpiuv_1y9n.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhlkvb9g.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpnhlkvb9g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    total = total + left\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp876gks_a.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp876gks_a.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl2gv3_k.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzl2gv3_k.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpy2gw30.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpdpy2gw30.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp540siejl.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp540siejl.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuse5rg_9.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpuse5rg_9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83i43ryk.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp83i43ryk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9bpxm42.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpe9bpxm42.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8c39lgo.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpx8c39lgo.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9axdizp0.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp9axdizp0.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztf8gq9g.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpztf8gq9g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprme3_xax.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmprme3_xax.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4cr1yit.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpw4cr1yit.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if number + need <= remaining then\n\
    \    return {number + need, remaining - (number + need)}\n  else\n    return {number\
    \ + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmw22oit.lua:38:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmpsmw22oit.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94nnrr_4.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp94nnrr_4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmtsyevc.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpcmtsyevc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05jn4kp8.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp05jn4kp8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypj4n61o.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpypj4n61o.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5nz85yi.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpl5nz85yi.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58ecypvj.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp58ecypvj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67trigoy.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp67trigoy.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxr5fshd.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmphxr5fshd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + need, remaining\
    \ - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptojpgagc.lua:37:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmptojpgagc.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    if number + need > remaining\
    \ then\n        return {remaining, 0}\n    else\n        return {number + need,\
    \ remaining - (number + need)}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8v1wcyn_.lua:38:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp8v1wcyn_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    total = total + left\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ldt_80_.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp9ldt_80_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7blm0c0.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp_7blm0c0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls3tiik5.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpls3tiik5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmm_giiz.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpmmm_giiz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xpgsonv.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp9xpgsonv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0ol4o82.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpd0ol4o82.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    local total = number + need\n\
    \    local left = remaining - need\n    if left < 0 then\n        left = 0\n \
    \   end\n    return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9hobhm2.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmps9hobhm2.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34_x2ozt.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp34_x2ozt.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo43x9dbu.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpo43x9dbu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzkckjb8.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzzkckjb8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pusic4f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp0pusic4f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppurls5pg.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmppurls5pg.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1m3xq9n.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpg1m3xq9n.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwlnv3i1.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpkwlnv3i1.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe0fhm08.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpfe0fhm08.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpools4ocs.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpools4ocs.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8de_8s5o.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp8de_8s5o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs_qkhmb.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpzs_qkhmb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ojyyghf.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp4ojyyghf.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3r4vu_c7.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp3r4vu_c7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\n    local\
    \ total = number + need\n    local left = remaining - need\n    if left < 0 then\n\
    \        left = 0\n    end\n    return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t1au5c1.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp0t1au5c1.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf3bzdj4.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpxf3bzdj4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\n    local\
    \ total = number + need\n    local left = remaining - need\n    if left < 0 then\n\
    \        left = 0\n    end\n    return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepzotnjl.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpepzotnjl.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2j5spev.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpi2j5spev.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnifnb02o.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpnifnb02o.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    total = total + left\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps24s3z70.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmps24s3z70.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxnlr92f.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpwxnlr92f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkclepf22.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpkclepf22.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9gytzvm.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpl9gytzvm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1bplsml.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_1bplsml.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local number = number\n  local\
    \ need = need\n  local remaining = remaining\n  local total = number + need\n\
    \  local left = remaining - need\n  if remaining < need then\n    total = number\
    \ + remaining\n    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + need, remaining\
    \ - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgkah5mo.lua:37:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmpvgkah5mo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprou5uqqg.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmprou5uqqg.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss_7ef6b.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpss_7ef6b.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wpk32n8.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp3wpk32n8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeurntpkh.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpeurntpkh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph12i276w.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmph12i276w.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8k07qfj.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_8k07qfj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi_bkek5.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpmi_bkek5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kyot9_j.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp1kyot9_j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uekmd53.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp0uekmd53.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    local total = number + need\n\
    \    local left = remaining - need\n    if left < 0 then\n        total = total\
    \ + left\n        left = 0\n    end\n    return {total, left}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndfoxmz3.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpndfoxmz3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8801lpyn.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp8801lpyn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii2pxkrv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpii2pxkrv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jv66o7e.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp2jv66o7e.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcpb3ib7.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpvcpb3ib7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_mi04cw.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpn_mi04cw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5eufeiu.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpj5eufeiu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5su7xew.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmps5su7xew.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjzciiyk.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpxjzciiyk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnkozbmj.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpjnkozbmj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpps3ukweb.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpps3ukweb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrk3_2k0.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpjrk3_2k0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0t95c9u.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpn0t95c9u.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59c7m186.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp59c7m186.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkg06tl9.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpwkg06tl9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ti0rezq.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp3ti0rezq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvoe9s8d.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmptvoe9s8d.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrrnkcsr.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpvrrnkcsr.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcje46by.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpkcje46by.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4u7hv8o3.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp4u7hv8o3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local eaten = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvo282lj.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpdvo282lj.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrj1rmea.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpbrj1rmea.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvdavtya.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpsvdavtya.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaz3jm7m_.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpaz3jm7m_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if remaining < need then\n    return\
    \ {number + remaining, 0}\n  else\n    return {number + need, remaining - need}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lvyq6ak.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_lvyq6ak.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if number + need <= remaining then\n\
    \    return {number + need, remaining - (number + need)}\n  else\n    return {number\
    \ + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79a94tv2.lua:38:\
    \ expected: {11, 4}\nactual: {15, 0}\nstack traceback:\n\t/tmp/tmp79a94tv2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s6xfmww.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp3s6xfmww.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmd3626m.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpqmd3626m.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15zbhs8o.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp15zbhs8o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal4fvhr9.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpal4fvhr9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi6722qy.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpqi6722qy.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  return {number\
    \ + need, remaining - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06356vcr.lua:38:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmp06356vcr.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6vvxmfz.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpw6vvxmfz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6x8gppm.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpo6x8gppm.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa72coq3u.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpa72coq3u.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbdvj_5s.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpqbdvj_5s.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppnb54c0.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpppnb54c0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfc2yaptz.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpfc2yaptz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if total > remaining then\n    total = remaining\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqatxxn0_.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpqatxxn0_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj54mim8.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpxj54mim8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk98mv3k9.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpk98mv3k9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkr8inz1.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpdkr8inz1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1m0tvwss.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp1m0tvwss.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1om132r.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmph1om132r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cl5bnz8.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp_cl5bnz8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisxj1kzm.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpisxj1kzm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqo77nz_.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmppqo77nz_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if total > remaining then\n    total = remaining\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbislp9a.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpcbislp9a.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0vq3yg3.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpm0vq3yg3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zqlxl5z.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp1zqlxl5z.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_axnmv3.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpl_axnmv3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4tyeeel.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpt4tyeeel.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zl2qwrd.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp0zl2qwrd.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    total = total + left\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if number + need > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {number + need, remaining - (number\
    \ + need)}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rfr1cx9.lua:38:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp2rfr1cx9.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local eaten\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {eaten, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa96ewt1x.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpa96ewt1x.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2uvr3a8c.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp2uvr3a8c.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv416d4fu.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpv416d4fu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6mv1h2z.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpb6mv1h2z.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlf3ggnb.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpwlf3ggnb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if total > remaining then\n    total = remaining\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlnx9ubh.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmphlnx9ubh.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm79kzb27.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpm79kzb27.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph6fo50o.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpph6fo50o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeahwwax.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpgeahwwax.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lumiblj.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp4lumiblj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    total = total + left\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18fdq6lc.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp18fdq6lc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    local total = number + need\n\
    \    local left = remaining - need\n    if left < 0 then\n        left = 0\n \
    \   end\n    return {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yd6jcpw.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp8yd6jcpw.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2stswr3.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpp2stswr3.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4s0h8is.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmps4s0h8is.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywn_k2rx.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpywn_k2rx.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpviqhjbxl.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpviqhjbxl.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
    \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4iw60ap.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpu4iw60ap.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  if number\
    \ + need > remaining then\n    return {remaining, 0}\n  else\n    return {number\
    \ + need, remaining - (number + need)}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyu_a2_s8.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpyu_a2_s8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6e9w30t.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpa6e9w30t.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local eaten = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {eaten, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhomc6dq.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmphhomc6dq.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_d33b99.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp8_d33b99.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if remaining >= need then\n   \
    \ return {number + need, remaining - need}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmx4lf79.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpmmx4lf79.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  if remaining\
    \ >= need then\n    return {number + need, remaining - need}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local carrots = number + need\n\
    \  if carrots > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {carrots, remaining - carrots}\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp830qf3hm.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp830qf3hm.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5, 6,\
    \ 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8izfboc.lua:43:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpf8izfboc.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6wmu_iv.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmph6wmu_iv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz9f8xvd.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpfz9f8xvd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk6ly6bh.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpjk6ly6bh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0vk5cnl.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpf0vk5cnl.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8j3vt43.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpk8j3vt43.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvl8ay385.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpvl8ay385.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, left}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiix7c5m.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpqiix7c5m.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm88fv4xe.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmpm88fv4xe.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea0zw0sq.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpea0zw0sq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  if remaining >= need then\n   \
    \ return {number + need, remaining - need}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn15d1ahb.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpn15d1ahb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zv3lcnx.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp5zv3lcnx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7amznd96.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp7amznd96.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7enpepj5.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp7enpepj5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wlqpse2.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp3wlqpse2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxxt5qez.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpkxxt5qez.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  return {number + need, remaining\
    \ - need}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ldxuf95.lua:37:\
    \ expected: {7, 0}\nactual: {13, -6}\nstack traceback:\n\t/tmp/tmp0ldxuf95.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, left}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri2v2giy.lua:41:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmpri2v2giy.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbsha3x6.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpdbsha3x6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy3x3sy6.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpiy3x3sy6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1lmy6at.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpq1lmy6at.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt384a_t1.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpt384a_t1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if total > remaining then\n    total = remaining\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4swkm4ou.lua:40:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp4swkm4ou.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcmfivqk.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpkcmfivqk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqd4lzkc.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpxqd4lzkc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf9_25g4.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmphf9_25g4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    -- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n   \
    \ lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbv8n5ek.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpxbv8n5ek.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    total = total + left\n\
    \    left = 0\n  end\n  return {total, left}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdcnk15g.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpqdcnk15g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamv4_3i_.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpamv4_3i_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n8qerke.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp5n8qerke.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2t5ejg4x.lua:39:\
    \ expected: {11, 4}\nactual: {10, 0}\nstack traceback:\n\t/tmp/tmp2t5ejg4x.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnneyiqgc.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpnneyiqgc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhfespm9.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpkhfespm9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88z3zyj9.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp88z3zyj9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n    if need <= remaining then\n \
    \       return {number + need, remaining - need}\n    else\n        return {number\
    \ + remaining, 0}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n   \
    \ lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfhjy4x2.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpbfhjy4x2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtbdqgkb.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpgtbdqgkb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w7qyk4t.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp7w7qyk4t.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  local total = number + need\n \
    \ local left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {total, left}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = eat\n    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
    \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
    \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
    \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp498_kjtv.lua:42:\
    \ expected: {7, 0}\nactual: {13, 0}\nstack traceback:\n\t/tmp/tmp498_kjtv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqkp_lkz.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpqqkp_lkz.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76bcx7ag.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmp76bcx7ag.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You're a hungry rabbit, and you already have eaten a certain number\
    \ of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
    -- you should return a table of [ total number of eaten carrots after your meals,\n\
    -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
    \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
    -- >>> eat(5, 6, 10)\n-- {11, 4}\n-- >>> eat(4, 8, 9)\n-- {12, 1}\n-- >>> eat(1,\
    \ 10, 10)\n-- {11, 0}\n-- >>> eat(2, 11, 5)\n-- {7, 0}\n-- Variables:\n-- @number\
    \ : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n\
    -- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the\
    \ number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number\
    \ <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\n\
    local function eat(number, need, remaining)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = eat\n    lu.assertEquals(candidate(5,\
    \ 6, 10), {11, 4})\n    lu.assertEquals(candidate(4, 8, 9), {12, 1})\n    lu.assertEquals(candidate(1,\
    \ 10, 10), {11, 0})\n    lu.assertEquals(candidate(2, 11, 5), {7, 0})\n    lu.assertEquals(candidate(4,\
    \ 5, 7), {9, 2})\n    lu.assertEquals(candidate(4, 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_gqye1o.lua:34:\
    \ expected: {11, 4}\nactual: nil\nstack traceback:\n\t/tmp/tmpg_gqye1o.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
