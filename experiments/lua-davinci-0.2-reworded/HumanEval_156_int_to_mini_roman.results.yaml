---
name: HumanEval_156_int_to_mini_roman
language: lua
results:
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                roman = roman .. letter
                number = number - value
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ""
        local num = number
        local numeral = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for i = 1, #numeral do
            while num >= numeral[i][1] do
                result = result .. numeral[i][2]
                num = num - numeral[i][1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer, obtain its roman numeral equivalent as a
    string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n--
    Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n--
    'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n\tlocal
    roman_numerals = {\n\t\t{1000, 'm'},\n\t\t{900, 'cm'},\n\t\t{500, 'd'},\n\t\t{400,
    'cd'},\n\t\t{100, 'c'},\n\t\t{90, 'xc'},\n\t\t{50, 'l'},\n\t\t{40, 'xl'},\n\t\t{10,
    'x'},\n\t\t{9, 'ix'},\n\t\t{5, 'v'},\n\t\t{4, 'iv'},\n\t\t{1, 'i'}\n\t}\n\tlocal
    result = ''\n\tfor _, pair in ipairs(roman_numerals) do\n\t\tlocal decimal, roman
    = unpack(pair)\n\t\twhile number >= decimal do\n\t\t\tresult = result .. roman\n\t\t\tnumber
    = number - decimal\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19),
    'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251),
    'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500),
    'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4),
    'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90),
    'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532),
    'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994),
    'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p545j7d.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_p545j7d.lua:29:
    in local 'candidate'\n\t/tmp/tmp_p545j7d.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_string = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                roman_string = roman_string .. roman
                number = number - arabic
            end
        end
        return roman_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ""
        local digits = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for i = 1, #digits do
            local digit = digits[i]
            local value = digit[1]
            local roman = digit[2]
            while number >= value do
                result = result .. roman
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'i', 'v'},
            {'x', 'l'},
            {'c', 'd'},
            {'m'}
        }
        local result = ''
        local digit = 1
        while number > 0 do
            local digit_value = number % 10
            local digit_roman = ''
            if digit_value == 9 then
                digit_roman = roman_numerals[digit][1] .. roman_numerals[digit + 1][1]
            elseif digit_value == 4 then
                digit_roman = roman_numerals[digit][1] .. roman_numerals[digit][2]
            else
                if digit_value >= 5 then
                    digit_roman = digit_roman .. roman_numerals[digit][2]
                    digit_value = digit_value - 5
                end
                for i = 1, digit_value do
                    digit_roman = digit_roman .. roman_numerals[digit][1]
                end
            end
            result = digit_roman .. result
            number = math.floor(number / 10)
            digit = digit + 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = table.unpack(pair)
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ''
      local num = number
      while num > 0 do
        if num >= 1000 then
          roman = roman .. 'm'
          num = num - 1000
        elseif num >= 900 then
          roman = roman .. 'cm'
          num = num - 900
        elseif num >= 500 then
          roman = roman .. 'd'
          num = num - 500
        elseif num >= 400 then
          roman = roman .. 'cd'
          num = num - 400
        elseif num >= 100 then
          roman = roman .. 'c'
          num = num - 100
        elseif num >= 90 then
          roman = roman .. 'xc'
          num = num - 90
        elseif num >= 50 then
          roman = roman .. 'l'
          num = num - 50
        elseif num >= 40 then
          roman = roman .. 'xl'
          num = num - 40
        elseif num >= 10 then
          roman = roman .. 'x'
          num = num - 10
        elseif num >= 9 then
          roman = roman .. 'ix'
          num = num - 9
        elseif num >= 5 then
          roman = roman .. 'v'
          num = num - 5
        elseif num >= 4 then
          roman = roman .. 'iv'
          num = num - 4
        elseif num >= 1 then
          roman = roman .. 'i'
          num = num - 1
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local numeral, value = pair[1], pair[2]
            while number >= value do
                result = result .. numeral
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                roman = roman .. symbol
                number = number - value
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'i', 'v'},
            {'x', 'l'},
            {'c', 'd'},
            {'m'}
        }
        local result = ''
        local num_str = tostring(number)
        local num_len = #num_str
        for i = 1, num_len do
            local digit = tonumber(num_str:sub(i, i))
            local roman_numeral = roman_numerals[num_len - i + 1]
            if digit == 9 then
                result = result .. roman_numeral[1] .. roman_numeral[2]
            elseif digit >= 5 then
                result = result .. roman_numeral[2] .. string.rep(roman_numeral[1], digit - 5)
            elseif digit == 4 then
                result = result .. roman_numeral[1] .. roman_numeral[2]
            else
                result = result .. string.rep(roman_numeral[1], digit)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dv3c1j4.lua:40:
    expected: \"xix\"\nactual: \"xiv\"\nstack traceback:\n\t/tmp/tmp3dv3c1j4.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local num = number
        local numeral = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        for i = 1, #numeral do
            while num >= numeral[i][1] do
                roman = roman .. numeral[i][2]
                num = num - numeral[i][1]
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ""
        local num = number
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for i = 1, #roman_numerals do
            local arabic, roman = table.unpack(roman_numerals[i])
            while num >= arabic do
                result = result .. roman
                num = num - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local result = ''
      local digits = {'i', 'v', 'x', 'l', 'c', 'd', 'm'}
      local i = 1
      while number > 0 do
        local digit = number % 10
        if digit == 9 then
          result = digits[i] .. digits[i + 2] .. result
        elseif digit == 4 then
          result = digits[i] .. digits[i + 1] .. result
        else
          if digit >= 5 then
            result = digits[i + 1] .. result
            digit = digit - 5
          end
          result = string.rep(digits[i], digit) .. result
        end
        number = math.floor(number / 10)
        i = i + 2
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4d_9r_1.lua:40:
    expected: \"cdxxvi\"\nactual: \"cdxxiv\"\nstack traceback:\n\t/tmp/tmpu4d_9r_1.lua:40:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for i = 1, #roman_numerals do
            local arabic, roman = unpack(roman_numerals[i])
            while number >= arabic do
                roman_numeral = roman_numeral .. roman
                number = number - arabic
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv187g2o6.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpv187g2o6.lua:29:
    in local 'candidate'\n\t/tmp/tmpv187g2o6.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ""
      local num = number
      while num > 0 do
        if num >= 1000 then
          roman = roman .. "m"
          num = num - 1000
        elseif num >= 900 then
          roman = roman .. "cm"
          num = num - 900
        elseif num >= 500 then
          roman = roman .. "d"
          num = num - 500
        elseif num >= 400 then
          roman = roman .. "cd"
          num = num - 400
        elseif num >= 100 then
          roman = roman .. "c"
          num = num - 100
        elseif num >= 90 then
          roman = roman .. "xc"
          num = num - 90
        elseif num >= 50 then
          roman = roman .. "l"
          num = num - 50
        elseif num >= 40 then
          roman = roman .. "xl"
          num = num - 40
        elseif num >= 10 then
          roman = roman .. "x"
          num = num - 10
        elseif num >= 9 then
          roman = roman .. "ix"
          num = num - 9
        elseif num >= 5 then
          roman = roman .. "v"
          num = num - 5
        elseif num >= 4 then
          roman = roman .. "iv"
          num = num - 4
        elseif num >= 1 then
          roman = roman .. "i"
          num = num - 1
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numeral = ''
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      for i = 1, #roman_numerals do
        local arabic, roman = table.unpack(roman_numerals[i])
        while number >= arabic do
          roman_numeral = roman_numeral .. roman
          number = number - arabic
        end
      end
      return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman) do
            local value, letters = pair[1], pair[2]
            while number >= value do
                result = result .. letters
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for i = 1, #roman do
            while number >= roman[i][1] do
                result = result .. roman[i][2]
                number = number - roman[i][1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      if number < 1 or number > 1000 then
        return nil
      end
      local roman = ''
      local num = number
      while num > 0 do
        if num >= 1000 then
          roman = roman .. 'm'
          num = num - 1000
        elseif num >= 900 then
          roman = roman .. 'cm'
          num = num - 900
        elseif num >= 500 then
          roman = roman .. 'd'
          num = num - 500
        elseif num >= 400 then
          roman = roman .. 'cd'
          num = num - 400
        elseif num >= 100 then
          roman = roman .. 'c'
          num = num - 100
        elseif num >= 90 then
          roman = roman .. 'xc'
          num = num - 90
        elseif num >= 50 then
          roman = roman .. 'l'
          num = num - 50
        elseif num >= 40 then
          roman = roman .. 'xl'
          num = num - 40
        elseif num >= 10 then
          roman = roman .. 'x'
          num = num - 10
        elseif num >= 9 then
          roman = roman .. 'ix'
          num = num - 9
        elseif num >= 5 then
          roman = roman .. 'v'
          num = num - 5
        elseif num >= 4 then
          roman = roman .. 'iv'
          num = num - 4
        elseif num >= 1 then
          roman = roman .. 'i'
          num = num - 1
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local num = number
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        for i = 1, #roman_numerals do
            local arabic, roman_numeral = unpack(roman_numerals[i])
            while num >= arabic do
                roman = roman .. roman_numeral
                num = num - arabic
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdtqkjd_.lua:30:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwdtqkjd_.lua:30:
    in local 'candidate'\n\t/tmp/tmpwdtqkjd_.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num >= 1000 do
            roman = roman .. "m"
            num = num - 1000
        end
        while num >= 900 do
            roman = roman .. "cm"
            num = num - 900
        end
        while num >= 500 do
            roman = roman .. "d"
            num = num - 500
        end
        while num >= 400 do
            roman = roman .. "cd"
            num = num - 400
        end
        while num >= 100 do
            roman = roman .. "c"
            num = num - 100
        end
        while num >= 90 do
            roman = roman .. "xc"
            num = num - 90
        end
        while num >= 50 do
            roman = roman .. "l"
            num = num - 50
        end
        while num >= 40 do
            roman = roman .. "xl"
            num = num - 40
        end
        while num >= 10 do
            roman = roman .. "x"
            num = num - 10
        end
        while num >= 9 do
            roman = roman .. "ix"
            num = num - 9
        end
        while num >= 5 do
            roman = roman .. "v"
            num = num - 5
        end
        while num >= 4 do
            roman = roman .. "iv"
            num = num - 4
        end
        while num >= 1 do
            roman = roman .. "i"
            num = num - 1
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ''
      local symbols = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      for _, symbol in ipairs(symbols) do
        local value, letter = symbol[1], symbol[2]
        while number >= value do
          roman = roman .. letter
          number = number - value
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, v in ipairs(roman_numerals) do
            local div = math.floor(number / v[1])
            if div > 0 then
                result = result .. v[2]:rep(div)
                number = number - v[1] * div
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local i = 1
        while number > 0 do
            local digit = number % 10
            if digit == 9 then
                roman = roman .. mini_roman_digits[i] .. mini_roman_digits[i + 2]
            elseif digit == 4 then
                roman = roman .. mini_roman_digits[i] .. mini_roman_digits[i + 1]
            else
                if digit >= 5 then
                    roman = roman .. mini_roman_digits[i + 1]
                    digit = digit - 5
                end
                for j = 1, digit do
                    roman = roman .. mini_roman_digits[i]
                end
            end
            number = (number - digit) / 10
            i = i + 2
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwajxu4xz.lua:17:
    attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\t/tmp/tmpwajxu4xz.lua:17:
    in local 'candidate'\n\t/tmp/tmpwajxu4xz.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                roman = roman .. numeral[2]
                number = number - numeral[1]
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local roman_symbols = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, symbol in ipairs(roman_symbols) do
            local value, letter = symbol[1], symbol[2]
            while number >= value do
                roman_numeral = roman_numeral .. letter
                number = number - value
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letters = numeral[1], numeral[2]
            while number >= value do
                result = result .. letters
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman) do
            local value, symbol = table.unpack(pair)
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local number_of_digits = #tostring(number)
        local digit_value = 1
        for i = 1, number_of_digits do
            local digit = math.floor(number / digit_value) % 10
            if digit == 9 then
                roman_numeral = roman_numeral .. mini_roman_digits[i] .. mini_roman_digits[i + 1]
            elseif digit == 4 then
                roman_numeral = roman_numeral .. mini_roman_digits[i] .. mini_roman_digits[i]
            else
                local five_digit = digit >= 5
                if five_digit then
                    digit = digit - 5
                end
                for j = 1, digit do
                    roman_numeral = roman_numeral .. mini_roman_digits[i]
                end
                if five_digit then
                    roman_numeral = roman_numeral .. mini_roman_digits[i]
                end
            end
            digit_value = digit_value * 10
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5uk671z4.lua:18:
    attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\t/tmp/tmp5uk671z4.lua:18:
    in local 'candidate'\n\t/tmp/tmp5uk671z4.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. 'm'
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. 'cm'
                num = num - 900
            elseif num >= 500 then
                roman = roman .. 'd'
                num = num - 500
            elseif num >= 400 then
                roman = roman .. 'cd'
                num = num - 400
            elseif num >= 100 then
                roman = roman .. 'c'
                num = num - 100
            elseif num >= 90 then
                roman = roman .. 'xc'
                num = num - 90
            elseif num >= 50 then
                roman = roman .. 'l'
                num = num - 50
            elseif num >= 40 then
                roman = roman .. 'xl'
                num = num - 40
            elseif num >= 10 then
                roman = roman .. 'x'
                num = num - 10
            elseif num >= 9 then
                roman = roman .. 'ix'
                num = num - 9
            elseif num >= 5 then
                roman = roman .. 'v'
                num = num - 5
            elseif num >= 4 then
                roman = roman .. 'iv'
                num = num - 4
            elseif num >= 1 then
                roman = roman .. 'i'
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, v in ipairs(roman_numerals) do
        while number >= v[1] do
          result = result .. v[2]
          number = number - v[1]
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num >= 1000 do
            roman = roman .. "m"
            num = num - 1000
        end
        while num >= 900 do
            roman = roman .. "cm"
            num = num - 900
        end
        while num >= 500 do
            roman = roman .. "d"
            num = num - 500
        end
        while num >= 400 do
            roman = roman .. "cd"
            num = num - 400
        end
        while num >= 100 do
            roman = roman .. "c"
            num = num - 100
        end
        while num >= 90 do
            roman = roman .. "xc"
            num = num - 90
        end
        while num >= 50 do
            roman = roman .. "l"
            num = num - 50
        end
        while num >= 40 do
            roman = roman .. "xl"
            num = num - 40
        end
        while num >= 10 do
            roman = roman .. "x"
            num = num - 10
        end
        while num >= 9 do
            roman = roman .. "ix"
            num = num - 9
        end
        while num >= 5 do
            roman = roman .. "v"
            num = num - 5
        end
        while num >= 4 do
            roman = roman .. "iv"
            num = num - 4
        end
        while num >= 1 do
            roman = roman .. "i"
            num = num - 1
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ''
        local roman_numerals = {'m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}
        local numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
        for i, numeral in ipairs(numbers) do
            while number >= numeral do
                roman_numeral = roman_numeral .. roman_numerals[i]
                number = number - numeral
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                roman_numeral = roman_numeral .. numeral[2]
                number = number - numeral[1]
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = table.unpack(pair)
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for i = 1, #roman_numerals do
        local arabic, roman = table.unpack(roman_numerals[i])
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(roman_numerals) do
            local value, letters = numeral[1], numeral[2]
            while number >= value do
                roman = roman .. letters
                number = number - value
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
        local numerals = {"m", "cm", "d", "cd", "c", "xc", "l", "xl", "x", "ix", "v", "iv", "i"}
        for i = 1, #values do
            while number >= values[i] do
                roman = roman .. numerals[i]
                number = number - values[i]
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
        local roman_digits = {'m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}
        for i, digit in ipairs(digits) do
            while number >= digit do
                roman = roman .. roman_digits[i]
                number = number - digit
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ''
      local num = number
      while num > 0 do
        if num >= 1000 then
          roman = roman .. 'm'
          num = num - 1000
        elseif num >= 900 then
          roman = roman .. 'cm'
          num = num - 900
        elseif num >= 500 then
          roman = roman .. 'd'
          num = num - 500
        elseif num >= 400 then
          roman = roman .. 'cd'
          num = num - 400
        elseif num >= 100 then
          roman = roman .. 'c'
          num = num - 100
        elseif num >= 90 then
          roman = roman .. 'xc'
          num = num - 90
        elseif num >= 50 then
          roman = roman .. 'l'
          num = num - 50
        elseif num >= 40 then
          roman = roman .. 'xl'
          num = num - 40
        elseif num >= 10 then
          roman = roman .. 'x'
          num = num - 10
        elseif num >= 9 then
          roman = roman .. 'ix'
          num = num - 9
        elseif num >= 5 then
          roman = roman .. 'v'
          num = num - 5
        elseif num >= 4 then
          roman = roman .. 'iv'
          num = num - 4
        elseif num >= 1 then
          roman = roman .. 'i'
          num = num - 1
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local numeral_string, numeral_value = numeral[1], numeral[2]
            while number >= numeral_value do
                result = result .. numeral_string
                number = number - numeral_value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. 'm'
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. 'cm'
                num = num - 900
            elseif num >= 500 then
                roman = roman .. 'd'
                num = num - 500
            elseif num >= 400 then
                roman = roman .. 'cd'
                num = num - 400
            elseif num >= 100 then
                roman = roman .. 'c'
                num = num - 100
            elseif num >= 90 then
                roman = roman .. 'xc'
                num = num - 90
            elseif num >= 50 then
                roman = roman .. 'l'
                num = num - 50
            elseif num >= 40 then
                roman = roman .. 'xl'
                num = num - 40
            elseif num >= 10 then
                roman = roman .. 'x'
                num = num - 10
            elseif num >= 9 then
                roman = roman .. 'ix'
                num = num - 9
            elseif num >= 5 then
                roman = roman .. 'v'
                num = num - 5
            elseif num >= 4 then
                roman = roman .. 'iv'
                num = num - 4
            elseif num >= 1 then
                roman = roman .. 'i'
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                roman_numeral = roman_numeral .. numeral[2]
                number = number - numeral[1]
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ''
        local num = number
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        for _, v in ipairs(roman_numerals) do
            while num >= v[1] do
                roman_numeral = roman_numeral .. v[2]
                num = num - v[1]
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local result = ''
      local numeral_map = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'},
      }
      for _, pair in ipairs(numeral_map) do
        local value, numeral = pair[1], pair[2]
        while number >= value do
          result = result .. numeral
          number = number - value
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local num_to_roman = {
            [1] = "i",
            [2] = "ii",
            [3] = "iii",
            [4] = "iv",
            [5] = "v",
            [6] = "vi",
            [7] = "vii",
            [8] = "viii",
            [9] = "ix",
            [10] = "x",
            [20] = "xx",
            [30] = "xxx",
            [40] = "xl",
            [50] = "l",
            [60] = "lx",
            [70] = "lxx",
            [80] = "lxxx",
            [90] = "xc",
            [100] = "c",
            [200] = "cc",
            [300] = "ccc",
            [400] = "cd",
            [500] = "d",
            [600] = "dc",
            [700] = "dcc",
            [800] = "dccc",
            [900] = "cm",
            [1000] = "m",
        }
        local number_string = tostring(number)
        local length = string.len(number_string)
        for i = 1, length do
            local digit = tonumber(string.sub(number_string, i, i))
            local power = 10 ^ (length - i)
            local roman_digit = num_to_roman[digit * power]
            roman_numeral = roman_numeral .. roman_digit
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kuodvje.lua:49:
    attempt to concatenate a nil value (local 'roman_digit')\nstack traceback:\n\t/tmp/tmp4kuodvje.lua:49:
    in local 'candidate'\n\t/tmp/tmp4kuodvje.lua:61: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = unpack(numeral)
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptbcj1wyp.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptbcj1wyp.lua:29:
    in local 'candidate'\n\t/tmp/tmptbcj1wyp.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_string = ''
        for _, pair in ipairs(roman_numerals) do
            local value = pair[1]
            local numeral = pair[2]
            while number >= value do
                roman_string = roman_string .. numeral
                number = number - value
            end
        end
        return roman_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            local digit = num % 10
            if digit == 9 then
                roman = "ix" .. roman
            elseif digit >= 5 then
                roman = "v" .. string.rep("i", digit - 5) .. roman
            elseif digit == 4 then
                roman = "iv" .. roman
            else
                roman = string.rep("i", digit) .. roman
            end
            num = math.floor(num / 10)
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvzt941i.lua:33:
    expected: \"xix\"\nactual: \"iix\"\nstack traceback:\n\t/tmp/tmprvzt941i.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, numeral in ipairs(roman_numerals) do
        while number >= numeral[1] do
          result = result .. numeral[2]
          number = number - numeral[1]
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(roman_numerals) do
            local value, letters = numeral[1], numeral[2]
            while number >= value do
                roman = roman .. letters
                number = number - value
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = unpack(numeral)
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzqt49ypr.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzqt49ypr.lua:29:
    in local 'candidate'\n\t/tmp/tmpzqt49ypr.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, numeral = pair[1], pair[2]
            while number >= arabic do
                roman_numeral = roman_numeral .. numeral
                number = number - arabic
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local numeral_string, value = numeral[1], numeral[2]
            while number >= value do
                result = result .. numeral_string
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ''
      local i = 1
      while number > 0 do
        local digit = number % 10
        if digit == 9 then
          roman = roman .. mini_roman_digits[i][9]
        elseif digit >= 5 then
          roman = roman .. mini_roman_digits[i][5]
          for j = 1, digit - 5 do
            roman = roman .. mini_roman_digits[i][1]
          end
        elseif digit == 4 then
          roman = roman .. mini_roman_digits[i][4]
        else
          for j = 1, digit do
            roman = roman .. mini_roman_digits[i][1]
          end
        end
        number = math.floor(number / 10)
        i = i + 1
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxt8adt_q.lua:17:
    attempt to index a nil value (global 'mini_roman_digits')\nstack traceback:\n\t/tmp/tmpxt8adt_q.lua:17:
    in local 'candidate'\n\t/tmp/tmpxt8adt_q.lua:39: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = unpack(numeral)
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzajk80jm.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzajk80jm.lua:29:
    in local 'candidate'\n\t/tmp/tmpzajk80jm.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ''
      local digits = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
      local letters = {'m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}
      for i = 1, #digits do
        while number >= digits[i] do
          roman = roman .. letters[i]
          number = number - digits[i]
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local roman_numeral = ''
      for _, pair in ipairs(roman_numerals) do
        local div = math.floor(number / pair[1])
        if div > 0 then
          roman_numeral = roman_numeral .. string.rep(pair[2], div)
          number = number - div * pair[1]
        end
      end
      return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_string = ''
        for _, pair in ipairs(roman_numerals) do
            local decimal, roman = pair[1], pair[2]
            while number >= decimal do
                roman_string = roman_string .. roman
                number = number - decimal
            end
        end
        return roman_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ''
        local num = number
        local numeral = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        for i = 1, #numeral do
            while num >= numeral[i][2] do
                result = result .. numeral[i][1]
                num = num - numeral[i][2]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, pair in ipairs(roman_numerals) do
            local decimal, numeral = unpack(pair)
            while number >= decimal do
                roman_numeral = roman_numeral .. numeral
                number = number - decimal
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptgr0bii9.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptgr0bii9.lua:29:
    in local 'candidate'\n\t/tmp/tmptgr0bii9.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        local roman_numeral = ''
        for i = 1, #roman_numerals do
            local numeral, value = roman_numerals[i][1], roman_numerals[i][2]
            while number >= value do
                roman_numeral = roman_numeral .. numeral
                number = number - value
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ""
      local num = number
      while num > 0 do
        if num >= 1000 then
          roman = roman .. "m"
          num = num - 1000
        elseif num >= 900 then
          roman = roman .. "cm"
          num = num - 900
        elseif num >= 500 then
          roman = roman .. "d"
          num = num - 500
        elseif num >= 400 then
          roman = roman .. "cd"
          num = num - 400
        elseif num >= 100 then
          roman = roman .. "c"
          num = num - 100
        elseif num >= 90 then
          roman = roman .. "xc"
          num = num - 90
        elseif num >= 50 then
          roman = roman .. "l"
          num = num - 50
        elseif num >= 40 then
          roman = roman .. "xl"
          num = num - 40
        elseif num >= 10 then
          roman = roman .. "x"
          num = num - 10
        elseif num >= 9 then
          roman = roman .. "ix"
          num = num - 9
        elseif num >= 5 then
          roman = roman .. "v"
          num = num - 5
        elseif num >= 4 then
          roman = roman .. "iv"
          num = num - 4
        elseif num >= 1 then
          roman = roman .. "i"
          num = num - 1
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        local roman_string = ''
        for _, numeral in ipairs(roman_numerals) do
            local roman, value = numeral[1], numeral[2]
            while number >= value do
                roman_string = roman_string .. roman
                number = number - value
            end
        end
        return roman_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, numeral = table.unpack(pair)
            while number >= arabic do
                roman_numeral = roman_numeral .. numeral
                number = number - arabic
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local numeral_table = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for i = 1, #numeral_table do
            while number >= numeral_table[i][1] do
                roman_numeral = roman_numeral .. numeral_table[i][2]
                number = number - numeral_table[i][1]
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, numeral = table.unpack(pair)
            while number >= arabic do
                roman_numeral = roman_numeral .. numeral
                number = number - arabic
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, numeral = table.unpack(pair)
            while number >= arabic do
                roman_numeral = roman_numeral .. numeral
                number = number - arabic
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = table.unpack(pair)
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ''
        local num = number
        while num > 0 do
            if num >= 1000 then
                result = result .. 'm'
                num = num - 1000
            elseif num >= 900 then
                result = result .. 'cm'
                num = num - 900
            elseif num >= 500 then
                result = result .. 'd'
                num = num - 500
            elseif num >= 400 then
                result = result .. 'cd'
                num = num - 400
            elseif num >= 100 then
                result = result .. 'c'
                num = num - 100
            elseif num >= 90 then
                result = result .. 'xc'
                num = num - 90
            elseif num >= 50 then
                result = result .. 'l'
                num = num - 50
            elseif num >= 40 then
                result = result .. 'xl'
                num = num - 40
            elseif num >= 10 then
                result = result .. 'x'
                num = num - 10
            elseif num >= 9 then
                result = result .. 'ix'
                num = num - 9
            elseif num >= 5 then
                result = result .. 'v'
                num = num - 5
            elseif num >= 4 then
                result = result .. 'iv'
                num = num - 4
            elseif num >= 1 then
                result = result .. 'i'
                num = num - 1
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = unpack(numeral)
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpij71alsa.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpij71alsa.lua:29:
    in local 'candidate'\n\t/tmp/tmpij71alsa.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for i = 1, #roman_numerals do
        local arabic, roman = table.unpack(roman_numerals[i])
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
        local romans = {"m", "cm", "d", "cd", "c", "xc", "l", "xl", "x", "ix", "v", "iv", "i"}
        for i = 1, #numbers do
            while number >= numbers[i] do
                roman = roman .. romans[i]
                number = number - numbers[i]
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local numeral_table = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(numeral_table) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                roman_numeral = roman_numeral .. symbol
                number = number - value
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                result = result .. "m"
                num = num - 1000
            elseif num >= 900 then
                result = result .. "cm"
                num = num - 900
            elseif num >= 500 then
                result = result .. "d"
                num = num - 500
            elseif num >= 400 then
                result = result .. "cd"
                num = num - 400
            elseif num >= 100 then
                result = result .. "c"
                num = num - 100
            elseif num >= 90 then
                result = result .. "xc"
                num = num - 90
            elseif num >= 50 then
                result = result .. "l"
                num = num - 50
            elseif num >= 40 then
                result = result .. "xl"
                num = num - 40
            elseif num >= 10 then
                result = result .. "x"
                num = num - 10
            elseif num >= 9 then
                result = result .. "ix"
                num = num - 9
            elseif num >= 5 then
                result = result .. "v"
                num = num - 5
            elseif num >= 4 then
                result = result .. "iv"
                num = num - 4
            elseif num >= 1 then
                result = result .. "i"
                num = num - 1
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local numeral = ""
        local numeral_table = {
            { "m", 1000 },
            { "cm", 900 },
            { "d", 500 },
            { "cd", 400 },
            { "c", 100 },
            { "xc", 90 },
            { "l", 50 },
            { "xl", 40 },
            { "x", 10 },
            { "ix", 9 },
            { "v", 5 },
            { "iv", 4 },
            { "i", 1 }
        }
        for i = 1, #numeral_table do
            while number >= numeral_table[i][2] do
                numeral = numeral .. numeral_table[i][1]
                number = number - numeral_table[i][2]
            end
        end
        return numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ""
        local numeral_map = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, numeral in ipairs(numeral_map) do
            local arabic, roman = numeral[1], numeral[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local num = number
        local numeral_table = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for i = 1, #numeral_table do
            while num >= numeral_table[i][1] do
                roman_numeral = roman_numeral .. numeral_table[i][2]
                num = num - numeral_table[i][1]
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, numeral = table.unpack(pair)
            while number >= arabic do
                roman_numeral = roman_numeral .. numeral
                number = number - arabic
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ''
        local num = number
        while num > 0 do
            if num >= 1000 then
                result = result .. 'm'
                num = num - 1000
            elseif num >= 900 then
                result = result .. 'cm'
                num = num - 900
            elseif num >= 500 then
                result = result .. 'd'
                num = num - 500
            elseif num >= 400 then
                result = result .. 'cd'
                num = num - 400
            elseif num >= 100 then
                result = result .. 'c'
                num = num - 100
            elseif num >= 90 then
                result = result .. 'xc'
                num = num - 90
            elseif num >= 50 then
                result = result .. 'l'
                num = num - 50
            elseif num >= 40 then
                result = result .. 'xl'
                num = num - 40
            elseif num >= 10 then
                result = result .. 'x'
                num = num - 10
            elseif num >= 9 then
                result = result .. 'ix'
                num = num - 9
            elseif num >= 5 then
                result = result .. 'v'
                num = num - 5
            elseif num >= 4 then
                result = result .. 'iv'
                num = num - 4
            elseif num >= 1 then
                result = result .. 'i'
                num = num - 1
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local result = ""
      local num = number
      while num > 0 do
        if num >= 1000 then
          result = result .. "m"
          num = num - 1000
        elseif num >= 900 then
          result = result .. "cm"
          num = num - 900
        elseif num >= 500 then
          result = result .. "d"
          num = num - 500
        elseif num >= 400 then
          result = result .. "cd"
          num = num - 400
        elseif num >= 100 then
          result = result .. "c"
          num = num - 100
        elseif num >= 90 then
          result = result .. "xc"
          num = num - 90
        elseif num >= 50 then
          result = result .. "l"
          num = num - 50
        elseif num >= 40 then
          result = result .. "xl"
          num = num - 40
        elseif num >= 10 then
          result = result .. "x"
          num = num - 10
        elseif num >= 9 then
          result = result .. "ix"
          num = num - 9
        elseif num >= 5 then
          result = result .. "v"
          num = num - 5
        elseif num >= 4 then
          result = result .. "iv"
          num = num - 4
        elseif num >= 1 then
          result = result .. "i"
          num = num - 1
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, v in ipairs(roman_numerals) do
            while number >= v[1] do
                result = result .. v[2]
                number = number - v[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ''
        local numeral_map = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'},
        }
        for _, numeral in ipairs(numeral_map) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'i', 'v'},
            {'x', 'l'},
            {'c', 'd'},
            {'m'}
        }
        local roman_numeral = ''
        local num = number
        local digit = 0
        while num > 0 do
            local digit_value = num % 10
            local digit_numeral = ''
            if digit_value == 9 then
                digit_numeral = roman_numerals[digit + 1][1] .. roman_numerals[digit + 2][1]
            elseif digit_value >= 5 then
                digit_numeral = roman_numerals[digit + 1][2]
                for i = 6, digit_value do
                    digit_numeral = digit_numeral .. roman_numerals[digit + 1][1]
                end
            elseif digit_value == 4 then
                digit_numeral = roman_numerals[digit + 1][1] .. roman_numerals[digit + 1][2]
            else
                for i = 1, digit_value do
                    digit_numeral = digit_numeral .. roman_numerals[digit + 1][1]
                end
            end
            roman_numeral = digit_numeral .. roman_numeral
            num = math.floor(num / 10)
            digit = digit + 1
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ''
        local num = number
        local numeral_map = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'},
        }
        for _, numeral in ipairs(numeral_map) do
            local arabic, roman = table.unpack(numeral)
            while num >= arabic do
                result = result .. roman
                num = num - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letters = numeral[1], numeral[2]
            while number >= value do
                result = result .. letters
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'d', 500},
            {'c', 100},
            {'l', 50},
            {'x', 10},
            {'v', 5},
            {'i', 1}
        }
        local result = ''
        for i = 1, #roman_numerals do
            local numeral, value = unpack(roman_numerals[i])
            local count = math.floor(number / value)
            result = result .. numeral:rep(count)
            number = number % value
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_ykoxyy.lua:23:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpa_ykoxyy.lua:23:
    in local 'candidate'\n\t/tmp/tmpa_ykoxyy.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ''
      local num = number
      local numeral = {'m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}
      local value = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
      for i = 1, #value do
        while num >= value[i] do
          roman = roman .. numeral[i]
          num = num - value[i]
        end
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ''
        local num = number
        while num > 0 do
            if num >= 1000 then
                result = result .. 'm'
                num = num - 1000
            elseif num >= 900 then
                result = result .. 'cm'
                num = num - 900
            elseif num >= 500 then
                result = result .. 'd'
                num = num - 500
            elseif num >= 400 then
                result = result .. 'cd'
                num = num - 400
            elseif num >= 100 then
                result = result .. 'c'
                num = num - 100
            elseif num >= 90 then
                result = result .. 'xc'
                num = num - 90
            elseif num >= 50 then
                result = result .. 'l'
                num = num - 50
            elseif num >= 40 then
                result = result .. 'xl'
                num = num - 40
            elseif num >= 10 then
                result = result .. 'x'
                num = num - 10
            elseif num >= 9 then
                result = result .. 'ix'
                num = num - 9
            elseif num >= 5 then
                result = result .. 'v'
                num = num - 5
            elseif num >= 4 then
                result = result .. 'iv'
                num = num - 4
            elseif num >= 1 then
                result = result .. 'i'
                num = num - 1
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = numeral[1], numeral[2]
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = table.unpack(pair)
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numeral = ""
      local roman_numerals = {
        {1000, "m"},
        {900, "cm"},
        {500, "d"},
        {400, "cd"},
        {100, "c"},
        {90, "xc"},
        {50, "l"},
        {40, "xl"},
        {10, "x"},
        {9, "ix"},
        {5, "v"},
        {4, "iv"},
        {1, "i"}
      }
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          roman_numeral = roman_numeral .. roman
          number = number - arabic
        end
      end
      return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ""
        for _, numeral in ipairs(roman_numerals) do
            local value, symbol = numeral[1], numeral[2]
            while number >= value do
                result = result .. symbol
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            while number >= numeral[1] do
                result = result .. numeral[2]
                number = number - numeral[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local num = number
        local numeral = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        for i = 1, #numeral do
            local div = math.floor(num / numeral[i][1])
            num = num - div * numeral[i][1]
            roman = roman .. numeral[i][2]:rep(div)
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local result = ""
      local num = number
      local numeral = {
        {1000, "m"},
        {900, "cm"},
        {500, "d"},
        {400, "cd"},
        {100, "c"},
        {90, "xc"},
        {50, "l"},
        {40, "xl"},
        {10, "x"},
        {9, "ix"},
        {5, "v"},
        {4, "iv"},
        {1, "i"}
      }
      for _, v in ipairs(numeral) do
        while num >= v[1] do
          result = result .. v[2]
          num = num - v[1]
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman = ''
      local num = number
      local digits = {'i', 'v', 'x', 'l', 'c', 'd', 'm'}
      local i = 1
      while num > 0 do
        local digit = num % 10
        if digit == 4 then
          roman = digits[i] .. digits[i+1] .. roman
        elseif digit == 9 then
          roman = digits[i] .. digits[i+2] .. roman
        else
          local fives = digit >= 5 and digits[i+1] or ''
          local ones = digit % 5
          roman = fives .. string.rep(digits[i], ones) .. roman
        end
        num = math.floor(num / 10)
        i = i + 2
      end
      return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numeral = ""
      local numeral_table = {
        {1000, "m"},
        {900, "cm"},
        {500, "d"},
        {400, "cd"},
        {100, "c"},
        {90, "xc"},
        {50, "l"},
        {40, "xl"},
        {10, "x"},
        {9, "ix"},
        {5, "v"},
        {4, "iv"},
        {1, "i"}
      }
      for _, numeral in ipairs(numeral_table) do
        local value, letter = numeral[1], numeral[2]
        while number >= value do
          roman_numeral = roman_numeral .. letter
          number = number - value
        end
      end
      return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local roman, value = numeral[1], numeral[2]
            while number >= value do
                result = result .. roman
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        local numeral, value
        for i = 1, #mini_roman_numerals do
            numeral = mini_roman_numerals[i]
            value = mini_roman_values[i]
            while num >= value do
                roman = roman .. numeral
                num = num - value
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeoexdwr2.lua:15:
    attempt to get length of a nil value (global 'mini_roman_numerals')\nstack traceback:\n\t/tmp/tmpeoexdwr2.lua:15:
    in local 'candidate'\n\t/tmp/tmpeoexdwr2.lua:29: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local num = number
        local numeral_map = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'},
        }
        for _, pair in ipairs(numeral_map) do
            local arabic, roman_numeral = table.unpack(pair)
            while num >= arabic do
                roman = roman .. roman_numeral
                num = num - arabic
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_numeral = ''
        for _, pair in ipairs(roman_numerals) do
            local decimal, numeral = unpack(pair)
            while number >= decimal do
                roman_numeral = roman_numeral .. numeral
                number = number - decimal
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa1e7ggf1.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpa1e7ggf1.lua:29:
    in local 'candidate'\n\t/tmp/tmpa1e7ggf1.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ''
        local numbers = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
        local roman_numerals = {'m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'}
        for i, num in ipairs(numbers) do
            while number >= num do
                roman = roman .. roman_numerals[i]
                number = number - num
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        for i = 1, #roman_numerals do
            local arabic, roman_numeral = roman_numerals[i][1], roman_numerals[i][2]
            while num >= arabic do
                roman = roman .. roman_numeral
                num = num - arabic
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi12tyxxc.lua:14:
    attempt to get length of a nil value (global 'roman_numerals')\nstack traceback:\n\t/tmp/tmpi12tyxxc.lua:14:
    in local 'candidate'\n\t/tmp/tmpi12tyxxc.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        local numeral = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for i = 1, #numeral do
            while num >= numeral[i][1] do
                roman = roman .. numeral[i][2]
                num = num - numeral[i][1]
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local arabic, roman = numeral[1], numeral[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, numeral in ipairs(roman_numerals) do
        while number >= numeral[1] do
          result = result .. numeral[2]
          number = number - numeral[1]
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {'i', 'v'},
        {'x', 'l'},
        {'c', 'd'},
        {'m'}
      }
      local result = ''
      local digit = 1
      while number > 0 do
        local digit_value = number % 10
        if digit_value > 0 then
          local roman_digit = roman_numerals[digit]
          if digit_value <= 3 then
            result = roman_digit[1]:rep(digit_value) .. result
          elseif digit_value == 4 then
            result = roman_digit[1] .. roman_digit[2] .. result
          elseif digit_value == 5 then
            result = roman_digit[2] .. result
          elseif digit_value <= 8 then
            result = roman_digit[2] .. roman_digit[1]:rep(digit_value - 5) .. result
          else
            result = roman_digit[1] .. roman_numerals[digit + 1][1] .. result
          end
        end
        number = math.floor(number / 10)
        digit = digit + 1
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local value, letter = unpack(numeral)
            while number >= value do
                result = result .. letter
                number = number - value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvplu33js.lua:29:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvplu33js.lua:29:
    in local 'candidate'\n\t/tmp/tmpvplu33js.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_string = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                roman_string = roman_string .. roman
                number = number - arabic
            end
        end
        return roman_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {'m', 1000},
            {'cm', 900},
            {'d', 500},
            {'cd', 400},
            {'c', 100},
            {'xc', 90},
            {'l', 50},
            {'xl', 40},
            {'x', 10},
            {'ix', 9},
            {'v', 5},
            {'iv', 4},
            {'i', 1}
        }
        local result = ''
        for _, numeral in ipairs(roman_numerals) do
            local numeral_string, numeral_value = numeral[1], numeral[2]
            while number >= numeral_value do
                result = result .. numeral_string
                number = number - numeral_value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman = ""
        local num = number
        while num > 0 do
            if num >= 1000 then
                roman = roman .. "m"
                num = num - 1000
            elseif num >= 900 then
                roman = roman .. "cm"
                num = num - 900
            elseif num >= 500 then
                roman = roman .. "d"
                num = num - 500
            elseif num >= 400 then
                roman = roman .. "cd"
                num = num - 400
            elseif num >= 100 then
                roman = roman .. "c"
                num = num - 100
            elseif num >= 90 then
                roman = roman .. "xc"
                num = num - 90
            elseif num >= 50 then
                roman = roman .. "l"
                num = num - 50
            elseif num >= 40 then
                roman = roman .. "xl"
                num = num - 40
            elseif num >= 10 then
                roman = roman .. "x"
                num = num - 10
            elseif num >= 9 then
                roman = roman .. "ix"
                num = num - 9
            elseif num >= 5 then
                roman = roman .. "v"
                num = num - 5
            elseif num >= 4 then
                roman = roman .. "iv"
                num = num - 4
            elseif num >= 1 then
                roman = roman .. "i"
                num = num - 1
            end
        end
        return roman
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for i = 1, #roman_numerals do
            local arabic, roman = table.unpack(roman_numerals[i])
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, v in ipairs(roman_numerals) do
            while number >= v[1] do
                result = result .. v[2]
                number = number - v[1]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local result = ""
        local num = number
        local numeral_map = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, pair in ipairs(numeral_map) do
            local div, numeral = table.unpack(pair)
            while num >= div do
                result = result .. numeral
                num = num - div
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local result = ''
      local num = number
      while num > 0 do
        if num >= 1000 then
          result = result .. 'm'
          num = num - 1000
        elseif num >= 900 then
          result = result .. 'cm'
          num = num - 900
        elseif num >= 500 then
          result = result .. 'd'
          num = num - 500
        elseif num >= 400 then
          result = result .. 'cd'
          num = num - 400
        elseif num >= 100 then
          result = result .. 'c'
          num = num - 100
        elseif num >= 90 then
          result = result .. 'xc'
          num = num - 90
        elseif num >= 50 then
          result = result .. 'l'
          num = num - 50
        elseif num >= 40 then
          result = result .. 'xl'
          num = num - 40
        elseif num >= 10 then
          result = result .. 'x'
          num = num - 10
        elseif num >= 9 then
          result = result .. 'ix'
          num = num - 9
        elseif num >= 5 then
          result = result .. 'v'
          num = num - 5
        elseif num >= 4 then
          result = result .. 'iv'
          num = num - 4
        elseif num >= 1 then
          result = result .. 'i'
          num = num - 1
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local roman_string = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                roman_string = roman_string .. roman
                number = number - arabic
            end
        end
        return roman_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numerals = {
            {1000, 'm'},
            {900, 'cm'},
            {500, 'd'},
            {400, 'cd'},
            {100, 'c'},
            {90, 'xc'},
            {50, 'l'},
            {40, 'xl'},
            {10, 'x'},
            {9, 'ix'},
            {5, 'v'},
            {4, 'iv'},
            {1, 'i'}
        }
        local result = ''
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = table.unpack(pair)
            while number >= arabic do
                result = result .. roman
                number = number - arabic
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
        local roman_numeral = ""
        local roman_numerals = {
            {1000, "m"},
            {900, "cm"},
            {500, "d"},
            {400, "cd"},
            {100, "c"},
            {90, "xc"},
            {50, "l"},
            {40, "xl"},
            {10, "x"},
            {9, "ix"},
            {5, "v"},
            {4, "iv"},
            {1, "i"}
        }
        for _, pair in ipairs(roman_numerals) do
            local arabic, roman = pair[1], pair[2]
            while number >= arabic do
                roman_numeral = roman_numeral .. roman
                number = number - arabic
            end
        end
        return roman_numeral
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a positive integer, obtain its roman numeral equivalent as a string,
    -- and return it in lowercase.
    -- Restrictions: 1 <= num <= 1000
    -- Examples:
    -- >>> int_to_mini_roman(19)
    -- 'xix'
    -- >>> int_to_mini_roman(152)
    -- 'clii'
    -- >>> int_to_mini_roman(426)
    -- 'cdxxvi'
    local function int_to_mini_roman(number)
      local roman_numerals = {
        {1000, 'm'},
        {900, 'cm'},
        {500, 'd'},
        {400, 'cd'},
        {100, 'c'},
        {90, 'xc'},
        {50, 'l'},
        {40, 'xl'},
        {10, 'x'},
        {9, 'ix'},
        {5, 'v'},
        {4, 'iv'},
        {1, 'i'}
      }
      local result = ''
      for _, pair in ipairs(roman_numerals) do
        local arabic, roman = pair[1], pair[2]
        while number >= arabic do
          result = result .. roman
          number = number - arabic
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = int_to_mini_roman
        lu.assertEquals(candidate(19), 'xix')
        lu.assertEquals(candidate(152), 'clii')
        lu.assertEquals(candidate(251), 'ccli')
        lu.assertEquals(candidate(426), 'cdxxvi')
        lu.assertEquals(candidate(500), 'd')
        lu.assertEquals(candidate(1), 'i')
        lu.assertEquals(candidate(4), 'iv')
        lu.assertEquals(candidate(43), 'xliii')
        lu.assertEquals(candidate(90), 'xc')
        lu.assertEquals(candidate(94), 'xciv')
        lu.assertEquals(candidate(532), 'dxxxii')
        lu.assertEquals(candidate(900), 'cm')
        lu.assertEquals(candidate(994), 'cmxciv')
        lu.assertEquals(candidate(1000), 'm')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
