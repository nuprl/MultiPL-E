---
name: HumanEval_125_split_words
language: lua
prompt: |
  -- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you
  -- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
  -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
  -- Examples
  -- >>> split_words('Hello world!')
  -- {'Hello', 'world!'}
  -- >>> split_words('Hello,world!')
  -- {'Hello', 'world!'}
  -- >>> split_words('abcdef')
  -- 3
  local function split_words(txt)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = split_words
      lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})
      lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})
      lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})
      lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})
      lu.assertEquals(candidate('abcdef'), 3)
      lu.assertEquals(candidate('aaabb'), 2)
      lu.assertEquals(candidate('aaaBb'), 1)
      lu.assertEquals(candidate(''), 0)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local words = {}
      local n = 0
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for c in txt:gmatch('.') do
              local o = c:byte() - string.byte('a')
              if o % 2 == 1 then
                  n = n + 1
              end
          end
      end
      return #words > 0 and words or n
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  odd_count = odd_count + (c:byte() - string.byte('a'))
              end
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      for word in string.gmatch(txt, "[^%s]+") do
          table.insert(words, word)
      end
      if #words == 0 then
          words = {}
          for word in string.gmatch(txt, "[^,]+") do
              table.insert(words, word)
          end
          if #words == 0 then
              local count = 0
              for i = 1, #txt do
                  local c = string.byte(txt, i) - string.byte('a')
                  if c % 2 == 1 then
                      count = count + 1
                  end
              end
              return count
          end
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c then
                  local ord = c:byte() - string.byte('a')
                  if ord % 2 == 1 then
                      count = count + 1
                  end
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return count
      end
      return words
  end
- |2-
      local words = {}
      local len = #txt
      local i = 1
      local j = 1
      while i <= len do
          if txt:sub(i, i) == ' ' then
              words[#words + 1] = txt:sub(j, i - 1)
              j = i + 1
          elseif txt:sub(i, i) == ',' then
              words[#words + 1] = txt:sub(j, i - 1)
              j = i + 1
          end
          i = i + 1
      end
      if #words == 0 then
          local odd = 0
          for i = 1, len do
              if txt:sub(i, i):byte() % 2 == 1 then
                  odd = odd + 1
              end
          end
          return odd
      end
      words[#words + 1] = txt:sub(j, len)
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c then
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      count = count + 1
                  end
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for word in txt:gmatch('%a+') do
              words[#words + 1] = word
          end
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local n = 0
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for i = 1, #txt do
              if txt:byte(i) - 97 == i % 2 then
                  n = n + 1
              end
          end
          return n
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c then
                  local ord = c:byte() - string.byte('a')
                  if ord % 2 == 1 then
                      count = count + 1
                  end
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return count
      end
      return words
  end
- |2-
      local words = {}
      local n = 0
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for c in txt:gmatch('%a') do
              n = n + (c:byte() - ord('a')) % 2
          end
      end
      return #words > 0 and words or n
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c and c:upper() == c then
                  count = count + 1
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if (i % 2) == 1 then
                  count = count + txt:byte(i) - string.byte('a')
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  odd_count = odd_count + (c:byte() - ord('a'))
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local words = {}
      for word in string.gmatch(txt, "%S+") do
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local odd_letters = 0
      for letter in string.gmatch(txt, "%a") do
          local ord = string.byte(letter) - string.byte('a')
          if ord % 2 == 1 then
              odd_letters = odd_letters + 1
          end
      end
      return odd_letters
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('.') do
              if c:byte() - 97 % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char == ' ' or char == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. char
              if i % 2 == 1 then
                  local ord = string.byte(char) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      if txt:find(' ') then
          return txt:split(' ')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:byte() >= 97 and c:byte() <= 122 and i % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local n = string.byte(c) - string.byte('a')
          if n % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      -- TODO: Implement
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local i = 1
      local j = 1
      local len = #txt
      while i <= len do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if i > j then
                  words[#words + 1] = txt:sub(j, i - 1)
              end
              j = i + 1
          end
          i = i + 1
      end
      if i > j then
          words[#words + 1] = txt:sub(j, i - 1)
      end
      if #words == 0 then
          local cnt = 0
          for i = 1, len do
              local c = txt:sub(i, i)
              if (c:byte() - ord('a')) % 2 == 1 then
                  cnt = cnt + 1
              end
          end
          return cnt
      end
      return words
  end
- |2-
      local words = {}
      local word = ""
      local odd_letters = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= "" then
                  table.insert(words, word)
                  word = ""
              end
          else
              word = word .. c
          end
          if c:match("[a-z]") then
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  odd_letters = odd_letters + 1
              end
          end
      end
      if word ~= "" then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_letters
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if (txt:byte(i) - ord('a')) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
    local words = {}
    local word = ''
    local odd_count = 0
    for i = 1, #txt do
      local c = txt:sub(i, i)
      if c == ' ' or c == ',' then
        if #word > 0 then
          words[#words + 1] = word
          word = ''
        end
      else
        word = word .. c
        if (c:byte() - ord('a')) % 2 == 1 then
          odd_count = odd_count + 1
        end
      end
    end
    if #word > 0 then
      words[#words + 1] = word
    end
    if #words > 0 then
      return words
    else
      return odd_count
    end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      -- TODO: Implement this function
      return {}
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  sum = sum + 1
              end
          end
          return sum
      end
      return words
  end
- |2-
      -- TODO: Implement
      return {}
  end
- |2-
      local words = {}
      local i = 1
      for word in string.gmatch(txt, "[^%s]+") do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          words = {}
          i = 1
          for word in string.gmatch(txt, "[^,]+") do
              words[i] = word
              i = i + 1
          end
          if #words == 0 then
              local count = 0
              for i = 1, #txt do
                  local c = string.byte(txt, i)
                  if c >= 97 and c <= 122 and i % 2 == 1 then
                      count = count + 1
                  end
              end
              return count
          end
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
    -- TODO: Implement
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('.') do
              if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local n = string.byte(c) - string.byte('a')
          if n % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local words = {}
    local word = ''
    local odd_count = 0
    for i = 1, #txt do
      local c = txt:sub(i, i)
      if c == ' ' or c == ',' then
        if #word > 0 then
          words[#words + 1] = word
          word = ''
        end
      else
        word = word .. c
        local ord = string.byte(c) - string.byte('a')
        if ord % 2 == 1 then
          odd_count = odd_count + 1
        end
      end
    end
    if #word > 0 then
      words[#words + 1] = word
    end
    if #words > 0 then
      return words
    else
      return odd_count
    end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local n = string.byte(c) - string.byte('a')
          if n % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local count = 0
      for word in txt:gmatch('%w+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for i = 1, #txt do
              if txt:sub(i, i):lower():byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c then
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      count = count + 1
                  end
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c and c:upper() ~= c then
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local t = {}
      local i = 1
      local j = 1
      local n = 0
      while j <= #txt do
          if txt:sub(j, j) == ' ' or txt:sub(j, j) == ',' then
              if i < j then
                  t[#t + 1] = txt:sub(i, j - 1)
                  n = n + 1
              end
              i = j + 1
          end
          j = j + 1
      end
      if i <= j then
          t[#t + 1] = txt:sub(i, j - 1)
          n = n + 1
      end
      if n == 0 then
          n = 0
          for i = 1, #txt do
              if txt:sub(i, i) >= 'a' and txt:sub(i, i) <= 'z' and (i % 2) == 1 then
                  n = n + 1
              end
          end
      end
      return n == 0 and t or n
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if (txt:byte(i) - ord('a')) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local odd = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() ~= c:upper() then
                  local o = c:lower():byte() - string.byte('a')
                  if o % 2 == 1 then
                      odd = odd + 1
                  end
              end
          end
          return odd
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local odd = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = c:byte() - string.byte('a')
          if o % 2 == 1 then
              odd = odd + 1
          end
      end
      return odd
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                  count = count + 1
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      -- your code here
      local t = {}
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      local flag = 0
      while i <= #txt do
          if txt:sub(i, i) == ' ' then
              t[j] = txt:sub(k, i - 1)
              j = j + 1
              k = i + 1
              flag = 1
          elseif txt:sub(i, i) == ',' then
              t[j] = txt:sub(k, i - 1)
              j = j + 1
              k = i + 1
              flag = 1
          elseif txt:sub(i, i) >= 'a' and txt:sub(i, i) <= 'z' then
              if (i - k) % 2 == 1 then
                  count = count + 1
              end
          end
          i = i + 1
      end
      if flag == 1 then
          return t
      else
          return count
      end
  end
- |2-
      -- TODO: Implement
      return nil
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if (txt:byte(i) - ord('a')) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  sum = sum + 1
              end
          end
          return sum
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_letters = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  odd_letters = odd_letters + 1
              end
          end
          return odd_letters
      end
  end
- |2-
      local words = {}
      local i = 1
      local j = 1
      while i <= #txt do
          if txt:sub(i, i) == ' ' then
              words[j] = txt:sub(1, i - 1)
              j = j + 1
              txt = txt:sub(i + 1)
              i = 1
          elseif txt:sub(i, i) == ',' then
              words[j] = txt:sub(1, i - 1)
              j = j + 1
              txt = txt:sub(i + 1)
              i = 1
          else
              i = i + 1
          end
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:sub(i, i) ~= ' ' and txt:sub(i, i) ~= ',' then
                  if (ord(txt:sub(i, i)) - ord('a')) % 2 == 1 then
                      count = count + 1
                  end
              end
          end
          return count
      else
          words[j] = txt
          return words
      end
  end
- |2-
    -- TODO: Implement
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local ord = string.byte(c) - string.byte('a')
          if ord % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c then
                  sum = sum + (i % 2)
              end
          end
          return sum
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                  count = count + 1
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local ord = string.byte(c) - string.byte('a')
          if ord % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local odd = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = c:byte() - string.byte('a')
          if o % 2 == 1 then
              odd = odd + 1
          end
      end
      return odd
  end
- |2-
      local words = {}
      local word = ''
      local i = 1
      while i <= #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
          i = i + 1
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      local odd = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = c:byte() - ord('a')
          if o % 2 == 1 then
              odd = odd + 1
          end
      end
      return odd
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = c:byte() - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
          if c >= 'a' and c <= 'z' and i % 2 == 1 then
              odd_count = odd_count + 1
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = c:byte() - string.byte('a')
              if o % 2 == 1 then
                  sum = sum + 1
              end
          end
          return sum
      end
      return words
  end
- |2-
      local words = {}
      local n = 0
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for c in txt:gmatch('.') do
              local o = c:byte() - string.byte('a')
              if o % 2 == 1 then
                  n = n + 1
              end
          end
      end
      return #words > 0 and words or n
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('.') do
              if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local i = 1
      local odd_count = 0
      while i <= #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
          i = i + 1
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local ord = string.byte(c) - string.byte('a')
          if ord % 2 == 1 then
              odd_count = odd_count + 1
          end
      end
      return odd_count
  end
- |2-
      local words = {}
      for word in string.gmatch(txt, '[^%s]+') do
          table.insert(words, word)
      end
      if #words == 0 then
          words = {}
          for word in string.gmatch(txt, '[^,]+') do
              table.insert(words, word)
          end
          if #words == 0 then
              local count = 0
              for i = 1, #txt do
                  local c = string.byte(txt, i)
                  if c >= 97 and c <= 122 and i % 2 == 1 then
                      count = count + 1
                  end
              end
              return count
          end
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local n = string.byte(c) - string.byte('a')
          if n % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      if txt:find('%s') then
          return txt:split('%s')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      if txt:find(' ') then
          return txt:split(' ')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = c:byte() - 97
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local i = 1
      local j = 1
      local len = string.len(txt)
      while i <= len do
          if string.sub(txt, i, i) == ' ' then
              words[j] = string.sub(txt, 1, i - 1)
              j = j + 1
              txt = string.sub(txt, i + 1, len)
              i = 1
              len = string.len(txt)
          elseif string.sub(txt, i, i) == ',' then
              words[j] = string.sub(txt, 1, i - 1)
              j = j + 1
              txt = string.sub(txt, i + 1, len)
              i = 1
              len = string.len(txt)
          else
              i = i + 1
          end
      end
      if len > 0 then
          words[j] = txt
      end
      if #words == 0 then
          local count = 0
          for i = 1, len do
              if string.byte(txt, i) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c and c:upper() ~= c then
                  local ord = c:byte() - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- "\tif txt:find(' ') then\n\t\treturn txt:split(' ')\n\telseif txt:find(',') then\n\t\treturn
  txt:split(',')\n\telse\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\tlocal
  c = txt:sub(i, i)\n\t\t\tlocal n = c:byte() - 97\n\t\t\tif n % 2 == 1 then\n\t\t\t\tcount
  = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\nend"
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local ord = string.byte(c) - string.byte('a')
          if ord % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      for c in txt:gmatch('.') do
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c and c:upper() == c then
                  odd_count = odd_count + 1
              end
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  sum = sum + 1
              end
          end
          return sum
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char == ' ' or char == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. char
              if char:lower() == char and char:upper() ~= char then
                  local ord = string.byte(char) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('[^%s]+') do
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for word in txt:gmatch('[^,]+') do
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local count = 0
      for c in txt:gmatch('[a-z]') do
          if (string.byte(c) - string.byte('a')) % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local i = 1
      for word in string.gmatch(txt, "%S+") do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in string.gmatch(txt, "%a") do
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c and c:upper() == c then
                  -- skip non-alphabetic characters
              else
                  local ord = c:lower():byte() - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local odd_count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() ~= c:upper() then
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
          return odd_count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for c in txt:gmatch('.') do
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = c:byte() - ord('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and (i % 2) == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local ord = string.byte(c) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c and c:upper() ~= c then
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for word in txt:gmatch('%a+') do
              words[#words + 1] = word
          end
      end
      if #words == 0 then
          local odd = 0
          for char in txt:gmatch('%a') do
              if char:byte() % 2 == 1 then
                  odd = odd + 1
              end
          end
          return odd
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          return odd_count
      else
          return words
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      local split_char = ' '
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == split_char then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          elseif c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
              split_char = ','
          else
              word = word .. c
              if c:lower() == c then
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local ch = txt:sub(i, i)
          if ch == ' ' or ch == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. ch
              local ord = string.byte(ch) - string.byte('a')
              if ord % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local n = string.byte(c) - string.byte('a')
          if n % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local n = string.byte(c) - string.byte('a')
          if n % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local letters = {}
      for letter in txt:gmatch('%a') do
          table.insert(letters, letter)
      end
      if #letters > 0 then
          local count = 0
          for i, letter in ipairs(letters) do
              if i % 2 == 1 then
                  local ord = string.byte(letter) - string.byte('a')
                  if ord % 2 == 1 then
                      count = count + 1
                  end
              end
          end
          return count
      end
      return nil
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      local letters = {}
      for letter in txt:gmatch('%a') do
          letters[#letters + 1] = letter
      end
      if #letters > 0 then
          local odd_count = 0
          for _, letter in ipairs(letters) do
              if (letter:byte() - 97) % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
          return odd_count
      end
      return nil
  end
- |2-
      local words = {}
      local word = ''
      local odd = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  odd = odd + 1
              end
          end
          return odd
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('[^%s]+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) - ord('a') % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local n = 0
      for w in txt:gmatch('[^%s]+') do
          words[#words + 1] = w
          n = n + 1
      end
      if n == 0 then
          n = 0
          for w in txt:gmatch('[^,]+') do
              words[#words + 1] = w
              n = n + 1
          end
      end
      if n == 0 then
          n = 0
          for c in txt:gmatch('.') do
              local o = c:byte() - string.byte('a')
              if o % 2 == 1 then
                  n = n + 1
              end
          end
      end
      return n == 0 and words or n
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local odd_letters = 0
          for letter in txt:gmatch('%a') do
              if (string.byte(letter) - string.byte('a')) % 2 == 1 then
                  odd_letters = odd_letters + 1
              end
          end
          return odd_letters
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
          if c >= 'a' and c <= 'z' and i % 2 == 1 then
              odd_count = odd_count + 1
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local i = 1
      for word in string.gmatch(txt, "%S+") do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = string.byte(txt, i) - string.byte('a')
              if c % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for word in txt:gmatch('[^,]+') do
              words[#words + 1] = word
          end
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c >= 'a' and c <= 'z' and i % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      if txt:find(' ') then
          return txt:split(' ')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c and c:upper() == c then
                  -- skip non-alphabet characters
              else
                  local ord = string.byte(c) - string.byte('a')
                  if ord % 2 == 1 then
                      odd_count = odd_count + 1
                  end
              end
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      if txt:find('%s') then
          return txt:split('%s')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:byte() - ord('a') % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and (i % 2) == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local n = string.byte(c) - string.byte('a')
          if n % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local i = 1
      for word in string.gmatch(txt, "%S+") do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local odd_count = 0
          for c in string.gmatch(txt, "%a") do
              if string.byte(c) % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
          return odd_count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%w+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) - ord('a') % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('.') do
              local n = c:byte() - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char == ' ' or char == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. char
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          for i = 1, #txt do
              local char = txt:sub(i, i)
              local ord = string.byte(char) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
    local words = {}
    for word in txt:gmatch('%S+') do
      words[#words + 1] = word
    end
    if #words == 0 then
      local count = 0
      for i = 1, #txt do
        local c = txt:sub(i, i)
        if c:match('%l') and i % 2 == 1 then
          count = count + 1
        end
      end
      return count
    end
    return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char == ' ' or char == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. char
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char >= 'a' and char <= 'z' and i % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                  count = count + 1
              end
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for word in txt:gmatch('%a+') do
              words[#words + 1] = word
          end
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local ord = string.byte(c) - string.byte('a')
          if ord % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      if txt:find(' ') then
          return txt:split(' ')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      if txt:find(' ') then
          return txt:split(' ')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c >= 'a' and c <= 'z' and i % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if string.byte(c) % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local ord = string.byte(c) - string.byte('a')
          if ord % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = c:byte() - 97
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) - 96 & 1 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = string.byte(c) - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      for word in string.gmatch(txt, "[^%s]+") do
          table.insert(words, word)
      end
      if #words == 0 then
          for word in string.gmatch(txt, "[^,]+") do
              table.insert(words, word)
          end
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = string.byte(txt, i)
              if c >= string.byte('a') and c <= string.byte('z') and i % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      local j = 1
      local n = 0
      while true do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' or c == '' then
              if i > j then
                  words[#words + 1] = txt:sub(j, i - 1)
              end
              if c == '' then
                  break
              end
              j = i + 1
          elseif c:match('%l') then
              n = n + (ord(c) % 2)
          end
          i = i + 1
      end
      if #words == 0 then
          return n
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('[a-z]') do
              if (c:byte() - 97) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('[a-z]') do
              if (c:byte() - 97) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('.') do
              if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
    local t = {}
    local i = 1
    local j = 1
    local k = 1
    local n = 0
    local c = 0
    local s = 0
    local e = 0
    local f = 0
    local l = string.len(txt)
    while i <= l do
      j = i
      while j <= l and string.byte(txt, j) ~= 32 and string.byte(txt, j) ~= 44 do
        j = j + 1
      end
      if j > i then
        if j < l then
          k = j + 1
          while k <= l and string.byte(txt, k) ~= 32 and string.byte(txt, k) ~= 44 do
            k = k + 1
          end
          if k > j + 1 then
            t[#t + 1] = string.sub(txt, i, j - 1)
            i = k
          else
            i = j
          end
        else
          t[#t + 1] = string.sub(txt, i, j - 1)
          i = j
        end
      else
        i = j + 1
      end
    end
    if #t == 0 then
      while i <= l do
        c = string.byte(txt, i)
        if c >= 97 and c <= 122 then
          if (c - 97) % 2 == 0 then
            s = s + 1
          else
            e = e + 1
          end
        end
        i = i + 1
      end
      if s > e then
        f = e
      else
        f = s
      end
      return f
    else
      return t
    end
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
              if i % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and (i % 2) == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char == ' ' or char == ',' then
              if #word > 0 then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. char
              if char:lower() == char:sub(1, 1) and char:lower() == char:sub(1, 1):byte() % 2 == 1 then
                  count = count + 1
              end
          end
      end
      if #word > 0 then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return count
      end
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              if txt:byte(i) - ord('a') % 2 == 1 then
                  sum = sum + 1
              end
          end
          return sum
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      local j = 1
      local count = 0
      while i <= #txt do
          if txt:sub(i, i) == ' ' or txt:sub(i, i) == ',' then
              if i > j then
                  words[#words + 1] = txt:sub(j, i - 1)
              end
              j = i + 1
          elseif txt:sub(i, i) >= 'a' and txt:sub(i, i) <= 'z' then
              count = count + (i - j) % 2
          end
          i = i + 1
      end
      if i > j then
          words[#words + 1] = txt:sub(j, i - 1)
      end
      if #words == 0 then
          return count
      else
          return words
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for word in txt:gmatch('%a+') do
              words[#words + 1] = word
          end
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local odd_letters = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() ~= c:upper() then
                  if (c:lower():byte() - 97) % 2 == 1 then
                      odd_letters = odd_letters + 1
                  end
              end
          end
          return odd_letters
      end
      return words
  end
- |2-
      local words = {}
      local word = ""
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == " " or c == "," then
              if #word > 0 then
                  table.insert(words, word)
                  word = ""
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = c:byte() - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local n = 0
      for word in string.gmatch(txt, "[^%s,]+") do
          table.insert(words, word)
          n = n + 1
      end
      if n == 0 then
          for c in string.gmatch(txt, "[a-z]") do
              n = n + (string.byte(c) - string.byte('a')) % 2
          end
      end
      return n == 0 and words or n
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for c in txt:gmatch('.') do
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c then
                  odd_count = odd_count + (c:byte() % 2)
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('.') do
              if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  sum = sum + 1
              end
          end
          return sum
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      local j = 1
      local n = 0
      while true do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' or c == '' then
              if i > j then
                  words[#words + 1] = txt:sub(j, i - 1)
              end
              if c == '' then
                  break
              end
              j = i + 1
          elseif c:match('%a') then
              local ord = c:byte() - ord('a')
              if ord % 2 == 0 then
                  n = n + 1
              end
          end
          i = i + 1
      end
      if #words == 0 then
          return n
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char == ' ' or char == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. char
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words == 0 then
          for i = 1, #txt do
              local char = txt:sub(i, i)
              local ord = string.byte(char) - string.byte('a')
              if ord % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and c:byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local o = string.byte(c) - string.byte('a')
              if o % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local sum = 0
          for i = 1, #txt do
              if (i % 2 == 1) and (txt:byte(i) >= 97) and (txt:byte(i) <= 122) then
                  sum = sum + 1
              end
          end
          return sum
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) - 96 % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  words[#words + 1] = word
                  word = ''
              end
          else
              word = word .. c
              if c:lower() == c:sub(1, 1) and i % 2 == 1 then
                  count = count + 1
              end
          end
      end
      if word ~= '' then
          words[#words + 1] = word
      end
      if #words > 0 then
          return words
      else
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c >= 'a' and c <= 'z' then
                  local n = c:byte() - 'a':byte()
                  if n % 2 == 0 then
                      count = count + 1
                  end
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) - ord('a') % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words == 0 then
          local count = 0
          for c in txt:gmatch('.') do
              if c:byte() >= 97 and c:byte() <= 122 and (c:byte() - 96) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          table.insert(words, word)
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:lower() == c and (i % 2) == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local i = 1
      for word in txt:gmatch('%S+') do
          words[i] = word
          i = i + 1
      end
      if #words > 0 then
          return words
      end
      local odd_letters = 0
      for c in txt:gmatch('.') do
          if c:lower() ~= c:upper() then
              local ord = string.byte(c:lower()) - string.byte('a')
              if ord % 2 == 1 then
                  odd_letters = odd_letters + 1
              end
          end
      end
      return odd_letters
  end
- |2-
      if txt:find(' ') then
          return txt:split(' ')
      elseif txt:find(',') then
          return txt:split(',')
      else
          local count = 0
          for i = 1, #txt do
              if txt:byte(i) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local word = ''
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = c:byte() - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
    local words = {}
    local i = 1
    local j = 1
    local n = 0
    while true do
      local c = txt:sub(i, i)
      if c == ' ' or c == ',' or c == '' then
        if i > j then
          words[#words + 1] = txt:sub(j, i - 1)
        end
        if c == '' then
          break
        end
        j = i + 1
      end
      i = i + 1
    end
    if #words == 0 then
      for i = 1, #txt do
        local c = txt:sub(i, i)
        local o = c:byte() - string.byte('a')
        if o >= 0 and o < 26 then
          n = n + (o % 2 == 0 and -1 or 1)
        end
      end
      return n
    end
    return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      local i = 1
      local j = 1
      local n = 0
      while true do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' or c == '' then
              if i > j then
                  words[#words + 1] = txt:sub(j, i - 1)
              end
              if c == '' then
                  break
              end
              j = i + 1
          elseif c >= 'a' and c <= 'z' then
              n = n + (i - 1) % 2
          end
          i = i + 1
      end
      if #words == 0 then
          return n
      end
      return words
  end
- |2-
      local words = {}
      local count = 0
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for i = 1, #txt do
              if txt:sub(i, i):lower():byte() % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
    local words = {}
    local word = ''
    local count = 0
    for i = 1, #txt do
      local c = txt:sub(i, i)
      if c == ' ' or c == ',' then
        if #word > 0 then
          words[#words + 1] = word
          word = ''
        end
      else
        word = word .. c
      end
    end
    if #word > 0 then
      words[#words + 1] = word
    end
    if #words > 0 then
      return words
    end
    for i = 1, #txt do
      local c = txt:sub(i, i)
      local ord = string.byte(c) - string.byte('a')
      if ord % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local words = {}
      local word = ''
      local odd_count = 0
      for i = 1, #txt do
          local char = txt:sub(i, i)
          if char == ' ' or char == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. char
              if i % 2 == 1 then
                  odd_count = odd_count + 1
              end
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          return odd_count
      end
  end
- |2-
    local words = {}
    local word = ''
    local count = 0
    for i = 1, #txt do
      local c = txt:sub(i, i)
      if c == ' ' or c == ',' then
        if word ~= '' then
          words[#words + 1] = word
          word = ''
        end
      else
        word = word .. c
      end
    end
    if word ~= '' then
      words[#words + 1] = word
    end
    if #words > 0 then
      return words
    end
    for i = 1, #txt do
      local c = txt:sub(i, i)
      local o = string.byte(c) - string.byte('a')
      if o % 2 == 1 then
        count = count + 1
      end
    end
    return count
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if word ~= '' then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if word ~= '' then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      end
      for i = 1, #txt do
          local c = txt:sub(i, i)
          local o = c:byte() - string.byte('a')
          if o % 2 == 1 then
              count = count + 1
          end
      end
      return count
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          for word in txt:gmatch('[^,]+') do
              words[#words + 1] = word
          end
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              local c = txt:sub(i, i)
              if c:match('%l') and i % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
- |2-
      local words = {}
      local word = ''
      local count = 0
      for i = 1, #txt do
          local c = txt:sub(i, i)
          if c == ' ' or c == ',' then
              if #word > 0 then
                  table.insert(words, word)
                  word = ''
              end
          else
              word = word .. c
          end
      end
      if #word > 0 then
          table.insert(words, word)
      end
      if #words > 0 then
          return words
      else
          for i = 1, #txt do
              local c = txt:sub(i, i)
              local n = string.byte(c) - string.byte('a')
              if n % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
  end
- |2-
      local words = {}
      for word in txt:gmatch('%S+') do
          words[#words + 1] = word
      end
      if #words == 0 then
          local count = 0
          for i = 1, #txt do
              if (txt:byte(i) - ord('a')) % 2 == 1 then
                  count = count + 1
              end
          end
          return count
      end
      return words
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
