---
name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and
  returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n--
  A file's name is considered to be valid if and only if all the following conditions
  \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the
  file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring
  before the dot should not be empty, and it starts with a letter from \n-- the latin
  alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should be one
  of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n--
  'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = file_name_check
      lu.assertEquals(candidate('example.txt'), 'Yes')
      lu.assertEquals(candidate('1example.dll'), 'No')
      lu.assertEquals(candidate('s1sdf3.asd'), 'No')
      lu.assertEquals(candidate('K.dll'), 'Yes')
      lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')
      lu.assertEquals(candidate('His12FILE94.exe'), 'No')
      lu.assertEquals(candidate('_Y.txt'), 'No')
      lu.assertEquals(candidate('?aREYA.exe'), 'No')
      lu.assertEquals(candidate('/this_is_valid.dll'), 'No')
      lu.assertEquals(candidate('this_is_valid.wow'), 'No')
      lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')
      lu.assertEquals(candidate('this_is_valid.txtexe'), 'No')
      lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')
      lu.assertEquals(candidate('@this1_is6_valid.exe'), 'No')
      lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')
      lu.assertEquals(candidate('all.exe.txt'), 'No')
      lu.assertEquals(candidate('I563_No.exe'), 'Yes')
      lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')
      lu.assertEquals(candidate('no_one#knows.dll'), 'Yes')
      lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')
      lu.assertEquals(candidate('I563_Yes3.txtt'), 'No')
      lu.assertEquals(candidate('final..txt'), 'No')
      lu.assertEquals(candidate('final132'), 'No')
      lu.assertEquals(candidate('_f4indsartal132.'), 'No')
      lu.assertEquals(candidate('.txt'), 'No')
      lu.assertEquals(candidate('s.'), 'No')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local dot_index = file_name:find('.')
      if not dot_index then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if #prefix == 0 or not prefix:match('^[a-zA-Z]') then
          return 'No'
      end
      if prefix:match('%d') and #prefix:match('%d') > 3 then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_index - 1)
      local suffix = string.sub(file_name, dot_index + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local prefix_digit_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if string.byte(c) >= string.byte('0') and string.byte(c) <= string.byte('9') then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      if string.byte(string.sub(prefix, 1, 1)) < string.byte('a') or string.byte(string.sub(prefix, 1, 1)) > string.byte('z') then
          if string.byte(string.sub(prefix, 1, 1)) < string.byte('A') or string.byte(string.sub(prefix, 1, 1)) > string.byte('Z') then
              return 'No'
          end
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local pre_dot = string.sub(file_name, 1, dot_pos - 1)
      local post_dot = string.sub(file_name, dot_pos + 1)
      local digit_count = 0
      for i = 1, string.len(pre_dot) do
          if string.find('0123456789', string.sub(pre_dot, i, i)) then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      if string.find('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', string.sub(pre_dot, 1, 1)) == nil then
          return 'No'
      end
      if string.find(post_dot, 'txt') == nil and string.find(post_dot, 'exe') == nil and string.find(post_dot, 'dll') == nil then
          return 'No'
      end
      return 'Yes'
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
      local digits = 0
      local dot_index = 0
      local dot_count = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_index = i
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              digits = digits + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if digits > 3 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1) == '' then
          return 'No'
      end
      if not file_name:sub(1, dot_index - 1):match('^[a-zA-Z]') then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      for i = 1, #valid_extensions do
          if extension == valid_extensions[i] then
              return 'Yes'
          end
      end
      return 'No'
  end
- "\tlocal count = 0\n\tlocal dot_count = 0\n\tlocal dot_index = 0\n\tlocal ext =
  ''\n\tlocal ext_list = {'txt', 'exe', 'dll'}\n\tfor i = 1, #file_name do\n\t\tif
  file_name:sub(i, i) == '.' then\n\t\t\tdot_count = dot_count + 1\n\t\t\tdot_index
  = i\n\t\tend\n\t\tif file_name:sub(i, i):match('%d') then\n\t\t\tcount = count +
  1\n\t\tend\n\tend\n\tif count > 3 then\n\t\treturn 'No'\n\tend\n\tif dot_count ~=
  1 then\n\t\treturn 'No'\n\tend\n\tif dot_index == 1 then\n\t\treturn 'No'\n\tend\n\tif
  not file_name:sub(1, 1):match('%a') then\n\t\treturn 'No'\n\tend\n\text = file_name:sub(dot_index
  + 1, #file_name)\n\tfor i = 1, #ext_list do\n\t\tif ext == ext_list[i] then\n\t\t\treturn
  'Yes'\n\t\tend\n\tend\n\treturn 'No'\nend"
- |2-
      local digits = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif c:match('%a') then
              ext = file_name:sub(i)
              break
          end
      end
      if digits > 3 or dot_count ~= 1 or ext == '' or not ext:match('^%.[a-zA-Z]') or not ext:match('^%.[a-zA-Z]%w+$') or not ext:match('^%.[a-zA-Z]%w+%.[a-zA-Z]%w+$') then
          return 'No'
      end
      if ext:match('^%.[a-zA-Z]%w+%.[a-zA-Z]%w+$') then
          ext = ext:sub(#ext - 2)
      elseif ext:match('^%.[a-zA-Z]%w+$') then
          ext = ext:sub(#ext - 1)
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local dot_index_after = 0
      local dot_index_before = 0
      local dot_index_before_letter = 0
      local dot_index_after_letter = 0
      local dot_index_after_letter_count = 0
      local dot_index_before_letter_count = 0
      local dot_index_after_letter_count_txt = 0
      local dot_index_after_letter_count_exe = 0
      local dot_index_after_letter_count_dll = 0
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_after = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_before = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_before_letter = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_after_letter = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_after_letter_count = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_before_letter_count = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_after_letter_count_txt = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_after_letter_count_exe = i
          end
          if file_name:sub(i, i) == '.' then
              dot_index_after_letter_count_dll = i
          end
          if file_name:sub(i, i) == '0' or file_name:sub(i, i) ==
- |2-
    -- TODO: implement this function.
  end
- |2-
      local digits = 0
      local dot_count = 0
      local extension = ''
      local extension_valid = false
      local extension_list = {'txt', 'exe', 'dll'}
      local extension_index = 0
      local extension_index_valid = false
      local extension_index_valid_count = 0
      local extension_index_valid_count_max = 0
      local extension_index_valid_count_max_index = 0
      local extension_index_valid_count_max_index_valid = false
      local extension_index_valid_count_max_index_valid_count = 0
      local extension_index_valid_count_max_index_valid_count_max = 0
      local extension_index_valid_count_max_index_valid_count_max_index = 0
      local extension_index_valid_count_max_index_valid_count_max_index_valid = false
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count = 0
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max = 0
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index = 0
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid = false
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count = 0
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max = 0
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max_index = 0
      local extension_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid_count_max_index_valid = false
      local extension_index_valid_count_max_index_valid
- |2-
      local dot_pos = string.find(file_name, '.')
      if not dot_pos then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.find(prefix, '%d') or string.find(prefix, '%d%d%d') then
          return 'No'
      end
      if not string.find(prefix, '^[a-zA-Z]') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local prefix_digit_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      local c = string.sub(prefix, 1, 1)
      if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_pos = 0
      local ext_pos = 0
      local ext = ''
      local valid_ext = {'txt', 'exe', 'dll'}
      local valid_ext_count = 0
      local valid_ext_pos = 0
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count_flag = false
      local valid_ext_flag = false
      local valid_ext_pos_flag = false
      local valid_ext_count
- |2-
      local digits = 0
      local dot_pos = -1
      local ext_pos = -1
      local ext = ''
      local valid_ext = {'txt', 'exe', 'dll'}
      local valid_ext_map = {}
      for i, v in ipairs(valid_ext) do
          valid_ext_map[v] = true
      end
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              if dot_pos ~= -1 then
                  return 'No'
              end
              dot_pos = i
          elseif c >= '0' and c <= '9' then
              digits = digits + 1
              if digits > 3 then
                  return 'No'
              end
          elseif i == 1 then
              if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
                  return 'No'
              end
          elseif i == dot_pos + 1 then
              ext_pos = i
          elseif i > dot_pos + 1 then
              ext = ext .. c
          end
      end
      if dot_pos == -1 or ext_pos == -1 or not valid_ext_map[ext] then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local num_digits = 0
      local dot_found = false
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_found = true
          elseif c:match('%d') then
              num_digits = num_digits + 1
          elseif dot_found then
              ext = ext .. c
          end
      end
      return (num_digits <= 3 and dot_found and ext:match('^[a-zA-Z]') and ext:match('^txt$|^exe$|^dll$')) and 'Yes' or 'No'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local extension_valid = false
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extensions_count = #valid_extensions
      local valid_extensions_index = 1
      local valid_extensions_current = ''
      local valid_extensions_current_length = 0
      local valid_extensions_current_index = 1
      local valid_extensions_current_char = ''
      local valid_extensions_current_char_code = 0
      local valid_extensions_current_char_code_lower = 0
      local valid_extensions_current_char_code_upper = 0
      local valid_extensions_current_char_code_lower_diff = 0
      local valid_extensions_current_char_code_upper_diff = 0
      local valid_extensions_current_char_code_lower_diff_abs = 0
      local valid_extensions_current_char_code_upper_diff_abs = 0
      local valid_extensions_current_char_code_lower_diff_abs_min = 0
      local valid_extensions_current_char_code_upper_diff_abs_min = 0
      local valid_extensions_current_char_code_lower_diff_abs_min_index = 0
      local valid_extensions_current_char_code_upper_diff_abs_min_index = 0
      local valid_extensions_current_char_code_lower_diff_abs_min_index_char = ''
      local valid_extensions_current_char_code_upper_diff_abs_min_index_char = ''
      local valid_extensions_current_char_code_lower_diff_abs_min_index_char_code = 0
      local valid_extensions_current_char_code_upper_diff_abs_min_index_char_code = 0
      local valid_extensions_current_char_code_lower_diff_abs_min_index_char_code_lower = 0
      local valid_extensions_current_char_code
- |2-
      local digits = 0
      local dot = false
      local ext = false
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot = true
          elseif c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z' then
              if dot then
                  if file_name:sub(i, i + 2) == 'txt' or file_name:sub(i, i + 2) == 'exe' or file_name:sub(i, i + 2) == 'dll' then
                      ext = true
                  end
              end
          end
      end
      if digits <= 3 and dot and ext then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local digits = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      for i = 1, #file_name do
          local char = file_name:sub(i, i)
          if char:match('%d') then
              digits = digits + 1
          elseif char == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
      end
      if digits > 3 or dot_count ~= 1 or dot_index == 1 then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1)
      if ext == 'txt' or ext == 'exe' or ext == 'dll' then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      if file_name:match('^[a-zA-Z]+%.[a-zA-Z]+$') then
          local before_dot = file_name:match('^[a-zA-Z]+')
          local after_dot = file_name:match('%.[a-zA-Z]+$')
          if before_dot:match('%d') then
              return 'No'
          elseif before_dot:match('%d%d%d') then
              return 'No'
          elseif after_dot ~= '.txt' and after_dot ~= '.exe' and after_dot ~= '.dll' then
              return 'No'
          else
              return 'Yes'
          end
      else
          return 'No'
      end
  end
- |2-
      if file_name:match('%d%d%d') then
          return 'No'
      end
      if file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.txt$') then
          return 'Yes'
      end
      if file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.exe$') then
          return 'Yes'
      end
      if file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.dll$') then
          return 'Yes'
      end
      return 'No'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      local prefix_digit_count = 0
      for i = 1, #prefix do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      if string.len(prefix) == 0 then
          return 'No'
      end
      local first_char = string.sub(prefix, 1, 1)
      if (first_char < 'a' or first_char > 'z') and (first_char < 'A' or first_char > 'Z') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot = 0
      local ext = ''
      local name = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot = dot + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif dot == 0 then
              name = name .. c
          else
              ext = ext .. c
          end
      end
      if dot ~= 1 or digits > 3 or name == '' or not name:match('^%a') or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      else
          return 'Yes'
      end
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local extension_check = false
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extensions_count = 0
      local valid_extensions_check = false
      local valid_extensions_index = 0
      local valid_extensions_index_check = false
      local valid_extensions_index_count = 0
      local valid_extensions_index_count_check = false
      local valid_extensions_index_count_check_check = false
      local valid_extensions_index_count_check_check_check = false
      local valid_extensions_index_count_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check_check_check = false
      local valid_extensions_index_count_check_check_check_check_check_check_check_check_check_check_check_check_check_check = false
      local valid_ext
- |2-
      local count = 0
      local dot_index = 0
      local dot_count = 0
      local extension = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_index = i
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if count > 3 then
          return 'No'
      end
      if file_name:sub(1, 1):match('%a') == nil then
          return 'No'
      end
      if file_name:sub(dot_index + 1, #file_name) == '' then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local prefix_digit_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      local c = string.sub(prefix, 1, 1)
      if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local file_name_before_dot = string.sub(file_name, 1, dot_index - 1)
      local file_name_after_dot = string.sub(file_name, dot_index + 1)
      local file_name_before_dot_len = string.len(file_name_before_dot)
      local file_name_after_dot_len = string.len(file_name_after_dot)
      local file_name_before_dot_first_char = string.sub(file_name_before_dot, 1, 1)
      local file_name_before_dot_first_char_code = string.byte(file_name_before_dot_first_char)
      local file_name_before_dot_first_char_is_letter = (file_name_before_dot_first_char_code >= 65 and file_name_before_dot_first_char_code <= 90) or (file_name_before_dot_first_char_code >= 97 and file_name_before_dot_first_char_code <= 122)
      local file_name_before_dot_digit_count = 0
      for i = 1, file_name_before_dot_len do
          local char = string.sub(file_name_before_dot, i, i)
          local char_code = string.byte(char)
          if char_code >= 48 and char_code <= 57 then
              file_name_before_dot_digit_count = file_name_before_dot_digit_count + 1
          end
      end
      local file_name_after_dot_is_valid = (file_name_after_dot == 'txt' or file_name_after_dot == 'exe' or file_name_after_dot == 'dll')
      return (file_name_before_dot_len > 0 and file_name_before_dot_first_char_is_letter and file_name_before_dot_digit_count <= 3 and file_name_after_dot_len == 3 and file_name_after_dot_is_valid) and 'Yes' or '
- |2
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local substring_before_dot = ""
      local substring_after_dot = ""
      local valid_substring_after_dot = {'txt', 'exe', 'dll'}
      local valid_substring_before_dot = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}
      for i = 1, #file_name do
          if string.find(file_name, '%d') then
              count = count + 1
          end
          if string.find(file_name, '%.') then
              dot_count = dot_count + 1
              dot_index = i
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      substring_before_dot = string.sub(file_name, 1, dot_index - 1)
      substring_after_dot = string.sub(file_name, dot_index + 1, #file_name)
      if #substring_before_dot == 0 then
          return 'No'
      end
      for i = 1, #valid_substring_before_dot do
          if string.find(substring_before_dot, valid_substring_before_dot[i]) then
              for j = 1, #valid_substring_after_dot do
                  if string.find(substring_after_dot, valid_substring_after_dot[j]) then
                      return 'Yes'
                  end
              end
- "    local dot_index = file_name:find('.')\n    if dot_index == nil then\n        return
  'No'\n    end\n    local prefix = file_name:sub(1, dot_index - 1)\n    local suffix
  = file_name:sub(dot_index + 1)\n    if prefix:match('%d') == nil and prefix:match('^[a-zA-Z]')
  ~= nil and \n        (suffix == 'txt' or suffix == 'exe' or suffix == 'dll') then\n
  \       return 'Yes'\n    else\n        return 'No'\n    end\nend"
- |2-
      local dot_index = file_name:find('.')
      if not dot_index then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if not prefix:match('^[a-zA-Z]') then
          return 'No'
      end
      if not suffix:match('^txt$') and not suffix:match('^exe$') and not suffix:match('^dll$') then
          return 'No'
      end
      local digit_count = 0
      for i = 1, #prefix do
          if prefix:sub(i, i):match('^[0-9]$') then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_pos = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot_pos = i
              dot_count = dot_count + 1
          end
      end
      if digits > 3 or dot_count ~= 1 then
          return 'No'
      end
      local name = file_name:sub(1, dot_pos - 1)
      ext = file_name:sub(dot_pos + 1)
      if #name == 0 or name:sub(1, 1) < 'A' or name:sub(1, 1) > 'z' then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_index = 0
      local dot_count = 0
      local extension = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c:match('%d') then
              digits = digits + 1
          elseif c == '.' then
              dot_index = i
              dot_count = dot_count + 1
          end
      end
      if digits > 3 or dot_count ~= 1 then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      extension = file_name:sub(dot_index + 1)
      if #prefix == 0 or not prefix:match('^[a-zA-Z]') then
          return 'No'
      end
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      local valid_name = false
      local valid_number = false
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          valid_number = false
      else
          valid_number = true
      end
      if dot_count == 1 then
          valid_name = true
      else
          valid_name = false
      end
      for i = 1, #valid_extensions do
          if file_name:sub(dot_index + 1) == valid_extensions[i] then
              valid_extension = true
          end
      end
      if valid_number and valid_name and valid_extension then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local digits = 0
      local dot_pos = 0
      local dot_count = 0
      local ext_pos = 0
      local ext_len = 0
      local ext_valid = false
      local ext_valid_list = {'txt', 'exe', 'dll'}
      local ext_valid_list_len = #ext_valid_list
      local ext_valid_list_i = 0
      local ext_valid_list_item = ''
      local ext_valid_list_item_len = 0
      local ext_valid_list_item_i = 0
      local ext_valid_list_item_char = ''
      local ext_valid_list_item_char_code = 0
      local ext_valid_list_item_char_code_lower = 0
      local ext_valid_list_item_char_code_upper = 0
      local ext_valid_list_item_char_code_lower_diff = 0
      local ext_valid_list_item_char_code_upper_diff = 0
      local ext_valid_list_item_char_code_lower_diff_abs = 0
      local ext_valid_list_item_char_code_upper_diff_abs = 0
      local ext_valid_list_item_char_code_lower_diff_abs_min = 0
      local ext_valid_list_item_char_code_upper_diff_abs_min = 0
      local ext_valid_list_item_char_code_lower_diff_abs_min_i = 0
      local ext_valid_list_item_char_code_upper_diff_abs_min_i = 0
      local ext_valid_list_item_char_code_lower_diff_abs_min_char = ''
      local ext_valid_list_item_char_code_upper_diff_abs_min_char = ''
      local ext_valid_list_item_char_code_lower_diff_abs_min_char_code = 0
      local ext_valid_list_item_char_code_upper_diff_abs_min_char_code = 0
      local ext_valid_list_item_char_code_lower_diff_
- |2-
    -- TODO: Implement this function.
  end
- |2-
      local dot_index = file_name:find('.')
      local dot_index_2 = file_name:find('.', dot_index + 1)
      local before_dot = file_name:sub(1, dot_index - 1)
      local after_dot = file_name:sub(dot_index + 1)
      local digits_count = 0
      for i = 1, #before_dot do
          if before_dot:sub(i, i):find('%d') then
              digits_count = digits_count + 1
          end
      end
      if digits_count > 3 or dot_index_2 or not before_dot:sub(1, 1):find('%a') or not (after_dot == 'txt' or after_dot == 'exe' or after_dot == 'dll') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot = false
      local ext = false
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              if dot then
                  return 'No'
              end
              dot = true
          elseif c:match('%d') then
              digits = digits + 1
              if digits > 3 then
                  return 'No'
              end
          elseif c:match('%a') then
              if dot then
                  if not ext then
                      ext = true
                  end
              end
          else
              return 'No'
          end
      end
      if not dot or not ext then
          return 'No'
      end
      local ext = file_name:match('%.(%a+)$')
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_pos = 0
      local ext = ''
      local valid_ext = {'txt', 'exe', 'dll'}
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_pos = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if not file_name:sub(1, dot_pos - 1):match('^[a-zA-Z]') then
          return 'No'
      end
      ext = file_name:sub(dot_pos + 1)
      for i = 1, #valid_ext do
          if ext == valid_ext[i] then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local digits = 0
      local dot = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot = dot + 1
          elseif dot == 0 then
              if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot ~= 1 or ext == '' or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext = ''
      local ext_len = 0
      local ext_valid = false
      local ext_valid_list = {'txt', 'exe', 'dll'}
      local name = ''
      local name_len = 0
      local name_valid = false
      local valid = false
      local valid_ext_list = {'txt', 'exe', 'dll'}
      local valid_ext_list_len = 3
      local valid_ext_len = 0
      local valid_ext_len_max = 3
      local valid_ext_len_min = 3
      local valid_name_len_max = 10
      local valid_name_len_min = 1
      local valid_name_list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}
      local valid_name_list_len = 52
      local valid_name_list_len_max = 52
      local valid_name_list_len_min = 1
      local valid_name_list_len_range = 52
      local valid_name_list_range = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      local valid_name = false
      local valid_number = false
      local valid_dot = false
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          valid_number = false
      else
          valid_number = true
      end
      if dot_count == 1 then
          valid_dot = true
      else
          valid_dot = false
      end
      if file_name:sub(1, 1):match('%a') then
          valid_name = true
      else
          valid_name = false
      end
      for i = 1, #valid_extensions do
          if file_name:sub(dot_index + 1, -1) == valid_extensions[i] then
              valid_extension = true
          end
      end
      if valid_number and valid_dot and valid_name and valid_extension then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local dot_index = string.find(file_name, '.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_index - 1)
      local suffix = string.sub(file_name, dot_index + 1)
      local digit_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      if string.len(prefix) == 0 then
          return 'No'
      end
      local c = string.sub(prefix, 1, 1)
      if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- "    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local
  ext = ''\n    local ext_list = {'txt', 'exe', 'dll'}\n    local ext_valid = false\n
  \   local valid_ext = false\n    local valid_name = false\n    local valid_digit
  = false\n    local valid_dot = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_digit = false\n    local valid_dot = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_digit = false\n    local
  valid_dot = false\n    local valid_ext = false\n    local valid_name = false\n    local
  valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n
  \   local valid_name = false\n    local valid_digit = false\n    local valid_dot
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_digit
  = false\n    local valid_dot = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_digit = false\n    local valid_dot = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_digit = false\n    local
  valid_dot = false\n    local valid_ext = false\n    local valid_name = false\n    local
  valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n
  \   local valid_name = false\n    local valid_digit = false\n    local valid_dot
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_digit
  = false\n    local valid_dot = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_digit = false\n    local valid_dot = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_digit = false\n    local
  valid_dot = false\n    local valid_ext = false\n    local valid_name = false\n    local
  valid_digit = false\n    local valid_dot = false\n    local valid_ext = false\n
  \  "
- |2-
      -- TODO: implement the function
  end
- |2-
      local digits = 0
      local dot = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot = dot + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif c:match('%a') then
              ext = file_name:sub(i)
              break
          end
      end
      if digits > 3 or dot ~= 1 or ext == '' or not ext:match('^%.[a-zA-Z]') or not ext:match('^%.(txt|exe|dll)$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local file_name_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,3}%.[a-zA-Z]{3}$'
      return file_name:match(file_name_pattern) and 'Yes' or 'No'
  end
- |2-
      local digits = 0
      local dot_found = false
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot_found = true
          elseif not dot_found then
              if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or not dot_found or ext == '' or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
    local counter = 0
    local dot_counter = 0
    local dot_index = 0
    local extension = ''
    local valid_extensions = {'txt', 'exe', 'dll'}
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local valid_extension = false
    local valid_name = false
    local valid_number = false
    local valid_dot = false
    local
- |2-
      local dot_pos = file_name:find('.')
      local ext = file_name:sub(dot_pos + 1)
      local ext_valid = ext == 'txt' or ext == 'exe' or ext == 'dll'
      local digits_count = 0
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits_count = digits_count + 1
          end
      end
      local digits_valid = digits_count <= 3
      local name = file_name:sub(1, dot_pos - 1)
      local name_valid = name:match('^[a-zA-Z]') ~= nil
      return (ext_valid and digits_valid and name_valid) and 'Yes' or 'No'
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext = ''
      local ext_list = {'txt', 'exe', 'dll'}
      local valid_ext = false
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if dot_count == 1 and count <= 3 then
          ext = file_name:sub(file_name:find('%.') + 1)
          for i = 1, #ext_list do
              if ext == ext_list[i] then
                  valid_ext = true
              end
          end
          if valid_ext then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      local name = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1)
      name = file_name:sub(1, dot_index - 1)
      if count > 3 then
          return 'No'
      end
      if not name:match('^[a-zA-Z]') then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local extension = string.sub(file_name, dot_index + 1)
      local digits_count = 0
      local is_valid = false
      for i = 1, string.len(file_name) do
          local char = string.sub(file_name, i, i)
          if char == '.' then
              if i == 1 or i == string.len(file_name) then
                  return 'No'
              end
          elseif char >= '0' and char <= '9' then
              digits_count = digits_count + 1
          end
      end
      if digits_count > 3 then
          return 'No'
      end
      if extension == 'txt' or extension == 'exe' or extension == 'dll' then
          is_valid = true
      end
      if is_valid then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.find(prefix, '[0-9]') ~= nil then
          return 'No'
      end
      if string.find(prefix, '[a-zA-Z]') == nil then
          return 'No'
      end
      if string.find(suffix, 'txt') == nil and string.find(suffix, 'exe') == nil and string.find(suffix, 'dll') == nil then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local prefix = string.sub(file_name, 1, dot_index - 1)
      local suffix = string.sub(file_name, dot_index + 1)
      local prefix_is_valid = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')
      local suffix_is_valid = string.match(suffix, '^txt$') or string.match(suffix, '^exe$') or string.match(suffix, '^dll$')
      local digits_count = 0
      for i = 1, #prefix do
          if string.match(prefix, '%d') then
              digits_count = digits_count + 1
          end
      end
      return (prefix_is_valid and suffix_is_valid and digits_count <= 3) and 'Yes' or 'No'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local file_name_without_extension = string.sub(file_name, 1, dot_index - 1)
      local file_extension = string.sub(file_name, dot_index + 1)
      local number_of_digits = 0
      for i = 1, #file_name_without_extension do
          if string.find(file_name_without_extension, '%d') then
              number_of_digits = number_of_digits + 1
          end
      end
      if number_of_digits > 3 then
          return 'No'
      end
      if string.find(file_name_without_extension, '%a') ~= 1 then
          return 'No'
      end
      if file_extension ~= 'txt' and file_extension ~= 'exe' and file_extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = file_name:find('.')
      if not dot_pos then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_pos - 1)
      local suffix = file_name:sub(dot_pos + 1)
      if not prefix:match('^[a-zA-Z]') then
          return 'No'
      end
      if prefix:match('%d') then
          return 'No'
      end
      if prefix:match('%d%d%d') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local ext = string.sub(file_name, dot_pos + 1)
      local name = string.sub(file_name, 1, dot_pos - 1)
      local digits = 0
      for i = 1, string.len(name) do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          end
      end
      if digits > 3 then
          return 'No'
      end
      if string.sub(name, 1, 1) < 'A' or string.sub(name, 1, 1) > 'z' then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_pos = 0
      local dot_count = 0
      local ext_pos = 0
      local ext_len = 0
      local ext_valid = false
      local ext_valid_list = {'txt', 'exe', 'dll'}
      local ext_valid_list_len = #ext_valid_list
      local ext_valid_list_i = 1
      local ext_valid_list_item = nil
      local ext_valid_list_item_len = 0
      local ext_valid_list_item_i = 1
      local ext_valid_list_item_char = nil
      local ext_valid_list_item_char_code = 0
      local ext_valid_list_item_char_code_lower = 0
      local ext_valid_list_item_char_code_upper = 0
      local ext_valid_list_item_char_code_lower_diff = 0
      local ext_valid_list_item_char_code_upper_diff = 0
      local ext_valid_list_item_char_code_lower_diff_abs = 0
      local ext_valid_list_item_char_code_upper_diff_abs = 0
      local ext_valid_list_item_char_code_lower_diff_abs_min = 0
      local ext_valid_list_item_char_code_upper_diff_abs_min = 0
      local ext_valid_list_item_char_code_lower_diff_abs_min_char = nil
      local ext_valid_list_item_char_code_upper_diff_abs_min_char = nil
      local ext_valid_list_item_char_code_lower_diff_abs_min_char_code = 0
      local ext_valid_list_item_char_code_upper_diff_abs_min_char_code = 0
      local ext_valid_list_item_char_code_lower_diff_abs_min_char_code_lower = 0
      local ext_valid_list_item_char_code_upper_diff_abs_min_char_code_upper = 0
      local ext_valid_list_item_
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if count > 3 then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1):match('%a') == nil then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_index = 0
      local dot_count = 0
      local ext_index = 0
      local ext_count = 0
      local ext_list = {'txt', 'exe', 'dll'}
      local ext_found = false
      local ext_len = 0
      local ext_str = ''
      local ext_str_len = 0
      local ext_str_count = 0
      local ext_str_valid = false
      local file_name_len = 0
      local file_name_valid = false
      local i = 0
      local j = 0
      local k = 0
      local l = 0
      local m = 0
      local n = 0
      local o = 0
      local p = 0
      local q = 0
      local r = 0
      local s = 0
      local t = 0
      local u = 0
      local v = 0
      local w = 0
      local x = 0
      local y = 0
      local z = 0
      local aa = 0
      local ab = 0
      local ac = 0
      local ad = 0
      local ae = 0
      local af = 0
      local ag = 0
      local ah = 0
      local ai = 0
      local aj = 0
      local ak = 0
      local al = 0
      local am = 0
      local an = 0
      local ao = 0
      local ap = 0
      local aq = 0
      local ar = 0
      local as = 0
      local at = 0
      local au = 0
      local av = 0
      local aw = 0
      local ax = 0
      local ay = 0
      local az = 0
      local ba = 0
      local bb = 0
      local bc = 0
      local bd = 0
      local be = 0
      local bf = 0
      local bg = 0
      local bh = 0
      local bi = 0
      local bj = 0
      local bk = 0
      local bl = 0
      local bm = 0
      local bn = 0
      local bo = 0
      local bp = 0
      local bq =
- |2-
      local count = 0
      local dot_index = 0
      local dot_count = 0
      local extension = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_index = i
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1):match('%a') then
          return 'Yes'
      end
      return 'No'
  end
- |2-
      local count = 0
      local dot = 0
      local ext = 0
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot = i
          end
          if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if file_name:sub(1, 1) < 'A' or (file_name:sub(1, 1) > 'Z' and file_name:sub(1, 1) < 'a') or file_name:sub(1, 1) > 'z' then
          return 'No'
      end
      if file_name:sub(dot + 1, dot + 3) == 'txt' then
          ext = 1
      elseif file_name:sub(dot + 1, dot + 3) == 'exe' then
          ext = 1
      elseif file_name:sub(dot + 1, dot + 3) == 'dll' then
          ext = 1
      end
      if ext == 1 then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.find(prefix, '[0-9]') ~= nil then
          return 'No'
      end
      if string.find(prefix, '[a-zA-Z]') == nil then
          return 'No'
      end
      if string.find(suffix, 'txt') == nil and string.find(suffix, 'exe') == nil and string.find(suffix, 'dll') == nil then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local name = string.sub(file_name, 1, dot_pos - 1)
      local ext = string.sub(file_name, dot_pos + 1)
      local digits = 0
      for i = 1, #name do
          if string.find('0123456789', string.sub(name, i, i)) then
              digits = digits + 1
          end
      end
      if digits > 3 then
          return 'No'
      end
      if string.find('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', string.sub(name, 1, 1)) == nil then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_pos = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot_pos = i
              dot_count = dot_count + 1
          end
      end
      if digits > 3 or dot_count ~= 1 then
          return 'No'
      end
      ext = file_name:sub(dot_pos + 1, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      local name = file_name:sub(1, dot_pos - 1)
      if #name == 0 then
          return 'No'
      end
      local c = name:sub(1, 1)
      if (c < 'a' or c > 'z') and (c < 'A' or c > 'Z') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = file_name:find('.')
      local ext = file_name:sub(dot_pos + 1)
      local ext_list = {'txt', 'exe', 'dll'}
      local ext_valid = false
      for _, v in ipairs(ext_list) do
          if v == ext then
              ext_valid = true
              break
          end
      end
      if not ext_valid then
          return 'No'
      end
      local name = file_name:sub(1, dot_pos - 1)
      local digit_count = 0
      for i = 1, #name do
          local c = name:sub(i, i)
          if c >= '0' and c <= '9' then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      if name:sub(1, 1) < 'A' or name:sub(1, 1) > 'z' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local name = string.sub(file_name, 1, dot_pos - 1)
      local ext = string.sub(file_name, dot_pos + 1)
      local num_digits = 0
      for i = 1, #name do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              num_digits = num_digits + 1
          end
      end
      if num_digits > 3 then
          return 'No'
      end
      local first_letter = string.sub(name, 1, 1)
      if not (first_letter >= 'a' and first_letter <= 'z' or first_letter >= 'A' and first_letter <= 'Z') then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- "\tlocal count = 0\n\tlocal dot_count = 0\n\tlocal dot_index = 0\n\tlocal extension
  = ''\n\tlocal valid_extensions = {'txt', 'exe', 'dll'}\n\tlocal valid_extension
  = false\n\tlocal valid_name = false\n\tlocal valid_count = false\n\tlocal valid_dot_count
  = false\n\tlocal valid_extension_count = false\n\tlocal valid_extension_name = false\n\tlocal
  valid_name_count = false\n\tlocal valid_name_name = false\n\tlocal valid_name_dot
  = false\n\tlocal valid_name_extension = false\n\tlocal valid_name_extension_count
  = false\n\tlocal valid_name_extension_name = false\n\tlocal valid_name_extension_dot
  = false\n\tlocal valid_name_extension_extension = false\n\tlocal valid_name_extension_extension_count
  = false\n\tlocal valid_name_extension_extension_name = false\n\tlocal valid_name_extension_extension_dot
  = false\n\tlocal valid_name_extension_extension_extension = false\n\tlocal valid_name_extension_extension_extension_count
  = false\n\tlocal valid_name_extension_extension_extension_name = false\n\tlocal
  valid_name_extension_extension_extension_dot = false\n\tlocal valid_name_extension_extension_extension_extension
  = false\n\tlocal valid_name_extension_extension_extension_extension_count = false\n\tlocal
  valid_name_extension_extension_extension_extension_name = false\n\tlocal valid_name_extension_extension_extension_extension_dot
  = false\n\tlocal valid_name_extension_extension_extension_extension_extension =
  false\n\tlocal valid_name_extension_extension_extension_extension_extension_count
  = false\n\tlocal valid_name_extension_extension_extension_extension_extension_name
  = false\n\tlocal valid_name_extension_extension_extension_extension_extension_dot
  = false\n\tlocal valid_name_ext"
- |2-
      local dot_index = file_name:find('.')
      if not dot_index then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if not prefix:match('^[a-zA-Z]') then
          return 'No'
      end
      if prefix:match('%d') then
          return 'No'
      end
      if prefix:match('%d%d%d') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local extension = string.sub(file_name, dot_index + 1)
      local extension_valid = false
      for _, v in ipairs({'txt', 'exe', 'dll'}) do
          if v == extension then
              extension_valid = true
              break
          end
      end
      if not extension_valid then
          return 'No'
      end
      local name = string.sub(file_name, 1, dot_index - 1)
      local digit_count = 0
      for i = 1, #name do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      if string.len(name) == 0 then
          return 'No'
      end
      local first_char = string.sub(name, 1, 1)
      if not (first_char >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char <= 'Z') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local num_digits = 0
      local dot_found = false
      local dot_index = 0
      local extension = ''
      local extension_valid = false
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extensions_len = #valid_extensions
      local valid_extensions_index = 1
      local valid_extensions_current = ''
      local valid_extensions_current_len = 0
      local valid_extensions_current_index = 1
      local valid_extensions_current_char = ''
      local valid_extensions_current_char_code = 0
      local file_name_len = #file_name
      local file_name_index = 1
      local file_name_char = ''
      local file_name_char_code = 0
      local file_name_char_code_is_digit = false
      local file_name_char_code_is_letter = false
      local file_name_char_code_is_dot = false
      local file_name_char_code_is_valid = false
      local file_name_char_code_is_valid_extension = false
      local file_name_char_code_is_valid_extension_current = false
      local file_name_char_code_is_valid_extension_current_char = false
      local file_name_char_code_is_valid_extension_current_char_code = false
      local file_name_char_code_is_valid_extension_current_char_code_is_letter = false
      local file_name_char_code_is_valid_extension_current_char_code_is_valid = false
      local file_name_char_code_is_valid_extension_current_char_code_is_valid_extension = false
      local file_name_char_code_is_valid_extension_current_char_code_is_valid_extension_current = false
      local file_name_char_code_is_valid_extension_current_char_code_is_valid_extension_current_char = false
      local file_name
- |2-
      local dot_index = file_name:find('.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if prefix:find('%d') ~= nil then
          return 'No'
      end
      if prefix:match('%d') ~= nil then
          return 'No'
      end
      if prefix:match('%a') == nil then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local cnt = 0
      local dot_pos = 0
      local dot_cnt = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              cnt = cnt + 1
          elseif c == '.' then
              dot_pos = i
              dot_cnt = dot_cnt + 1
          end
      end
      if cnt > 3 or dot_cnt ~= 1 then
          return 'No'
      end
      local name = file_name:sub(1, dot_pos - 1)
      if #name == 0 or not (name:sub(1, 1) >= 'a' and name:sub(1, 1) <= 'z' or name:sub(1, 1) >= 'A' and name:sub(1, 1) <= 'Z') then
          return 'No'
      end
      ext = file_name:sub(dot_pos + 1, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if not dot_pos then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      local prefix_is_valid = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')
      local suffix_is_valid = suffix == 'txt' or suffix == 'exe' or suffix == 'dll'
      local digit_count = string.gsub(prefix, '[^0-9]', '')
      local digit_count_is_valid = #digit_count <= 3
      return (prefix_is_valid and suffix_is_valid and digit_count_is_valid) and 'Yes' or 'No'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local dot_index = string.find(file_name, '.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_index - 1)
      local suffix = string.sub(file_name, dot_index + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local prefix_digit_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      local suffix_valid = false
      if suffix == 'txt' or suffix == 'exe' or suffix == 'dll' then
          suffix_valid = true
      end
      if not suffix_valid then
          return 'No'
      end
      local prefix_first_letter = string.sub(prefix, 1, 1)
      if prefix_first_letter < 'a' or prefix_first_letter > 'z' then
          if prefix_first_letter < 'A' or prefix_first_letter > 'Z' then
              return 'No'
          end
      end
      return 'Yes'
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local extension = string.sub(file_name, dot_index + 1)
      local name = string.sub(file_name, 1, dot_index - 1)
      local digits = string.match(name, '%d')
      if digits == nil then
          digits = ''
      end
      if #digits > 3 then
          return 'No'
      end
      if string.find(name, '%a') ~= 1 then
          return 'No'
      end
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1) == '' then
          return 'No'
      end
      if not file_name:sub(1, dot_index - 1):match('^[a-zA-Z]') then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local file_name_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,2}%.[a-zA-Z]{3}$'
      if file_name:match(file_name_pattern) then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local digits = 0
      local dot_count = 0
      local dot_pos = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
              dot_pos = i
          elseif c:match('%d') then
              digits = digits + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_pos - 1)
      if #prefix == 0 or not prefix:match('^[a-zA-Z]') then
          return 'No'
      end
      ext = file_name:sub(dot_pos + 1)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      if digits > 3 then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local num_digits = 0
      local dot_found = false
      local ext_found = false
      local ext_list = {'txt', 'exe', 'dll'}
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              if dot_found then
                  return 'No'
              end
              dot_found = true
          elseif c:match('%d') then
              num_digits = num_digits + 1
              if num_digits > 3 then
                  return 'No'
              end
          elseif c:match('%a') then
              if dot_found then
                  if not ext_found then
                      for _, ext in ipairs(ext_list) do
                          if file_name:sub(i, i + #ext - 1) == ext then
                              ext_found = true
                              break
                          end
                      end
                  end
              end
          else
              return 'No'
          end
      end
      if dot_found and ext_found then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if dot_count == 1 and count <= 3 then
          ext = file_name:sub(dot_index + 1, #file_name)
          if ext == 'txt' or ext == 'exe' or ext == 'dll' then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext = ""
      local name = ""
      for i = 1, #file_name do
          if file_name:sub(i, i) == "." then
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i) == "." or file_name:sub(i, i) == "0" or file_name:sub(i, i) == "1" or file_name:sub(i, i) == "2" or file_name:sub(i, i) == "3" or file_name:sub(i, i) == "4" or file_name:sub(i, i) == "5" or file_name:sub(i, i) == "6" or file_name:sub(i, i) == "7" or file_name:sub(i, i) == "8" or file_name:sub(i, i) == "9" then
              count = count + 1
          end
      end
      if count > 3 then
          return "No"
      end
      if dot_count ~= 1 then
          return "No"
      end
      for i = 1, #file_name do
          if file_name:sub(i, i) == "." then
              name = file_name:sub(1, i - 1)
              ext = file_name:sub(i + 1, #file_name)
          end
      end
      if name == "" then
          return "No"
      end
      if name:sub(1, 1) ~= "a" and name:sub(1, 1) ~= "b" and name:sub(1, 1) ~= "c" and name:sub(1, 1) ~= "d" and name:sub(1, 1) ~= "e" and name:sub(1, 1) ~= "f" and name:sub(1, 1) ~= "g" and name:sub(1, 1) ~= "h" and name:sub(1, 1) ~= "i" and name:sub(1, 1) ~= "j"
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local sub_str_before_dot = string.sub(file_name, 1, dot_pos - 1)
      local sub_str_after_dot = string.sub(file_name, dot_pos + 1)
      if sub_str_before_dot == '' or string.match(sub_str_before_dot, '%d') == nil then
          return 'No'
      end
      if string.match(sub_str_before_dot, '%d') ~= nil then
          local digit_count = 0
          for i = 1, #sub_str_before_dot do
              if string.sub(sub_str_before_dot, i, i) >= '0' and string.sub(sub_str_before_dot, i, i) <= '9' then
                  digit_count = digit_count + 1
              end
          end
          if digit_count > 3 then
              return 'No'
          end
      end
      if sub_str_after_dot ~= 'txt' and sub_str_after_dot ~= 'exe' and sub_str_after_dot ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: Implement this function
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      local valid_name = false
      local valid_number = false
      local valid_dot = false
      local valid_extension = false
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              count = count + 1
          elseif c == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
      end
      if count <= 3 then
          valid_number = true
      end
      if dot_count == 1 then
          valid_dot = true
      end
      if valid_number and valid_dot then
          local name = file_name:sub(1, dot_index - 1)
          local extension = file_name:sub(dot_index + 1, #file_name)
          if #name > 0 and (name:sub(1, 1) >= 'a' and name:sub(1, 1) <= 'z' or name:sub(1, 1) >= 'A' and name:sub(1, 1) <= 'Z') then
              valid_name = true
          end
          for i = 1, #valid_extensions do
              if extension == valid_extensions[i] then
                  valid_extension = true
              end
          end
      end
      if valid_name and valid_extension then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local count = 0
      local dot_index = 0
      local ext_index = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_index = i
          end
          if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_index == 0 then
          return 'No'
      end
      if dot_index == 1 then
          return 'No'
      end
      if file_name:sub(1, 1) < 'A' or file_name:sub(1, 1) > 'z' then
          return 'No'
      end
      if file_name:sub(1, 1) > 'Z' and file_name:sub(1, 1) < 'a' then
          return 'No'
      end
      ext_index = dot_index + 1
      ext = file_name:sub(ext_index, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if not dot_pos then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local prefix_num_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              prefix_num_count = prefix_num_count + 1
          end
      end
      if prefix_num_count > 3 then
          return 'No'
      end
      local suffix_valid = false
      for _, v in ipairs({'txt', 'exe', 'dll'}) do
          if v == suffix then
              suffix_valid = true
              break
          end
      end
      if not suffix_valid then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = file_name:find('.')
      if not dot_index then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if not prefix:match('^[a-zA-Z][a-zA-Z0-9]*$') then
          return 'No'
      end
      if prefix:match('%d%d%d') then
          return 'No'
      end
      if not suffix:match('^txt$') and not suffix:match('^exe$') and not suffix:match('^dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local ext = string.sub(file_name, dot_pos + 1)
      local ext_list = {'txt', 'exe', 'dll'}
      local ext_valid = false
      for _, v in ipairs(ext_list) do
          if v == ext then
              ext_valid = true
              break
          end
      end
      local digits = 0
      for i = 1, string.len(file_name) do
          local c = string.sub(file_name, i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          end
      end
      local first_char = string.sub(file_name, 1, 1)
      local first_char_valid = (first_char >= 'a' and first_char <= 'z') or (first_char >= 'A' and first_char <= 'Z')
      return (digits <= 3 and dot_pos and ext_valid and first_char_valid) and 'Yes' or 'No'
  end
- |2-
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot_count = dot_count + 1
          elseif dot_count == 0 then
              if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot_count ~= 1 or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, 1):match('%a') == nil then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      local digits = string.match(prefix, '%d+')
      if digits == nil or string.len(digits) > 3 then
          return 'No'
      end
      if string.match(prefix, '^[a-zA-Z]') == nil then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      local valid_name = false
      local valid_digits = false
      local valid_dot = false
      local valid_extension = false
      local valid_name = false
      local valid_digits = false
      local valid_dot = false
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count <= 3 then
          valid_digits = true
      end
      if dot_count == 1 then
          valid_dot = true
      end
      if valid_digits and valid_dot then
          if file_name:sub(1, 1):match('%a') then
              valid_name = true
          end
          extension = file_name:sub(dot_index + 1, #file_name)
          for i = 1, #valid_extensions do
              if extension == valid_extensions[i] then
                  valid_extension = true
              end
          end
      end
      if valid_name and valid_extension then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local digits_count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      local valid_name = false
      local valid_name_start = false
      local valid_name_end = false
      local valid_name_length = false
      local valid_name_length_min = 1
      local valid_name_length_max = 20
      local valid_name_length_current = 0
      local valid_name_length_current_index = 0
      local valid_name_length_current_index_start = 0
      local valid_name_length_current_index_end = 0
      local valid_name_length_current_index_start_found = false
      local valid_name_length_current_index_end_found = false
      local valid_name_length_current_index_start_found_index = 0
      local valid_name_length_current_index_end_found_index = 0
      local valid_name_length_current_index_start_found_index_last = 0
      local valid_name_length_current_index_end_found_index_last = 0
      local valid_name_length_current_index_start_found_index_last_valid = false
      local valid_name_length_current_index_end_found_index_last_valid = false
      local valid_name_length_current_index_start_found_index_last_valid_index = 0
      local valid_name_length_current_index_end_found_index_last_valid_index = 0
      local valid_name_length_current_index_start_found_index_last_valid_index_last = 0
      local valid_name_length_current_index_end_found_index_last_valid_index_last = 0
      local valid_name_length_current_index_start_found_index_last_valid_index_last_valid = false
      local valid_name_length_current_index_end_found_index_last_valid_index_last_valid
- |2-
      local digits_count = 0
      local dot_count = 0
      local ext = ''
      local name = ''
      local i = 1
      while i <= #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
              i = i + 1
              while i <= #file_name do
                  ext = ext .. file_name:sub(i, i)
                  i = i + 1
              end
          elseif c:match('%d') then
              digits_count = digits_count + 1
              i = i + 1
          elseif c:match('%a') then
              name = name .. c
              i = i + 1
          else
              return 'No'
          end
      end
      if digits_count > 3 or dot_count ~= 1 or #name == 0 or not ext:match('txt$') and not ext:match('exe$') and not ext:match('dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local ext = string.sub(file_name, dot_pos + 1)
      local name = string.sub(file_name, 1, dot_pos - 1)
      local digits = 0
      for i = 1, #name do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          end
      end
      if digits > 3 then
          return 'No'
      end
      if string.find(name, '%a') ~= 1 then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local function check_substring(substring)
          local function check_first_char(first_char)
              local first_char_code = string.byte(first_char)
              return (first_char_code >= string.byte('a') and first_char_code <= string.byte('z'))
                      or (first_char_code >= string.byte('A') and first_char_code <= string.byte('Z'))
          end
          local function check_digits(substring)
              local digits_count = 0
              for i = 1, #substring do
                  local char_code = string.byte(substring, i)
                  if char_code >= string.byte('0') and char_code <= string.byte('9') then
                      digits_count = digits_count + 1
                  end
              end
              return digits_count <= 3
          end
          return #substring > 0 and check_first_char(substring:sub(1, 1)) and check_digits(substring)
      end
      local dot_index = string.find(file_name, '.')
      if dot_index == nil then
          return 'No'
      end
      local substring_before_dot = file_name:sub(1, dot_index - 1)
      local substring_after_dot = file_name:sub(dot_index + 1)
      local valid_substrings_after_dot = {'txt', 'exe', 'dll'}
      local valid_substring_after_dot = false
      for _, valid_substring in ipairs(valid_substrings_after_dot) do
          if valid_substring == substring_after_dot then
              valid_substring_after_dot = true
              break
          end
      end
      return check_substring(substring_before_dot) and valid_substring_after_dot and 'Yes' or 'No'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extension = {'txt', 'exe', 'dll'}
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1):match('%a') == nil then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      for i = 1, #valid_extension do
          if extension == valid_extension[i] then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext = ''
      local ext_count = 0
      local ext_valid = false
      local ext_valid_count = 0
      local ext_valid_list = {'txt', 'exe', 'dll'}
      local file_name_valid = false
      local file_name_valid_count = 0
      local file_name_valid_list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}
      local file_name_valid_list_count = 0
      local file_name_valid_list_index = 0
      local file_name_valid_list_index_count = 0
      local file_name_valid_list_index_count_valid = false
      local file_name_valid_list_index_count_valid_count = 0
      local file_name_valid_list_index_count_valid_count_valid = false
      local file_name_valid_list_index_count_valid_count_valid_count = 0
      local file_name_valid_list_index_count_valid_count_valid_count_valid = false
      local file_name_valid_list_index_count_valid_count_valid_count_valid_count = 0
      local file_name_valid_list_index_count_valid_count_valid_count_valid_count_valid = false
      local file_name_valid_list_index_count_valid_count_valid_count_valid_count_valid_count = 0
      local file_name_valid_list_
- |2-
      local digits = 0
      local dot = false
      local extension = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot = true
          elseif c:match('%d') then
              digits = digits + 1
          elseif dot then
              extension = extension .. c
          end
      end
      if digits > 3 or not dot or not file_name:sub(1, 1):match('%a') or not
          {['txt'] = true, ['exe'] = true, ['dll'] = true}[extension] then
          return 'No'
      else
          return 'Yes'
      end
  end
- |2-
      local dot_index = file_name:find('.')
      if not dot_index then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if prefix:find('%d') or #prefix == 0 or not prefix:find('^[a-zA-Z]') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local digits = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
              dot_index = i
          elseif c:match('%d') then
              digits = digits + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      if #prefix == 0 or not prefix:match('^%a') then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1)
      for _, ext in ipairs(valid_extensions) do
          if ext == extension then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      if string.find(prefix, '[^%a]') ~= nil then
          return 'No'
      end
      if string.find(prefix, '[%d]') ~= nil then
          return 'No'
      end
      if string.find(prefix, '[%d]', string.find(prefix, '[%d]') + 1) ~= nil then
          return 'No'
      end
      if string.find(prefix, '[%d]', string.find(prefix, '[%d]', string.find(prefix, '[%d]') + 1) + 1) ~= nil then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- "\tlocal count = 0\n\tlocal dot_count = 0\n\tlocal dot_index = 0\n\tlocal ext =
  ''\n\tfor i = 1, #file_name do\n\t\tif file_name:sub(i, i) == '.' then\n\t\t\tdot_count
  = dot_count + 1\n\t\t\tdot_index = i\n\t\tend\n\t\tif file_name:sub(i, i):match('%d')
  then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif count > 3 or dot_count ~= 1
  then\n\t\treturn 'No'\n\tend\n\tif file_name:sub(1, 1):match('%a') then\n\t\text
  = file_name:sub(dot_index + 1, #file_name)\n\t\tif ext == 'txt' or ext == 'exe'
  or ext == 'dll' then\n\t\t\treturn 'Yes'\n\t\tend\n\tend\n\treturn 'No'\nend"
- |2-
      local digits = 0
      local dot = false
      local ext = false
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              if dot then
                  return 'No'
              end
              dot = true
          elseif c >= '0' and c <= '9' then
              digits = digits + 1
              if digits > 3 then
                  return 'No'
              end
          elseif c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z' then
              if dot then
                  if not ext then
                      ext = true
                      if c ~= 't' then
                          return 'No'
                      end
                  elseif c == 't' then
                      return 'No'
                  elseif c == 'x' then
                      return 'No'
                  elseif c == 'e' then
                      return 'Yes'
                  else
                      return 'No'
                  end
              end
          else
              return 'No'
          end
      end
      return 'No'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local name = string.sub(file_name, 1, dot_pos - 1)
      local ext = string.sub(file_name, dot_pos + 1)
      local digits = 0
      for i = 1, #name do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          end
      end
      if digits > 3 then
          return 'No'
      end
      if not (string.sub(name, 1, 1) >= 'a' and string.sub(name, 1, 1) <= 'z' or
              string.sub(name, 1, 1) >= 'A' and string.sub(name, 1, 1) <= 'Z') then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext = ''
      local name = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
          elseif c:match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      ext = file_name:match('%.(%w+)$')
      name = file_name:match('^(%w+)%.')
      if not name or not ext or not (ext == 'txt' or ext == 'exe' or ext == 'dll') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local extension = string.sub(file_name, dot_index + 1)
      local name = string.sub(file_name, 1, dot_index - 1)
      local digit_count = 0
      for i = 1, #name do
          if string.find(name, '%d') then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      if string.find(name, '%a') ~= 1 then
          return 'No'
      end
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot = dot + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif dot == 0 then
              if not c:match('%a') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot ~= 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local num_digits = 0
      local dot_found = false
      local extension = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_found = true
          elseif c:match('%d') then
              num_digits = num_digits + 1
          elseif dot_found then
              extension = extension .. c
          end
      end
      if num_digits > 3 or not dot_found or #extension == 0 or not file_name:match('^[%a]') then
          return 'No'
      end
      if extension == 'txt' or extension == 'exe' or extension == 'dll' then
          return 'Yes'
      end
      return 'No'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      local prefix_valid = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')
      local suffix_valid = suffix == 'txt' or suffix == 'exe' or suffix == 'dll'
      local digit_count = string.gsub(prefix, '[^0-9]', '')
      local digit_count_valid = #digit_count <= 3
      return (prefix_valid and suffix_valid and digit_count_valid) and 'Yes' or 'No'
  end
- |2-
      local digits = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif dot_count == 0 then
              if not c:match('%a') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot_count ~= 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local file_name_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,3}%.[a-zA-Z]{3}$'
      return string.match(file_name, file_name_pattern) and 'Yes' or 'No'
  end
- |2-
      local digits = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif dot_count == 0 then
              if not c:match('%a') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot_count ~= 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, 1):match('%a') == nil then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      for i = 1, #valid_extensions do
          if extension == valid_extensions[i] then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      local dot_index = file_name:find('.')
      local extension = file_name:sub(dot_index + 1)
      local name = file_name:sub(1, dot_index - 1)
      local digit_count = 0
      for i = 1, #name do
          if name:sub(i, i):match('%d') then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      if not name:match('^[a-zA-Z]') then
          return 'No'
      end
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- Write your code here
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1) == '' then
          return 'No'
      end
      if not file_name:sub(1, dot_index - 1):match('^[a-zA-Z]') then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      if extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local dot_pos_2 = string.find(file_name, '.', dot_pos + 1)
      local digits_count = 0
      local file_name_len = string.len(file_name)
      for i = 1, file_name_len do
          local char = string.sub(file_name, i, i)
          if char >= '0' and char <= '9' then
              digits_count = digits_count + 1
          end
      end
      if digits_count > 3 or dot_pos_2 ~= nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1, file_name_len)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local first_char = string.sub(prefix, 1, 1)
      if not (first_char >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char <= 'Z') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
    local count = 0
    local dot_index = 0
    local dot_count = 0
    local ext = ''
    for i = 1, #file_name do
      if file_name:sub(i, i) == '.' then
        dot_index = i
        dot_count = dot_count + 1
      end
      if file_name:sub(i, i):match('%d') then
        count = count + 1
      end
    end
    if count > 3 or dot_count ~= 1 then
      return 'No'
    end
    if not file_name:sub(1, dot_index - 1):match('^[a-zA-Z]') then
      return 'No'
    end
    ext = file_name:sub(dot_index + 1, #file_name)
    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
      return 'No'
    end
    return 'Yes'
  end
- |2-
      if not file_name:match('^[a-zA-Z]') then
          return 'No'
      end
      if not file_name:match('^[a-zA-Z][a-zA-Z0-9]*%.[a-zA-Z]+$') then
          return 'No'
      end
      if file_name:match('%d%d%d') then
          return 'No'
      end
      if not file_name:match('%.[a-zA-Z]+$') then
          return 'No'
      end
      local ext = file_name:match('%.[a-zA-Z]+$')
      if ext ~= '.txt' and ext ~= '.exe' and ext ~= '.dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local after_dot = ''
      local before_dot = ''
      local dot_index = 0
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      before_dot = file_name:sub(1, dot_index - 1)
      after_dot = file_name:sub(dot_index + 1, #file_name)
      if before_dot == '' or (before_dot:sub(1, 1) < 'a' or before_dot:sub(1, 1) > 'z') and (before_dot:sub(1, 1) < 'A' or before_dot:sub(1, 1) > 'Z') then
          return 'No'
      end
      if after_dot ~= 'txt' and after_dot ~= 'exe' and after_dot ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot_count = dot_count + 1
          elseif dot_count == 0 then
              if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot_count ~= 1 or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext = ''
      local name = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
          elseif c:match('%d') then
              count = count + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if count > 3 then
          return 'No'
      end
      name, ext = file_name:match('(.*)%.(.*)')
      if name == '' then
          return 'No'
      end
      if not name:match('^[a-zA-Z]') then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
              dot_index = i
          elseif c:match('%d') then
              digits = digits + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      if #prefix == 0 or not prefix:match('^[a-zA-Z]') then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1)
      if digits > 3 or not extension:match('^txt$|^exe$|^dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local num_digits = 0
      local dot_found = false
      local ext_found = false
      local ext_valid = false
      local ext_start = 0
      local ext_end = 0
      local ext = ''
      local name_start = 0
      local name_end = 0
      local name = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_found = true
              ext_start = i + 1
          elseif dot_found then
              ext_end = i
              ext = file_name:sub(ext_start, ext_end)
              ext_found = true
              break
          elseif c:match('%d') then
              num_digits = num_digits + 1
          end
      end
      if ext_found then
          ext_valid = ext == 'txt' or ext == 'exe' or ext == 'dll'
      end
      if ext_found and ext_valid then
          name_end = ext_start - 2
          name = file_name:sub(1, name_end)
          if name:match('^%a') and num_digits <= 3 then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      -- Your code here
  end
- "\tlocal dot_pos = file_name:find('.')\n\tif not dot_pos then\n\t\treturn 'No'\n\tend\n\tlocal
  prefix = file_name:sub(1, dot_pos - 1)\n\tlocal suffix = file_name:sub(dot_pos +
  1)\n\tif #prefix == 0 or prefix:find('%d') or not prefix:find('%a') then\n\t\treturn
  'No'\n\tend\n\tif #prefix:gsub('%d', '') > 3 then\n\t\treturn 'No'\n\tend\n\tif
  suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn
  'Yes'\nend"
- |2-
      local dot_index = file_name:find('.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if prefix:match('%d') == nil and prefix:match('^[a-zA-Z]') and suffix:match('^txt$') or suffix:match('^exe$') or suffix:match('^dll$') then
          return 'Yes'
      else
          return 'No'
      end
  end
- "    local count = 0\n    local dot_index = 0\n    local ext_index = 0\n    local
  ext_length = 0\n    local ext_name = ''\n    local valid_ext = {'txt', 'exe', 'dll'}\n
  \   local valid_ext_count = 0\n    local valid_ext_index = 0\n    local valid_ext_name
  = ''\n    local valid_ext_length = 0\n    local valid_ext_name_length = 0\n    local
  valid_ext_name_index = 0\n    local valid_ext_name_count = 0\n    local valid_ext_name_count_index
  = 0\n    local valid_ext_name_count_index_count = 0\n    local valid_ext_name_count_index_count_index
  = 0\n    local valid_ext_name_count_index_count_index_count = 0\n    local valid_ext_name_count_index_count_index_count_index
  = 0\n    local valid_ext_name_count_index_count_index_count_index_count = 0\n    local
  valid_ext_name_count_index_count_index_count_index_count_index = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count
  = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index
  = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count
  = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index
  = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index_count
  = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index_count_index
  = 0\n    local valid_ext_name_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count
  = 0\n   "
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      local valid_name = false
      local valid_number = false
      local valid_dot = false
      local valid_extension = false
      local valid_file_name = false
- |2-
      local count = 0
      local dot_index = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_index = i
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1):match('%a') == nil then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      local ext_list = {'txt', 'exe', 'dll'}
      local valid_ext = false
      local valid_name = false
      local valid_num = false
      local valid_ext = false
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          valid_num = false
      else
          valid_num = true
      end
      if dot_count == 1 then
          valid_ext = true
      else
          valid_ext = false
      end
      if file_name:sub(1, 1):match('%a') then
          valid_name = true
      else
          valid_name = false
      end
      ext = file_name:sub(dot_index + 1, #file_name)
      for i = 1, #ext_list do
          if ext == ext_list[i] then
              valid_ext = true
          end
      end
      if valid_num and valid_ext and valid_name then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local count_digits = 0
      local count_dot = 0
      local count_letters = 0
      local count_letters_after_dot = 0
      local count_letters_before_dot = 0
      local count_letters_after_dot_txt = 0
      local count_letters_after_dot_exe = 0
      local count_letters_after_dot_dll = 0
      local count_letters_after_dot_txt_exe_dll = 0
      local count_letters_before_dot_txt = 0
      local count_letters_before_dot_exe = 0
      local count_letters_before_dot_dll = 0
      local count_letters_before_dot_txt_exe_dll = 0
      local count_letters_before_dot_txt_exe_dll_dot = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt = 0
      local count_letters_before_dot_txt_exe_dll_dot_exe = 0
      local count_letters_before_dot_txt_exe_dll_dot_dll = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_exe = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_dll = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll_txt = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll_exe = 0
      local count_letters_before_dot_txt_exe_dll_dot_txt_exe_dll_txt_exe_dll_dll = 0
      local count_letters_before_dot_txt_
- |2-
      local count = 0
      local dot_index = 0
      local dot_count = 0
      local ext = ''
      local ext_list = {'txt', 'exe', 'dll'}
      local ext_valid = false
      local ext_index = 0
      local ext_count = 0
      local ext_char = ''
      local ext_char_valid = false
      local ext_char_index = 0
      local ext_char_count = 0
      local ext_char_list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}
      local ext_char_valid_list = {}
      local ext_char_valid_index = 0
      local ext_char_valid_count = 0
      local ext_char_valid_char = ''
      local ext_char_valid_char_index = 0
      local ext_char_valid_char_count = 0
      local ext_char_valid_char_list = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
- |2-
      local dot_index = file_name:find('.')
      if not dot_index then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_index - 1)
      local suffix = file_name:sub(dot_index + 1)
      if #prefix == 0 or #prefix > 8 or #suffix == 0 or #suffix > 3 or
          prefix:find('%d') or not prefix:find('%a') or
          not (suffix == 'txt' or suffix == 'exe' or suffix == 'dll') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local digits = 0
      local dot_pos = 0
      local dot_found = false
      local ext_found = false
      local ext_pos = 0
      local ext_len = 0
      local ext_valid = false
      local ext_valid_list = {'txt', 'exe', 'dll'}
      local ext_valid_list_len = #ext_valid_list
      local ext_valid_list_len_1 = ext_valid_list_len - 1
      local ext_valid_list_len_2 = ext_valid_list_len - 2
      local ext_valid_list_len_3 = ext_valid_list_len - 3
      local ext_valid_list_len_4 = ext_valid_list_len - 4
      local ext_valid_list_len_5 = ext_valid_list_len - 5
      local ext_valid_list_len_6 = ext_valid_list_len - 6
      local ext_valid_list_len_7 = ext_valid_list_len - 7
      local ext_valid_list_len_8 = ext_valid_list_len - 8
      local ext_valid_list_len_9 = ext_valid_list_len - 9
      local ext_valid_list_len_10 = ext_valid_list_len - 10
      local ext_valid_list_len_11 = ext_valid_list_len - 11
      local ext_valid_list_len_12 = ext_valid_list_len - 12
      local ext_valid_list_len_13 = ext_valid_list_len - 13
      local ext_valid_list_len_14 = ext_valid_list_len - 14
      local ext_valid_list_len_15 = ext_valid_list_len - 15
      local ext_valid_list_len_16 = ext_valid_list_len - 16
      local ext_valid_list_len_17 = ext_valid_list_len - 17
      local ext_valid_list_len_18 = ext_valid_list_len - 18
      local ext_valid_list_len_19 = ext_valid_list_len - 19
      local
- |2-
      local dot_pos = file_name:find('.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_pos - 1)
      local suffix = file_name:sub(dot_pos + 1)
      if #prefix == 0 or #prefix > 8 or #suffix == 0 or #suffix > 3 then
          return 'No'
      end
      local prefix_digit_count = 0
      for i = 1, #prefix do
          local c = prefix:sub(i, i)
          if c >= '0' and c <= '9' then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      local prefix_first_char = prefix:sub(1, 1)
      if prefix_first_char < 'a' or prefix_first_char > 'z' and prefix_first_char < 'A' or prefix_first_char > 'Z' then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_index = 0
      local dot_count = 0
      local digit_count = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      local valid_name = false
      local valid_digit_count = false
      local valid_dot_count = false
      local valid_extension_count = false
      local valid_name_count = false
      local valid_name_start = false
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_index = i
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              digit_count = digit_count + 1
          end
      end
      if digit_count <= 3 then
          valid_digit_count = true
      end
      if dot_count == 1 then
          valid_dot_count = true
      end
      if dot_index ~= 1 then
          valid_name_count = true
      end
      if file_name:sub(1, 1):match('%a') then
          valid_name_start = true
      end
      if valid_digit_count and valid_dot_count and valid_name_count and valid_name_start then
          valid_name = true
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      for i = 1, #valid_extensions do
          if extension == valid_extensions[i] then
              valid_extension = true
          end
      end
      if valid_extension then
          valid_extension_count = true
      end
      if valid_name and valid_extension_count then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local ext = string.sub(file_name, dot_index + 1)
      local name = string.sub(file_name, 1, dot_index - 1)
      local digits = 0
      for i = 1, string.len(name) do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          end
      end
      if digits > 3 then
          return 'No'
      end
      if string.find(name, '%a') ~= 1 then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_pos = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_pos = i
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, dot_pos - 1):match('%a') == nil then
          return 'No'
      end
      ext = file_name:sub(dot_pos + 1, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- "\tlocal dot_index = string.find(file_name, '.')\n\tlocal extension = string.sub(file_name,
  dot_index + 1)\n\tlocal digits_count = 0\n\tlocal digits = '0123456789'\n\tfor i
  = 1, #file_name do\n\t\tlocal char = string.sub(file_name, i, i)\n\t\tif string.find(digits,
  char) then\n\t\t\tdigits_count = digits_count + 1\n\t\tend\n\tend\n\tif digits_count
  > 3 then\n\t\treturn 'No'\n\tend\n\tif string.find(file_name, '%.') ~= dot_index
  then\n\t\treturn 'No'\n\tend\n\tif string.sub(file_name, 1, dot_index - 1) == ''
  then\n\t\treturn 'No'\n\tend\n\tif string.find(file_name, '%a') ~= 1 then\n\t\treturn
  'No'\n\tend\n\tif extension ~= 'txt' and extension ~= 'exe' and extension ~= 'dll'
  then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend"
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if count > 3 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1):match('%a') == nil then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
    local count = 0
    local dot_count = 0
    local dot_index = 0
    local ext = ''
    local ext_list = {'txt', 'exe', 'dll'}
    local valid_ext = false
    local valid_name = false
    local valid_count = false
    local valid_dot = false
    local valid_ext_count = false
    for i = 1, #file_name do
      if file_name:sub(i, i) == '.' then
        dot_count = dot_count + 1
        dot_index = i
      end
      if file_name:sub(i, i):match('%d') then
        count = count + 1
      end
    end
    if count <= 3 then
      valid_count = true
    end
    if dot_count == 1 then
      valid_dot = true
    end
    if dot_index > 1 then
      valid_name = true
    end
    if file_name:sub(dot_index + 1, dot_index + 3) == 'txt' or
       file_name:sub(dot_index + 1, dot_index + 3) == 'exe' or
       file_name:sub(dot_index + 1, dot_index + 3) == 'dll' then
      valid_ext = true
    end
    if valid_count and valid_dot and valid_name and valid_ext then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
      local digits = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif dot_count == 0 then
              if not c:match('%a') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot_count ~= 1 or ext == '' or not ext:match('^txt$|^exe$|^dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext_index = 0
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, 1) < 'A' or file_name:sub(1, 1) > 'z' then
          return 'No'
      end
      ext_index = dot_index + 1
      if file_name:sub(ext_index, ext_index + 2) ~= 'txt' and file_name:sub(ext_index, ext_index + 2) ~= 'exe' and file_name:sub(ext_index, ext_index + 2) ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext_index = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      ext_index = dot_index + 1
      ext = file_name:sub(ext_index, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      if file_name:sub(1, 1) < 'a' or file_name:sub(1, 1) > 'z' then
          if file_name:sub(1, 1) < 'A' or file_name:sub(1, 1) > 'Z' then
              return 'No'
          end
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      local ext_valid = false
      local ext_valid_list = {'txt', 'exe', 'dll'}
      local ext_valid_list_len = #ext_valid_list
      local ext_valid_list_len_minus_one = ext_valid_list_len - 1
      local ext_valid_list_len_minus_two = ext_valid_list_len - 2
      local ext_valid_list_len_minus_three = ext_valid_list_len - 3
      local ext_valid_list_len_minus_four = ext_valid_list_len - 4
      local ext_valid_list_len_minus_five = ext_valid_list_len - 5
      local ext_valid_list_len_minus_six = ext_valid_list_len - 6
      local ext_valid_list_len_minus_seven = ext_valid_list_len - 7
      local ext_valid_list_len_minus_eight = ext_valid_list_len - 8
      local ext_valid_list_len_minus_nine = ext_valid_list_len - 9
      local ext_valid_list_len_minus_ten = ext_valid_list_len - 10
      local ext_valid_list_len_minus_eleven = ext_valid_list_len - 11
      local ext_valid_list_len_minus_twelve = ext_valid_list_len - 12
      local ext_valid_list_len_minus_thirteen = ext_valid_list_len - 13
      local ext_valid_list_len_minus_fourteen = ext_valid_list_len - 14
      local ext_valid_list_len_minus_fifteen = ext_valid_list_len - 15
      local ext_valid_list_len_minus_sixteen = ext_valid_list_len - 16
      local ext_valid_list_len_minus_seventeen = ext_valid_list_len - 17
      local ext_valid_list_len_minus_eighteen = ext_valid_list_len
- |2-
      local dot_pos = file_name:find('.')
      local file_name_without_extension = file_name:sub(1, dot_pos - 1)
      local file_extension = file_name:sub(dot_pos + 1)
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extension = false
      for _, extension in ipairs(valid_extensions) do
          if extension == file_extension then
              valid_extension = true
              break
          end
      end
      local valid_file_name = file_name_without_extension:match('^[a-zA-Z]%w*$')
      local valid_number_of_digits = file_name_without_extension:match('%d') == nil
      if valid_file_name and valid_number_of_digits and valid_extension then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local function is_valid_extension(extension)
          return extension == 'txt' or extension == 'exe' or extension == 'dll'
      end
- |2-
      local digits = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
          elseif c:match('%d') then
              digits = digits + 1
          elseif dot_count == 0 then
              if not c:match('%a') then
                  return 'No'
              end
          else
              ext = ext .. c
          end
      end
      if digits > 3 or dot_count ~= 1 or ext == '' or not ext:match('txt$') and not ext:match('exe$') and not ext:match('dll$') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_index - 1)
      local suffix = string.sub(file_name, dot_index + 1)
      local prefix_valid = string.match(prefix, '^[a-zA-Z][a-zA-Z0-9]*$')
      local suffix_valid = suffix == 'txt' or suffix == 'exe' or suffix == 'dll'
      if prefix_valid and suffix_valid then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext_count = 0
      local ext_list = {'txt', 'exe', 'dll'}
      local ext_name = ''
      local file_name_len = string.len(file_name)
      for i = 1, file_name_len do
          local char = string.sub(file_name, i, i)
          if char == '.' then
              dot_count = dot_count + 1
              ext_count = 1
          elseif ext_count == 1 then
              ext_name = ext_name .. char
          elseif char >= '0' and char <= '9' then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 or ext_count == 0 then
          return 'No'
      end
      for _, ext in ipairs(ext_list) do
          if ext == ext_name then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext_index = 0
      local ext_len = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              dot_count = dot_count + 1
              dot_index = i
          elseif c >= '0' and c <= '9' then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      ext_index = dot_index + 1
      ext_len = #file_name - ext_index + 1
      ext = file_name:sub(ext_index, ext_index + ext_len - 1)
      if ext == 'txt' or ext == 'exe' or ext == 'dll' then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
      local dot_index = string.find(file_name, '.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_index - 1)
      local suffix = string.sub(file_name, dot_index + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      if string.find(prefix, '[0-9]') ~= nil then
          return 'No'
      end
      if string.find(prefix, '[a-zA-Z]') == nil then
          return 'No'
      end
      if string.len(string.gsub(prefix, '[0-9]', '')) ~= string.len(prefix) then
          return 'No'
      end
      if string.len(string.gsub(prefix, '[0-9]', '')) > 3 then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local extension_list = {'txt', 'exe', 'dll'}
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1) == '' then
          return 'No'
      end
      if not file_name:sub(1, dot_index - 1):match('%a') then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      for i = 1, #extension_list do
          if extension == extension_list[i] then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      local dot_index = string.find(file_name, '.')
      local dot_index_2 = string.find(file_name, '.', dot_index + 1)
      local before_dot = string.sub(file_name, 1, dot_index - 1)
      local after_dot = string.sub(file_name, dot_index + 1)
      local digit_count = 0
      for i = 1, #before_dot do
          if string.find('0123456789', string.sub(before_dot, i, i)) then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 or dot_index_2 ~= nil or string.len(before_dot) == 0 or string.find('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', string.sub(before_dot, 1, 1)) == nil or (after_dot ~= 'txt' and after_dot ~= 'exe' and after_dot ~= 'dll') then
          return 'No'
      else
          return 'Yes'
      end
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext_index = 0
      local ext_len = 0
      local ext_list = {'txt', 'exe', 'dll'}
      local ext_found = false
      local valid_ext = false
      local valid_name = false
      local valid_count = false
      local valid_dot = false
      local valid_ext_len = false
      local valid_ext_start = false
      local valid_ext_end = false
      local valid_ext_list = false
      local valid_ext_found = false
      local valid_ext_valid = false
      local valid_ext_invalid = false
      local valid_ext_invalid_list = false
      local valid_ext_invalid_start = false
      local valid_ext_invalid_end = false
      local valid_ext_invalid_len = false
      local valid_ext_invalid_dot = false
      local valid_ext_invalid_count = false
      local valid_ext_invalid_name = false
      local valid_ext_invalid_name_start = false
      local valid_ext_invalid_name_end = false
      local valid_ext_invalid_name_len = false
      local valid_ext_invalid_name_dot = false
      local valid_ext_invalid_name_count = false
      local valid_ext_invalid_name_start_end = false
      local valid_ext_invalid_name_start_len = false
      local valid_ext_invalid_name_start_dot = false
      local valid_ext_invalid_name_start_count = false
      local valid_ext_invalid_name_end_len = false
      local valid_ext_invalid_name_end_dot = false
      local valid_ext_invalid_name_end_count = false
      local valid_ext_invalid_name_len_dot = false
      local valid_ext_invalid_name_len_count = false
      local valid_ext_invalid_name_dot_count = false
      local valid_ext_invalid
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local prefix_digit_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      local c = string.sub(prefix, 1, 1)
      if (c < 'a' or c > 'z') and (c < 'A' or c > 'Z') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local digits = 0
      local dot_pos = 0
      local ext = ''
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          elseif c == '.' then
              dot_pos = i
          end
      end
      if digits > 3 then
          return 'No'
      end
      if dot_pos == 0 then
          return 'No'
      end
      if dot_pos == 1 then
          return 'No'
      end
      if dot_pos == #file_name then
          return 'No'
      end
      ext = file_name:sub(dot_pos + 1)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if count > 3 then
          return 'No'
      end
      if file_name:sub(1, 1):match('%a') then
          ext = file_name:sub(#file_name - 2, #file_name)
          if ext == 'txt' or ext == 'exe' or ext == 'dll' then
              return 'Yes'
          end
      end
      return 'No'
  end
- |2-
      local dot_pos = file_name:find('.')
      if not dot_pos then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_pos - 1)
      local suffix = file_name:sub(dot_pos + 1)
      if not prefix:match('^[a-zA-Z]') or prefix:match('%d') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      if prefix:match('%d') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: Implement this function
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1):match('%a') then
          return 'Yes'
      end
      return 'No'
  end
- |2-
      local digits = 0
      local dot = 0
      local ext = ''
      for c in file_name:gmatch('.') do
          if c:match('%d') then
              digits = digits + 1
          elseif c == '.' then
              dot = dot + 1
          elseif dot == 1 then
              ext = ext .. c
          end
      end
      if digits > 3 or dot ~= 1 or not file_name:match('^[a-zA-Z]') or not
          (ext == 'txt' or ext == 'exe' or ext == 'dll') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local dot_pos = string.find(file_name, '.')
      local ext = string.sub(file_name, dot_pos + 1)
      local name = string.sub(file_name, 1, dot_pos - 1)
      local digit_count = 0
      for i = 1, string.len(name) do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              digit_count = digit_count + 1
          end
      end
      if digit_count > 3 then
          return 'No'
      end
      local first_char = string.sub(name, 1, 1)
      if not (first_char >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char <= 'Z') then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      local valid_ext = {'txt', 'exe', 'dll'}
      local valid_ext_count = 0
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, dot_index - 1) == '' then
          return 'No'
      end
      if not file_name:sub(1, dot_index - 1):match('^[a-zA-Z]') then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1, #file_name)
      for i = 1, #valid_ext do
          if ext == valid_ext[i] then
              valid_ext_count = valid_ext_count + 1
          end
      end
      if valid_ext_count == 0 then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      -- your code here
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 or file_name:sub(1, 1):match('%d') or file_name:sub(1, dot_index - 1) == '' then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      if extension == 'txt' or extension == 'exe' or extension == 'dll' then
          return 'Yes'
      end
      return 'No'
  end
- |2-
      local function check_digits(file_name)
          local count = 0
          for i = 1, #file_name do
              if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then
                  count = count + 1
              end
          end
          return count <= 3
      end
- |2-
      local dot_index = string.find(file_name, '.')
      if dot_index == nil then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_index - 1)
      local suffix = string.sub(file_name, dot_index + 1)
      if string.len(prefix) == 0 or string.len(suffix) == 0 then
          return 'No'
      end
      local prefix_digit_count = 0
      for i = 1, string.len(prefix) do
          local c = string.sub(prefix, i, i)
          if c >= '0' and c <= '9' then
              prefix_digit_count = prefix_digit_count + 1
          end
      end
      if prefix_digit_count > 3 then
          return 'No'
      end
      if string.sub(prefix, 1, 1) < 'A' or string.sub(prefix, 1, 1) > 'z' then
          return 'No'
      end
      if not (suffix == 'txt' or suffix == 'exe' or suffix == 'dll') then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      local count = 0
      local dot_index = 0
      local dot_count = 0
      local extension = ''
      local extension_check = false
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_index = i
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then
              count = count + 1
          end
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if count > 3 then
          return 'No'
      end
      if file_name:sub(1, 1) < 'A' or file_name:sub(1, 1) > 'z' then
          return 'No'
      end
      if file_name:sub(1, 1) > 'Z' and file_name:sub(1, 1) < 'a' then
          return 'No'
      end
      extension = file_name:sub(dot_index + 1, #file_name)
      if extension == 'txt' or extension == 'exe' or extension == 'dll' then
          extension_check = true
      end
      if extension_check then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
    local digits = 0
    local dot = 0
    local ext = ''
    local name = ''
    for i = 1, #file_name do
      local c = file_name:sub(i, i)
      if c == '.' then
        dot = dot + 1
      elseif c:match('%d') then
        digits = digits + 1
      elseif dot == 0 then
        name = name .. c
      else
        ext = ext .. c
      end
    end
    if dot ~= 1 or digits > 3 or name == '' or not name:match('^%a') or ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
      return 'No'
    else
      return 'Yes'
    end
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
              dot_index = i
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 or dot_count ~= 1 then
          return 'No'
      end
      if file_name:sub(1, 1):match('%a') == nil then
          return 'No'
      end
      ext = file_name:sub(dot_index + 1, #file_name)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement the function
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local extension = ''
      local valid_extensions = {'txt', 'exe', 'dll'}
      local valid_extensions_count = #valid_extensions
      local valid_extensions_index = 0
      local valid_extensions_found = false
      local valid_extensions_found_count = 0
      local valid_extensions_found_index = 0
      local valid_extensions_found_index_count = 0
      local valid_extensions_found_index_count_index = 0
      local valid_extensions_found_index_count_index_count = 0
      local valid_extensions_found_index_count_index_count_index = 0
      local valid_extensions_found_index_count_index_count_index_count = 0
      local valid_extensions_found_index_count_index_count_index_count_index = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count_index = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count_index_count = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count_index = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0
      local valid_extensions_found_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0
      local valid_extensions_found_
- |2-
      local dot_pos = string.find(file_name, '.')
      local ext = string.sub(file_name, dot_pos + 1)
      local name = string.sub(file_name, 1, dot_pos - 1)
      local digits = 0
      for i = 1, #name do
          local c = string.sub(name, i, i)
          if c >= '0' and c <= '9' then
              digits = digits + 1
          end
      end
      if digits > 3 then
          return 'No'
      end
      if string.find(name, '%a') ~= 1 then
          return 'No'
      end
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- "    local count = 0\n    local dot_count = 0\n    local dot_index = 0\n    local
  ext = ''\n    local ext_valid = false\n    local ext_list = {'txt', 'exe', 'dll'}\n
  \   local valid_ext = false\n    local valid_name = false\n    local valid_ext =
  false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n    local valid_name = false\n    local valid_ext = false\n    local valid_name
  = false\n    local valid_ext = false\n    local valid_name = false\n    local valid_ext
  = false\n   "
- |2-
      local count = 0
      local dot_count = 0
      local ext = ''
      for i = 1, #file_name do
          if file_name:sub(i, i) == '.' then
              dot_count = dot_count + 1
          end
          if file_name:sub(i, i):match('%d') then
              count = count + 1
          end
      end
      if count > 3 then
          return 'No'
      end
      if dot_count ~= 1 then
          return 'No'
      end
      if not file_name:sub(1, file_name:find('.') - 1):match('%a') then
          return 'No'
      end
      ext = file_name:sub(file_name:find('.') + 1)
      if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
    local digits = 0
    local dot = 0
    local ext = ''
    for i = 1, #file_name do
      local c = file_name:sub(i, i)
      if c == '.' then
        dot = dot + 1
      elseif c:match('%d') then
        digits = digits + 1
      end
    end
    if dot ~= 1 or digits > 3 then
      return 'No'
    end
    local name, ext = file_name:match('^([^.]+)%.(.+)$')
    if not name or not ext then
      return 'No'
    end
    if not name:match('^[a-zA-Z]') then
      return 'No'
    end
    if ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then
      return 'No'
    end
    return 'Yes'
  end
- |2-
      local digits = 0
      local dot = false
      local ext = false
      local first_letter = false
      for i = 1, #file_name do
          local c = file_name:sub(i, i)
          if c == '.' then
              if dot then
                  return 'No'
              end
              dot = true
          elseif c:match('%d') then
              digits = digits + 1
              if digits > 3 then
                  return 'No'
              end
          elseif c:match('%a') then
              if not first_letter then
                  first_letter = true
              end
          else
              return 'No'
          end
      end
      if not dot or not first_letter then
          return 'No'
      end
      local ext = file_name:sub(#file_name - 2, #file_name)
      if ext == 'txt' or ext == 'exe' or ext == 'dll' then
          return 'Yes'
      end
      return 'No'
  end
- |2-
      local dot_pos = file_name:find('.')
      if dot_pos == nil then
          return 'No'
      end
      local prefix = file_name:sub(1, dot_pos - 1)
      local suffix = file_name:sub(dot_pos + 1)
      if #prefix == 0 or #prefix > 8 or #suffix > 3 then
          return 'No'
      end
      if prefix:find('%d') == nil then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') > 1 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') < #prefix then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == #prefix then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 1 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 2 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 3 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 4 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 5 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 6 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 7 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 8 then
          return 'No'
      end
      if prefix:find('%d') ~= nil and prefix:find('%d') == 9 then
          return '
- |2-
      local dot_pos = string.find(file_name, '.')
      if dot_pos == nil then
          return 'No'
      end
      local digits_count = 0
      for i = 1, dot_pos - 1 do
          local c = string.sub(file_name, i, i)
          if c >= '0' and c <= '9' then
              digits_count = digits_count + 1
          end
      end
      if digits_count > 3 then
          return 'No'
      end
      local prefix = string.sub(file_name, 1, dot_pos - 1)
      local suffix = string.sub(file_name, dot_pos + 1)
      if string.len(prefix) == 0 then
          return 'No'
      end
      local first_char = string.sub(prefix, 1, 1)
      if not (first_char >= 'a' and first_char <= 'z' or first_char >= 'A' and first_char <= 'Z') then
          return 'No'
      end
      if suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then
          return 'No'
      end
      return 'Yes'
  end
- |2-
      -- TODO: implement the function
  end
- |2-
      local count = 0
      local dot_count = 0
      local dot_index = 0
      local ext_index = 0
      local ext = ''
      local ext_valid = false
      local valid_ext = {'txt', 'exe', 'dll'}
      local valid_ext_count = 0
      local valid_ext_index = 0
      local valid_ext_name = ''
      local valid_ext_name_index = 0
      local valid_ext_name_count = 0
      local valid_ext_name_valid = false
      local valid_ext_name_valid_count = 0
      local valid_ext_name_valid_index = 0
      local valid_ext_name_valid_char = ''
      local valid_ext_name_valid_char_code = 0
      local valid_ext_name_valid_char_code_min = 0
      local valid_ext_name_valid_char_code_max = 0
      local valid_ext_name_valid_char_code_valid = false
      local valid_ext_name_valid_char_code_valid_count = 0
      local valid_ext_name_valid_char_code_valid_index = 0
      local valid_ext_name_valid_char_code_valid_char = ''
      local valid_ext_name_valid_char_code_valid_char_code = 0
      local valid_ext_name_valid_char_code_valid_char_code_min = 0
      local valid_ext_name_valid_char_code_valid_char_code_max = 0
      local valid_ext_name_valid_char_code_valid_char_code_valid = false
      local valid_ext_name_valid_char_code_valid_char_code_valid_count = 0
      local valid_ext_name_valid_char_code_valid_char_code_valid_index = 0
      local valid_ext_name_valid_char_code_valid_char_code_valid_char = ''
      local valid_ext_name_valid_char_code_valid_char_code_valid_char_code = 0
      local valid_ext_name_valid_char
- |2-
      local dot_pos = string.find(file_name, '.')
      local file_name_before_dot = string.sub(file_name, 1, dot_pos - 1)
      local file_name_after_dot = string.sub(file_name, dot_pos + 1)
      local file_name_before_dot_valid = string.match(file_name_before_dot, '^[a-zA-Z][a-zA-Z0-9]*$')
      local file_name_after_dot_valid = string.match(file_name_after_dot, '^txt$|^exe$|^dll$')
      local file_name_valid = file_name_before_dot_valid and file_name_after_dot_valid
      return file_name_valid and 'Yes' or 'No'
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
