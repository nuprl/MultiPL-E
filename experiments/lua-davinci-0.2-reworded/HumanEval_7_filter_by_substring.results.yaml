---
name: HumanEval_7_filter_by_substring
language: lua
results:
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, string in ipairs(strings) do
            if string:find(substring) then
                table.insert(filtered, string)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if string.find(str, substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, string in ipairs(strings) do
            if string:find(substring) then
                table.insert(result, string)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local filtered = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(filtered, str)
        end
      end
      return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if s:find(substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if string.find(str, substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if string.find(s, substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(filtered, s)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(filtered, str)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(filtered, s)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if string.find(str, substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, v in ipairs(strings) do
            if string.find(v, substring) then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if s:find(substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if string.find(str, substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if string.find(str, substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(filtered, s)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if s:find(substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if s:find(substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(filtered, s)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if string.find(str, substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if string.find(str, substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if string.find(str, substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if string.find(str, substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for i, v in ipairs(strings) do
        if v:find(substring) then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(filtered, str)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(filtered, s)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if string.find(str, substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:match(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if string.find(s, substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, string in ipairs(strings) do
            if string.find(string, substring) then
                table.insert(result, string)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if string.find(str, substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if s:find(substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, v in ipairs(strings) do
            if v:find(substring) then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, v in ipairs(strings) do
            if v:find(substring) then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, string in ipairs(strings) do
            if string:find(substring) then
                table.insert(result, string)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if string.find(str, substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, s in ipairs(strings) do
        if s:find(substring) then
          table.insert(result, s)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, str in ipairs(strings) do
        if str:find(substring) then
          table.insert(result, str)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, string in ipairs(strings) do
            if string:find(substring) then
                table.insert(result, string)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if string.find(s, substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
      local result = {}
      for _, v in ipairs(strings) do
        if string.find(v, substring) then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, str in ipairs(strings) do
            if str:find(substring) then
                table.insert(result, str)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local filtered = {}
        for _, v in ipairs(strings) do
            if string.find(v, substring) then
                table.insert(filtered, v)
            end
        end
        return filtered
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Filter an input table of strings only for ones that contain given substring
    -- >>> filter_by_substring({}, 'a')
    -- {}
    -- >>> filter_by_substring({'abc', 'bacd', 'cde', 'array'}, 'a')
    -- {'abc', 'bacd', 'array'}
    local function filter_by_substring(strings, substring)
        local result = {}
        for _, s in ipairs(strings) do
            if s:find(substring) then
                table.insert(result, s)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_by_substring
        lu.assertEquals(candidate({}, 'john'), {})
        lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})
        lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
