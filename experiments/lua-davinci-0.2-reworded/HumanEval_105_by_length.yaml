name: HumanEval_105_by_length
language: lua
prompt: "-- Given a table of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting table, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2, 1,\
  \ 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
  \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
  -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1, -1,\
  \ 55})\n-- {'One'}\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local res = {}\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i, v in ipairs(res) do\n        res[i] = tostring(v)\n\
    \    end\n    table.reverse(res)\n    for i, v in ipairs(res) do\n        if v\
    \ == '1' then\n            res[i] = 'One'\n        elseif v == '2' then\n    \
    \        res[i] = 'Two'\n        elseif v == '3' then\n            res[i] = 'Three'\n\
    \        elseif v == '4' then\n            res[i] = 'Four'\n        elseif v ==\
    \ '5' then\n            res[i] = 'Five'\n        elseif v == '6' then\n      \
    \      res[i] = 'Six'\n        elseif v == '7' then\n            res[i] = 'Seven'\n\
    \        elseif v == '8' then\n            res[i] = 'Eight'\n        elseif v\
    \ == '9' then\n            res[i] = 'Nine'\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        if res[i] == 1 then\n  \
    \          res[i] = \"One\"\n        elseif res[i] == 2 then\n            res[i]\
    \ = \"Two\"\n        elseif res[i] == 3 then\n            res[i] = \"Three\"\n\
    \        elseif res[i] == 4 then\n            res[i] = \"Four\"\n        elseif\
    \ res[i] == 5 then\n            res[i] = \"Five\"\n        elseif res[i] == 6\
    \ then\n            res[i] = \"Six\"\n        elseif res[i] == 7 then\n      \
    \      res[i] = \"Seven\"\n        elseif res[i] == 8 then\n            res[i]\
    \ = \"Eight\"\n        elseif res[i] == 9 then\n            res[i] = \"Nine\"\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    local names = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i,\
    \ v in ipairs(result) do\n        result[i] = names[v]\n    end\n    return result\n\
    end", "  local result = {}\n  local numbers = {\n    [1] = \"One\",\n    [2] =\
    \ \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n \
    \   [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\
    \n  }\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ numbers[v])\n    end\n  end\n  table.sort(result)\n  return result\nend", " \
    \ local res = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n\
    \      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  local res2 =\
    \ {}\n  for i = #res, 1, -1 do\n    table.insert(res2, res[i])\n  end\n  local\
    \ res3 = {}\n  for _, v in ipairs(res2) do\n    table.insert(res3, num_to_str[v])\n\
    \  end\n  return res3\nend", "  local res = {}\n  for _, v in ipairs(arr) do\n\
    \    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n \
    \ table.sort(res)\n  for i, v in ipairs(res) do\n    res[i] = tostring(v)\n  end\n\
    \  table.reverse(res)\n  for i, v in ipairs(res) do\n    res[i] = v:gsub('1',\
    \ 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5', 'Five'):gsub('6',\
    \ 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')\n  end\n  return\
    \ res\nend", "    local result = {}\n    for i, v in ipairs(arr) do\n        if\
    \ v >= 1 and v <= 9 then\n            table.insert(result, v)\n        end\n \
    \   end\n    table.sort(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = tostring(result[i])\n    end\n    table.reverse(result)\n    for i, v in ipairs(result)\
    \ do\n        if v == '1' then\n            result[i] = 'One'\n        elseif\
    \ v == '2' then\n            result[i] = 'Two'\n        elseif v == '3' then\n\
    \            result[i] = 'Three'\n        elseif v == '4' then\n            result[i]\
    \ = 'Four'\n        elseif v == '5' then\n            result[i] = 'Five'\n   \
    \     elseif v == '6' then\n            result[i] = 'Six'\n        elseif v ==\
    \ '7' then\n            result[i] = 'Seven'\n        elseif v == '8' then\n  \
    \          result[i] = 'Eight'\n        elseif v == '9' then\n            result[i]\
    \ = 'Nine'\n        end\n    end\n    return result\nend", "    local result =\
    \ {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n    \
    \        table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub('1',\
    \ 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5', 'Five'):gsub('6',\
    \ 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')\n    end\n  \
    \  return result\nend", "    local res = {}\n    for i = 1, #arr do\n        if\
    \ arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n     \
    \   end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        if res[i]\
    \ == 1 then\n            res[i] = \"One\"\n        elseif res[i] == 2 then\n \
    \           res[i] = \"Two\"\n        elseif res[i] == 3 then\n            res[i]\
    \ = \"Three\"\n        elseif res[i] == 4 then\n            res[i] = \"Four\"\n\
    \        elseif res[i] == 5 then\n            res[i] = \"Five\"\n        elseif\
    \ res[i] == 6 then\n            res[i] = \"Six\"\n        elseif res[i] == 7 then\n\
    \            res[i] = \"Seven\"\n        elseif res[i] == 8 then\n           \
    \ res[i] = \"Eight\"\n        elseif res[i] == 9 then\n            res[i] = \"\
    Nine\"\n        end\n    end\n    return res\nend", "    local result = {}\n \
    \   for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n          \
    \  table.insert(result, v)\n        end\n    end\n    table.sort(result)\n   \
    \ local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i, v in ipairs(result) do\n        result[i] = names[v]\n \
    \   end\n    return result\nend", "    local result = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, #result do\n   \
    \     result[i] = tostring(result[i])\n    end\n    table.reverse(result)\n  \
    \  for i = 1, #result do\n        result[i] = string.gsub(result[i], \"1\", \"\
    One\")\n        result[i] = string.gsub(result[i], \"2\", \"Two\")\n        result[i]\
    \ = string.gsub(result[i], \"3\", \"Three\")\n        result[i] = string.gsub(result[i],\
    \ \"4\", \"Four\")\n        result[i] = string.gsub(result[i], \"5\", \"Five\"\
    )\n        result[i] = string.gsub(result[i], \"6\", \"Six\")\n        result[i]\
    \ = string.gsub(result[i], \"7\", \"Seven\")\n        result[i] = string.gsub(result[i],\
    \ \"8\", \"Eight\")\n        result[i] = string.gsub(result[i], \"9\", \"Nine\"\
    )\n    end\n    return result\nend", "    local result = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result,\
    \ arr[i])\n        end\n    end\n    table.sort(result)\n    local names = {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}\n    for i = 1, #result do\n        result[i] = names[result[i]]\n\
    \    end\n    return result\nend", "    local result = {}\n    for i, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    for i, v in ipairs(result)\
    \ do\n        result[i] = num_to_str[v]\n    end\n    return result\nend", " \
    \   local res = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"\
    One\"\n        elseif res[i] == 2 then\n            res[i] = \"Two\"\n       \
    \ elseif res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i]\
    \ == 4 then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n\
    \            res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend", "  local result = {}\n  for _, v in ipairs(arr) do\n    if v >= 1\
    \ and v <= 9 then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  for i, v in ipairs(result) do\n    result[i] = tostring(v)\n  end\n  table.sort(result,\
    \ function(a, b) return #a > #b end)\n  for i, v in ipairs(result) do\n    result[i]\
    \ = v:gsub('1', 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5',\
    \ 'Five'):gsub('6', 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')\n\
    \  end\n  return result\nend", "    local res = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = num_to_str[res[i]]\n    end\n    return res\nend", "  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      res[#res + 1]\
    \ = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i]\
    \ = tostring(res[i])\n  end\n  table.sort(res, function(a, b) return #a > #b end)\n\
    \  for i = 1, #res do\n    res[i] = string.gsub(res[i], \"1\", \"One\")\n    res[i]\
    \ = string.gsub(res[i], \"2\", \"Two\")\n    res[i] = string.gsub(res[i], \"3\"\
    , \"Three\")\n    res[i] = string.gsub(res[i], \"4\", \"Four\")\n    res[i] =\
    \ string.gsub(res[i], \"5\", \"Five\")\n    res[i] = string.gsub(res[i], \"6\"\
    , \"Six\")\n    res[i] = string.gsub(res[i], \"7\", \"Seven\")\n    res[i] = string.gsub(res[i],\
    \ \"8\", \"Eight\")\n    res[i] = string.gsub(res[i], \"9\", \"Nine\")\n  end\n\
    \  return res\nend", "    local res = {}\n    for i = 1, #arr do\n        if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n        end\n\
    \    end\n    table.sort(res)\n    for i = 1, #res do\n        if res[i] == 1\
    \ then\n            res[i] = \"One\"\n        elseif res[i] == 2 then\n      \
    \      res[i] = \"Two\"\n        elseif res[i] == 3 then\n            res[i] =\
    \ \"Three\"\n        elseif res[i] == 4 then\n            res[i] = \"Four\"\n\
    \        elseif res[i] == 5 then\n            res[i] = \"Five\"\n        elseif\
    \ res[i] == 6 then\n            res[i] = \"Six\"\n        elseif res[i] == 7 then\n\
    \            res[i] = \"Seven\"\n        elseif res[i] == 8 then\n           \
    \ res[i] = \"Eight\"\n        elseif res[i] == 9 then\n            res[i] = \"\
    Nine\"\n        end\n    end\n    return res\nend", "  local res = {}\n  for _,\
    \ v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  local res2 = {}\n  for i = #res, 1,\
    \ -1 do\n    table.insert(res2, res[i])\n  end\n  local res3 = {}\n  for _, v\
    \ in ipairs(res2) do\n    table.insert(res3, tostring(v))\n  end\n  return res3\n\
    end", "    local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    local res2 = {}\n    for i = #res, 1, -1 do\n        table.insert(res2, res[i])\n\
    \    end\n    local res3 = {}\n    for _, v in ipairs(res2) do\n        table.insert(res3,\
    \ tostring(v))\n    end\n    return res3\nend", "  local res = {}\n  for i = 1,\
    \ #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      res[#res + 1] = arr[i]\n\
    \    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = tostring(res[i])\n\
    \  end\n  for i = 1, #res do\n    if res[i] == '1' then\n      res[i] = 'One'\n\
    \    elseif res[i] == '2' then\n      res[i] = 'Two'\n    elseif res[i] == '3'\
    \ then\n      res[i] = 'Three'\n    elseif res[i] == '4' then\n      res[i] =\
    \ 'Four'\n    elseif res[i] == '5' then\n      res[i] = 'Five'\n    elseif res[i]\
    \ == '6' then\n      res[i] = 'Six'\n    elseif res[i] == '7' then\n      res[i]\
    \ = 'Seven'\n    elseif res[i] == '8' then\n      res[i] = 'Eight'\n    elseif\
    \ res[i] == '9' then\n      res[i] = 'Nine'\n    end\n  end\n  return res\nend",
  "    local res = {}\n    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n\
    \        [3] = 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n      \
    \  [6] = 'Six',\n        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] =\
    \ 'Nine'\n    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9\
    \ then\n            table.insert(res, map[v])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local function sort_by_length(a, b)\n        return\
    \ a > b\n    end\n    local function replace_by_name(a)\n        if a == 1 then\n\
    \            return \"One\"\n        elseif a == 2 then\n            return \"\
    Two\"\n        elseif a == 3 then\n            return \"Three\"\n        elseif\
    \ a == 4 then\n            return \"Four\"\n        elseif a == 5 then\n     \
    \       return \"Five\"\n        elseif a == 6 then\n            return \"Six\"\
    \n        elseif a == 7 then\n            return \"Seven\"\n        elseif a ==\
    \ 8 then\n            return \"Eight\"\n        elseif a == 9 then\n         \
    \   return \"Nine\"\n        end\n    end\n    local function is_valid(a)\n  \
    \      return a >= 1 and a <= 9\n    end\n    local function filter_valid(a)\n\
    \        return is_valid(a)\n    end\n    local function map_replace(a)\n    \
    \    return replace_by_name(a)\n    end\n    local function reverse(a)\n     \
    \   local b = {}\n        for i = #a, 1, -1 do\n            b[#b + 1] = a[i]\n\
    \        end\n        return b\n    end\n    return reverse(map(map_replace, filter(filter_valid,\
    \ arr)))\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n        if\
    \ v > 0 and v < 10 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    table.reverse(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    return res\nend", "    local res = {}\n    local map = {\n     \
    \   [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n        [4] =\
    \ 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7] = 'Seven',\n\
    \        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, map[v])\n\
    \        end\n    end\n    table.sort(res)\n    local rev = {}\n    for i = #res,\
    \ 1, -1 do\n        table.insert(rev, res[i])\n    end\n    return rev\nend",
  "  local function sort(arr)\n    local function swap(i, j)\n      arr[i], arr[j]\
    \ = arr[j], arr[i]\n    end\n    local function compare(i, j)\n      return arr[i]\
    \ < arr[j]\n    end\n    local function sort(l, r)\n      if l >= r then\n   \
    \     return\n      end\n      local i = l\n      for j = l + 1, r do\n      \
    \  if compare(j, l) then\n          i = i + 1\n          swap(i, j)\n        end\n\
    \      end\n      swap(l, i)\n      sort(l, i - 1)\n      sort(i + 1, r)\n   \
    \ end\n    sort(1, #arr)\n    return arr\n  end\n  local function reverse(arr)\n\
    \    local function swap(i, j)\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function reverse(l, r)\n      if l >= r then\n        return\n    \
    \  end\n      swap(l, r)\n      reverse(l + 1, r - 1)\n    end\n    reverse(1,\
    \ #arr)\n    return arr\n  end\n  local function replace(arr)\n    local function\
    \ replace(i)\n      if arr[i] == 1 then\n        arr[i] = 'One'\n      elseif\
    \ arr[i] == 2 then\n        arr[i] = 'Two'\n      elseif arr[i] == 3 then\n  \
    \      arr[i] = 'Three'\n      elseif arr[i] == 4 then\n        arr[i] = 'Four'\n\
    \      elseif arr[i] == 5 then\n        arr[i] = 'Five'\n      elseif arr[i] ==\
    \ 6 then\n        arr[i] = 'Six'\n      elseif arr[i] == 7 then\n        arr[i]\
    \ = 'Seven'\n      elseif arr[i] == 8 then\n        arr[i] = 'Eight'\n      elseif\
    \ arr[i] == 9 then\n        arr[i] = 'Nine'\n      end\n    end\n    for i = 1,\
    \ #arr do\n      replace(i)\n", "    local result = {}\n    local map = {\n  \
    \      [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n        [4]\
    \ = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7] = 'Seven',\n\
    \        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, map[v])\n\
    \        end\n    end\n    table.sort(result)\n    local i, j = 1, #result\n \
    \   while i < j do\n        result[i], result[j] = result[j], result[i]\n    \
    \    i = i + 1\n        j = j - 1\n    end\n    return result\nend", "    local\
    \ t = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n\
    \            table.insert(t, arr[i])\n        end\n    end\n    table.sort(t)\n\
    \    local result = {}\n    for i = #t, 1, -1 do\n        table.insert(result,\
    \ tostring(t[i]))\n    end\n    return result\nend", "  local result = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = string.format('%s', result[i])\n  end\n  table.reverse(result)\n\
    \  for i = 1, #result do\n    if result[i] == '1' then\n      result[i] = 'One'\n\
    \    elseif result[i] == '2' then\n      result[i] = 'Two'\n    elseif result[i]\
    \ == '3' then\n      result[i] = 'Three'\n    elseif result[i] == '4' then\n \
    \     result[i] = 'Four'\n    elseif result[i] == '5' then\n      result[i] =\
    \ 'Five'\n    elseif result[i] == '6' then\n      result[i] = 'Six'\n    elseif\
    \ result[i] == '7' then\n      result[i] = 'Seven'\n    elseif result[i] == '8'\
    \ then\n      result[i] = 'Eight'\n    elseif result[i] == '9' then\n      result[i]\
    \ = 'Nine'\n    end\n  end\n  return result\nend", "    local new_arr = {}\n \
    \   for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n          \
    \  table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n \
    \   local reverse_arr = {}\n    for i, v in ipairs(new_arr) do\n        table.insert(reverse_arr,\
    \ 1, v)\n    end\n    local result = {}\n    for i, v in ipairs(reverse_arr) do\n\
    \        if v == 1 then\n            table.insert(result, 'One')\n        elseif\
    \ v == 2 then\n            table.insert(result, 'Two')\n        elseif v == 3\
    \ then\n            table.insert(result, 'Three')\n        elseif v == 4 then\n\
    \            table.insert(result, 'Four')\n        elseif v == 5 then\n      \
    \      table.insert(result, 'Five')\n        elseif v == 6 then\n            table.insert(result,\
    \ 'Six')\n        elseif v == 7 then\n            table.insert(result, 'Seven')\n\
    \        elseif v == 8 then\n            table.insert(result, 'Eight')\n     \
    \   elseif v == 9 then\n            table.insert(result, 'Nine')\n        end\n\
    \    end\n    return result\nend", "  local res = {}\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 and v < 10 then\n      table.insert(res, v)\n    end\n  end\n\
    \  table.sort(res)\n  local res2 = {}\n  for i = #res, 1, -1 do\n    table.insert(res2,\
    \ res[i])\n  end\n  local res3 = {}\n  for _, v in ipairs(res2) do\n    if v ==\
    \ 1 then\n      table.insert(res3, \"One\")\n    elseif v == 2 then\n      table.insert(res3,\
    \ \"Two\")\n    elseif v == 3 then\n      table.insert(res3, \"Three\")\n    elseif\
    \ v == 4 then\n      table.insert(res3, \"Four\")\n    elseif v == 5 then\n  \
    \    table.insert(res3, \"Five\")\n    elseif v == 6 then\n      table.insert(res3,\
    \ \"Six\")\n    elseif v == 7 then\n      table.insert(res3, \"Seven\")\n    elseif\
    \ v == 8 then\n      table.insert(res3, \"Eight\")\n    elseif v == 9 then\n \
    \     table.insert(res3, \"Nine\")\n    end\n  end\n  return res3\nend", "   \
    \ local res = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <=\
    \ 9 then\n            res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = string.format(\"%s\", res[i])\n    end\n\
    \    return res\nend", "    local result = {}\n    local names = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, names[v])\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for i\
    \ = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      result[#result +\
    \ 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  table.reverse(result)\n\
    \  for i = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  return\
    \ result\nend", "  local res = {}\n  local map = {\n    [1] = 'One',\n    [2]\
    \ = 'Two',\n    [3] = 'Three',\n    [4] = 'Four',\n    [5] = 'Five',\n    [6]\
    \ = 'Six',\n    [7] = 'Seven',\n    [8] = 'Eight',\n    [9] = 'Nine'\n  }\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ map[v])\n    end\n  end\n  table.sort(res)\n  return res\nend", "  local function\
    \ sort_table(arr)\n    local function swap(arr, i, j)\n      local temp = arr[i]\n\
    \      arr[i] = arr[j]\n      arr[j] = temp\n    end\n    for i = 1, #arr do\n\
    \      for j = i + 1, #arr do\n        if arr[i] > arr[j] then\n          swap(arr,\
    \ i, j)\n        end\n      end\n    end\n    return arr\n  end\n  local function\
    \ reverse_table(arr)\n    local function swap(arr, i, j)\n      local temp = arr[i]\n\
    \      arr[i] = arr[j]\n      arr[j] = temp\n    end\n    for i = 1, #arr / 2\
    \ do\n      swap(arr, i, #arr - i + 1)\n    end\n    return arr\n  end\n  local\
    \ function replace_number_by_name(arr)\n    local function replace_number_by_name_helper(arr,\
    \ i)\n      if i > #arr then\n        return arr\n      end\n      if arr[i] ==\
    \ 1 then\n        arr[i] = \"One\"\n      elseif arr[i] == 2 then\n        arr[i]\
    \ = \"Two\"\n      elseif arr[i] == 3 then\n        arr[i] = \"Three\"\n     \
    \ elseif arr[i] == 4 then\n        arr[i] = \"Four\"\n      elseif arr[i] == 5\
    \ then\n        arr[i] = \"Five\"\n      elseif arr[i] == 6 then\n        arr[i]\
    \ = \"Six\"\n      elseif arr[i] == 7 then\n        arr[i] = \"Seven\"\n     \
    \ elseif arr[i] == 8 then\n        arr[i] = \"Eight\"\n      elseif arr[i] ==\
    \ 9 then\n        arr[i] = \"Nine\"\n      end\n      return replace_number_by_name_helper(arr,\
    \ i + 1)\n    end\n    return replace_number_by_name_helper(arr, 1)\n  end\n \
    \ local function filter_table(arr)\n    local function filter_table_helper(arr,\
    \ i,", "    local function sort(arr)\n        local function swap(i, j)\n    \
    \        arr[i], arr[j] = arr[j], arr[i]\n        end\n        local function\
    \ compare(i, j)\n            return arr[i] < arr[j]\n        end\n        local\
    \ function partition(left, right)\n            local pivot = arr[math.floor((left\
    \ + right) / 2)]\n            local i = left\n            local j = right\n  \
    \          while i <= j do\n                while compare(i, pivot) do\n     \
    \               i = i + 1\n                end\n                while compare(pivot,\
    \ j) do\n                    j = j - 1\n                end\n                if\
    \ i <= j then\n                    swap(i, j)\n                    i = i + 1\n\
    \                    j = j - 1\n                end\n            end\n       \
    \     return i\n        end\n        local function sort(left, right)\n      \
    \      local index = partition(left, right)\n            if left < index - 1 then\n\
    \                sort(left, index - 1)\n            end\n            if index\
    \ < right then\n                sort(index, right)\n            end\n        end\n\
    \        sort(1, #arr)\n    end\n    local function reverse(arr)\n        local\
    \ i = 1\n        local j = #arr\n        while i < j do\n            arr[i], arr[j]\
    \ = arr[j], arr[i]\n            i = i + 1\n            j = j - 1\n        end\n\
    \    end\n    local function replace(arr)\n        local function replace_one(n)\n\
    \            if n == 1 then\n                return 'One'\n            elseif\
    \ n == 2 then\n                return 'Two'\n            elseif n == 3 then\n\
    \                return 'Three'\n            elseif n == 4 then\n            \
    \    return 'Four'\n            elseif n == 5 then\n                return 'Five'\n\
    \            elseif n == 6 then\n                return 'Six'\n            elseif\
    \ n == 7 then\n                return 'Seven'\n            elseif n == 8 then\n\
    \                return 'Eight'\n            elseif n == 9 then\n            \
    \    return 'Nine'\n            end\n        end\n        for i = 1, #arr do\n\
    \            if arr[i] >= 1 and arr[i] <=", "    local result = {}\n    local\
    \ map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ map[v])\n        end\n    end\n    table.sort(result)\n    return result\nend",
  "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v\
    \ <= 9 then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = numbers[result[i]]\n\
    \    end\n    return result\nend", "    local res = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = tostring(res[i])\n    end\n    table.reverse(res)\n    for i = 1, #res do\n\
    \        res[i] = tostring(res[i])\n    end\n    return res\nend", "    local\
    \ result = {}\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i, v in ipairs(result) do\n        result[i] = tostring(v)\n    end\n\
    \    table.reverse(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = string.upper(v:sub(1, 1)) .. v:sub(2)\n    end\n    return result\nend", " \
    \   local result = {}\n    local names = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for _, v in ipairs(arr) do\n        if\
    \ v > 0 and v < 10 then\n            table.insert(result, names[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local result =\
    \ {}\n    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3]\
    \ = 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    local res = {}\n    for i = #result, 1, -1 do\n        table.insert(res,\
    \ result[i])\n    end\n    return res\nend", "  local res = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] > 0 and arr[i] < 10 then\n      res[#res + 1] = arr[i]\n \
    \   end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = names[res[i]]\n\
    \  end\n  return res\nend", "    local result = {}\n    local names = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ names[v])\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "    local res = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    table.reverse(res)\n    for i = 1, #res do\n        if res[i] ==\
    \ '1' then\n            res[i] = 'One'\n        elseif res[i] == '2' then\n  \
    \          res[i] = 'Two'\n        elseif res[i] == '3' then\n            res[i]\
    \ = 'Three'\n        elseif res[i] == '4' then\n            res[i] = 'Four'\n\
    \        elseif res[i] == '5' then\n            res[i] = 'Five'\n        elseif\
    \ res[i] == '6' then\n            res[i] = 'Six'\n        elseif res[i] == '7'\
    \ then\n            res[i] = 'Seven'\n        elseif res[i] == '8' then\n    \
    \        res[i] = 'Eight'\n        elseif res[i] == '9' then\n            res[i]\
    \ = 'Nine'\n        end\n    end\n    return res\nend", "  local result = {}\n\
    \  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = string.format(\"%s\", result[i])\n  end\n  return result\nend", "  local result\
    \ = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = numbers[result[i]]\n  end\n  return result\nend", "    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = numbers[res[i]]\n    end\n    return res\nend",
  "    local result = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            result[#result + 1] = arr[i]\n        end\n    end\n\
    \    table.sort(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    table.reverse(result)\n    for i = 1, #result do\n        if result[i]\
    \ == '1' then\n            result[i] = 'One'\n        elseif result[i] == '2'\
    \ then\n            result[i] = 'Two'\n        elseif result[i] == '3' then\n\
    \            result[i] = 'Three'\n        elseif result[i] == '4' then\n     \
    \       result[i] = 'Four'\n        elseif result[i] == '5' then\n           \
    \ result[i] = 'Five'\n        elseif result[i] == '6' then\n            result[i]\
    \ = 'Six'\n        elseif result[i] == '7' then\n            result[i] = 'Seven'\n\
    \        elseif result[i] == '8' then\n            result[i] = 'Eight'\n     \
    \   elseif result[i] == '9' then\n            result[i] = 'Nine'\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, #result do\n   \
    \     result[i] = tostring(result[i])\n    end\n    table.reverse(result)\n  \
    \  for i = 1, #result do\n        result[i] = result[i]:gsub(\"1\", \"One\"):gsub(\"\
    2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"\
    ):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\"\
    , \"Nine\")\n    end\n    return result\nend", "  local result = {}\n  for i =\
    \ 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(result,\
    \ arr[i])\n    end\n  end\n  table.sort(result)\n  table.reverse(result)\n  for\
    \ i = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  return result\n\
    end", "    local res = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    table.reverse(res)\n    local names = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #res do\n        res[i]\
    \ = names[tonumber(res[i])]\n    end\n    return res\nend", "    local res = {}\n\
    \    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(res, map[v])\n        end\n    end\n    table.sort(res)\n   \
    \ local i, j = 1, #res\n    while i < j do\n        res[i], res[j] = res[j], res[i]\n\
    \        i = i + 1\n        j = j - 1\n    end\n    return res\nend", "    local\
    \ res = {}\n    for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i, v in ipairs(res) do\n        res[i] = tostring(v)\n    end\n    res\
    \ = table.reverse(res)\n    for i, v in ipairs(res) do\n        res[i] = string.upper(v:sub(1,\
    \ 1)) .. v:sub(2)\n    end\n    return res\nend", "  local result = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = numbers[result[i]]\n  end\n  return result\nend", "  local res\
    \ = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = tostring(res[i])\n\
    \  end\n  for i = 1, #res do\n    res[i] = res[i]:gsub(\"1\", \"One\")\n    res[i]\
    \ = res[i]:gsub(\"2\", \"Two\")\n    res[i] = res[i]:gsub(\"3\", \"Three\")\n\
    \    res[i] = res[i]:gsub(\"4\", \"Four\")\n    res[i] = res[i]:gsub(\"5\", \"\
    Five\")\n    res[i] = res[i]:gsub(\"6\", \"Six\")\n    res[i] = res[i]:gsub(\"\
    7\", \"Seven\")\n    res[i] = res[i]:gsub(\"8\", \"Eight\")\n    res[i] = res[i]:gsub(\"\
    9\", \"Nine\")\n  end\n  return res\nend", "  local res = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(res, arr[i])\n\
    \    end\n  end\n  table.sort(res)\n  local names = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for i = 1, #res\
    \ do\n    res[i] = names[res[i]]\n  end\n  return res\nend", "    local result\
    \ = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n\
    \            table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    return result\nend", "    local res = {}\n    local map = {\n  \
    \      [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n        [4]\
    \ = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7] = 'Seven',\n\
    \        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            res[#res + 1] = map[v]\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend", "    local res\
    \ = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = num_to_str[res[i]]\n    end\n    return\
    \ res\nend", "    local result = {}\n    local numbers = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ result = {}\n    for _, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    local names = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #result do\n      \
    \  result[i] = names[tonumber(result[i])]\n    end\n    return result\nend", " \
    \   local result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v\
    \ <= 9 then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    for i = 1, #result do\n        result[i] = result[i]:gsub(\"1\", \"One\"\
    )\n        result[i] = result[i]:gsub(\"2\", \"Two\")\n        result[i] = result[i]:gsub(\"\
    3\", \"Three\")\n        result[i] = result[i]:gsub(\"4\", \"Four\")\n       \
    \ result[i] = result[i]:gsub(\"5\", \"Five\")\n        result[i] = result[i]:gsub(\"\
    6\", \"Six\")\n        result[i] = result[i]:gsub(\"7\", \"Seven\")\n        result[i]\
    \ = result[i]:gsub(\"8\", \"Eight\")\n        result[i] = result[i]:gsub(\"9\"\
    , \"Nine\")\n    end\n    return result\nend", "    local res = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for i = 1, #res\
    \ do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n   \
    \ for i = 1, #res do\n        if res[i] == '1' then\n            res[i] = 'One'\n\
    \        elseif res[i] == '2' then\n            res[i] = 'Two'\n        elseif\
    \ res[i] == '3' then\n            res[i] = 'Three'\n        elseif res[i] == '4'\
    \ then\n            res[i] = 'Four'\n        elseif res[i] == '5' then\n     \
    \       res[i] = 'Five'\n        elseif res[i] == '6' then\n            res[i]\
    \ = 'Six'\n        elseif res[i] == '7' then\n            res[i] = 'Seven'\n \
    \       elseif res[i] == '8' then\n            res[i] = 'Eight'\n        elseif\
    \ res[i] == '9' then\n            res[i] = 'Nine'\n        end\n    end\n    return\
    \ res\nend", "  local res = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and\
    \ v <= 9 then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  for i = 1, #res do\n    res[i] = names[res[i]]\n  end\n  return res\nend",
  "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v\
    \ <= 9 then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = names[result[i]]\n    end\n  \
    \  return result\nend", "  local res = {}\n  for _, v in ipairs(arr) do\n    if\
    \ v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  local res2 = {}\n  for i = #res, 1, -1 do\n    table.insert(res2, res[i])\n\
    \  end\n  local res3 = {}\n  for _, v in ipairs(res2) do\n    table.insert(res3,\
    \ tostring(v))\n  end\n  return res3\nend", "    local function sort_table(arr)\n\
    \        local function swap(arr, i, j)\n            local temp = arr[i]\n   \
    \         arr[i] = arr[j]\n            arr[j] = temp\n        end\n        for\
    \ i = 1, #arr do\n            for j = i + 1, #arr do\n                if arr[i]\
    \ > arr[j] then\n                    swap(arr, i, j)\n                end\n  \
    \          end\n        end\n        return arr\n    end\n    local function reverse_table(arr)\n\
    \        local result = {}\n        for i = #arr, 1, -1 do\n            table.insert(result,\
    \ arr[i])\n        end\n        return result\n    end\n    local function replace_number(arr)\n\
    \        local result = {}\n        local numbers = {\n            [1] = \"One\"\
    ,\n            [2] = \"Two\",\n            [3] = \"Three\",\n            [4] =\
    \ \"Four\",\n            [5] = \"Five\",\n            [6] = \"Six\",\n       \
    \     [7] = \"Seven\",\n            [8] = \"Eight\",\n            [9] = \"Nine\"\
    \n        }\n        for i = 1, #arr do\n            if numbers[arr[i]] then\n\
    \                table.insert(result, numbers[arr[i]])\n            end\n    \
    \    end\n        return result\n    end\n    local function filter_number(arr)\n\
    \        local result = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                table.insert(result, arr[i])\n  \
    \          end\n        end\n        return result\n    end\n    return replace_number(reverse_table(sort_table(filter_number(arr))))\n\
    end", "    local result = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            result[#result + 1] = arr[i]\n        end\n  \
    \  end\n    table.sort(result)\n    local reverse = {}\n    for i = #result, 1,\
    \ -1 do\n        reverse[#reverse + 1] = result[i]\n    end\n    local names =\
    \ {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n \
    \   for i = 1, #reverse do\n        reverse[i] = names[reverse[i]]\n    end\n\
    \    return reverse\nend", "  local res = {}\n  for _, v in ipairs(arr) do\n \
    \   if v >= 1 and v <= 9 then\n      res[#res + 1] = v\n    end\n  end\n  table.sort(res)\n\
    \  local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n  for i = 1, #res do\n    res[i] = names[res[i]]\n  end\n  return res\n\
    end", "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    for i = 1, #result do\n        result[i] = names[result[i]]\n\
    \    end\n    return result\nend", "  local new_arr = {}\n  for i = 1, #arr do\n\
    \    if arr[i] >= 1 and arr[i] <= 9 then\n      new_arr[#new_arr + 1] = arr[i]\n\
    \    end\n  end\n  table.sort(new_arr)\n  local res = {}\n  for i = #new_arr,\
    \ 1, -1 do\n    res[#res + 1] = num_to_str[new_arr[i]]\n  end\n  return res\n\
    end", "    local function sort_func(a, b)\n        return a < b\n    end\n   \
    \ local function reverse_func(a, b)\n        return a > b\n    end\n    local\
    \ function replace_func(a)\n        if a == 1 then\n            return \"One\"\
    \n        elseif a == 2 then\n            return \"Two\"\n        elseif a ==\
    \ 3 then\n            return \"Three\"\n        elseif a == 4 then\n         \
    \   return \"Four\"\n        elseif a == 5 then\n            return \"Five\"\n\
    \        elseif a == 6 then\n            return \"Six\"\n        elseif a == 7\
    \ then\n            return \"Seven\"\n        elseif a == 8 then\n           \
    \ return \"Eight\"\n        elseif a == 9 then\n            return \"Nine\"\n\
    \        end\n    end\n    local function filter_func(a)\n        return a >=\
    \ 1 and a <= 9\n    end\n    local function map_func(a)\n        return replace_func(a)\n\
    \    end\n    return map(map_func, filter(filter_func, reverse(sort(arr, sort_func))))\n\
    end", "  local function sort(arr)\n    local function swap(i, j)\n      arr[i],\
    \ arr[j] = arr[j], arr[i]\n    end\n    local function compare(i, j)\n      return\
    \ arr[i] < arr[j]\n    end\n    local function sort(l, r)\n      if l >= r then\n\
    \        return\n      end\n      local i = l\n      for j = l + 1, r do\n   \
    \     if compare(j, l) then\n          i = i + 1\n          swap(i, j)\n     \
    \   end\n      end\n      swap(l, i)\n      sort(l, i - 1)\n      sort(i + 1,\
    \ r)\n    end\n    sort(1, #arr)\n    return arr\n  end\n  local function reverse(arr)\n\
    \    local function swap(i, j)\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function reverse(l, r)\n      if l >= r then\n        return\n    \
    \  end\n      swap(l, r)\n      reverse(l + 1, r - 1)\n    end\n    reverse(1,\
    \ #arr)\n    return arr\n  end\n  local function replace(arr)\n    local function\
    \ replace(i)\n      if arr[i] == 1 then\n        arr[i] = 'One'\n      elseif\
    \ arr[i] == 2 then\n        arr[i] = 'Two'\n      elseif arr[i] == 3 then\n  \
    \      arr[i] = 'Three'\n      elseif arr[i] == 4 then\n        arr[i] = 'Four'\n\
    \      elseif arr[i] == 5 then\n        arr[i] = 'Five'\n      elseif arr[i] ==\
    \ 6 then\n        arr[i] = 'Six'\n      elseif arr[i] == 7 then\n        arr[i]\
    \ = 'Seven'\n      elseif arr[i] == 8 then\n        arr[i] = 'Eight'\n      elseif\
    \ arr[i] == 9 then\n        arr[i] = 'Nine'\n      end\n    end\n    for i = 1,\
    \ #arr do\n      replace(i)\n", "    local result = {}\n    for i, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    for i, v in ipairs(result)\
    \ do\n        result[i] = tostring(v)\n    end\n    table.reverse(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = tostring(v)\n    end\n \
    \   return result\nend", "    local result = {}\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n    \
    \    end\n    end\n    table.sort(result)\n    for i = 1, #result do\n       \
    \ result[i] = names[result[i]]\n    end\n    return result\nend", "    local res\
    \ = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(res, v)\n        end\n    end\n    table.sort(res)\n \
    \   for i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\n\
    end", "    local result = {}\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = tostring(result[i])\n    end\n    table.reverse(result)\n    for i, v in ipairs(result)\
    \ do\n        if v == '1' then\n            result[i] = 'One'\n        elseif\
    \ v == '2' then\n            result[i] = 'Two'\n        elseif v == '3' then\n\
    \            result[i] = 'Three'\n        elseif v == '4' then\n            result[i]\
    \ = 'Four'\n        elseif v == '5' then\n            result[i] = 'Five'\n   \
    \     elseif v == '6' then\n            result[i] = 'Six'\n        elseif v ==\
    \ '7' then\n            result[i] = 'Seven'\n        elseif v == '8' then\n  \
    \          result[i] = 'Eight'\n        elseif v == '9' then\n            result[i]\
    \ = 'Nine'\n        end\n    end\n    return result\nend", "    local result =\
    \ {}\n    local dict = {\n        [1] = 'One',\n        [2] = 'Two',\n       \
    \ [3] = 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] =\
    \ 'Six',\n        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n\
    \    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(result, dict[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n       \
    \ end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] =\
    \ tostring(res[i])\n    end\n    res = table.reverse(res)\n    for i = 1, #res\
    \ do\n        res[i] = tostring(res[i])\n    end\n    return res\nend", "    local\
    \ res = {}\n    for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i, v in ipairs(res) do\n        res[i] = tostring(v)\n    end\n    table.reverse(res)\n\
    \    for i, v in ipairs(res) do\n        if v == '1' then\n            res[i]\
    \ = 'One'\n        elseif v == '2' then\n            res[i] = 'Two'\n        elseif\
    \ v == '3' then\n            res[i] = 'Three'\n        elseif v == '4' then\n\
    \            res[i] = 'Four'\n        elseif v == '5' then\n            res[i]\
    \ = 'Five'\n        elseif v == '6' then\n            res[i] = 'Six'\n       \
    \ elseif v == '7' then\n            res[i] = 'Seven'\n        elseif v == '8'\
    \ then\n            res[i] = 'Eight'\n        elseif v == '9' then\n         \
    \   res[i] = 'Nine'\n        end\n    end\n    return res\nend", "    local result\
    \ = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = string.gsub(result[i],\
    \ '1', 'One')\n        result[i] = string.gsub(result[i], '2', 'Two')\n      \
    \  result[i] = string.gsub(result[i], '3', 'Three')\n        result[i] = string.gsub(result[i],\
    \ '4', 'Four')\n        result[i] = string.gsub(result[i], '5', 'Five')\n    \
    \    result[i] = string.gsub(result[i], '6', 'Six')\n        result[i] = string.gsub(result[i],\
    \ '7', 'Seven')\n        result[i] = string.gsub(result[i], '8', 'Eight')\n  \
    \      result[i] = string.gsub(result[i], '9', 'Nine')\n    end\n    return result\n\
    end", "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    table.reverse(result)\n    local names = {\n        'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n    }\n    for i =\
    \ 1, #result do\n        result[i] = names[tonumber(result[i])]\n    end\n   \
    \ return result\nend", "  local new_arr = {}\n  for i, v in ipairs(arr) do\n \
    \   if v >= 1 and v <= 9 then\n      table.insert(new_arr, v)\n    end\n  end\n\
    \  table.sort(new_arr)\n  local reverse_arr = {}\n  for i = #new_arr, 1, -1 do\n\
    \    table.insert(reverse_arr, new_arr[i])\n  end\n  local result = {}\n  for\
    \ i, v in ipairs(reverse_arr) do\n    if v == 1 then\n      table.insert(result,\
    \ \"One\")\n    elseif v == 2 then\n      table.insert(result, \"Two\")\n    elseif\
    \ v == 3 then\n      table.insert(result, \"Three\")\n    elseif v == 4 then\n\
    \      table.insert(result, \"Four\")\n    elseif v == 5 then\n      table.insert(result,\
    \ \"Five\")\n    elseif v == 6 then\n      table.insert(result, \"Six\")\n   \
    \ elseif v == 7 then\n      table.insert(result, \"Seven\")\n    elseif v == 8\
    \ then\n      table.insert(result, \"Eight\")\n    elseif v == 9 then\n      table.insert(result,\
    \ \"Nine\")\n    end\n  end\n  return result\nend", "    local result = {}\n \
    \   for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n         \
    \   local digit = arr[i]\n            local digit_name = ''\n            if digit\
    \ == 1 then\n                digit_name = 'One'\n            elseif digit == 2\
    \ then\n                digit_name = 'Two'\n            elseif digit == 3 then\n\
    \                digit_name = 'Three'\n            elseif digit == 4 then\n  \
    \              digit_name = 'Four'\n            elseif digit == 5 then\n     \
    \           digit_name = 'Five'\n            elseif digit == 6 then\n        \
    \        digit_name = 'Six'\n            elseif digit == 7 then\n            \
    \    digit_name = 'Seven'\n            elseif digit == 8 then\n              \
    \  digit_name = 'Eight'\n            elseif digit == 9 then\n                digit_name\
    \ = 'Nine'\n            end\n            table.insert(result, digit_name)\n  \
    \      end\n    end\n    return result\nend", "  local result = {}\n  for i =\
    \ 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(result,\
    \ arr[i])\n    end\n  end\n  table.sort(result)\n  local reverse_result = {}\n\
    \  for i = #result, 1, -1 do\n    table.insert(reverse_result, result[i])\n  end\n\
    \  local final_result = {}\n  for i = 1, #reverse_result do\n    if reverse_result[i]\
    \ == 1 then\n      table.insert(final_result, \"One\")\n    elseif reverse_result[i]\
    \ == 2 then\n      table.insert(final_result, \"Two\")\n    elseif reverse_result[i]\
    \ == 3 then\n      table.insert(final_result, \"Three\")\n    elseif reverse_result[i]\
    \ == 4 then\n      table.insert(final_result, \"Four\")\n    elseif reverse_result[i]\
    \ == 5 then\n      table.insert(final_result, \"Five\")\n    elseif reverse_result[i]\
    \ == 6 then\n      table.insert(final_result, \"Six\")\n    elseif reverse_result[i]\
    \ == 7 then\n      table.insert(final_result, \"Seven\")\n    elseif reverse_result[i]\
    \ == 8 then\n      table.insert(final_result, \"Eight\")\n    elseif reverse_result[i]\
    \ == 9 then\n      table.insert(final_result, \"Nine\")\n    end\n  end\n  return\
    \ final_result\nend", "    local result = {}\n    for i = 1, #arr do\n       \
    \ if arr[i] > 0 and arr[i] < 10 then\n            table.insert(result, arr[i])\n\
    \        end\n    end\n    table.sort(result)\n    local names = {\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for i = 1, #result do\n        result[i] = names[result[i]]\n    end\n\
    \    return result\nend", "    local result = {}\n    for i = 1, #arr do\n   \
    \     if arr[i] >= 1 and arr[i] <= 9 then\n            result[#result + 1] = arr[i]\n\
    \        end\n    end\n    table.sort(result)\n    local res = {}\n    for i =\
    \ 1, #result do\n        res[#res + 1] = numbers[result[i]]\n    end\n    return\
    \ res\nend", "    local result = {}\n    local dict = {\n        [1] = 'One',\n\
    \        [2] = 'Two',\n        [3] = 'Three',\n        [4] = 'Four',\n       \
    \ [5] = 'Five',\n        [6] = 'Six',\n        [7] = 'Seven',\n        [8] = 'Eight',\n\
    \        [9] = 'Nine'\n    }\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, dict[v])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local res = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = string.format(\"%s\", res[i])\n    end\n  \
    \  table.sort(res, function(a, b) return #a > #b end)\n    for i = 1, #res do\n\
    \        res[i] = string.format(\"%s\", res[i])\n    end\n    for i = 1, #res\
    \ do\n        if res[i] == \"1\" then\n            res[i] = \"One\"\n        elseif\
    \ res[i] == \"2\" then\n            res[i] = \"Two\"\n        elseif res[i] ==\
    \ \"3\" then\n            res[i] = \"Three\"\n        elseif res[i] == \"4\" then\n\
    \            res[i] = \"Four\"\n        elseif res[i] == \"5\" then\n        \
    \    res[i] = \"Five\"\n        elseif res[i] == \"6\" then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == \"7\" then\n            res[i] = \"Seven\"\
    \n        elseif res[i] == \"8\" then\n            res[i] = \"Eight\"\n      \
    \  elseif res[i] == \"9\" then\n            res[i] = \"Nine\"\n        end\n \
    \   end\n    return res\nend", "    local res = {}\n    for i = 1, #arr do\n \
    \       if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        if\
    \ res[i] == 1 then\n            res[i] = \"One\"\n        elseif res[i] == 2 then\n\
    \            res[i] = \"Two\"\n        elseif res[i] == 3 then\n            res[i]\
    \ = \"Three\"\n        elseif res[i] == 4 then\n            res[i] = \"Four\"\n\
    \        elseif res[i] == 5 then\n            res[i] = \"Five\"\n        elseif\
    \ res[i] == 6 then\n            res[i] = \"Six\"\n        elseif res[i] == 7 then\n\
    \            res[i] = \"Seven\"\n        elseif res[i] == 8 then\n           \
    \ res[i] = \"Eight\"\n        elseif res[i] == 9 then\n            res[i] = \"\
    Nine\"\n        end\n    end\n    return res\nend", "    local result = {}\n \
    \   for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n          \
    \  table.insert(result, v)\n        end\n    end\n    table.sort(result)\n   \
    \ for i = 1, #result do\n        result[i] = string.format(\"%s\", result[i])\n\
    \    end\n    return result\nend", "  local result = {}\n  local digits = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i, v\
    \ in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result + 1] =\
    \ digits[v]\n    end\n  end\n  table.sort(result)\n  return result\nend", "  \
    \  local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\n\
    end", "    local result = {}\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    local result2 = {}\n    for i, v in ipairs(result)\
    \ do\n        table.insert(result2, 1, v)\n    end\n    local result3 = {}\n \
    \   for i, v in ipairs(result2) do\n        if v == 1 then\n            table.insert(result3,\
    \ 'One')\n        elseif v == 2 then\n            table.insert(result3, 'Two')\n\
    \        elseif v == 3 then\n            table.insert(result3, 'Three')\n    \
    \    elseif v == 4 then\n            table.insert(result3, 'Four')\n        elseif\
    \ v == 5 then\n            table.insert(result3, 'Five')\n        elseif v ==\
    \ 6 then\n            table.insert(result3, 'Six')\n        elseif v == 7 then\n\
    \            table.insert(result3, 'Seven')\n        elseif v == 8 then\n    \
    \        table.insert(result3, 'Eight')\n        elseif v == 9 then\n        \
    \    table.insert(result3, 'Nine')\n        end\n    end\n    return result3\n\
    end", "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    table.reverse(result)\n    for i = 1, #result do\n        if result[i]\
    \ == '1' then\n            result[i] = 'One'\n        elseif result[i] == '2'\
    \ then\n            result[i] = 'Two'\n        elseif result[i] == '3' then\n\
    \            result[i] = 'Three'\n        elseif result[i] == '4' then\n     \
    \       result[i] = 'Four'\n        elseif result[i] == '5' then\n           \
    \ result[i] = 'Five'\n        elseif result[i] == '6' then\n            result[i]\
    \ = 'Six'\n        elseif result[i] == '7' then\n            result[i] = 'Seven'\n\
    \        elseif result[i] == '8' then\n            result[i] = 'Eight'\n     \
    \   elseif result[i] == '9' then\n            result[i] = 'Nine'\n        end\n\
    \    end\n    return result\nend", "  local res = {}\n  for i = 1, #arr do\n \
    \   if arr[i] >= 1 and arr[i] <= 9 then\n      res[#res + 1] = arr[i]\n    end\n\
    \  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = names[res[i]]\n\
    \  end\n  return res\nend", "  local result = {}\n  local one = \"One\"\n  local\
    \ two = \"Two\"\n  local three = \"Three\"\n  local four = \"Four\"\n  local five\
    \ = \"Five\"\n  local six = \"Six\"\n  local seven = \"Seven\"\n  local eight\
    \ = \"Eight\"\n  local nine = \"Nine\"\n  for i = 1, #arr do\n    if arr[i] ==\
    \ 1 then\n      result[#result + 1] = one\n    elseif arr[i] == 2 then\n     \
    \ result[#result + 1] = two\n    elseif arr[i] == 3 then\n      result[#result\
    \ + 1] = three\n    elseif arr[i] == 4 then\n      result[#result + 1] = four\n\
    \    elseif arr[i] == 5 then\n      result[#result + 1] = five\n    elseif arr[i]\
    \ == 6 then\n      result[#result + 1] = six\n    elseif arr[i] == 7 then\n  \
    \    result[#result + 1] = seven\n    elseif arr[i] == 8 then\n      result[#result\
    \ + 1] = eight\n    elseif arr[i] == 9 then\n      result[#result + 1] = nine\n\
    \    end\n  end\n  return result\nend", "    local function sort_table(t)\n  \
    \      local function compare(a, b)\n            return a < b\n        end\n \
    \       table.sort(t, compare)\n        return t\n    end", "    local res = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i,\
    \ v in ipairs(res) do\n        res[i] = tostring(v)\n    end\n    for i, v in\
    \ ipairs(res) do\n        if v == '1' then\n            res[i] = 'One'\n     \
    \   elseif v == '2' then\n            res[i] = 'Two'\n        elseif v == '3'\
    \ then\n            res[i] = 'Three'\n        elseif v == '4' then\n         \
    \   res[i] = 'Four'\n        elseif v == '5' then\n            res[i] = 'Five'\n\
    \        elseif v == '6' then\n            res[i] = 'Six'\n        elseif v ==\
    \ '7' then\n            res[i] = 'Seven'\n        elseif v == '8' then\n     \
    \       res[i] = 'Eight'\n        elseif v == '9' then\n            res[i] = 'Nine'\n\
    \        end\n    end\n    return res\nend", "  local function sort_table(arr)\n\
    \    local function sort_table_rec(arr, i, j)\n      if i < j then\n        local\
    \ k = math.floor((i + j) / 2)\n        local pivot = arr[k]\n        arr[k] =\
    \ arr[j]\n        local l = i\n        for m = i, j - 1 do\n          if arr[m]\
    \ < pivot then\n            arr[l], arr[m] = arr[m], arr[l]\n            l = l\
    \ + 1\n          end\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n \
    \       sort_table_rec(arr, i, l - 1)\n        sort_table_rec(arr, l + 1, j)\n\
    \      end\n    end\n    sort_table_rec(arr, 1, #arr)\n    return arr\n  end\n\
    \  local function reverse_table(arr)\n    local new_arr = {}\n    for i = #arr,\
    \ 1, -1 do\n      new_arr[#new_arr + 1] = arr[i]\n    end\n    return new_arr\n\
    \  end\n  local function replace_digits(arr)\n    local new_arr = {}\n    for\
    \ i = 1, #arr do\n      if arr[i] == 1 then\n        new_arr[#new_arr + 1] = \"\
    One\"\n      elseif arr[i] == 2 then\n        new_arr[#new_arr + 1] = \"Two\"\n\
    \      elseif arr[i] == 3 then\n        new_arr[#new_arr + 1] = \"Three\"\n  \
    \    elseif arr[i] == 4 then\n        new_arr[#new_arr + 1] = \"Four\"\n     \
    \ elseif arr[i] == 5 then\n        new_arr[#new_arr + 1] = \"Five\"\n      elseif\
    \ arr[i] == 6 then\n        new_arr[#new_arr + 1] = \"Six\"\n      elseif arr[i]\
    \ == 7 then\n        new_arr[#new_arr + 1] = \"Seven\"\n      elseif arr[i] ==\
    \ 8 then\n        new_arr[#new_", "    local result = {}\n    local numbers =\
    \ {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n \
    \   for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n          \
    \  table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local res = {}\n    for i, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            res[#res + 1] = v\n        end\n\
    \    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n        res[i]\
    \ = tostring(v)\n    end\n    table.sort(res, function(a, b) return #a > #b end)\n\
    \    for i, v in ipairs(res) do\n        res[i] = tonumber(v)\n    end\n    for\
    \ i, v in ipairs(res) do\n        res[i] = tostring(v)\n    end\n    for i, v\
    \ in ipairs(res) do\n        res[i] = v:gsub(\"1\", \"One\")\n        res[i] =\
    \ v:gsub(\"2\", \"Two\")\n        res[i] = v:gsub(\"3\", \"Three\")\n        res[i]\
    \ = v:gsub(\"4\", \"Four\")\n        res[i] = v:gsub(\"5\", \"Five\")\n      \
    \  res[i] = v:gsub(\"6\", \"Six\")\n        res[i] = v:gsub(\"7\", \"Seven\")\n\
    \        res[i] = v:gsub(\"8\", \"Eight\")\n        res[i] = v:gsub(\"9\", \"\
    Nine\")\n    end\n    return res\nend", "  local result = {}\n  for i,v in ipairs(arr)\
    \ do\n    if v > 0 and v < 10 then\n      table.insert(result, v)\n    end\n \
    \ end\n  table.sort(result)\n  local names = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n  for i,v in ipairs(result) do\n    result[i]\
    \ = names[v]\n  end\n  return result\nend", "    local res = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res +\
    \ 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for i = 1, #res\
    \ do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n   \
    \ for i = 1, #res do\n        if res[i] == '1' then\n            res[i] = 'One'\n\
    \        elseif res[i] == '2' then\n            res[i] = 'Two'\n        elseif\
    \ res[i] == '3' then\n            res[i] = 'Three'\n        elseif res[i] == '4'\
    \ then\n            res[i] = 'Four'\n        elseif res[i] == '5' then\n     \
    \       res[i] = 'Five'\n        elseif res[i] == '6' then\n            res[i]\
    \ = 'Six'\n        elseif res[i] == '7' then\n            res[i] = 'Seven'\n \
    \       elseif res[i] == '8' then\n            res[i] = 'Eight'\n        elseif\
    \ res[i] == '9' then\n            res[i] = 'Nine'\n        end\n    end\n    return\
    \ res\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n        if v\
    \ >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    for i = 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\"\
    )\n        res[i] = res[i]:gsub(\"2\", \"Two\")\n        res[i] = res[i]:gsub(\"\
    3\", \"Three\")\n        res[i] = res[i]:gsub(\"4\", \"Four\")\n        res[i]\
    \ = res[i]:gsub(\"5\", \"Five\")\n        res[i] = res[i]:gsub(\"6\", \"Six\"\
    )\n        res[i] = res[i]:gsub(\"7\", \"Seven\")\n        res[i] = res[i]:gsub(\"\
    8\", \"Eight\")\n        res[i] = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return\
    \ res\nend", "    local result = {}\n    local numbers = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr do\n \
    \       if arr[i] > 0 and arr[i] < 10 then\n            result[#result + 1] =\
    \ numbers[arr[i]]\n        end\n    end\n    return result\nend", "    local function\
    \ sort_by_length(a, b)\n        return #a < #b\n    end\n    local function replace_by_name(a)\n\
    \        if a == 1 then\n            return \"One\"\n        elseif a == 2 then\n\
    \            return \"Two\"\n        elseif a == 3 then\n            return \"\
    Three\"\n        elseif a == 4 then\n            return \"Four\"\n        elseif\
    \ a == 5 then\n            return \"Five\"\n        elseif a == 6 then\n     \
    \       return \"Six\"\n        elseif a == 7 then\n            return \"Seven\"\
    \n        elseif a == 8 then\n            return \"Eight\"\n        elseif a ==\
    \ 9 then\n            return \"Nine\"\n        end\n    end\n    local function\
    \ is_valid(a)\n        return a >= 1 and a <= 9\n    end\n    local function filter_valid(arr)\n\
    \        local res = {}\n        for _, v in ipairs(arr) do\n            if is_valid(v)\
    \ then\n                table.insert(res, v)\n            end\n        end\n \
    \       return res\n    end\n    local function replace_by_name_all(arr)\n   \
    \     local res = {}\n        for _, v in ipairs(arr) do\n            table.insert(res,\
    \ replace_by_name(v))\n        end\n        return res\n    end\n    local function\
    \ reverse(arr)\n        local res = {}\n        for i = #arr, 1, -1 do\n     \
    \       table.insert(res, arr[i])\n        end\n        return res\n    end\n\
    \    local function sort_and_replace(arr)\n        local res = {}\n        for\
    \ _, v in ipairs(arr) do\n            table.insert(res, replace_by_name(v))\n\
    \        end\n        table.sort(res, sort_by_length)\n        return res\n  \
    \  end\n    local valid_arr = filter_valid(arr)\n    local sorted_arr = sort_and_replace(valid_arr)\n\
    \    local reversed_arr = reverse(sorted_arr)\n    return reversed_arr\nend",
  "  local result = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  for i\
    \ = 1, #result do\n    result[i] = num_to_str[result[i]]\n  end\n  return result\n\
    end", "    local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = num_to_str[res[i]]\n    end\n    return\
    \ res\nend", "    local res = {}\n    for i = 1, #arr do\n        if arr[i] >=\
    \ 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n        end\n  \
    \  end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] = names[res[i]]\n\
    \    end\n    return res\nend", "    local res = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = tostring(res[i])\n    end\n    table.reverse(res)\n    for i = 1, #res do\n\
    \        res[i] = res[i]:gsub(\"1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\"\
    , \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"\
    7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return\
    \ res\nend", "    local res = {}\n    for i, v in ipairs(arr) do\n        if v\
    \ >= 1 and v <= 9 then\n            res[#res + 1] = v\n        end\n    end\n\
    \    table.sort(res)\n    for i, v in ipairs(res) do\n        res[i] = tostring(v)\n\
    \    end\n    table.sort(res, function(a, b) return #a > #b end)\n    for i, v\
    \ in ipairs(res) do\n        res[i] = tostring(v)\n    end\n    for i, v in ipairs(res)\
    \ do\n        if v == '1' then\n            res[i] = 'One'\n        elseif v ==\
    \ '2' then\n            res[i] = 'Two'\n        elseif v == '3' then\n       \
    \     res[i] = 'Three'\n        elseif v == '4' then\n            res[i] = 'Four'\n\
    \        elseif v == '5' then\n            res[i] = 'Five'\n        elseif v ==\
    \ '6' then\n            res[i] = 'Six'\n        elseif v == '7' then\n       \
    \     res[i] = 'Seven'\n        elseif v == '8' then\n            res[i] = 'Eight'\n\
    \        elseif v == '9' then\n            res[i] = 'Nine'\n        end\n    end\n\
    \    return res\nend", "  local result = {}\n  for i = 1, #arr do\n    if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n      result[#result + 1] = arr[i]\n    end\n  end\n\
    \  table.sort(result)\n  for i = 1, #result do\n    result[i] = numbers[result[i]]\n\
    \  end\n  return result\nend", "    local res = {}\n    local map = {\n      \
    \  [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n        [4] = 'Four',\n\
    \        [5] = 'Five',\n        [6] = 'Six',\n        [7] = 'Seven',\n       \
    \ [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(res, map[v])\n  \
    \      end\n    end\n    return res\nend", "    local res = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res +\
    \ 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for i = 1, #res\
    \ do\n        if res[i] == 1 then\n            res[i] = \"One\"\n        elseif\
    \ res[i] == 2 then\n            res[i] = \"Two\"\n        elseif res[i] == 3 then\n\
    \            res[i] = \"Three\"\n        elseif res[i] == 4 then\n           \
    \ res[i] = \"Four\"\n        elseif res[i] == 5 then\n            res[i] = \"\
    Five\"\n        elseif res[i] == 6 then\n            res[i] = \"Six\"\n      \
    \  elseif res[i] == 7 then\n            res[i] = \"Seven\"\n        elseif res[i]\
    \ == 8 then\n            res[i] = \"Eight\"\n        elseif res[i] == 9 then\n\
    \            res[i] = \"Nine\"\n        end\n    end\n    return res\nend", " \
    \   local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = res[#res - i + 1]\n    end\n    for\
    \ i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    return res\n\
    end", "    local result = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            table.insert(result, arr[i])\n        end\n  \
    \  end\n    table.sort(result)\n    for i = 1, #result do\n        if result[i]\
    \ == 1 then\n            result[i] = \"One\"\n        elseif result[i] == 2 then\n\
    \            result[i] = \"Two\"\n        elseif result[i] == 3 then\n       \
    \     result[i] = \"Three\"\n        elseif result[i] == 4 then\n            result[i]\
    \ = \"Four\"\n        elseif result[i] == 5 then\n            result[i] = \"Five\"\
    \n        elseif result[i] == 6 then\n            result[i] = \"Six\"\n      \
    \  elseif result[i] == 7 then\n            result[i] = \"Seven\"\n        elseif\
    \ result[i] == 8 then\n            result[i] = \"Eight\"\n        elseif result[i]\
    \ == 9 then\n            result[i] = \"Nine\"\n        end\n    end\n    return\
    \ result\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n        if\
    \ v >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    table.reverse(res)\n    local map = {\n        ['1'] = 'One',\n\
    \        ['2'] = 'Two',\n        ['3'] = 'Three',\n        ['4'] = 'Four',\n \
    \       ['5'] = 'Five',\n        ['6'] = 'Six',\n        ['7'] = 'Seven',\n  \
    \      ['8'] = 'Eight',\n        ['9'] = 'Nine'\n    }\n    for i = 1, #res do\n\
    \        res[i] = map[res[i]]\n    end\n    return res\nend", "    local res =\
    \ {}\n    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3]\
    \ = 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(res, map[v])\n        end\n    end\n    return res\nend", " \
    \   local result = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            result[#result + 1] = arr[i]\n        end\n    end\n\
    \    table.sort(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    for i = 1, #result do\n        if result[i] == '1' then\n      \
    \      result[i] = 'One'\n        elseif result[i] == '2' then\n            result[i]\
    \ = 'Two'\n        elseif result[i] == '3' then\n            result[i] = 'Three'\n\
    \        elseif result[i] == '4' then\n            result[i] = 'Four'\n      \
    \  elseif result[i] == '5' then\n            result[i] = 'Five'\n        elseif\
    \ result[i] == '6' then\n            result[i] = 'Six'\n        elseif result[i]\
    \ == '7' then\n            result[i] = 'Seven'\n        elseif result[i] == '8'\
    \ then\n            result[i] = 'Eight'\n        elseif result[i] == '9' then\n\
    \            result[i] = 'Nine'\n        end\n    end\n    return result\nend",
  "    local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    for i\
    \ = 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\")\n        res[i] =\
    \ res[i]:gsub(\"2\", \"Two\")\n        res[i] = res[i]:gsub(\"3\", \"Three\")\n\
    \        res[i] = res[i]:gsub(\"4\", \"Four\")\n        res[i] = res[i]:gsub(\"\
    5\", \"Five\")\n        res[i] = res[i]:gsub(\"6\", \"Six\")\n        res[i] =\
    \ res[i]:gsub(\"7\", \"Seven\")\n        res[i] = res[i]:gsub(\"8\", \"Eight\"\
    )\n        res[i] = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return res\nend",
  "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v\
    \ <= 9 then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    for i = 1, #result do\n        result[i] = string.upper(result[i]:sub(1,\
    \ 1)) .. result[i]:sub(2)\n    end\n    return result\nend", "    local new_arr\
    \ = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    local result = {}\n    for i = #new_arr, 1, -1 do\n        table.insert(result,\
    \ tostring(new_arr[i]))\n    end\n    return result\nend", "    local result =\
    \ {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n    \
    \        table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = DIGITS[result[i]]\n    end\n \
    \   return result\nend", "    local t = {}\n    for _, v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            table.insert(t, v)\n        end\n\
    \    end\n    table.sort(t)\n    local res = {}\n    for i = #t, 1, -1 do\n  \
    \      table.insert(res, tostring(t[i]))\n    end\n    return res\nend", "  local\
    \ res = {}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n  \
    \    res[#res + 1] = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res\
    \ do\n    res[i] = names[res[i]]\n  end\n  return res\nend", "  local function\
    \ sort_func(a, b)\n    return a < b\n  end\n  local function reverse_func(a, b)\n\
    \    return a > b\n  end\n  local function replace_func(a)\n    if a == 1 then\n\
    \      return \"One\"\n    elseif a == 2 then\n      return \"Two\"\n    elseif\
    \ a == 3 then\n      return \"Three\"\n    elseif a == 4 then\n      return \"\
    Four\"\n    elseif a == 5 then\n      return \"Five\"\n    elseif a == 6 then\n\
    \      return \"Six\"\n    elseif a == 7 then\n      return \"Seven\"\n    elseif\
    \ a == 8 then\n      return \"Eight\"\n    elseif a == 9 then\n      return \"\
    Nine\"\n    end\n  end\n  local function filter_func(a)\n    return a >= 1 and\
    \ a <= 9\n  end\n  local function map_func(a)\n    return replace_func(a)\n  end\n\
    \  local function reduce_func(a, b)\n    return a .. b\n  end\n  return arr:filter(filter_func):sort(sort_func):reverse():map(map_func):reduce(reduce_func)\n\
    end", "    local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\n\
    end", "  local result = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v\
    \ <= 9 then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  for i = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  table.reverse(result)\n\
    \  for i = 1, #result do\n    result[i] = string.gsub(result[i], '1', 'One')\n\
    \    result[i] = string.gsub(result[i], '2', 'Two')\n    result[i] = string.gsub(result[i],\
    \ '3', 'Three')\n    result[i] = string.gsub(result[i], '4', 'Four')\n    result[i]\
    \ = string.gsub(result[i], '5', 'Five')\n    result[i] = string.gsub(result[i],\
    \ '6', 'Six')\n    result[i] = string.gsub(result[i], '7', 'Seven')\n    result[i]\
    \ = string.gsub(result[i], '8', 'Eight')\n    result[i] = string.gsub(result[i],\
    \ '9', 'Nine')\n  end\n  return result\nend", "    local result = {}\n    local\
    \ map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ map[v])\n        end\n    end\n    table.sort(result)\n    return result\nend",
  "  local result = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  for i\
    \ = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  table.reverse(result)\n\
    \  for i = 1, #result do\n    result[i] = result[i]:gsub(\"1\", \"One\"):gsub(\"\
    2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"\
    ):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\"\
    , \"Nine\")\n  end\n  return result\nend", "    local result = {}\n    local map\
    \ = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n  \
    \      [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ map[v])\n        end\n    end\n    table.sort(result)\n    return result\nend",
  "  local result = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  for i\
    \ = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  table.reverse(result)\n\
    \  for i = 1, #result do\n    result[i] = string.gsub(result[i], \"1\", \"One\"\
    )\n    result[i] = string.gsub(result[i], \"2\", \"Two\")\n    result[i] = string.gsub(result[i],\
    \ \"3\", \"Three\")\n    result[i] = string.gsub(result[i], \"4\", \"Four\")\n\
    \    result[i] = string.gsub(result[i], \"5\", \"Five\")\n    result[i] = string.gsub(result[i],\
    \ \"6\", \"Six\")\n    result[i] = string.gsub(result[i], \"7\", \"Seven\")\n\
    \    result[i] = string.gsub(result[i], \"8\", \"Eight\")\n    result[i] = string.gsub(result[i],\
    \ \"9\", \"Nine\")\n  end\n  return result\nend", "    local result = {}\n   \
    \ local num_to_name = {\n        [1] = \"One\",\n        [2] = \"Two\",\n    \
    \    [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n    \
    \    [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n    \
    \    [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >= 1\
    \ and v <= 9 then\n            table.insert(result, num_to_name[v])\n        end\n\
    \    end\n    table.sort(result)\n    table.reverse(result)\n    return result\n\
    end", "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    table.reverse(result)\n    for i = 1, #result do\n        result[i]\
    \ = result[i]:gsub(\"1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"\
    ):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\"\
    , \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return\
    \ result\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n        if\
    \ v >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    for i = 1, #res do\n        res[i] = string.gsub(res[i], \"1\",\
    \ \"One\")\n        res[i] = string.gsub(res[i], \"2\", \"Two\")\n        res[i]\
    \ = string.gsub(res[i], \"3\", \"Three\")\n        res[i] = string.gsub(res[i],\
    \ \"4\", \"Four\")\n        res[i] = string.gsub(res[i], \"5\", \"Five\")\n  \
    \      res[i] = string.gsub(res[i], \"6\", \"Six\")\n        res[i] = string.gsub(res[i],\
    \ \"7\", \"Seven\")\n        res[i] = string.gsub(res[i], \"8\", \"Eight\")\n\
    \        res[i] = string.gsub(res[i], \"9\", \"Nine\")\n    end\n    return res\n\
    end", "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    for i = 1, #result do\n        result[i] = numbers[result[i]]\n\
    \    end\n    return result\nend", "    local result = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, #result do\n   \
    \     result[i] = tostring(result[i])\n    end\n    table.reverse(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   return result\nend", "  local function sort_table(arr)\n    local function\
    \ sort_func(a, b)\n      return a < b\n    end\n    table.sort(arr, sort_func)\n\
    \    return arr\n  end", "    local result = {}\n    local names = {\n       \
    \ [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4]\
    \ = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] =\
    \ \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for\
    \ _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ names[v])\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "  local result = {}\n  for i, v in ipairs(arr) do\n    if v > 0 and v <\
    \ 10 then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  for i, v in ipairs(result) do\n    result[i] = tostring(v)\n  end\n  table.sort(result,\
    \ function(a, b) return #a > #b end)\n  for i, v in ipairs(result) do\n    result[i]\
    \ = tonumber(v)\n  end\n  for i, v in ipairs(result) do\n    if v == 1 then\n\
    \      result[i] = \"One\"\n    elseif v == 2 then\n      result[i] = \"Two\"\n\
    \    elseif v == 3 then\n      result[i] = \"Three\"\n    elseif v == 4 then\n\
    \      result[i] = \"Four\"\n    elseif v == 5 then\n      result[i] = \"Five\"\
    \n    elseif v == 6 then\n      result[i] = \"Six\"\n    elseif v == 7 then\n\
    \      result[i] = \"Seven\"\n    elseif v == 8 then\n      result[i] = \"Eight\"\
    \n    elseif v == 9 then\n      result[i] = \"Nine\"\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for _, v in ipairs(arr) do\n     \
    \   if v >= 1 and v <= 9 then\n            table.insert(result, v)\n        end\n\
    \    end\n    table.sort(result)\n    for i = 1, #result do\n        result[i]\
    \ = num_to_str[result[i]]\n    end\n    return result\nend", "    local result\
    \ = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub(\"\
    1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"\
    ):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\"\
    , \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend", "    local\
    \ function sort_table(t)\n        local function sort_func(a, b)\n           \
    \ return a < b\n        end\n        table.sort(t, sort_func)\n        return\
    \ t\n    end", "    local result = {}\n    local numbers = {\n        [1] = \"\
    One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\"\
    ,\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n\
    \        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, numbers[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "  local\
    \ res = {}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n  \
    \    res[#res + 1] = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res\
    \ do\n    if res[i] == 1 then\n      res[i] = 'One'\n    elseif res[i] == 2 then\n\
    \      res[i] = 'Two'\n    elseif res[i] == 3 then\n      res[i] = 'Three'\n \
    \   elseif res[i] == 4 then\n      res[i] = 'Four'\n    elseif res[i] == 5 then\n\
    \      res[i] = 'Five'\n    elseif res[i] == 6 then\n      res[i] = 'Six'\n  \
    \  elseif res[i] == 7 then\n      res[i] = 'Seven'\n    elseif res[i] == 8 then\n\
    \      res[i] = 'Eight'\n    elseif res[i] == 9 then\n      res[i] = 'Nine'\n\
    \    end\n  end\n  return res\nend", "    local result = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    local names = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i, v in ipairs(result)\
    \ do\n        result[i] = names[v]\n    end\n    return result\nend", "    local\
    \ res = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"\
    One\"\n        elseif res[i] == 2 then\n            res[i] = \"Two\"\n       \
    \ elseif res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i]\
    \ == 4 then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n\
    \            res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n        if v\
    \ >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = names[res[i]]\n\
    \    end\n    return res\nend", "    local res = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = names[res[i]]\n    end\n    return res\nend", "    local res = {}\n    for\
    \ i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n\
    \        res[i] = tostring(v)\n    end\n    for i, v in ipairs(res) do\n     \
    \   if v == '1' then\n            res[i] = 'One'\n        elseif v == '2' then\n\
    \            res[i] = 'Two'\n        elseif v == '3' then\n            res[i]\
    \ = 'Three'\n        elseif v == '4' then\n            res[i] = 'Four'\n     \
    \   elseif v == '5' then\n            res[i] = 'Five'\n        elseif v == '6'\
    \ then\n            res[i] = 'Six'\n        elseif v == '7' then\n           \
    \ res[i] = 'Seven'\n        elseif v == '8' then\n            res[i] = 'Eight'\n\
    \        elseif v == '9' then\n            res[i] = 'Nine'\n        end\n    end\n\
    \    return res\nend", "    local function sort(arr)\n        local function swap(i,\
    \ j)\n            local temp = arr[i]\n            arr[i] = arr[j]\n         \
    \   arr[j] = temp\n        end\n        for i = 1, #arr do\n            for j\
    \ = i + 1, #arr do\n                if arr[i] > arr[j] then\n                \
    \    swap(i, j)\n                end\n            end\n        end\n    end\n\
    \    local function reverse(arr)\n        local function swap(i, j)\n        \
    \    local temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n\
    \        end\n        for i = 1, #arr / 2 do\n            swap(i, #arr - i + 1)\n\
    \        end\n    end\n    local function replace(arr)\n        local function\
    \ replace_one(num)\n            if num == 1 then\n                return 'One'\n\
    \            elseif num == 2 then\n                return 'Two'\n            elseif\
    \ num == 3 then\n                return 'Three'\n            elseif num == 4 then\n\
    \                return 'Four'\n            elseif num == 5 then\n           \
    \     return 'Five'\n            elseif num == 6 then\n                return\
    \ 'Six'\n            elseif num == 7 then\n                return 'Seven'\n  \
    \          elseif num == 8 then\n                return 'Eight'\n            elseif\
    \ num == 9 then\n                return 'Nine'\n            end\n        end\n\
    \        for i = 1, #arr do\n            arr[i] = replace_one(arr[i])\n      \
    \  end\n    end\n    local function filter(arr)\n        local function is_valid(num)\n\
    \            return num >= 1 and num <= 9\n        end\n        local new_arr\
    \ = {}\n        for i = 1, #arr do\n            if is_valid(arr[i]) then\n   \
    \             new_arr[#new_arr + 1] = arr[i]\n            end\n        end\n \
    \       return new_arr\n    end\n    arr = filter(arr)\n    sort(arr)\n    reverse(arr)\n\
    \    replace(arr)\n    return arr\nend", "    local res = {}\n    local dict =\
    \ {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n    \
    \    [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7] =\
    \ 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _, v\
    \ in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ dict[v])\n        end\n    end\n    return res\nend", "    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = number_to_name[v]\n    end\n\
    \    return result\nend", "  local function sort_table(t)\n    local function\
    \ swap(a, b)\n      local temp = t[a]\n      t[a] = t[b]\n      t[b] = temp\n\
    \    end\n    local function compare(a, b)\n      return a > b\n    end\n    for\
    \ i = 1, #t do\n      for j = i + 1, #t do\n        if compare(t[i], t[j]) then\n\
    \          swap(i, j)\n        end\n      end\n    end\n  end\n  local function\
    \ reverse_table(t)\n    local length = #t\n    for i = 1, length / 2 do\n    \
    \  local temp = t[i]\n      t[i] = t[length - i + 1]\n      t[length - i + 1]\
    \ = temp\n    end\n  end\n  local function replace_number(t)\n    local number_map\
    \ = {\n      [1] = 'One',\n      [2] = 'Two',\n      [3] = 'Three',\n      [4]\
    \ = 'Four',\n      [5] = 'Five',\n      [6] = 'Six',\n      [7] = 'Seven',\n \
    \     [8] = 'Eight',\n      [9] = 'Nine'\n    }\n    for i = 1, #t do\n      t[i]\
    \ = number_map[t[i]]\n    end\n  end\n  local function filter_table(t)\n    local\
    \ new_table = {}\n    for i = 1, #t do\n      if t[i] >= 1 and t[i] <= 9 then\n\
    \        new_table[#new_table + 1] = t[i]\n      end\n    end\n    return new_table\n\
    \  end\n  local new_table = filter_table(arr)\n  sort_table(new_table)\n  reverse_table(new_table)\n\
    \  replace_number(new_table)\n  return new_table\nend", "    local res = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i\
    \ = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i = 1, #res do\n        res[i] = names[tonumber(res[i])]\n\
    \    end\n    return res\nend", "    local res = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n  \
    \      end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i]\
    \ = num_to_str[res[i]]\n    end\n    return res\nend", "    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = num_to_str[result[i]]\n    end\n\
    \    return result\nend", "  local result = {}\n  for i = 1, #arr do\n    if arr[i]\
    \ > 0 and arr[i] < 10 then\n      result[#result + 1] = arr[i]\n    end\n  end\n\
    \  table.sort(result)\n  for i = 1, #result do\n    result[i] = num_to_str[result[i]]\n\
    \  end\n  return result\nend", "    local result = {}\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result,\
    \ arr[i])\n        end\n    end\n    table.sort(result)\n    local reverse_result\
    \ = {}\n    for i = #result, 1, -1 do\n        table.insert(reverse_result, result[i])\n\
    \    end\n    local final_result = {}\n    for i = 1, #reverse_result do\n   \
    \     if reverse_result[i] == 1 then\n            table.insert(final_result, \"\
    One\")\n        elseif reverse_result[i] == 2 then\n            table.insert(final_result,\
    \ \"Two\")\n        elseif reverse_result[i] == 3 then\n            table.insert(final_result,\
    \ \"Three\")\n        elseif reverse_result[i] == 4 then\n            table.insert(final_result,\
    \ \"Four\")\n        elseif reverse_result[i] == 5 then\n            table.insert(final_result,\
    \ \"Five\")\n        elseif reverse_result[i] == 6 then\n            table.insert(final_result,\
    \ \"Six\")\n        elseif reverse_result[i] == 7 then\n            table.insert(final_result,\
    \ \"Seven\")\n        elseif reverse_result[i] == 8 then\n            table.insert(final_result,\
    \ \"Eight\")\n        elseif reverse_result[i] == 9 then\n            table.insert(final_result,\
    \ \"Nine\")\n        end\n    end\n    return final_result\nend", "    local result\
    \ = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub(\"\
    1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"\
    ):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\"\
    , \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend", "    local\
    \ function sort_table(t)\n        local function compare(a, b)\n            return\
    \ a < b\n        end\n        table.sort(t, compare)\n        return t\n    end",
  "    local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <=\
    \ 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    for i\
    \ = 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\")\n        res[i] =\
    \ res[i]:gsub(\"2\", \"Two\")\n        res[i] = res[i]:gsub(\"3\", \"Three\")\n\
    \        res[i] = res[i]:gsub(\"4\", \"Four\")\n        res[i] = res[i]:gsub(\"\
    5\", \"Five\")\n        res[i] = res[i]:gsub(\"6\", \"Six\")\n        res[i] =\
    \ res[i]:gsub(\"7\", \"Seven\")\n        res[i] = res[i]:gsub(\"8\", \"Eight\"\
    )\n        res[i] = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return res\nend",
  "  local function sort_by_length(a, b)\n    return a < b\n  end\n  local function\
    \ reverse_table(arr)\n    local reversed = {}\n    for i = #arr, 1, -1 do\n  \
    \    reversed[#reversed + 1] = arr[i]\n    end\n    return reversed\n  end\n \
    \ local function replace_by_name(arr)\n    local names = {\n      [1] = 'One',\n\
    \      [2] = 'Two',\n      [3] = 'Three',\n      [4] = 'Four',\n      [5] = 'Five',\n\
    \      [6] = 'Six',\n      [7] = 'Seven',\n      [8] = 'Eight',\n      [9] = 'Nine'\n\
    \    }\n    local new_arr = {}\n    for i = 1, #arr do\n      if arr[i] > 0 and\
    \ arr[i] < 10 then\n        new_arr[#new_arr + 1] = names[arr[i]]\n      end\n\
    \    end\n    return new_arr\n  end\n  return replace_by_name(reverse_table(table.sort(arr,\
    \ sort_by_length)))\nend", "  local res = {}\n  for _, v in ipairs(arr) do\n \
    \   if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  local res2 = {}\n  for i = #res, 1, -1 do\n    table.insert(res2, res[i])\n\
    \  end\n  local res3 = {}\n  for _, v in ipairs(res2) do\n    if v == 1 then\n\
    \      table.insert(res3, \"One\")\n    elseif v == 2 then\n      table.insert(res3,\
    \ \"Two\")\n    elseif v == 3 then\n      table.insert(res3, \"Three\")\n    elseif\
    \ v == 4 then\n      table.insert(res3, \"Four\")\n    elseif v == 5 then\n  \
    \    table.insert(res3, \"Five\")\n    elseif v == 6 then\n      table.insert(res3,\
    \ \"Six\")\n    elseif v == 7 then\n      table.insert(res3, \"Seven\")\n    elseif\
    \ v == 8 then\n      table.insert(res3, \"Eight\")\n    elseif v == 9 then\n \
    \     table.insert(res3, \"Nine\")\n    end\n  end\n  return res3\nend", "   \
    \ local new_arr = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v\
    \ <= 9 then\n            table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    local result = {}\n    for i = #new_arr, 1, -1 do\n        table.insert(result,\
    \ tostring(new_arr[i]))\n    end\n    return result\nend", "    local new_arr\
    \ = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n\
    \            table.insert(new_arr, arr[i])\n        end\n    end\n    table.sort(new_arr)\n\
    \    local reverse_arr = {}\n    for i = #new_arr, 1, -1 do\n        table.insert(reverse_arr,\
    \ new_arr[i])\n    end\n    local result = {}\n    for i = 1, #reverse_arr do\n\
    \        if reverse_arr[i] == 1 then\n            table.insert(result, \"One\"\
    )\n        elseif reverse_arr[i] == 2 then\n            table.insert(result, \"\
    Two\")\n        elseif reverse_arr[i] == 3 then\n            table.insert(result,\
    \ \"Three\")\n        elseif reverse_arr[i] == 4 then\n            table.insert(result,\
    \ \"Four\")\n        elseif reverse_arr[i] == 5 then\n            table.insert(result,\
    \ \"Five\")\n        elseif reverse_arr[i] == 6 then\n            table.insert(result,\
    \ \"Six\")\n        elseif reverse_arr[i] == 7 then\n            table.insert(result,\
    \ \"Seven\")\n        elseif reverse_arr[i] == 8 then\n            table.insert(result,\
    \ \"Eight\")\n        elseif reverse_arr[i] == 9 then\n            table.insert(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend", "    local res = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend",
  "    local result = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v\
    \ <= 9 then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = string.gsub(result[i],\
    \ \"1\", \"One\")\n        result[i] = string.gsub(result[i], \"2\", \"Two\")\n\
    \        result[i] = string.gsub(result[i], \"3\", \"Three\")\n        result[i]\
    \ = string.gsub(result[i], \"4\", \"Four\")\n        result[i] = string.gsub(result[i],\
    \ \"5\", \"Five\")\n        result[i] = string.gsub(result[i], \"6\", \"Six\"\
    )\n        result[i] = string.gsub(result[i], \"7\", \"Seven\")\n        result[i]\
    \ = string.gsub(result[i], \"8\", \"Eight\")\n        result[i] = string.gsub(result[i],\
    \ \"9\", \"Nine\")\n    end\n    return result\nend", "    local result = {}\n\
    \    local dict = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            table.insert(result, dict[arr[i]])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend", "  local result = {}\n\
    \  for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i, v in ipairs(result) do\n\
    \    result[i] = tostring(result[i])\n  end\n  return result\nend", "    local\
    \ result = {}\n    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n\
    \        [3] = 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n      \
    \  [6] = 'Six',\n        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] =\
    \ 'Nine'\n    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9\
    \ then\n            table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    local i, j = 1, #result\n    while i < j do\n        result[i], result[j]\
    \ = result[j], result[i]\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ result\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n        if\
    \ v >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    for i = 1, #res do\n        res[i] = tostring(res[i])\n\
    \    end\n    for i = 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\"\
    )\n        res[i] = res[i]:gsub(\"2\", \"Two\")\n        res[i] = res[i]:gsub(\"\
    3\", \"Three\")\n        res[i] = res[i]:gsub(\"4\", \"Four\")\n        res[i]\
    \ = res[i]:gsub(\"5\", \"Five\")\n        res[i] = res[i]:gsub(\"6\", \"Six\"\
    )\n        res[i] = res[i]:gsub(\"7\", \"Seven\")\n        res[i] = res[i]:gsub(\"\
    8\", \"Eight\")\n        res[i] = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return\
    \ res\nend", "    local res = {}\n    for i = 1, #arr do\n        if arr[i] >=\
    \ 1 and arr[i] <= 9 then\n            res[#res + 1] = arr[i]\n        end\n  \
    \  end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] = names[res[i]]\n\
    \    end\n    return res\nend", "  local result = {}\n  local numbers = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i =\
    \ 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result +\
    \ 1] = numbers[arr[i]]\n    end\n  end\n  return result\nend", "    local res\
    \ = {}\n    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n      \
    \  [3] = 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] =\
    \ 'Six',\n        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n\
    \    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(res, map[v])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    local res2 = {}\n    for i = #res, 1, -1 do\n\
    \        table.insert(res2, res[i])\n    end\n    local res3 = {}\n    for _,\
    \ v in ipairs(res2) do\n        table.insert(res3, num_to_str[v])\n    end\n \
    \   return res3\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n \
    \       if v >= 1 and v <= 9 then\n            table.insert(res, v)\n        end\n\
    \    end\n    table.sort(res)\n    local res2 = {}\n    for i = #res, 1, -1 do\n\
    \        table.insert(res2, res[i])\n    end\n    local res3 = {}\n    for _,\
    \ v in ipairs(res2) do\n        if v == 1 then\n            table.insert(res3,\
    \ \"One\")\n        elseif v == 2 then\n            table.insert(res3, \"Two\"\
    )\n        elseif v == 3 then\n            table.insert(res3, \"Three\")\n   \
    \     elseif v == 4 then\n            table.insert(res3, \"Four\")\n        elseif\
    \ v == 5 then\n            table.insert(res3, \"Five\")\n        elseif v == 6\
    \ then\n            table.insert(res3, \"Six\")\n        elseif v == 7 then\n\
    \            table.insert(res3, \"Seven\")\n        elseif v == 8 then\n     \
    \       table.insert(res3, \"Eight\")\n        elseif v == 9 then\n          \
    \  table.insert(res3, \"Nine\")\n        end\n    end\n    return res3\nend",
  "  local result = {}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n\
    \      table.insert(result, arr[i])\n    end\n  end\n  table.sort(result)\n  local\
    \ result2 = {}\n  for i = #result, 1, -1 do\n    table.insert(result2, result[i])\n\
    \  end\n  local result3 = {}\n  for i = 1, #result2 do\n    if result2[i] == 1\
    \ then\n      table.insert(result3, \"One\")\n    elseif result2[i] == 2 then\n\
    \      table.insert(result3, \"Two\")\n    elseif result2[i] == 3 then\n     \
    \ table.insert(result3, \"Three\")\n    elseif result2[i] == 4 then\n      table.insert(result3,\
    \ \"Four\")\n    elseif result2[i] == 5 then\n      table.insert(result3, \"Five\"\
    )\n    elseif result2[i] == 6 then\n      table.insert(result3, \"Six\")\n   \
    \ elseif result2[i] == 7 then\n      table.insert(result3, \"Seven\")\n    elseif\
    \ result2[i] == 8 then\n      table.insert(result3, \"Eight\")\n    elseif result2[i]\
    \ == 9 then\n      table.insert(result3, \"Nine\")\n    end\n  end\n  return result3\n\
    end", "    local result = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            table.insert(result, arr[i])\n        end\n  \
    \  end\n    table.sort(result)\n    local names = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1,\
    \ #result do\n        result[i] = names[result[i]]\n    end\n    return result\n\
    end", "    local res = {}\n    for _, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    for i = 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\"):gsub(\"\
    2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"\
    ):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\"\
    , \"Nine\")\n    end\n    return res\nend", "    local result = {}\n    local\
    \ dict = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for i =\
    \ 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result,\
    \ dict[arr[i]])\n        end\n    end\n    table.sort(result)\n    return result\n\
    end", "    local result = {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and\
    \ arr[i] <= 9 then\n            table.insert(result, arr[i])\n        end\n  \
    \  end\n    table.sort(result)\n    local names = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1,\
    \ #result do\n        result[i] = names[result[i]]\n    end\n    return result\n\
    end", "    local new_arr = {}\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 and v < 10 then\n            table.insert(new_arr, v)\n        end\n    end\n\
    \    table.sort(new_arr)\n    table.reverse(new_arr)\n    local result = {}\n\
    \    for i, v in ipairs(new_arr) do\n        table.insert(result, num_to_word[v])\n\
    \    end\n    return result\nend", "  local res = {}\n  for _, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n    end\n  end\n\
    \  table.sort(res)\n  for i = 1, #res do\n    res[i] = num_to_str[res[i]]\n  end\n\
    \  return res\nend", "    local result = {}\n    for i, v in ipairs(arr) do\n\
    \        if v > 0 and v < 10 then\n            table.insert(result, v)\n     \
    \   end\n    end\n    table.sort(result)\n    for i, v in ipairs(result) do\n\
    \        result[i] = tostring(result[i])\n    end\n    table.sort(result, function(a,\
    \ b) return #a > #b end)\n    for i, v in ipairs(result) do\n        if v == '1'\
    \ then\n            result[i] = 'One'\n        elseif v == '2' then\n        \
    \    result[i] = 'Two'\n        elseif v == '3' then\n            result[i] =\
    \ 'Three'\n        elseif v == '4' then\n            result[i] = 'Four'\n    \
    \    elseif v == '5' then\n            result[i] = 'Five'\n        elseif v ==\
    \ '6' then\n            result[i] = 'Six'\n        elseif v == '7' then\n    \
    \        result[i] = 'Seven'\n        elseif v == '8' then\n            result[i]\
    \ = 'Eight'\n        elseif v == '9' then\n            result[i] = 'Nine'\n  \
    \      end\n    end\n    return result\nend", "  local res = {}\n  for _, v in\
    \ ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res, v)\n\
    \    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = tostring(res[i])\n\
    \  end\n  return res\nend", "    local res = {}\n    local names = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 and arr[i] < 10 then\n            res[#res + 1] =\
    \ names[arr[i]]\n        end\n    end\n    return res\nend", "    local result\
    \ = {}\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          result[#result + 1] = v\n        end\n    end\n    table.sort(result)\n\
    \    for i, v in ipairs(result) do\n        result[i] = tostring(v)\n    end\n\
    \    table.reverse(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = v:gsub(\"1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"\
    4\", \"Four\"):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"\
    ):gsub(\"8\", \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend",
  "    local result = {}\n    local sorted = {}\n    local dict = {\n        [1] =\
    \ \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"\
    Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\"\
    ,\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(sorted, v)\n\
    \        end\n    end\n    table.sort(sorted)\n    for i = #sorted, 1, -1 do\n\
    \        table.insert(result, dict[sorted[i]])\n    end\n    return result\nend",
  "  local result = {}\n  local map = {\n    [1] = 'One',\n    [2] = 'Two',\n    [3]\
    \ = 'Three',\n    [4] = 'Four',\n    [5] = 'Five',\n    [6] = 'Six',\n    [7]\
    \ = 'Seven',\n    [8] = 'Eight',\n    [9] = 'Nine'\n  }\n  for i = 1, #arr do\n\
    \    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result + 1] = map[arr[i]]\n\
    \    end\n  end\n  return result\nend", "    local res = {}\n    local map = {\n\
    \        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n        [4]\
    \ = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7] = 'Seven',\n\
    \        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for i = 1, #arr do\n\
    \        if arr[i] > 0 and arr[i] < 10 then\n            res[#res + 1] = map[arr[i]]\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result,\
    \ arr[i])\n        end\n    end\n    table.sort(result)\n    for i = 1, #result\
    \ do\n        result[i] = num_to_str[result[i]]\n    end\n    return result\n\
    end", "  local result = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v\
    \ <= 9 then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  for i, v in ipairs(result) do\n    result[i] = tostring(v)\n  end\n  table.reverse(result)\n\
    \  for i, v in ipairs(result) do\n    result[i] = string.gsub(v, \"1\", \"One\"\
    )\n    result[i] = string.gsub(v, \"2\", \"Two\")\n    result[i] = string.gsub(v,\
    \ \"3\", \"Three\")\n    result[i] = string.gsub(v, \"4\", \"Four\")\n    result[i]\
    \ = string.gsub(v, \"5\", \"Five\")\n    result[i] = string.gsub(v, \"6\", \"\
    Six\")\n    result[i] = string.gsub(v, \"7\", \"Seven\")\n    result[i] = string.gsub(v,\
    \ \"8\", \"Eight\")\n    result[i] = string.gsub(v, \"9\", \"Nine\")\n  end\n\
    \  return result\nend", "    local res = {}\n    for _, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            table.insert(res, v)\n       \
    \ end\n    end\n    table.sort(res)\n    for i = 1, #res do\n        res[i] =\
    \ num_to_str[res[i]]\n    end\n    return res\nend", "  local result = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = tostring(result[i])\n  end\n  table.sort(result, function(a,\
    \ b) return #a > #b end)\n  for i = 1, #result do\n    result[i] = number_to_word(result[i])\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, #arr do\n  \
    \  if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result + 1] = arr[i]\n \
    \   end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i] =\
    \ number_to_name[result[i]]\n  end\n  return result\nend", "    local result =\
    \ {}\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n  \
    \          table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        if result[i] ==\
    \ 1 then\n            result[i] = \"One\"\n        elseif result[i] == 2 then\n\
    \            result[i] = \"Two\"\n        elseif result[i] == 3 then\n       \
    \     result[i] = \"Three\"\n        elseif result[i] == 4 then\n            result[i]\
    \ = \"Four\"\n        elseif result[i] == 5 then\n            result[i] = \"Five\"\
    \n        elseif result[i] == 6 then\n            result[i] = \"Six\"\n      \
    \  elseif result[i] == 7 then\n            result[i] = \"Seven\"\n        elseif\
    \ result[i] == 8 then\n            result[i] = \"Eight\"\n        elseif result[i]\
    \ == 9 then\n            result[i] = \"Nine\"\n        end\n    end\n    return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
