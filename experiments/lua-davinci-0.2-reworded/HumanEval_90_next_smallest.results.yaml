name: HumanEval_90_next_smallest
language: lua
results:
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzh55vvg0.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpzh55vvg0.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_fryt5v.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp0_fryt5v.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min1, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min1 then\n      \
    \      min2 = min1\n            min1 = v\n        elseif v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2 == math.huge and nil or\
    \ min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bfrnjvm.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp0bfrnjvm.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpilt7g5ew.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpilt7g5ew.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpilt7g5ew.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min1, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min1 then\n      \
    \      min2 = min1\n            min1 = v\n        elseif v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2\
    \ or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnya9j9pw.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpnya9j9pw.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ul2hw24.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp4ul2hw24.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min = math.min(unpack(lst))\n    local min2\
    \ = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n        if v > min\
    \ and v < min2 then\n            min2 = v\n        end\n    end\n    if min2 ==\
    \ math.max(unpack(lst)) then\n        return nil\n    end\n    return min2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjgzbuot.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmjgzbuot.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpmjgzbuot.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwt9l84w.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpbwt9l84w.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp321enkek.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp321enkek.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp321enkek.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe042yd4y.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpe042yd4y.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if min == nil or v < min then\n            min2\
    \ = min\n            min = v\n        elseif min2 == nil or v < min2 then\n  \
    \          min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9xt1p9v.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpn9xt1p9v.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.maxinteger,\
    \ math.maxinteger\n    for _, v in ipairs(lst) do\n        if v < min then\n \
    \           min2 = min\n            min = v\n        elseif v < min2 then\n  \
    \          min2 = v\n        end\n    end\n    return min2 == math.maxinteger\
    \ and nil or min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43rgilr1.lua:30:\
    \ expected: nil, actual: 9223372036854775807\nstack traceback:\n\t/tmp/tmp43rgilr1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min1, min2 = math.min(lst[1], lst[2]), math.max(lst[1],\
    \ lst[2])\n    for i = 3, #lst do\n        if lst[i] < min1 then\n           \
    \ min2 = min1\n            min1 = lst[i]\n        elseif lst[i] < min2 then\n\
    \            min2 = lst[i]\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghd3g9fj.lua:34:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpghd3g9fj.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslq2ek4t.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpslq2ek4t.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_count = 0\n    for _, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_count = min_count + 1\n        end\n    end\n    if min_count\
    \ > 1 then\n        return nil\n    end\n    local min_index = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v == min then\n            min_index = i\n   \
    \         break\n        end\n    end\n    table.remove(lst, min_index)\n    return\
    \ math.min(unpack(lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvh8no70k.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvh8no70k.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvh8no70k.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9orhvpb.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpr9orhvpb.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_index = table.index_of(lst, min)\n    table.remove(lst, min_index)\n\
    \    return math.min(unpack(lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd2v3zggz.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd2v3zggz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpd2v3zggz.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspb82wah.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpspb82wah.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, second_min = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      second_min\
    \ = min\n      min = v\n    elseif v < second_min then\n      second_min = v\n\
    \    end\n  end\n  return second_min ~= math.huge and second_min or nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkg1zcwj.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpfkg1zcwj.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriqau_nv.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpriqau_nv.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu1_bp3j.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmu1_bp3j.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmu1_bp3j.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    table.sort(lst)\n    for\
    \ i = 1, #lst - 1 do\n        if lst[i] ~= lst[i + 1] then\n            return\
    \ lst[i + 1]\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc565zcjm.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpc565zcjm.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = lst[1]\n  \
    \  local min2 = nil\n    for i = 2, #lst do\n        if lst[i] < min then\n  \
    \          min2 = min\n            min = lst[i]\n        elseif lst[i] < min2\
    \ or min2 == nil then\n            min2 = lst[i]\n        end\n    end\n    return\
    \ min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8fo2zxox.lua:19:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8fo2zxox.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8fo2zxox.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_idx = 0\n    local min_count = 0\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_count = min_count + 1\n           \
    \ min_idx = i\n        end\n    end\n    if min_count > 1 then\n        return\
    \ nil\n    end\n    table.remove(lst, min_idx)\n    return math.min(unpack(lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplcuw9gw1.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplcuw9gw1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplcuw9gw1.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdu9tf4qv.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdu9tf4qv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdu9tf4qv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local smallest, second_smallest = lst[1], lst[2]\n\
    \    if smallest > second_smallest then\n        smallest, second_smallest = second_smallest,\
    \ smallest\n    end\n    for i = 3, #lst do\n        if lst[i] < smallest then\n\
    \            second_smallest = smallest\n            smallest = lst[i]\n     \
    \   elseif lst[i] < second_smallest then\n            second_smallest = lst[i]\n\
    \        end\n    end\n    return second_smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwefvfxt.lua:37:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpiwefvfxt.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfoogkic4.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpfoogkic4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9atz3kc.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpv9atz3kc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6dj1dvh.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpq6dj1dvh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min1, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min1 then\n      \
    \      min2 = min1\n            min1 = v\n        elseif v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2 == math.huge and nil or\
    \ min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppr7ykw22.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmppr7ykw22.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeiakmc_s.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpeiakmc_s.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqr2ljvdd.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpqr2ljvdd.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = math.max(unpack(lst))\n  for _, v in ipairs(lst) do\n    if v\
    \ ~= min and v < min2 then\n      min2 = v\n    end\n  end\n  if min2 == math.max(unpack(lst))\
    \ then\n    return nil\n  else\n    return min2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpou_pi_b4.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpou_pi_b4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpou_pi_b4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min1, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min1 then\n      \
    \      min2 = min1\n            min1 = v\n        elseif v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2 == math.huge and nil or\
    \ min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bx19zeu.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp5bx19zeu.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w41mxm2.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp8w41mxm2.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilm7orvy.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpilm7orvy.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min, min2 = math.huge, math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n  \
    \          min = v\n        elseif v < min2 then\n            min2 = v\n     \
    \   end\n    end\n    return min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zpf9a4a.lua:34:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp8zpf9a4a.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfad1jnw.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmppfad1jnw.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2\
    \ then\n      min2 = v\n    end\n  end\n  if min2 == min then\n    return nil\n\
    \  else\n    return min2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjxvef23q.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjxvef23q.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjxvef23q.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = math.max(unpack(lst))\n  for _, v in ipairs(lst) do\n    if v\
    \ > min and v < min2 then\n      min2 = v\n    end\n  end\n  if min2 == math.max(unpack(lst))\
    \ then\n    return nil\n  else\n    return min2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_8ope7p.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpv_8ope7p.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpv_8ope7p.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nm4smsw.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp2nm4smsw.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local smallest, second_smallest\n\
    \    for _, v in ipairs(lst) do\n        if not smallest or v < smallest then\n\
    \            second_smallest = smallest\n            smallest = v\n        elseif\
    \ not second_smallest or v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    return second_smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolofjc7_.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpolofjc7_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min_count = 0\n  for _, v in ipairs(lst) do\n    if v == min then\n \
    \     min_count = min_count + 1\n    end\n  end\n  if min_count > 1 then\n   \
    \ return nil\n  end\n  local min_index = 0\n  for i, v in ipairs(lst) do\n   \
    \ if v == min then\n      min_index = i\n      break\n    end\n  end\n  table.remove(lst,\
    \ min_index)\n  return math.min(unpack(lst))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2mebxjn.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpp2mebxjn.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpp2mebxjn.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiukr6f_9.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpiukr6f_9.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.huge\n \
    \ local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yyrmd1d.lua:31:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp2yyrmd1d.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ai8e5v9.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_ai8e5v9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp_ai8e5v9.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80k65krm.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp80k65krm.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp735scvvw.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp735scvvw.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6gqnmyrk.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp6gqnmyrk.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min1, min2 = math.huge, math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < min1 then\n            min2 = min1\n\
    \            min1 = v\n        elseif v < min2 then\n            min2 = v\n  \
    \      end\n    end\n    return min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4l0twgq.lua:34:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpe4l0twgq.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02rku_zr.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp02rku_zr.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.huge\n    for _, v in ipairs(lst) do\n        if v > min\
    \ and v < min2 then\n            min2 = v\n        end\n    end\n    return min2\
    \ == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7vrkfzxr.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7vrkfzxr.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp7vrkfzxr.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v > min and v\
    \ < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkqjyo0oc.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkqjyo0oc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpkqjyo0oc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgrz8xiq.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpsgrz8xiq.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxmnh7i7.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpaxmnh7i7.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc6c57gz.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpjc6c57gz.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqovybdon.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpqovybdon.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo42ss7p9.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpo42ss7p9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpo42ss7p9.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchr70ij6.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpchr70ij6.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewq5qftv.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpewq5qftv.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min = math.min(unpack(lst))\n    local min2\
    \ = min\n    for _, v in ipairs(lst) do\n        if v > min and v < min2 then\n\
    \            min2 = v\n        end\n    end\n    if min2 == min then\n       \
    \ return nil\n    end\n    return min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3qz84j7.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmph3qz84j7.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmph3qz84j7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjy3gsdzo.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjy3gsdzo.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjy3gsdzo.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43jgv4vu.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp43jgv4vu.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_idx = 1\n    for i, v in ipairs(lst) do\n        if v == min then\n\
    \            min_idx = i\n            break\n        end\n    end\n    table.remove(lst,\
    \ min_idx)\n    if #lst == 0 then\n        return nil\n    end\n    return math.min(unpack(lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrw_1pv8.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwrw_1pv8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpwrw_1pv8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91375jrv.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp91375jrv.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_count = 0\n    for _, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_count = min_count + 1\n        end\n    end\n    if min_count\
    \ > 1 then\n        return nil\n    end\n    local min_index = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v == min then\n            min_index = i\n   \
    \         break\n        end\n    end\n    local min_next = math.max(unpack(lst))\n\
    \    for i, v in ipairs(lst) do\n        if i ~= min_index and v < min_next then\n\
    \            min_next = v\n        end\n    end\n    return min_next\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7d75jrg2.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7d75jrg2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp7d75jrg2.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrxyyolx.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpzrxyyolx.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local smallest = math.huge\n\
    \    local next_smallest = math.huge\n    for _, v in ipairs(lst) do\n       \
    \ if v < smallest then\n            next_smallest = smallest\n            smallest\
    \ = v\n        elseif v < next_smallest then\n            next_smallest = v\n\
    \        end\n    end\n    if next_smallest == math.huge then\n        return\
    \ nil\n    else\n        return next_smallest\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsntgds3.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpnsntgds3.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsz_0k9_.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmplsz_0k9_.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5t8myei.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpb5t8myei.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7aax3pfn.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7aax3pfn.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp7aax3pfn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwshh2hx.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpvwshh2hx.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph13r5d8g.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmph13r5d8g.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min1, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min1 then\n      \
    \      min2 = min1\n            min1 = v\n        elseif v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2 == math.huge and nil or\
    \ min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6mdk_5w.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpt6mdk_5w.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2\
    \ then\n      min2 = v\n    end\n  end\n  if min2 == min then\n    return nil\n\
    \  else\n    return min2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkftkl63g.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkftkl63g.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpkftkl63g.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2 or\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun08d2g9.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpun08d2g9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = math.huge\n\
    \  local second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v <\
    \ smallest then\n      second_smallest = smallest\n      smallest = v\n    elseif\
    \ v < second_smallest then\n      second_smallest = v\n    end\n  end\n  if second_smallest\
    \ == math.huge then\n    return nil\n  else\n    return second_smallest\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0hord27.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmps0hord27.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1do87m56.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp1do87m56.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgyhd68q.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpzgyhd68q.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxjadfbf.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpvxjadfbf.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnd9999t.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpfnd9999t.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min_count = 0\n  for _, v in ipairs(lst) do\n    if v == min then\n \
    \     min_count = min_count + 1\n    end\n  end\n  if min_count == #lst then\n\
    \    return nil\n  end\n  local min2 = math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v > min and v < min2 then\n      min2 = v\n    end\n  end\n  return min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbs8ho8w.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxbs8ho8w.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpxbs8ho8w.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo75e2etg.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpo75e2etg.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzixqtb8q.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpzixqtb8q.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78stjmca.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp78stjmca.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local smallest = math.min(unpack(lst))\n    local\
    \ second_smallest = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n  \
    \      if v > smallest and v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    if second_smallest == math.max(unpack(lst)) then\n\
    \        return nil\n    end\n    return second_smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07byi9y7.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp07byi9y7.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp07byi9y7.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe713fwnd.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpe713fwnd.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq5gbx8l.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpbq5gbx8l.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.huge\n\
    \    local min2 = math.huge\n    for _, v in ipairs(lst) do\n        if v < min\
    \ then\n            min2 = min\n            min = v\n        elseif v < min2 then\n\
    \            min2 = v\n        end\n    end\n    if min2 == math.huge then\n \
    \       return nil\n    else\n        return min2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07oklztr.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp07oklztr.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kkelwde.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp0kkelwde.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_count = 0\n    for _, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_count = min_count + 1\n        end\n    end\n    if min_count\
    \ > 1 then\n        return nil\n    end\n    local min_index = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v == min then\n            min_index = i\n   \
    \         break\n        end\n    end\n    local min_2 = math.huge\n    for i,\
    \ v in ipairs(lst) do\n        if i ~= min_index and v < min_2 then\n        \
    \    min_2 = v\n        end\n    end\n    if min_2 == math.huge then\n       \
    \ return nil\n    end\n    return min_2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qwen0lq.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5qwen0lq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp5qwen0lq.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst < 2 then\n    return\
    \ nil\n  end\n  local min = lst[1]\n  local min2 = nil\n  for i = 2, #lst do\n\
    \    if lst[i] < min then\n      min2 = min\n      min = lst[i]\n    elseif lst[i]\
    \ < min2 or min2 == nil then\n      min2 = lst[i]\n    end\n  end\n  return min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjavq5q1v.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjavq5q1v.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpjavq5q1v.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wkax2h1.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp_wkax2h1.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt8_htyh.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpkt8_htyh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74hstcj1.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp74hstcj1.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp74hstcj1.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc21irrqa.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpc21irrqa.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupmb6ap9.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpupmb6ap9.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, second_smallest\n\
    \  for _, v in ipairs(lst) do\n    if not smallest or v < smallest then\n    \
    \  second_smallest = smallest\n      smallest = v\n    elseif not second_smallest\
    \ or v < second_smallest then\n      second_smallest = v\n    end\n  end\n  return\
    \ second_smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q24z8p9.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp1q24z8p9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp382l5ce.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpp382l5ce.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dyv32mq.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp9dyv32mq.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb_r90z9.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmppb_r90z9.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzynfhjjz.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpzynfhjjz.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ydpjbjl.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp9ydpjbjl.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj1_208bn.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj1_208bn.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpj1_208bn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v > min and v\
    \ < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz6635osw.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpz6635osw.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpz6635osw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v ~= min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6nlbr22.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq6nlbr22.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq6nlbr22.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = math.huge\n\
    \  local second_smallest = math.huge\n  for _, v in ipairs(lst) do\n    if v <\
    \ smallest then\n      second_smallest = smallest\n      smallest = v\n    elseif\
    \ v < second_smallest then\n      second_smallest = v\n    end\n  end\n  if second_smallest\
    \ == math.huge then\n    return nil\n  else\n    return second_smallest\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68qevr9i.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp68qevr9i.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznkk3e6_.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpznkk3e6_.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn42wk6ur.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpn42wk6ur.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r0ex6_4.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp7r0ex6_4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocwrzx4o.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpocwrzx4o.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpocwrzx4o.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min1, min2 = math.min(lst[1], lst[2]), math.max(lst[1],\
    \ lst[2])\n    for i = 3, #lst do\n        if lst[i] < min1 then\n           \
    \ min2 = min1\n            min1 = lst[i]\n        elseif lst[i] < min2 then\n\
    \            min2 = lst[i]\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi98wdvyi.lua:34:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpi98wdvyi.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2 or\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun98nh_5.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpun98nh_5.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2rkhg4z.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpu2rkhg4z.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoay3tkwd.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpoay3tkwd.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrfu3y51.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpdrfu3y51.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie2ggqnm.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpie2ggqnm.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2 or\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd4y05cj.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmptd4y05cj.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36v95hi5.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp36v95hi5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp36v95hi5.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_index = table.index_of(lst, min)\n    table.remove(lst, min_index)\n\
    \    if #lst == 0 then\n        return nil\n    end\n    return math.min(unpack(lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ti9qz75.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4ti9qz75.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4ti9qz75.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71qvxip0.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp71qvxip0.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd18lthoj.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpd18lthoj.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm77n_au6.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpm77n_au6.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy38fss6f.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpy38fss6f.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79owzvcc.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp79owzvcc.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbk2fv2e.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpwbk2fv2e.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffli3vti.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpffli3vti.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklhqz1kt.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpklhqz1kt.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply9rxgq6.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmply9rxgq6.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min, min2 = math.huge, math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n  \
    \          min = v\n        elseif v < min2 then\n            min2 = v\n     \
    \   end\n    end\n    return min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzwj3m6l.lua:34:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpfzwj3m6l.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for i = 1, #lst do\n        if lst[i] < min then\n          \
    \  min2 = min\n            min = lst[i]\n        elseif lst[i] < min2 then\n \
    \           min2 = lst[i]\n        end\n    end\n    return min2 == math.huge\
    \ and nil or min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7156tqy_.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp7156tqy_.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lykc27h.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp8lykc27h.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsqcx3d0.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmplsqcx3d0.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpnkrb7z.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpkpnkrb7z.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p6jg5ca.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp9p6jg5ca.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5x2czgxh.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp5x2czgxh.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fpa8mnt.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp1fpa8mnt.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3pf9drrk.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3pf9drrk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3pf9drrk.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7jnv4vw.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpi7jnv4vw.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmpl0thy.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpxmpl0thy.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjn0_7wmr.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpjn0_7wmr.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6powytm.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmph6powytm.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp43_qolz.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpp43_qolz.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2 or\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwe3y3cf.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmptwe3y3cf.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local smallest, second_smallest\n\
    \    for _, v in ipairs(lst) do\n        if not smallest or v < smallest then\n\
    \            second_smallest = smallest\n            smallest = v\n        elseif\
    \ not second_smallest or v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    return second_smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqneh_piz.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpqneh_piz.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst < 2 then\n    return\
    \ nil\n  end\n  local min = math.min(unpack(lst))\n  local min_index = 0\n  for\
    \ i, v in ipairs(lst) do\n    if v == min then\n      min_index = i\n      break\n\
    \    end\n  end\n  table.remove(lst, min_index)\n  return math.min(unpack(lst))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qgjcew8.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0qgjcew8.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp0qgjcew8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeebwel4p.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpeebwel4p.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wi1g1ui.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp7wi1g1ui.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3y938lx7.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3y938lx7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3y938lx7.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hxku0_e.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp2hxku0_e.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ujuhxzv.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp4ujuhxzv.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4oteca80.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4oteca80.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4oteca80.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7a92oli.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpi7a92oli.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvrcd1qi.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjvrcd1qi.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjvrcd1qi.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2zjmef3.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpk2zjmef3.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2\
    \ then\n      min2 = v\n    end\n  end\n  if min2 == min then\n    return nil\n\
    \  else\n    return min2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9xiw0sb.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq9xiw0sb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq9xiw0sb.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyfxfoe6.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpwyfxfoe6.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if min == nil or v < min then\n            min2\
    \ = min\n            min = v\n        elseif min2 == nil or v < min2 then\n  \
    \          min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuftighl.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpmuftighl.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xzv7sqv.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp3xzv7sqv.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local smallest = math.huge\n\
    \    local second_smallest = math.huge\n    for _, v in ipairs(lst) do\n     \
    \   if v < smallest then\n            second_smallest = smallest\n           \
    \ smallest = v\n        elseif v < second_smallest then\n            second_smallest\
    \ = v\n        end\n    end\n    if second_smallest == math.huge then\n      \
    \  return nil\n    else\n        return second_smallest\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hj5dtf4.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp0hj5dtf4.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.huge\n    for _, v in ipairs(lst) do\n        if v > min\
    \ and v < min2 then\n            min2 = v\n        end\n    end\n    return min2\
    \ == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54nagcxl.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp54nagcxl.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp54nagcxl.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vh1p0xh.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp4vh1p0xh.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqwoeznjd.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqwoeznjd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpqwoeznjd.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjess1f1.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmptjess1f1.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min_index = 0\n  local second_min = math.max(unpack(lst))\n  local second_min_index\
    \ = 0\n  for i, v in ipairs(lst) do\n    if v == min then\n      min_index = i\n\
    \    end\n    if v == second_min then\n      second_min_index = i\n    end\n \
    \ end\n  if min_index == second_min_index then\n    return nil\n  end\n  return\
    \ second_min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgezp6h93.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgezp6h93.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgezp6h93.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local smallest = math.huge\n\
    \    local next_smallest = math.huge\n    for _, v in ipairs(lst) do\n       \
    \ if v < smallest then\n            next_smallest = smallest\n            smallest\
    \ = v\n        elseif v < next_smallest then\n            next_smallest = v\n\
    \        end\n    end\n    if next_smallest == math.huge then\n        return\
    \ nil\n    else\n        return next_smallest\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90lx4bgl.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp90lx4bgl.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx1i1lt2.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpgx1i1lt2.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min1, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min1 then\n      min2 =\
    \ min1\n      min1 = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcut9au9u.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpcut9au9u.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min, min2 = math.huge, math.huge\n    for\
    \ _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n  \
    \          min = v\n        elseif v < min2 then\n            min2 = v\n     \
    \   end\n    end\n    return min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tmeaozv.lua:34:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp5tmeaozv.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaavan0wg.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpaavan0wg.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfwwlw_q.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmprfwwlw_q.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1ppx6ex.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpm1ppx6ex.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_count = 0\n    for _, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_count = min_count + 1\n        end\n    end\n    if min_count\
    \ > 1 then\n        return nil\n    end\n    local min_index = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v == min then\n            min_index = i\n   \
    \         break\n        end\n    end\n    local min_lst = {}\n    for i, v in\
    \ ipairs(lst) do\n        if i ~= min_index then\n            table.insert(min_lst,\
    \ v)\n        end\n    end\n    return math.min(unpack(min_lst))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47j3h4fv.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp47j3h4fv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp47j3h4fv.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min1, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min1 then\n      \
    \      min2 = min1\n            min1 = v\n        elseif v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2 == math.huge and nil or\
    \ min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1epqa2h.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpl1epqa2h.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyajt6k65.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpyajt6k65.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min_index = table.index_of(lst, min)\n  table.remove(lst, min_index)\n\
    \  return math.min(unpack(lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8x8f1k9b.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8x8f1k9b.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8x8f1k9b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    else\n        return min2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph8z1rid3.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmph8z1rid3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmph8z1rid3.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min_index = table.index_of(lst, min)\n  table.remove(lst, min_index)\n\
    \  return math.min(unpack(lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeor5pq33.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpeor5pq33.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpeor5pq33.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min = math.min(unpack(lst))\n    local min2\
    \ = min\n    for _, v in ipairs(lst) do\n        if v > min and v < min2 then\n\
    \            min2 = v\n        end\n    end\n    if min2 == min then\n       \
    \ return nil\n    end\n    return min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpemsern0w.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpemsern0w.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpemsern0w.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v ~= min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    else\n   \
    \     return min2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8e9whux2.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8e9whux2.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8e9whux2.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9sr92xe.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpd9sr92xe.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xj525kr.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp5xj525kr.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71e345_f.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp71e345_f.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local smallest = math.huge\n\
    \    local next_smallest = math.huge\n    for _, v in ipairs(lst) do\n       \
    \ if v < smallest then\n            next_smallest = smallest\n            smallest\
    \ = v\n        elseif v < next_smallest then\n            next_smallest = v\n\
    \        end\n    end\n    if next_smallest == math.huge then\n        return\
    \ nil\n    else\n        return next_smallest\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9nkt_uf.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpg9nkt_uf.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiybai8kh.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpiybai8kh.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccx4wp3w.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpccx4wp3w.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.huge\n\
    \    local second_min = math.huge\n    for _, v in ipairs(lst) do\n        if\
    \ v < min then\n            second_min = min\n            min = v\n        elseif\
    \ v < second_min then\n            second_min = v\n        end\n    end\n    if\
    \ second_min == math.huge then\n        return nil\n    else\n        return second_min\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhj3yjam.lua:36:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmpwhj3yjam.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 < math.huge and min2 or nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ozhf8nm.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp7ozhf8nm.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hg06pl8.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp8hg06pl8.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9o6dqyd.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpl9o6dqyd.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 ~= math.huge and min2 or\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7u2wko5m.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmp7u2wko5m.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min = math.min(unpack(lst))\n\
    \    local min_count = 0\n    for _, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_count = min_count + 1\n        end\n    end\n    if min_count\
    \ > 1 then\n        return nil\n    end\n    local min_index = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v == min then\n            min_index = i\n   \
    \         break\n        end\n    end\n    table.remove(lst, min_index)\n    return\
    \ math.min(unpack(lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcb460sou.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcb460sou.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpcb460sou.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08kvn3vq.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp08kvn3vq.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 < math.huge and min2 or nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp8c5vxn.lua:31:\
    \ expected: nil, actual: 1\nstack traceback:\n\t/tmp/tmphp8c5vxn.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min = math.min(unpack(lst))\n    local min2\
    \ = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n        if v > min\
    \ and v < min2 then\n            min2 = v\n        end\n    end\n    if min2 ==\
    \ math.max(unpack(lst)) then\n        return nil\n    end\n    return min2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5087qwhw.lua:16:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5087qwhw.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp5087qwhw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp927vkolr.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp927vkolr.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kv7k3s5.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmp1kv7k3s5.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local min = math.min(unpack(lst))\n\
    \  local min2 = min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2\
    \ then\n      min2 = v\n    end\n  end\n  if min2 == min then\n    return nil\n\
    \  else\n    return min2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr61v5d4_.lua:13:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr61v5d4_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpr61v5d4_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyp7b662s.lua:30:\
    \ expected: nil, actual: #Inf\nstack traceback:\n\t/tmp/tmpyp7b662s.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
