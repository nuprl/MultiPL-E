name: HumanEval_80_is_happy
language: lua
results:
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local c1 = s:sub(1,1)\n    local c2 = s:sub(2,2)\n    local c3 =\
    \ s:sub(3,3)\n    if c1 == c2 or c2 == c3 or c1 == c3 then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykary0s2.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpykary0s2.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqp5vp3e.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeqp5vp3e.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local i = 1\n    while i < #s do\n        if s:sub(i, i + 2):match('(.)%1')\
    \ then\n            return false\n        end\n        i = i + 1\n    end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprk_jv90i.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprk_jv90i.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = #s\n    if n < 3 then\n  \
    \      return false\n    end\n    for i = 1, n - 2 do\n        if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    local i = 1\n    while i <= len\
    \ - 2 do\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i +\
    \ 2] then\n            return false\n        end\n        i = i + 1\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pznyq6k.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4pznyq6k.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = #s\n    if n < 3 then\n  \
    \      return false\n    end\n    for i = 1, n - 2 do\n        if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nsysbhr.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_nsysbhr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ui8kyzq.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3ui8kyzq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif #s < 3 then\n\t\treturn false\n\tend\n\
    \tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2):match(\"(.)%1\") then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvynqdsnj.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvynqdsnj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g9hsjuf.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_g9hsjuf.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcppx4h8.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpzcppx4h8.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n       \
    \ if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx43jld7i.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx43jld7i.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pc5qcmh.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp4pc5qcmh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = #s\n  if len < 3 then\n  \
    \  return false\n  end\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n       \
    \ if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmapo9g_.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbmapo9g_.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.)%1%1')\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8hmnmgo.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe8hmnmgo.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    if #s < 3 then\n\
    \        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i + 2):match(\"(.)%1\") then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4ocqqkp.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv4ocqqkp.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxgi0mjv.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpgxgi0mjv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = #s\n  if len < 3 then\n  \
    \  return false\n  end\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local last = s:sub(1, 3)\n    for i = 4, #s do\n        local cur\
    \ = s:sub(i - 2, i)\n        if cur == last then\n            return false\n \
    \       end\n        last = cur\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob7iyzdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpob7iyzdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.)%1')\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsya2hhaj.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsya2hhaj.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local n = s:len()\n  if n < 3 then\n \
    \   return false\n  end\n  for i = 1, n - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv5pgh3b.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpqv5pgh3b.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nvurzjb.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2nvurzjb.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bn0esdx.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3bn0esdx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        local a, b, c = s:sub(i, i), s:sub(i\
    \ + 1, i + 1), s:sub(i + 2, i + 2)\n        if a == b or b == c or a == c then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjokcq4j2.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjokcq4j2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkue86zz.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpbkue86zz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexj6gizk.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpexj6gizk.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    if #s < 3 then\n\
    \        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd432qcp7.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd432qcp7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneezvr86.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpneezvr86.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkavhuxc0.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpkavhuxc0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- Write your code here\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbk_s3cbh.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbk_s3cbh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1%1\") then\n    \
    \  return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo898v2ke.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo898v2ke.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2eyqq_k.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmps2eyqq_k.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    local i = 1\n    while i <= len\
    \ - 2 do\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i +\
    \ 2] then\n            return false\n        end\n        i = i + 1\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqme22rh.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaqme22rh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    local i = 1\n    while i < len\
    \ do\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2] then\n \
    \           return false\n        end\n        i = i + 3\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pnpxvmh.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6pnpxvmh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mli9j0t.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8mli9j0t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjombf2vw.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjombf2vw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rwvyzhc.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp7rwvyzhc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqg3g_2f.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqqg3g_2f.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpym8ynrzr.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpym8ynrzr.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple_sn9_j.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmple_sn9_j.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby3ak0wx.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpby3ak0wx.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    local i = 1\n    while i < len do\n      \
    \  if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n            return false\n\
    \        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuj7wow5k.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuj7wow5k.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cm3ua89.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_cm3ua89.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = string.len(s)\n  if len <\
    \ 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s[i] == s[i\
    \ + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqkxr020.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiqkxr020.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcny3gkwd.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpcny3gkwd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gnsgzk_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3gnsgzk_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpschi7vti.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpschi7vti.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp0g2fh0.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsp0g2fh0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 3, #s do\n        if s:sub(i - 2, i) == s:sub(i - 1, i +\
    \ 1) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtvqh67o.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmtvqh67o.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2gwrax4.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpi2gwrax4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofeg3hst.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpofeg3hst.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklscpm9r.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpklscpm9r.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if s:len() < 3 then\n    return false\n\
    \  end\n  for i = 1, s:len() - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1)\
    \ or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2,\
    \ i + 2) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = string.len(s)\n  if len <\
    \ 3 then\n    return false\n  end\n  local prev = string.sub(s, 1, 1)\n  local\
    \ curr = string.sub(s, 2, 2)\n  for i = 3, len do\n    local next = string.sub(s,\
    \ i, i)\n    if prev == curr or curr == next or prev == next then\n      return\
    \ false\n    end\n    prev = curr\n    curr = next\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local last = s:sub(1, 3)\n  for i = 4, #s do\n    local cur = s:sub(i - 2,\
    \ i)\n    if cur == last then\n      return false\n    end\n    last = cur\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgory7xwj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgory7xwj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local a, b, c = s:sub(1, 1), s:sub(2, 2), s:sub(3, 3)\n    if a\
    \ == b or b == c or a == c then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd49z279q.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd49z279q.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6ldoxm_.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpf6ldoxm_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    local i = 1\n    while i <= len - 2 do\n \
    \       if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i\
    \ + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n       \
    \ if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4as8jkg6.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4as8jkg6.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8deolczz.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8deolczz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjvv9kpc.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsjvv9kpc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sqbbl9t.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6sqbbl9t.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local i = 1\n  while i < #s do\n    if s:sub(i, i+2):match(\"(.)%1%1\") then\n\
    \      return false\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78wb6sxx.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp78wb6sxx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjdtjwbz.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfjdtjwbz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4p5ey_i.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa4p5ey_i.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nawhohd.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp9nawhohd.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdvttorx.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkdvttorx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  if #s < 3 then\n\
    \    return false\n  end\n  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local last_char = s:sub(1, 1)\n  local last_last_char = s:sub(2, 2)\n  for\
    \ i = 3, #s do\n    local char = s:sub(i, i)\n    if char == last_char or char\
    \ == last_last_char then\n      return false\n    end\n    last_last_char = last_char\n\
    \    last_char = char\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = string.len(s)\n  if len <\
    \ 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s[i] == s[i\
    \ + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0biwn17e.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0biwn17e.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnxjxb87.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpxnxjxb87.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i + 2):match('(.)%1') then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp634o6qsq.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp634o6qsq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4jgetx7.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz4jgetx7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3xba3xf.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpx3xba3xf.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq9dydt1.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpmq9dydt1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25ja_hpf.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp25ja_hpf.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb58wa3wy.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpb58wa3wy.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nr7ggdb.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8nr7ggdb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb2rrb0z.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxb2rrb0z.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = string.len(s)\n  if len <\
    \ 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s[i] == s[i\
    \ + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiuuej8x.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgiuuej8x.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  local len = string.len(s)\n\
    \  if len < 3 then\n    return false\n  end\n  local i = 1\n  while i <= len -\
    \ 2 do\n    if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n\
    \      return false\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_3bkofx.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps_3bkofx.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match('(.)%1') then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw2cm6u3.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxw2cm6u3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s:len() < 3 then\n        return\
    \ false\n    end\n    for i = 1, s:len() - 2 do\n        if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    local i = 1\n    while i <= len\
    \ - 2 do\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i +\
    \ 2] then\n            return false\n        end\n        i = i + 1\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydw3_wbv.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpydw3_wbv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n       \
    \ if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposbgsnir.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmposbgsnir.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = #s\n  if len < 3 then\n  \
    \  return false\n  end\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  if #s < 3 then return\
    \ false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1)\
    \ or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2,\
    \ i + 2) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6beff36.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo6beff36.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    if #s < 3 then\n\
    \        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmput57jwyt.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmput57jwyt.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpo0eip8.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpbpo0eip8.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = #s\n  if len < 3 then\n  \
    \  return false\n  end\n  local a = s:sub(1, 1)\n  local b = s:sub(2, 2)\n  local\
    \ c = s:sub(3, 3)\n  if a == b or b == c or a == c then\n    return false\n  end\n\
    \  for i = 4, len do\n    a = b\n    b = c\n    c = s:sub(i, i)\n    if a == b\
    \ or b == c or a == c then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2ww3z5_.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpj2ww3z5_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe082c62.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphe082c62.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5azik68y.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5azik68y.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match('(.)%1')\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoo6gg8ys.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoo6gg8ys.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1n11qkb.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpi1n11qkb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local last = s:sub(1, 3)\n  for i = 4, #s do\n    local c = s:sub(i, i)\n \
    \   if c == last:sub(1, 1) or c == last:sub(2, 2) or c == last:sub(3, 3) then\n\
    \      return false\n    end\n    last = last:sub(2, 3) .. c\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46h52nwm.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp46h52nwm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3_rq7py.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_3_rq7py.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dfu8yz4.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6dfu8yz4.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    if #s < 3 then\n\
    \        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h4ndh0j.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3h4ndh0j.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjq3hvr4.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzjq3hvr4.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl01w68h_.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl01w68h_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local n = #s\n  if n < 3 then\n    return\
    \ false\n  end\n  local i = 1\n  while i <= n - 2 do\n    if s:sub(i, i + 2):match(\"\
    (.)%1%1\") then\n      return false\n    end\n    i = i + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64bvd99z.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp64bvd99z.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qj4nb84.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4qj4nb84.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjka3e4s.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpyjka3e4s.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwr2e7rn.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxwr2e7rn.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gp71qm6.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8gp71qm6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    local len = string.len(s)\n\
    \    if len < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n\
    \        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tua4knk.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5tua4knk.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lc52e8c.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8lc52e8c.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmikbrx9w.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpmikbrx9w.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local n = #s\n  if n < 3 then\n    return\
    \ false\n  end\n  local prev = s:sub(1, 3)\n  for i = 4, n do\n    local curr\
    \ = s:sub(i - 2, i)\n    if prev == curr then\n      return false\n    end\n \
    \   prev = curr\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqto7xai.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplqto7xai.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = #s\n    if n < 3 then\n  \
    \      return false\n    end\n    for i = 1, n - 2 do\n        if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  local len = string.len(s)\n\
    \  if len < 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s[i]\
    \ == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_o9wo5m.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr_o9wo5m.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local i = 1\n  while i <= #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnd29woc.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphnd29woc.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tj4fcy0.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1tj4fcy0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3ky1e8c.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb3ky1e8c.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5e0c5r0.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo5e0c5r0.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4vmu7ht.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt4vmu7ht.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = #s\n    if n < 3 then\n  \
    \      return false\n    end\n    for i = 1, n - 2 do\n        if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbeqncz4.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzbeqncz4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4dzrsw8.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_4dzrsw8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_nnvkb4.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps_nnvkb4.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local last = s:sub(1, 3)\n    for i = 4, #s do\n        local cur\
    \ = s:sub(i - 2, i)\n        if cur == last then\n            return false\n \
    \       end\n        last = cur\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9y5b2aj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj9y5b2aj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = string.len(s)\n    if n <\
    \ 3 then\n        return false\n    end\n    for i = 1, n - 2 do\n        if s[i]\
    \ == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfjdejrg.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzfjdejrg.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    local len = string.len(s)\n\
    \    if len < 3 then\n        return false\n    end\n    local i = 1\n    while\
    \ i <= len - 2 do\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1]\
    \ == s[i + 2] then\n            return false\n        end\n        i = i + 1\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm66j1fk.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvm66j1fk.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bky6t43.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp1bky6t43.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjhd4j4g.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptjhd4j4g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local last_char = s:sub(1, 1)\n    local second_last_char = s:sub(2,\
    \ 2)\n    for i = 3, #s do\n        local current_char = s:sub(i, i)\n       \
    \ if current_char == last_char or current_char == second_last_char then\n    \
    \        return false\n        end\n        second_last_char = last_char\n   \
    \     last_char = current_char\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4weddg_o.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp4weddg_o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhrqsiz5.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxhrqsiz5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match(\"(.)%1\") then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpresuctk6.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpresuctk6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n       \
    \ if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrase_at.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxrase_at.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = #s\n    if n < 3 then\n  \
    \      return false\n    end\n    for i = 1, n - 2 do\n        if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    if #s < 3 then\
    \ return false end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"\
    (.)%1\") then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp89ujtht.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp89ujtht.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5nmi4c3.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi5nmi4c3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local n = #s\n  if n < 3 then\n    return\
    \ false\n  end\n  local i = 1\n  while i <= n - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n    i = i + 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local n = #s\n  if n < 3 then\n    return\
    \ false\n  end\n  for i = 1, n - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = s:len()\n  if len < 3 then\n\
    \    return false\n  end\n  local i = 1\n  while i <= len - 2 do\n    if s:sub(i,\
    \ i + 2):match('(.)%1') then\n      return false\n    end\n    i = i + 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lhw2ewc.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3lhw2ewc.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = #s\n    if len < 3 then\n\
    \        return false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i,\
    \ i + 2):match(\"(.)%1%1\") then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbh3dlmez.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbh3dlmez.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
