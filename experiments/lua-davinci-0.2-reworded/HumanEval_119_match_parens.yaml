---
name: HumanEval_119_match_parens
language: lua
prompt: |
  -- You are given a table of two strings, both strings consist of open
  -- parentheses '(' or close parentheses ')' only.
  -- Your job is to check if it is possible to concatenate the two strings in
  -- some order, that the resulting string will be good.
  -- A string S is considered to be good if and only if all parentheses in S
  -- are balanced. For example: the string '(())()' is good, while the string
  -- '())' is not.
  -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
  -- Examples:
  -- >>> match_parens({'()(', ')'})
  -- 'Yes'
  -- >>> match_parens({')', ')'})
  -- 'No'
  local function match_parens(lst)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = match_parens
      lu.assertEquals(candidate({'()(', ')'}), 'Yes')
      lu.assertEquals(candidate({')', ')'}), 'No')
      lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
      lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
      lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
      lu.assertEquals(candidate({'()', '())'}), 'No')
      lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
      lu.assertEquals(candidate({'((((', '((())'}), 'No')
      lu.assertEquals(candidate({')(()', '(()('}), 'No')
      lu.assertEquals(candidate({')(', ')('}), 'No')
      lu.assertEquals(candidate({'(', ')'}), 'Yes')
      lu.assertEquals(candidate({')', '('}), 'Yes')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local open, close = 0, 0
      for _, s in ipairs(lst) do
          for c in s:gmatch('%(') do open = open + 1 end
          for c in s:gmatch('%)') do close = close + 1 end
      end
      return open == close and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local a, b = lst[1], lst[2]
    local n = #a + #b
    local cnt = 0
    for i = 1, n do
      if i <= #a then
        if a:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
      else
        if b:sub(i - #a, i - #a) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return 'Yes'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local n = n1 + n2
    local cnt = 0
    for i = 1, n do
      local c = (i <= n1) and s1:sub(i, i) or s2:sub(i - n1, i - n1)
      if c == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return (cnt == 0) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for c in s:gmatch('.') do
        if c == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for c in s:gmatch(".") do
        if c == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function count_parens(s)
      local c = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          c = c + 1
        else
          c = c - 1
        end
      end
      return c
    end
    local c1, c2 = count_parens(lst[1]), count_parens(lst[2])
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    elseif c1 == 0 and c2 ~= 0 then
      return 'No'
    elseif c1 ~= 0 and c2 == 0 then
      return 'No'
    elseif c1 > 0 and c2 > 0 then
      return 'No'
    elseif c1 < 0 and c2 < 0 then
      return 'No'
    else
      return 'Yes'
    end
  end
- |2-
    local function count_parens(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
      end
      return cnt
    end
    local a, b = lst[1], lst[2]
    local cnt_a, cnt_b = count_parens(a), count_parens(b)
    if cnt_a == 0 and cnt_b == 0 then
      return 'Yes'
    elseif cnt_a == 0 then
      return 'No'
    elseif cnt_b == 0 then
      return 'No'
    elseif cnt_a * cnt_b < 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for c in str:gmatch('.') do
        if c == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local s1, s2 = lst[1], lst[2]
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for c in s:gmatch('.') do
        if c == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    if is_good(s1) then
      return 'Yes'
    elseif is_good(s2) then
      return 'Yes'
    elseif is_good(s1 .. s2) then
      return 'Yes'
    elseif is_good(s2 .. s1) then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local i, j = 1, 1
    local c1, c2 = 0, 0
    while i <= n1 and j <= n2 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
      if s2:sub(j, j) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
      if c1 < 0 or c2 < 0 then
        return 'No'
      end
      i = i + 1
      j = j + 1
    end
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    end
    if c1 > 0 then
      while i <= n1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
        if c1 < 0 then
          return 'No'
        end
        i = i + 1
      end
    else
      while j <= n2 do
        if s2:sub(j, j) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
        if c2 < 0 then
          return 'No'
        end
        j = j + 1
      end
    end
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    end
    return 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local str1, str2 = lst[1], lst[2]
    return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local p1, p2 = 0, 0
    for i = 1, n1 do
      if s1:sub(i, i) == '(' then
        p1 = p1 + 1
      else
        p1 = p1 - 1
      end
    end
    for i = 1, n2 do
      if s2:sub(i, i) == '(' then
        p2 = p2 + 1
      else
        p2 = p2 - 1
      end
    end
    if p1 + p2 == 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local n = n1 + n2
    local c = 0
    for i = 1, n do
      local c1 = s1:sub(i, i) == '(' and 1 or -1
      local c2 = s2:sub(i, i) == '(' and 1 or -1
      c = c + c1 + c2
      if c < 0 then return 'No' end
    end
    return c == 0 and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local c1, c2 = 0, 0
    for i = 1, #s1 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
    end
    for i = 1, #s2 do
      if s2:sub(i, i) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
    end
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    elseif c1 == 0 and c2 > 0 then
      return 'No'
    elseif c1 > 0 and c2 == 0 then
      return 'No'
    elseif c1 > 0 and c2 > 0 then
      return 'Yes'
    elseif c1 < 0 and c2 < 0 then
      return 'No'
    elseif c1 < 0 and c2 == 0 then
      return 'No'
    elseif c1 == 0 and c2 < 0 then
      return 'No'
    elseif c1 < 0 and c2 > 0 then
      return 'Yes'
    end
  end
- |2-
    local s = lst[1] .. lst[2]
    local c = 0
    for i = 1, #s do
      if s:sub(i, i) == '(' then
        c = c + 1
      else
        c = c - 1
      end
      if c < 0 then
        return 'No'
      end
    end
    return c == 0 and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local open, close = 0, 0
    for _, s in ipairs(lst) do
      for c in s:gmatch('%(') do open = open + 1 end
      for c in s:gmatch('%)') do close = close + 1 end
    end
    return open == close and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local n = n1 + n2
    local cnt = 0
    for i = 1, n do
      local c = i <= n1 and s1:sub(i, i) or s2:sub(i - n1, i - n1)
      if c == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return cnt == 0 and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local cnt = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local open = 0
    local close = 0
    for _, s in ipairs(lst) do
      for c in s:gmatch('.') do
        if c == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
    end
    return (open == close) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local s1, s2 = lst[1], lst[2]
      local function is_good(s)
          local n = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  n = n + 1
              else
                  n = n - 1
              end
              if n < 0 then
                  return false
              end
          end
          return n == 0
      end
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local cnt = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local str1, str2 = lst[1], lst[2]
    return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local n = n1 + n2
    local cnt = 0
    for i = 1, n do
      local c = i <= n1 and s1:sub(i, i) or s2:sub(i - n1, i - n1)
      if c == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return cnt == 0 and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function count_parens(s)
      local c = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          c = c + 1
        else
          c = c - 1
        end
      end
      return c
    end
    if count_parens(lst[1]) + count_parens(lst[2]) == 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(str)
      local cnt = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local n = n1 + n2
    local cnt = 0
    for i = 1, n do
      local c = (i <= n1) and s1:sub(i, i) or s2:sub(i - n1, i - n1)
      if c == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return (cnt == 0) and 'Yes' or 'No'
  end
- |2-
    local open = 0
    local close = 0
    for _, v in ipairs(lst) do
      for _, c in ipairs(v:split('')) do
        if c == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
    end
    return open == close and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local left, right = 0, 0
      for _, v in ipairs(lst) do
          for _, c in ipairs(v) do
              if c == '(' then
                  left = left + 1
              else
                  right = right + 1
              end
          end
      end
      return left == right and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local cnt = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local open = 0
    local close = 0
    for i = 1, #lst[1] do
      if lst[1]:sub(i, i) == '(' then
        open = open + 1
      else
        close = close + 1
      end
    end
    for i = 1, #lst[2] do
      if lst[2]:sub(i, i) == '(' then
        open = open + 1
      else
        close = close + 1
      end
    end
    if open == close then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function check(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return check(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local count = 0
          for c in s:gmatch('.') do
              if c == '(' then
                  count = count + 1
              else
                  count = count - 1
              end
              if count < 0 then
                  return false
              end
          end
          return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local count = 0
          for c in s:gmatch('.') do
              if c == '(' then
                  count = count + 1
              else
                  count = count - 1
              end
              if count < 0 then
                  return false
              end
          end
          return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local count = 0
          for c in s:gmatch('.') do
              if c == '(' then
                  count = count + 1
              else
                  count = count - 1
              end
              if count < 0 then
                  return false
              end
          end
          return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local c1, c2 = 0, 0
    for i = 1, #s1 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
    end
    for i = 1, #s2 do
      if s2:sub(i, i) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
    end
    if c1 < 0 or c2 < 0 then
      return 'No'
    end
    if c1 % 2 == 0 then
      return 'Yes'
    end
    if c2 % 2 == 0 then
      return 'Yes'
    end
    return 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = s1:len(), s2:len()
    local c1, c2 = 0, 0
    for i = 1, n1 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
    end
    for i = 1, n2 do
      if s2:sub(i, i) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
    end
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    elseif c1 == 0 and c2 ~= 0 then
      return 'No'
    elseif c1 ~= 0 and c2 == 0 then
      return 'No'
    elseif c1 < 0 and c2 > 0 then
      return 'Yes'
    elseif c1 > 0 and c2 < 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function check(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return check(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local cnt = 0
      for i = 1, n do
          if i <= n1 then
              if s1:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
          else
              if s2:sub(i - n1, i - n1) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
          end
          if cnt < 0 then
              return 'No'
          end
      end
      return 'Yes'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local c1, c2 = 0, 0
    for i = 1, #s1 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
    end
    for i = 1, #s2 do
      if s2:sub(i, i) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
    end
    if c1 < 0 and c2 < 0 then
      return 'No'
    elseif c1 < 0 and c2 > 0 then
      return 'Yes'
    elseif c1 > 0 and c2 < 0 then
      return 'Yes'
    elseif c1 > 0 and c2 > 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function check(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return check(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local s1, s2 = lst[1], lst[2]
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local open, close = 0, 0
    for i = 1, #lst[1] do
      if lst[1]:sub(i, i) == '(' then
        open = open + 1
      else
        close = close + 1
      end
    end
    for i = 1, #lst[2] do
      if lst[2]:sub(i, i) == '(' then
        open = open + 1
      else
        close = close + 1
      end
    end
    if open == close then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local str1, str2 = lst[1], lst[2]
    return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local s1, s2 = lst[1], lst[2]
      local c1, c2 = 0, 0
      for i = 1, #s1 do
          if s1:sub(i, i) == '(' then
              c1 = c1 + 1
          else
              c1 = c1 - 1
          end
      end
      for i = 1, #s2 do
          if s2:sub(i, i) == '(' then
              c2 = c2 + 1
          else
              c2 = c2 - 1
          end
      end
      if c1 == 0 and c2 == 0 then
          return 'Yes'
      elseif c1 == 0 and c2 < 0 then
          return 'Yes'
      elseif c1 < 0 and c2 == 0 then
          return 'Yes'
      elseif c1 < 0 and c2 < 0 then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local c1, c2 = 0, 0
    for i = 1, #s1 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
    end
    for i = 1, #s2 do
      if s2:sub(i, i) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
    end
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    elseif c1 == 0 and c2 < 0 then
      return 'Yes'
    elseif c1 < 0 and c2 == 0 then
      return 'Yes'
    elseif c1 < 0 and c2 < 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local open, close = 0, 0
    for _, s in ipairs(lst) do
      for c in s:gmatch('%(') do open = open + 1 end
      for c in s:gmatch('%)') do close = close + 1 end
    end
    return open == close and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local str1, str2 = lst[1], lst[2]
    return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
  end
- |2-
    local open, close = 0, 0
    for i = 1, #lst[1] do
      if lst[1]:sub(i, i) == '(' then
        open = open + 1
      else
        close = close + 1
      end
    end
    for i = 1, #lst[2] do
      if lst[2]:sub(i, i) == '(' then
        open = open + 1
      else
        close = close + 1
      end
    end
    if open == close then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(str)
          local cnt = 0
          for i = 1, #str do
              if str:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local s = s1 .. s2
    local cnt = 0
    for i = 1, #s do
      if s:sub(i, i) == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return 'Yes'
  end
- |2-
    local function is_good(s)
      local count = 0
      for c in s:gmatch('.') do
        if c == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return (is_good(s1 .. s2) or is_good(s2 .. s1)) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for _, c in ipairs(str) do
        if c == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local c = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          c = c + 1
        else
          c = c - 1
        end
        if c < 0 then
          return false
        end
      end
      return c == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = s1:len(), s2:len()
    local n = n1 + n2
    local i, j = 1, 1
    local cnt = 0
    while i <= n1 and j <= n2 do
      if s1:sub(i, i) == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if s2:sub(j, j) == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
      i = i + 1
      j = j + 1
    end
    if cnt == 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    if is_good(lst[1]) and is_good(lst[2]) then
      return 'Yes'
    end
    if is_good(lst[1] .. lst[2]) then
      return 'Yes'
    end
    if is_good(lst[2] .. lst[1]) then
      return 'Yes'
    end
    return 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local open = 0
      local close = 0
      for i = 1, #lst[1] do
          if lst[1]:sub(i, i) == '(' then
              open = open + 1
          else
              close = close + 1
          end
      end
      for i = 1, #lst[2] do
          if lst[2]:sub(i, i) == '(' then
              open = open + 1
          else
              close = close + 1
          end
      end
      if open == close then
          return 'Yes'
      else
          return 'No'
      end
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local s = s1 .. s2
    local cnt = 0
    for i = 1, #s do
      local c = s:sub(i, i)
      if c == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return cnt == 0 and 'Yes' or 'No'
  end
- |2-
      local function is_good(str)
          local count = 0
          for i = 1, #str do
              local c = str:sub(i, i)
              if c == '(' then
                  count = count + 1
              else
                  count = count - 1
              end
              if count < 0 then
                  return false
              end
          end
          return count == 0
      end
      local str1, str2 = lst[1], lst[2]
      return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local s1, s2 = lst[1], lst[2]
      local s = s1 .. s2
      local cnt = 0
      for i = 1, #s do
          if s:sub(i, i) == '(' then
              cnt = cnt + 1
          else
              cnt = cnt - 1
          end
          if cnt < 0 then
              return 'No'
          end
      end
      return 'Yes'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local str1, str2 = lst[1], lst[2]
    if is_good(str1) and is_good(str2) then
      return 'Yes'
    end
    if is_good(str1 .. str2) then
      return 'Yes'
    end
    if is_good(str2 .. str1) then
      return 'Yes'
    end
    return 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local function is_good(s)
          local cnt = 0
          for i = 1, #s do
              if s:sub(i, i) == '(' then
                  cnt = cnt + 1
              else
                  cnt = cnt - 1
              end
              if cnt < 0 then
                  return false
              end
          end
          return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function check(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return check(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local n1, n2 = #s1, #s2
    local n = n1 + n2
    local cnt = 0
    for i = 1, n do
      local c = (i <= n1) and s1:sub(i, i) or s2:sub(i - n1, i - n1)
      if c == '(' then
        cnt = cnt + 1
      else
        cnt = cnt - 1
      end
      if cnt < 0 then
        return 'No'
      end
    end
    return (cnt == 0) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local cnt = 0
      for i = 1, n do
          local c = i <= n1 and s1:sub(i, i) or s2:sub(i - n1, i - n1)
          if c == '(' then
              cnt = cnt + 1
          else
              cnt = cnt - 1
          end
          if cnt < 0 then
              return 'No'
          end
      end
      return cnt == 0 and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local c1, c2 = 0, 0
    for i = 1, #s1 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
    end
    for i = 1, #s2 do
      if s2:sub(i, i) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
    end
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    elseif c1 > 0 and c2 < 0 and c1 + c2 == 0 then
      return 'Yes'
    elseif c1 < 0 and c2 > 0 and c1 + c2 == 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function check(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return check(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
      local open, close = 0, 0
      for _, s in ipairs(lst) do
          for c in s:gmatch('%(') do open = open + 1 end
          for c in s:gmatch('%)') do close = close + 1 end
      end
      return (open == close) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local cnt = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
  end
- |2-
    local open, close = 0, 0
    for _, s in ipairs(lst) do
      for c in s:gmatch('%(') do open = open + 1 end
      for c in s:gmatch('%)') do close = close + 1 end
    end
    return open == close and 'Yes' or 'No'
  end
- |2-
    local function count_parens(s)
      local c = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          c = c + 1
        else
          c = c - 1
        end
      end
      return c
    end
    local c1, c2 = count_parens(lst[1]), count_parens(lst[2])
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    elseif c1 == 0 and c2 < 0 then
      return 'Yes'
    elseif c1 > 0 and c2 == 0 then
      return 'Yes'
    elseif c1 > 0 and c2 < 0 and c1 == -c2 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function is_good(str)
      local cnt = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local open, close = 0, 0
    for _, v in ipairs(lst) do
      for c in v:gmatch('%(') do open = open + 1 end
      for c in v:gmatch('%)') do close = close + 1 end
    end
    return open == close and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local count = 0
      for i = 1, #str do
        local c = str:sub(i, i)
        if c == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    local s1, s2 = lst[1], lst[2]
    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local c1, c2 = 0, 0
    for i = 1, #s1 do
      if s1:sub(i, i) == '(' then
        c1 = c1 + 1
      else
        c1 = c1 - 1
      end
    end
    for i = 1, #s2 do
      if s2:sub(i, i) == '(' then
        c2 = c2 + 1
      else
        c2 = c2 - 1
      end
    end
    if c1 == 0 and c2 == 0 then
      return 'Yes'
    elseif c1 == 0 and c2 < 0 then
      return 'Yes'
    elseif c1 < 0 and c2 == 0 then
      return 'Yes'
    elseif c1 < 0 and c2 < 0 then
      return 'Yes'
    else
      return 'No'
    end
  end
- |2-
    local function check(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return check(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local s1, s2 = lst[1], lst[2]
    local function is_good(s)
      local count = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    if is_good(s1) and is_good(s2) then
      return 'Yes'
    end
    if is_good(s1 .. s2) then
      return 'Yes'
    end
    if is_good(s2 .. s1) then
      return 'Yes'
    end
    return 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(s)
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local function is_good(str)
      local cnt = 0
      for i = 1, #str do
        if str:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return false
        end
      end
      return cnt == 0
    end
    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
  end
- |2-
    local l, r = lst[1], lst[2]
    local lc, rc = 0, 0
    for i = 1, #l do
      if l:sub(i, i) == '(' then
        lc = lc + 1
      else
        lc = lc - 1
      end
    end
    for i = 1, #r do
      if r:sub(i, i) == '(' then
        rc = rc + 1
      else
        rc = rc - 1
      end
    end
    if lc == rc then
      return 'Yes'
    else
      return 'No'
    end
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
