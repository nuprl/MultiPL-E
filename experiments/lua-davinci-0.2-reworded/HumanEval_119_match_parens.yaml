name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a table of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\n-- >>> match_parens({'()(',\
  \ ')'})\n-- 'Yes'\n-- >>> match_parens({')', ')'})\n-- 'No'\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function is_good(str)\n    local count = 0\n    for i = 1,\
    \ #str do\n      if str:sub(i, i) == '(' then\n        count = count + 1\n   \
    \   else\n        count = count - 1\n      end\n      if count < 0 then\n    \
    \    return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ open, close = 0, 0\n    for _, s in ipairs(lst) do\n        for c in s:gmatch('%(')\
    \ do open = open + 1 end\n        for c in s:gmatch('%)') do close = close + 1\
    \ end\n    end\n    return open == close and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \   local function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n\
    \            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n     \
    \       else\n                cnt = cnt - 1\n            end\n            if cnt\
    \ < 0 then\n                return false\n            end\n        end\n     \
    \   return cnt == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or\
    \ 'No'\nend", "  local a, b = lst[1], lst[2]\n  local n = #a + #b\n  local cnt\
    \ = 0\n  for i = 1, n do\n    if i <= #a then\n      if a:sub(i, i) == '(' then\n\
    \        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n    else\n\
    \      if b:sub(i - #a, i - #a) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n    end\n    if cnt < 0 then\n      return\
    \ 'No'\n    end\n  end\n  return 'Yes'\nend", "  local function is_good(s)\n \
    \   local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n  \
    \      cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt\
    \ < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n  end\n\
    \  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local s1, s2 = lst[1], lst[2]\n  local n1, n2 = #s1, #s2\n  local n = n1 + n2\n\
    \  local cnt = 0\n  for i = 1, n do\n    local c = (i <= n1) and s1:sub(i, i)\
    \ or s2:sub(i - n1, i - n1)\n    if c == '(' then\n      cnt = cnt + 1\n    else\n\
    \      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return 'No'\n    end\n\
    \  end\n  return (cnt == 0) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for c in s:gmatch('.') do\n      if c == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for c in s:gmatch(\".\") do\n      if c == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function count_parens(s)\n\
    \    local c = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n   \
    \     c = c + 1\n      else\n        c = c - 1\n      end\n    end\n    return\
    \ c\n  end\n  local c1, c2 = count_parens(lst[1]), count_parens(lst[2])\n  if\
    \ c1 == 0 and c2 == 0 then\n    return 'Yes'\n  elseif c1 == 0 and c2 ~= 0 then\n\
    \    return 'No'\n  elseif c1 ~= 0 and c2 == 0 then\n    return 'No'\n  elseif\
    \ c1 > 0 and c2 > 0 then\n    return 'No'\n  elseif c1 < 0 and c2 < 0 then\n \
    \   return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local function count_parens(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n    end\n\
    \    return cnt\n  end\n  local a, b = lst[1], lst[2]\n  local cnt_a, cnt_b =\
    \ count_parens(a), count_parens(b)\n  if cnt_a == 0 and cnt_b == 0 then\n    return\
    \ 'Yes'\n  elseif cnt_a == 0 then\n    return 'No'\n  elseif cnt_b == 0 then\n\
    \    return 'No'\n  elseif cnt_a * cnt_b < 0 then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local function is_good(s)\n    local cnt = 0\n\
    \    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(str)\n    local\
    \ count = 0\n    for c in str:gmatch('.') do\n      if c == '(' then\n       \
    \ count = count + 1\n      else\n        count = count - 1\n      end\n      if\
    \ count < 0 then\n        return false\n      end\n    end\n    return count ==\
    \ 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ s1, s2 = lst[1], lst[2]\n    local function is_good(s)\n        local cnt =\
    \ 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n      \
    \          cnt = cnt + 1\n            else\n                cnt = cnt - 1\n  \
    \          end\n            if cnt < 0 then\n                return false\n  \
    \          end\n        end\n        return cnt == 0\n    end\n    return is_good(s1\
    \ .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(str)\n\
    \    local count = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local count = 0\n    for c in s:gmatch('.') do\n\
    \      if c == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  if is_good(s1) then\n    return 'Yes'\n  elseif is_good(s2) then\n    return\
    \ 'Yes'\n  elseif is_good(s1 .. s2) then\n    return 'Yes'\n  elseif is_good(s2\
    \ .. s1) then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local\
    \ s1, s2 = lst[1], lst[2]\n  local n1, n2 = #s1, #s2\n  local i, j = 1, 1\n  local\
    \ c1, c2 = 0, 0\n  while i <= n1 and j <= n2 do\n    if s1:sub(i, i) == '(' then\n\
    \      c1 = c1 + 1\n    else\n      c1 = c1 - 1\n    end\n    if s2:sub(j, j)\
    \ == '(' then\n      c2 = c2 + 1\n    else\n      c2 = c2 - 1\n    end\n    if\
    \ c1 < 0 or c2 < 0 then\n      return 'No'\n    end\n    i = i + 1\n    j = j\
    \ + 1\n  end\n  if c1 == 0 and c2 == 0 then\n    return 'Yes'\n  end\n  if c1\
    \ > 0 then\n    while i <= n1 do\n      if s1:sub(i, i) == '(' then\n        c1\
    \ = c1 + 1\n      else\n        c1 = c1 - 1\n      end\n      if c1 < 0 then\n\
    \        return 'No'\n      end\n      i = i + 1\n    end\n  else\n    while j\
    \ <= n2 do\n      if s2:sub(j, j) == '(' then\n        c2 = c2 + 1\n      else\n\
    \        c2 = c2 - 1\n      end\n      if c2 < 0 then\n        return 'No'\n \
    \     end\n      j = j + 1\n    end\n  end\n  if c1 == 0 and c2 == 0 then\n  \
    \  return 'Yes'\n  end\n  return 'No'\nend", "  local function is_good(s)\n  \
    \  local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n   \
    \     cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt\
    \ < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n  end\n\
    \  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(str)\n    local count = 0\n    for i = 1, #str do\n \
    \     if str:sub(i, i) == '(' then\n        count = count + 1\n      else\n  \
    \      count = count - 1\n      end\n      if count < 0 then\n        return false\n\
    \      end\n    end\n    return count == 0\n  end\n  local str1, str2 = lst[1],\
    \ lst[2]\n  return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or\
    \ 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n  local n1, n2 =\
    \ #s1, #s2\n  local p1, p2 = 0, 0\n  for i = 1, n1 do\n    if s1:sub(i, i) ==\
    \ '(' then\n      p1 = p1 + 1\n    else\n      p1 = p1 - 1\n    end\n  end\n \
    \ for i = 1, n2 do\n    if s2:sub(i, i) == '(' then\n      p2 = p2 + 1\n    else\n\
    \      p2 = p2 - 1\n    end\n  end\n  if p1 + p2 == 0 then\n    return 'Yes'\n\
    \  else\n    return 'No'\n  end\nend", "  local s1, s2 = lst[1], lst[2]\n  local\
    \ n1, n2 = #s1, #s2\n  local n = n1 + n2\n  local c = 0\n  for i = 1, n do\n \
    \   local c1 = s1:sub(i, i) == '(' and 1 or -1\n    local c2 = s2:sub(i, i) ==\
    \ '(' and 1 or -1\n    c = c + c1 + c2\n    if c < 0 then return 'No' end\n  end\n\
    \  return c == 0 and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(str)\n\
    \    local count = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "    local function is_good(s)\n        local cnt = 0\n     \
    \   for i = 1, #s do\n            if s:sub(i, i) == '(' then\n               \
    \ cnt = cnt + 1\n            else\n                cnt = cnt - 1\n           \
    \ end\n            if cnt < 0 then\n                return false\n           \
    \ end\n        end\n        return cnt == 0\n    end\n    local s1, s2 = lst[1],\
    \ lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\n\
    end", "  local function is_good(str)\n    local count = 0\n    for i = 1, #str\
    \ do\n      if str:sub(i, i) == '(' then\n        count = count + 1\n      else\n\
    \        count = count - 1\n      end\n      if count < 0 then\n        return\
    \ false\n      end\n    end\n    return count == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n  local\
    \ c1, c2 = 0, 0\n  for i = 1, #s1 do\n    if s1:sub(i, i) == '(' then\n      c1\
    \ = c1 + 1\n    else\n      c1 = c1 - 1\n    end\n  end\n  for i = 1, #s2 do\n\
    \    if s2:sub(i, i) == '(' then\n      c2 = c2 + 1\n    else\n      c2 = c2 -\
    \ 1\n    end\n  end\n  if c1 == 0 and c2 == 0 then\n    return 'Yes'\n  elseif\
    \ c1 == 0 and c2 > 0 then\n    return 'No'\n  elseif c1 > 0 and c2 == 0 then\n\
    \    return 'No'\n  elseif c1 > 0 and c2 > 0 then\n    return 'Yes'\n  elseif\
    \ c1 < 0 and c2 < 0 then\n    return 'No'\n  elseif c1 < 0 and c2 == 0 then\n\
    \    return 'No'\n  elseif c1 == 0 and c2 < 0 then\n    return 'No'\n  elseif\
    \ c1 < 0 and c2 > 0 then\n    return 'Yes'\n  end\nend", "  local s = lst[1] ..\
    \ lst[2]\n  local c = 0\n  for i = 1, #s do\n    if s:sub(i, i) == '(' then\n\
    \      c = c + 1\n    else\n      c = c - 1\n    end\n    if c < 0 then\n    \
    \  return 'No'\n    end\n  end\n  return c == 0 and 'Yes' or 'No'\nend", "   \
    \ local function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n\
    \            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n     \
    \       else\n                cnt = cnt - 1\n            end\n            if cnt\
    \ < 0 then\n                return false\n            end\n        end\n     \
    \   return cnt == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return is_good(s1\
    \ .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  local\
    \ s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local open, close = 0, 0\n  for _, s in ipairs(lst)\
    \ do\n    for c in s:gmatch('%(') do open = open + 1 end\n    for c in s:gmatch('%)')\
    \ do close = close + 1 end\n  end\n  return open == close and 'Yes' or 'No'\n\
    end", "  local s1, s2 = lst[1], lst[2]\n  local n1, n2 = #s1, #s2\n  local n =\
    \ n1 + n2\n  local cnt = 0\n  for i = 1, n do\n    local c = i <= n1 and s1:sub(i,\
    \ i) or s2:sub(i - n1, i - n1)\n    if c == '(' then\n      cnt = cnt + 1\n  \
    \  else\n      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return 'No'\n\
    \    end\n  end\n  return cnt == 0 and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(str)\n    local cnt = 0\n    for i\
    \ = 1, #str do\n      if str:sub(i, i) == '(' then\n        cnt = cnt + 1\n  \
    \    else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1],\
    \ lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\n\
    end", "  local function is_good(str)\n    local count = 0\n    for i = 1, #str\
    \ do\n      if str:sub(i, i) == '(' then\n        count = count + 1\n      else\n\
    \        count = count - 1\n      end\n      if count < 0 then\n        return\
    \ false\n      end\n    end\n    return count == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  for _, s in ipairs(lst) do\n    for c in s:gmatch('.') do\n   \
    \   if c == '(' then\n        open = open + 1\n      else\n        close = close\
    \ + 1\n      end\n    end\n  end\n  return (open == close) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n       \
    \ local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ s1, s2 = lst[1], lst[2]\n    local function is_good(s)\n        local n = 0\n\
    \        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n          \
    \      n = n + 1\n            else\n                n = n - 1\n            end\n\
    \            if n < 0 then\n                return false\n            end\n  \
    \      end\n        return n == 0\n    end\n    return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "  local function is_good(str)\n    local cnt\
    \ = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  local\
    \ str1, str2 = lst[1], lst[2]\n  return is_good(str1 .. str2) or is_good(str2\
    \ .. str1) and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n  local\
    \ n1, n2 = #s1, #s2\n  local n = n1 + n2\n  local cnt = 0\n  for i = 1, n do\n\
    \    local c = i <= n1 and s1:sub(i, i) or s2:sub(i - n1, i - n1)\n    if c ==\
    \ '(' then\n      cnt = cnt + 1\n    else\n      cnt = cnt - 1\n    end\n    if\
    \ cnt < 0 then\n      return 'No'\n    end\n  end\n  return cnt == 0 and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(str)\n    local count = 0\n\
    \    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function count_parens(s)\n\
    \    local c = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n   \
    \     c = c + 1\n      else\n        c = c - 1\n      end\n    end\n    return\
    \ c\n  end\n  if count_parens(lst[1]) + count_parens(lst[2]) == 0 then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local function is_good(str)\n\
    \    local cnt = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n\
    \        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local s1,\
    \ s2 = lst[1], lst[2]\n  local n1, n2 = #s1, #s2\n  local n = n1 + n2\n  local\
    \ cnt = 0\n  for i = 1, n do\n    local c = (i <= n1) and s1:sub(i, i) or s2:sub(i\
    \ - n1, i - n1)\n    if c == '(' then\n      cnt = cnt + 1\n    else\n      cnt\
    \ = cnt - 1\n    end\n    if cnt < 0 then\n      return 'No'\n    end\n  end\n\
    \  return (cnt == 0) and 'Yes' or 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  for _, v in ipairs(lst) do\n    for _, c in ipairs(v:split('')) do\n\
    \      if c == '(' then\n        open = open + 1\n      else\n        close =\
    \ close + 1\n      end\n    end\n  end\n  return open == close and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local left, right = 0, 0\n    for _, v in ipairs(lst)\
    \ do\n        for _, c in ipairs(v) do\n            if c == '(' then\n       \
    \         left = left + 1\n            else\n                right = right + 1\n\
    \            end\n        end\n    end\n    return left == right and 'Yes' or\
    \ 'No'\nend", "  local function is_good(str)\n    local cnt = 0\n    for i = 1,\
    \ #str do\n      if str:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst[1] do\n    if lst[1]:sub(i, i) == '(' then\n      open = open + 1\n   \
    \ else\n      close = close + 1\n    end\n  end\n  for i = 1, #lst[2] do\n   \
    \ if lst[2]:sub(i, i) == '(' then\n      open = open + 1\n    else\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local function is_good(s)\n    local cnt = 0\n\
    \    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  local s1, s2\
    \ = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local count = 0\n\
    \    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function check(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return check(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local count\
    \ = 0\n        for c in s:gmatch('.') do\n            if c == '(' then\n     \
    \           count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i)\
    \ == '(' then\n        count = count + 1\n      else\n        count = count -\
    \ 1\n      end\n      if count < 0 then\n        return false\n      end\n   \
    \ end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(str)\n    local count = 0\n    for\
    \ i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count +\
    \ 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n     \
    \ if s:sub(i, i) == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local count\
    \ = 0\n        for c in s:gmatch('.') do\n            if c == '(' then\n     \
    \           count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local function\
    \ is_good(s)\n        local count = 0\n        for c in s:gmatch('.') do\n   \
    \         if c == '(' then\n                count = count + 1\n            else\n\
    \                count = count - 1\n            end\n            if count < 0\
    \ then\n                return false\n            end\n        end\n        return\
    \ count == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "  local s1, s2 = lst[1], lst[2]\n  local function is_good(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count\
    \ = count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count\
    \ = count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local s1,\
    \ s2 = lst[1], lst[2]\n  local c1, c2 = 0, 0\n  for i = 1, #s1 do\n    if s1:sub(i,\
    \ i) == '(' then\n      c1 = c1 + 1\n    else\n      c1 = c1 - 1\n    end\n  end\n\
    \  for i = 1, #s2 do\n    if s2:sub(i, i) == '(' then\n      c2 = c2 + 1\n   \
    \ else\n      c2 = c2 - 1\n    end\n  end\n  if c1 < 0 or c2 < 0 then\n    return\
    \ 'No'\n  end\n  if c1 % 2 == 0 then\n    return 'Yes'\n  end\n  if c2 % 2 ==\
    \ 0 then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local s1, s2 = lst[1],\
    \ lst[2]\n  local n1, n2 = s1:len(), s2:len()\n  local c1, c2 = 0, 0\n  for i\
    \ = 1, n1 do\n    if s1:sub(i, i) == '(' then\n      c1 = c1 + 1\n    else\n \
    \     c1 = c1 - 1\n    end\n  end\n  for i = 1, n2 do\n    if s2:sub(i, i) ==\
    \ '(' then\n      c2 = c2 + 1\n    else\n      c2 = c2 - 1\n    end\n  end\n \
    \ if c1 == 0 and c2 == 0 then\n    return 'Yes'\n  elseif c1 == 0 and c2 ~= 0\
    \ then\n    return 'No'\n  elseif c1 ~= 0 and c2 == 0 then\n    return 'No'\n\
    \  elseif c1 < 0 and c2 > 0 then\n    return 'Yes'\n  elseif c1 > 0 and c2 < 0\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function check(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return check(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "    local s1, s2 = lst[1], lst[2]\n    local n1, n2 = #s1, #s2\n    local\
    \ n = n1 + n2\n    local cnt = 0\n    for i = 1, n do\n        if i <= n1 then\n\
    \            if s1:sub(i, i) == '(' then\n                cnt = cnt + 1\n    \
    \        else\n                cnt = cnt - 1\n            end\n        else\n\
    \            if s2:sub(i - n1, i - n1) == '(' then\n                cnt = cnt\
    \ + 1\n            else\n                cnt = cnt - 1\n            end\n    \
    \    end\n        if cnt < 0 then\n            return 'No'\n        end\n    end\n\
    \    return 'Yes'\nend", "  local function is_good(s)\n    local cnt = 0\n   \
    \ for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i)\
    \ == '(' then\n        count = count + 1\n      else\n        count = count -\
    \ 1\n      end\n      if count < 0 then\n        return false\n      end\n   \
    \ end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n  local c1, c2 = 0, 0\n  for\
    \ i = 1, #s1 do\n    if s1:sub(i, i) == '(' then\n      c1 = c1 + 1\n    else\n\
    \      c1 = c1 - 1\n    end\n  end\n  for i = 1, #s2 do\n    if s2:sub(i, i) ==\
    \ '(' then\n      c2 = c2 + 1\n    else\n      c2 = c2 - 1\n    end\n  end\n \
    \ if c1 < 0 and c2 < 0 then\n    return 'No'\n  elseif c1 < 0 and c2 > 0 then\n\
    \    return 'Yes'\n  elseif c1 > 0 and c2 < 0 then\n    return 'Yes'\n  elseif\
    \ c1 > 0 and c2 > 0 then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "    local function check(s)\n        local cnt = 0\n       \
    \ for i = 1, #s do\n            if s:sub(i, i) == '(' then\n                cnt\
    \ = cnt + 1\n            else\n                cnt = cnt - 1\n            end\n\
    \            if cnt < 0 then\n                return false\n            end\n\
    \        end\n        return cnt == 0\n    end\n    return check(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local s1, s2 = lst[1], lst[2]\n    local function\
    \ is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n            if\
    \ s:sub(i, i) == '(' then\n                cnt = cnt + 1\n            else\n \
    \               cnt = cnt - 1\n            end\n            if cnt < 0 then\n\
    \                return false\n            end\n        end\n        return cnt\
    \ == 0\n    end\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or\
    \ 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i = 1,\
    \ #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local open, close = 0, 0\n  for i = 1, #lst[1] do\n\
    \    if lst[1]:sub(i, i) == '(' then\n      open = open + 1\n    else\n      close\
    \ = close + 1\n    end\n  end\n  for i = 1, #lst[2] do\n    if lst[2]:sub(i, i)\
    \ == '(' then\n      open = open + 1\n    else\n      close = close + 1\n    end\n\
    \  end\n  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n \
    \ end\nend", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s\
    \ do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n  \
    \      cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(str)\n    local count = 0\n\
    \    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(str)\n    local count = 0\n    for i = 1, #str do\n      if str:sub(i,\
    \ i) == '(' then\n        count = count + 1\n      else\n        count = count\
    \ - 1\n      end\n      if count < 0 then\n        return false\n      end\n \
    \   end\n    return count == 0\n  end\n  local str1, str2 = lst[1], lst[2]\n \
    \ return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'\nend",
  "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "    local s1, s2 = lst[1], lst[2]\n    local c1, c2\
    \ = 0, 0\n    for i = 1, #s1 do\n        if s1:sub(i, i) == '(' then\n       \
    \     c1 = c1 + 1\n        else\n            c1 = c1 - 1\n        end\n    end\n\
    \    for i = 1, #s2 do\n        if s2:sub(i, i) == '(' then\n            c2 =\
    \ c2 + 1\n        else\n            c2 = c2 - 1\n        end\n    end\n    if\
    \ c1 == 0 and c2 == 0 then\n        return 'Yes'\n    elseif c1 == 0 and c2 <\
    \ 0 then\n        return 'Yes'\n    elseif c1 < 0 and c2 == 0 then\n        return\
    \ 'Yes'\n    elseif c1 < 0 and c2 < 0 then\n        return 'Yes'\n    else\n \
    \       return 'No'\n    end\nend", "  local s1, s2 = lst[1], lst[2]\n  local\
    \ c1, c2 = 0, 0\n  for i = 1, #s1 do\n    if s1:sub(i, i) == '(' then\n      c1\
    \ = c1 + 1\n    else\n      c1 = c1 - 1\n    end\n  end\n  for i = 1, #s2 do\n\
    \    if s2:sub(i, i) == '(' then\n      c2 = c2 + 1\n    else\n      c2 = c2 -\
    \ 1\n    end\n  end\n  if c1 == 0 and c2 == 0 then\n    return 'Yes'\n  elseif\
    \ c1 == 0 and c2 < 0 then\n    return 'Yes'\n  elseif c1 < 0 and c2 == 0 then\n\
    \    return 'Yes'\n  elseif c1 < 0 and c2 < 0 then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local open, close = 0, 0\n  for _, s in ipairs(lst)\
    \ do\n    for c in s:gmatch('%(') do open = open + 1 end\n    for c in s:gmatch('%)')\
    \ do close = close + 1 end\n  end\n  return open == close and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        count = count + 1\n      else\n   \
    \     count = count - 1\n      end\n      if count < 0 then\n        return false\n\
    \      end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] ..\
    \ lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(s)\n        local\
    \ cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n\
    \                cnt = cnt + 1\n            else\n                cnt = cnt -\
    \ 1\n            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local count = 0\n    for i\
    \ = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count + 1\n  \
    \    else\n        count = count - 1\n      end\n      if count < 0 then\n   \
    \     return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \   local function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n\
    \            if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n     \
    \       else\n                cnt = cnt - 1\n            end\n            if cnt\
    \ < 0 then\n                return false\n            end\n        end\n     \
    \   return cnt == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or\
    \ 'No'\nend", "  local function is_good(str)\n    local count = 0\n    for i =\
    \ 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count + 1\n\
    \      else\n        count = count - 1\n      end\n      if count < 0 then\n \
    \       return false\n      end\n    end\n    return count == 0\n  end\n  local\
    \ str1, str2 = lst[1], lst[2]\n  return is_good(str1 .. str2) or is_good(str2\
    \ .. str1) and 'Yes' or 'No'\nend", "  local open, close = 0, 0\n  for i = 1,\
    \ #lst[1] do\n    if lst[1]:sub(i, i) == '(' then\n      open = open + 1\n   \
    \ else\n      close = close + 1\n    end\n  end\n  for i = 1, #lst[2] do\n   \
    \ if lst[2]:sub(i, i) == '(' then\n      open = open + 1\n    else\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "    local function is_good(s)\n        local cnt\
    \ = 0\n        for i = 1, #s do\n            if s:sub(i, i) == '(' then\n    \
    \            cnt = cnt + 1\n            else\n                cnt = cnt - 1\n\
    \            end\n            if cnt < 0 then\n                return false\n\
    \            end\n        end\n        return cnt == 0\n    end\n    return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "    local function is_good(str)\n     \
    \   local cnt = 0\n        for i = 1, #str do\n            if str:sub(i, i) ==\
    \ '(' then\n                cnt = cnt + 1\n            else\n                cnt\
    \ = cnt - 1\n            end\n            if cnt < 0 then\n                return\
    \ false\n            end\n        end\n        return cnt == 0\n    end\n    local\
    \ s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function is_good(str)\n    local count = 0\n \
    \   for i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1],\
    \ lst[2]\n  local s = s1 .. s2\n  local cnt = 0\n  for i = 1, #s do\n    if s:sub(i,\
    \ i) == '(' then\n      cnt = cnt + 1\n    else\n      cnt = cnt - 1\n    end\n\
    \    if cnt < 0 then\n      return 'No'\n    end\n  end\n  return 'Yes'\nend",
  "  local function is_good(s)\n    local count = 0\n    for c in s:gmatch('.') do\n\
    \      if c == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return (is_good(s1 .. s2) or is_good(s2 .. s1)) and 'Yes' or 'No'\nend", " \
    \ local function is_good(str)\n    local count = 0\n    for _, c in ipairs(str)\
    \ do\n      if c == '(' then\n        count = count + 1\n      else\n        count\
    \ = count - 1\n      end\n      if count < 0 then\n        return false\n    \
    \  end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local c = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n   \
    \     c = c + 1\n      else\n        c = c - 1\n      end\n      if c < 0 then\n\
    \        return false\n      end\n    end\n    return c == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2\
    \ .. s1) and 'Yes' or 'No'\nend", "  local function is_good(str)\n    local count\
    \ = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n        count\
    \ = count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n     \
    \       if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n          \
    \  else\n                cnt = cnt - 1\n            end\n            if cnt <\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return cnt == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or\
    \ 'No'\nend", "  local function is_good(str)\n    local count = 0\n    for i =\
    \ 1, #str do\n      if str:sub(i, i) == '(' then\n        count = count + 1\n\
    \      else\n        count = count - 1\n      end\n      if count < 0 then\n \
    \       return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      local c = s:sub(i,\
    \ i)\n      if c == '(' then\n        cnt = cnt + 1\n      else\n        cnt =\
    \ cnt - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n\
    \    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return (is_good(lst[1]) and\
    \ is_good(lst[2])) and 'Yes' or 'No'\nend", "    local function is_good(s)\n \
    \       local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) ==\
    \ '(' then\n                cnt = cnt + 1\n            else\n                cnt\
    \ = cnt - 1\n            end\n            if cnt < 0 then\n                return\
    \ false\n            end\n        end\n        return cnt == 0\n    end\n    local\
    \ s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2) or is_good(s2 .. s1) and\
    \ 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for\
    \ i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n    \
    \  else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return\
    \ false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "  local s1, s2 = lst[1], lst[2]\n  local n1, n2 = s1:len(), s2:len()\n  local n\
    \ = n1 + n2\n  local i, j = 1, 1\n  local cnt = 0\n  while i <= n1 and j <= n2\
    \ do\n    if s1:sub(i, i) == '(' then\n      cnt = cnt + 1\n    else\n      cnt\
    \ = cnt - 1\n    end\n    if s2:sub(j, j) == '(' then\n      cnt = cnt + 1\n \
    \   else\n      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return 'No'\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  if cnt == 0 then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local function is_good(str)\n\
    \    local count = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  if is_good(lst[1]) and is_good(lst[2]) then\n    return\
    \ 'Yes'\n  end\n  if is_good(lst[1] .. lst[2]) then\n    return 'Yes'\n  end\n\
    \  if is_good(lst[2] .. lst[1]) then\n    return 'Yes'\n  end\n  return 'No'\n\
    end", "  local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        count = count + 1\n      else\n   \
    \     count = count - 1\n      end\n      if count < 0 then\n        return false\n\
    \      end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] ..\
    \ lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      local c = s:sub(i, i)\n      if c == '(' then\n\
    \        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2) or\
    \ is_good(s2 .. s1) and 'Yes' or 'No'\nend", "    local function is_good(s)\n\
    \        local cnt = 0\n        for i = 1, #s do\n            if s:sub(i, i) ==\
    \ '(' then\n                cnt = cnt + 1\n            else\n                cnt\
    \ = cnt - 1\n            end\n            if cnt < 0 then\n                return\
    \ false\n            end\n        end\n        return cnt == 0\n    end\n    return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ open = 0\n    local close = 0\n    for i = 1, #lst[1] do\n        if lst[1]:sub(i,\
    \ i) == '(' then\n            open = open + 1\n        else\n            close\
    \ = close + 1\n        end\n    end\n    for i = 1, #lst[2] do\n        if lst[2]:sub(i,\
    \ i) == '(' then\n            open = open + 1\n        else\n            close\
    \ = close + 1\n        end\n    end\n    if open == close then\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  local s1, s2\
    \ = lst[1], lst[2]\n  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes'\
    \ or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n  local s = s1 .. s2\n  local\
    \ cnt = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == '(' then\n\
    \      cnt = cnt + 1\n    else\n      cnt = cnt - 1\n    end\n    if cnt < 0 then\n\
    \      return 'No'\n    end\n  end\n  return cnt == 0 and 'Yes' or 'No'\nend",
  "    local function is_good(str)\n        local count = 0\n        for i = 1, #str\
    \ do\n            local c = str:sub(i, i)\n            if c == '(' then\n    \
    \            count = count + 1\n            else\n                count = count\
    \ - 1\n            end\n            if count < 0 then\n                return\
    \ false\n            end\n        end\n        return count == 0\n    end\n  \
    \  local str1, str2 = lst[1], lst[2]\n    return is_good(str1 .. str2) or is_good(str2\
    \ .. str1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local s1, s2 = lst[1],\
    \ lst[2]\n    local s = s1 .. s2\n    local cnt = 0\n    for i = 1, #s do\n  \
    \      if s:sub(i, i) == '(' then\n            cnt = cnt + 1\n        else\n \
    \           cnt = cnt - 1\n        end\n        if cnt < 0 then\n            return\
    \ 'No'\n        end\n    end\n    return 'Yes'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend",
  "  local function is_good(str)\n    local count = 0\n    for i = 1, #str do\n  \
    \    if str:sub(i, i) == '(' then\n        count = count + 1\n      else\n   \
    \     count = count - 1\n      end\n      if count < 0 then\n        return false\n\
    \      end\n    end\n    return count == 0\n  end\n  local str1, str2 = lst[1],\
    \ lst[2]\n  if is_good(str1) and is_good(str2) then\n    return 'Yes'\n  end\n\
    \  if is_good(str1 .. str2) then\n    return 'Yes'\n  end\n  if is_good(str2 ..\
    \ str1) then\n    return 'Yes'\n  end\n  return 'No'\nend", "    local function\
    \ is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n            if\
    \ s:sub(i, i) == '(' then\n                cnt = cnt + 1\n            else\n \
    \               cnt = cnt - 1\n            end\n            if cnt < 0 then\n\
    \                return false\n            end\n        end\n        return cnt\
    \ == 0\n    end\n    local s1, s2 = lst[1], lst[2]\n    return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local\
    \ function is_good(s)\n        local cnt = 0\n        for i = 1, #s do\n     \
    \       if s:sub(i, i) == '(' then\n                cnt = cnt + 1\n          \
    \  else\n                cnt = cnt - 1\n            end\n            if cnt <\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return cnt == 0\n    end\n    return is_good(lst[1] .. lst[2]) and 'Yes' or\
    \ 'No'\nend", "  local function check(s)\n    local cnt = 0\n    for i = 1, #s\
    \ do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n  \
    \      cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return check(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1],\
    \ lst[2]\n  local n1, n2 = #s1, #s2\n  local n = n1 + n2\n  local cnt = 0\n  for\
    \ i = 1, n do\n    local c = (i <= n1) and s1:sub(i, i) or s2:sub(i - n1, i -\
    \ n1)\n    if c == '(' then\n      cnt = cnt + 1\n    else\n      cnt = cnt -\
    \ 1\n    end\n    if cnt < 0 then\n      return 'No'\n    end\n  end\n  return\
    \ (cnt == 0) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt\
    \ = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n\
    \        return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "    local s1, s2 = lst[1],\
    \ lst[2]\n    local n1, n2 = #s1, #s2\n    local n = n1 + n2\n    local cnt =\
    \ 0\n    for i = 1, n do\n        local c = i <= n1 and s1:sub(i, i) or s2:sub(i\
    \ - n1, i - n1)\n        if c == '(' then\n            cnt = cnt + 1\n       \
    \ else\n            cnt = cnt - 1\n        end\n        if cnt < 0 then\n    \
    \        return 'No'\n        end\n    end\n    return cnt == 0 and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        count = count + 1\n      else\n   \
    \     count = count - 1\n      end\n      if count < 0 then\n        return false\n\
    \      end\n    end\n    return count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n\
    \  return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local\
    \ function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n  local c1, c2 =\
    \ 0, 0\n  for i = 1, #s1 do\n    if s1:sub(i, i) == '(' then\n      c1 = c1 +\
    \ 1\n    else\n      c1 = c1 - 1\n    end\n  end\n  for i = 1, #s2 do\n    if\
    \ s2:sub(i, i) == '(' then\n      c2 = c2 + 1\n    else\n      c2 = c2 - 1\n \
    \   end\n  end\n  if c1 == 0 and c2 == 0 then\n    return 'Yes'\n  elseif c1 >\
    \ 0 and c2 < 0 and c1 + c2 == 0 then\n    return 'Yes'\n  elseif c1 < 0 and c2\
    \ > 0 and c1 + c2 == 0 then\n    return 'Yes'\n  else\n    return 'No'\n  end\n\
    end", "  local function check(s)\n    local cnt = 0\n    for i = 1, #s do\n  \
    \    if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt\
    \ = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n\
    \    end\n    return cnt == 0\n  end\n  return check(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "    local open, close = 0, 0\n    for _, s in ipairs(lst) do\n\
    \        for c in s:gmatch('%(') do open = open + 1 end\n        for c in s:gmatch('%)')\
    \ do close = close + 1 end\n    end\n    return (open == close) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n       \
    \ cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n    \
    \  end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local count = 0\n\
    \    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count = count\
    \ + 1\n      else\n        count = count - 1\n      end\n      if count < 0 then\n\
    \        return false\n      end\n    end\n    return count == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(str)\n\
    \    local cnt = 0\n    for i = 1, #str do\n      if str:sub(i, i) == '(' then\n\
    \        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\n\
    end", "  local function is_good(s)\n    local count = 0\n    for i = 1, #s do\n\
    \      if s:sub(i, i) == '(' then\n        count = count + 1\n      else\n   \
    \     count = count - 1\n      end\n      if count < 0 then\n        return false\n\
    \      end\n    end\n    return count == 0\n  end\n  return is_good(lst[1] ..\
    \ lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'\nend", "  local open,\
    \ close = 0, 0\n  for _, s in ipairs(lst) do\n    for c in s:gmatch('%(') do open\
    \ = open + 1 end\n    for c in s:gmatch('%)') do close = close + 1 end\n  end\n\
    \  return open == close and 'Yes' or 'No'\nend", "  local function count_parens(s)\n\
    \    local c = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n   \
    \     c = c + 1\n      else\n        c = c - 1\n      end\n    end\n    return\
    \ c\n  end\n  local c1, c2 = count_parens(lst[1]), count_parens(lst[2])\n  if\
    \ c1 == 0 and c2 == 0 then\n    return 'Yes'\n  elseif c1 == 0 and c2 < 0 then\n\
    \    return 'Yes'\n  elseif c1 > 0 and c2 == 0 then\n    return 'Yes'\n  elseif\
    \ c1 > 0 and c2 < 0 and c1 == -c2 then\n    return 'Yes'\n  else\n    return 'No'\n\
    \  end\nend", "  local function is_good(str)\n    local cnt = 0\n    for i = 1,\
    \ #str do\n      if str:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local open, close = 0, 0\n  for _, v\
    \ in ipairs(lst) do\n    for c in v:gmatch('%(') do open = open + 1 end\n    for\
    \ c in v:gmatch('%)') do close = close + 1 end\n  end\n  return open == close\
    \ and 'Yes' or 'No'\nend", "  local function is_good(str)\n    local count = 0\n\
    \    for i = 1, #str do\n      local c = str:sub(i, i)\n      if c == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n\
    \        count = count + 1\n      else\n        count = count - 1\n      end\n\
    \      if count < 0 then\n        return false\n      end\n    end\n    return\
    \ count == 0\n  end\n  local s1, s2 = lst[1], lst[2]\n  return is_good(s1 .. s2)\
    \ or is_good(s2 .. s1) and 'Yes' or 'No'\nend", "  local s1, s2 = lst[1], lst[2]\n\
    \  local c1, c2 = 0, 0\n  for i = 1, #s1 do\n    if s1:sub(i, i) == '(' then\n\
    \      c1 = c1 + 1\n    else\n      c1 = c1 - 1\n    end\n  end\n  for i = 1,\
    \ #s2 do\n    if s2:sub(i, i) == '(' then\n      c2 = c2 + 1\n    else\n     \
    \ c2 = c2 - 1\n    end\n  end\n  if c1 == 0 and c2 == 0 then\n    return 'Yes'\n\
    \  elseif c1 == 0 and c2 < 0 then\n    return 'Yes'\n  elseif c1 < 0 and c2 ==\
    \ 0 then\n    return 'Yes'\n  elseif c1 < 0 and c2 < 0 then\n    return 'Yes'\n\
    \  else\n    return 'No'\n  end\nend", "  local function check(s)\n    local count\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count =\
    \ count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  return check(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local function is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if\
    \ s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt\
    \ - 1\n      end\n      if cnt < 0 then\n        return false\n      end\n   \
    \ end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes'\
    \ or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n    for i =\
    \ 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n      else\n\
    \        cnt = cnt - 1\n      end\n      if cnt < 0 then\n        return false\n\
    \      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2])\
    \ and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local cnt = 0\n \
    \   for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt + 1\n\
    \      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n       \
    \ return false\n      end\n    end\n    return cnt == 0\n  end\n  return is_good(lst[1]\
    \ .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n    local\
    \ count = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count\
    \ = count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(s)\n    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) ==\
    \ '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n\
    \      if cnt < 0 then\n        return false\n      end\n    end\n    return cnt\
    \ == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", " \
    \ local s1, s2 = lst[1], lst[2]\n  local function is_good(s)\n    local count\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        count =\
    \ count + 1\n      else\n        count = count - 1\n      end\n      if count\
    \ < 0 then\n        return false\n      end\n    end\n    return count == 0\n\
    \  end\n  if is_good(s1) and is_good(s2) then\n    return 'Yes'\n  end\n  if is_good(s1\
    \ .. s2) then\n    return 'Yes'\n  end\n  if is_good(s2 .. s1) then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local function is_good(s)\n    local cnt\
    \ = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n        cnt = cnt\
    \ + 1\n      else\n        cnt = cnt - 1\n      end\n      if cnt < 0 then\n \
    \       return false\n      end\n    end\n    return cnt == 0\n  end\n  return\
    \ is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function is_good(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n      if s:sub(i, i) == '(' then\n \
    \       cnt = cnt + 1\n      else\n        cnt = cnt - 1\n      end\n      if\
    \ cnt < 0 then\n        return false\n      end\n    end\n    return cnt == 0\n\
    \  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\nend", "  local function\
    \ is_good(str)\n    local cnt = 0\n    for i = 1, #str do\n      if str:sub(i,\
    \ i) == '(' then\n        cnt = cnt + 1\n      else\n        cnt = cnt - 1\n \
    \     end\n      if cnt < 0 then\n        return false\n      end\n    end\n \
    \   return cnt == 0\n  end\n  return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'\n\
    end", "  local l, r = lst[1], lst[2]\n  local lc, rc = 0, 0\n  for i = 1, #l do\n\
    \    if l:sub(i, i) == '(' then\n      lc = lc + 1\n    else\n      lc = lc -\
    \ 1\n    end\n  end\n  for i = 1, #r do\n    if r:sub(i, i) == '(' then\n    \
    \  rc = rc + 1\n    else\n      rc = rc - 1\n    end\n  end\n  if lc == rc then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
