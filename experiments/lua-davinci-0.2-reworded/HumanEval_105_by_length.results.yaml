name: HumanEval_105_by_length
language: lua
results:
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i,\
    \ v in ipairs(res) do\n        res[i] = tostring(v)\n    end\n    table.reverse(res)\n\
    \    for i, v in ipairs(res) do\n        if v == '1' then\n            res[i]\
    \ = 'One'\n        elseif v == '2' then\n            res[i] = 'Two'\n        elseif\
    \ v == '3' then\n            res[i] = 'Three'\n        elseif v == '4' then\n\
    \            res[i] = 'Four'\n        elseif v == '5' then\n            res[i]\
    \ = 'Five'\n        elseif v == '6' then\n            res[i] = 'Six'\n       \
    \ elseif v == '7' then\n            res[i] = 'Seven'\n        elseif v == '8'\
    \ then\n            res[i] = 'Eight'\n        elseif v == '9' then\n         \
    \   res[i] = 'Nine'\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacfr45ll.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpacfr45ll.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpacfr45ll.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"One\"\n\
    \        elseif res[i] == 2 then\n            res[i] = \"Two\"\n        elseif\
    \ res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i] == 4\
    \ then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n     \
    \       res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8hms325.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpa8hms325.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i, v in ipairs(result) do\n        result[i] = names[v]\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiln4pos3.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpiln4pos3.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ local numbers = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\"\
    ,\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"\
    Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n  for _, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      table.insert(result, numbers[v])\n\
    \    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufqsney3.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpufqsney3.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  local res2 = {}\n  for i = #res, 1,\
    \ -1 do\n    table.insert(res2, res[i])\n  end\n  local res3 = {}\n  for _, v\
    \ in ipairs(res2) do\n    table.insert(res3, num_to_str[v])\n  end\n  return res3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97juhbuf.lua:27:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp97juhbuf.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp97juhbuf.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  for i, v in ipairs(res) do\n    res[i]\
    \ = tostring(v)\n  end\n  table.reverse(res)\n  for i, v in ipairs(res) do\n \
    \   res[i] = v:gsub('1', 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4',\
    \ 'Four'):gsub('5', 'Five'):gsub('6', 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9',\
    \ 'Nine')\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptvzdy319.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmptvzdy319.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmptvzdy319.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = tostring(result[i])\n  \
    \  end\n    table.reverse(result)\n    for i, v in ipairs(result) do\n       \
    \ if v == '1' then\n            result[i] = 'One'\n        elseif v == '2' then\n\
    \            result[i] = 'Two'\n        elseif v == '3' then\n            result[i]\
    \ = 'Three'\n        elseif v == '4' then\n            result[i] = 'Four'\n  \
    \      elseif v == '5' then\n            result[i] = 'Five'\n        elseif v\
    \ == '6' then\n            result[i] = 'Six'\n        elseif v == '7' then\n \
    \           result[i] = 'Seven'\n        elseif v == '8' then\n            result[i]\
    \ = 'Eight'\n        elseif v == '9' then\n            result[i] = 'Nine'\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqg16mq3.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpsqg16mq3.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpsqg16mq3.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub('1',\
    \ 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5', 'Five'):gsub('6',\
    \ 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk01upv8z.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpk01upv8z.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpk01upv8z.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"One\"\n\
    \        elseif res[i] == 2 then\n            res[i] = \"Two\"\n        elseif\
    \ res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i] == 4\
    \ then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n     \
    \       res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m83pv9o.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp2m83pv9o.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i, v in ipairs(result) do\n        result[i] = names[v]\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q5ytnw8.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp3q5ytnw8.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = string.gsub(result[i],\
    \ \"1\", \"One\")\n        result[i] = string.gsub(result[i], \"2\", \"Two\")\n\
    \        result[i] = string.gsub(result[i], \"3\", \"Three\")\n        result[i]\
    \ = string.gsub(result[i], \"4\", \"Four\")\n        result[i] = string.gsub(result[i],\
    \ \"5\", \"Five\")\n        result[i] = string.gsub(result[i], \"6\", \"Six\"\
    )\n        result[i] = string.gsub(result[i], \"7\", \"Seven\")\n        result[i]\
    \ = string.gsub(result[i], \"8\", \"Eight\")\n        result[i] = string.gsub(result[i],\
    \ \"9\", \"Nine\")\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnghutk08.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpnghutk08.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpnghutk08.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #result do\n        result[i]\
    \ = names[result[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6c_gdr6.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpf6c_gdr6.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = num_to_str[v]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1mbhay4.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpi1mbhay4.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpi1mbhay4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"One\"\n\
    \        elseif res[i] == 2 then\n            res[i] = \"Two\"\n        elseif\
    \ res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i] == 4\
    \ then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n     \
    \       res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1768zoq8.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp1768zoq8.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i, v in ipairs(result) do\n\
    \    result[i] = tostring(v)\n  end\n  table.sort(result, function(a, b) return\
    \ #a > #b end)\n  for i, v in ipairs(result) do\n    result[i] = v:gsub('1', 'One'):gsub('2',\
    \ 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5', 'Five'):gsub('6', 'Six'):gsub('7',\
    \ 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mnqayav.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\"\
    , \"Two\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp6mnqayav.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = num_to_str[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27efyx1k.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp27efyx1k.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp27efyx1k.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      res[#res + 1]\
    \ = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i]\
    \ = tostring(res[i])\n  end\n  table.sort(res, function(a, b) return #a > #b end)\n\
    \  for i = 1, #res do\n    res[i] = string.gsub(res[i], \"1\", \"One\")\n    res[i]\
    \ = string.gsub(res[i], \"2\", \"Two\")\n    res[i] = string.gsub(res[i], \"3\"\
    , \"Three\")\n    res[i] = string.gsub(res[i], \"4\", \"Four\")\n    res[i] =\
    \ string.gsub(res[i], \"5\", \"Five\")\n    res[i] = string.gsub(res[i], \"6\"\
    , \"Six\")\n    res[i] = string.gsub(res[i], \"7\", \"Seven\")\n    res[i] = string.gsub(res[i],\
    \ \"8\", \"Eight\")\n    res[i] = string.gsub(res[i], \"9\", \"Nine\")\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghmfm1fk.lua:42:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\"\
    , \"Two\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpghmfm1fk.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"One\"\n\
    \        elseif res[i] == 2 then\n            res[i] = \"Two\"\n        elseif\
    \ res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i] == 4\
    \ then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n     \
    \       res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h5c2ihd.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp6h5c2ihd.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  local res2 = {}\n  for i = #res, 1,\
    \ -1 do\n    table.insert(res2, res[i])\n  end\n  local res3 = {}\n  for _, v\
    \ in ipairs(res2) do\n    table.insert(res3, tostring(v))\n  end\n  return res3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhnhxmt6.lua:35:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\n\
    stack traceback:\n\t/tmp/tmpkhnhxmt6.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    local res2\
    \ = {}\n    for i = #res, 1, -1 do\n        table.insert(res2, res[i])\n    end\n\
    \    local res3 = {}\n    for _, v in ipairs(res2) do\n        table.insert(res3,\
    \ tostring(v))\n    end\n    return res3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspl41y41.lua:35:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\n\
    stack traceback:\n\t/tmp/tmpspl41y41.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      res[#res + 1]\
    \ = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i]\
    \ = tostring(res[i])\n  end\n  for i = 1, #res do\n    if res[i] == '1' then\n\
    \      res[i] = 'One'\n    elseif res[i] == '2' then\n      res[i] = 'Two'\n \
    \   elseif res[i] == '3' then\n      res[i] = 'Three'\n    elseif res[i] == '4'\
    \ then\n      res[i] = 'Four'\n    elseif res[i] == '5' then\n      res[i] = 'Five'\n\
    \    elseif res[i] == '6' then\n      res[i] = 'Six'\n    elseif res[i] == '7'\
    \ then\n      res[i] = 'Seven'\n    elseif res[i] == '8' then\n      res[i] =\
    \ 'Eight'\n    elseif res[i] == '9' then\n      res[i] = 'Nine'\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb60044w.lua:51:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmphb60044w.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ map[v])\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0t3265s.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpi0t3265s.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort_by_length(a,\
    \ b)\n        return a > b\n    end\n    local function replace_by_name(a)\n \
    \       if a == 1 then\n            return \"One\"\n        elseif a == 2 then\n\
    \            return \"Two\"\n        elseif a == 3 then\n            return \"\
    Three\"\n        elseif a == 4 then\n            return \"Four\"\n        elseif\
    \ a == 5 then\n            return \"Five\"\n        elseif a == 6 then\n     \
    \       return \"Six\"\n        elseif a == 7 then\n            return \"Seven\"\
    \n        elseif a == 8 then\n            return \"Eight\"\n        elseif a ==\
    \ 9 then\n            return \"Nine\"\n        end\n    end\n    local function\
    \ is_valid(a)\n        return a >= 1 and a <= 9\n    end\n    local function filter_valid(a)\n\
    \        return is_valid(a)\n    end\n    local function map_replace(a)\n    \
    \    return replace_by_name(a)\n    end\n    local function reverse(a)\n     \
    \   local b = {}\n        for i = #a, 1, -1 do\n            b[#b + 1] = a[i]\n\
    \        end\n        return b\n    end\n    return reverse(map(map_replace, filter(filter_valid,\
    \ arr)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplep86zek.lua:54:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplep86zek.lua:54:\
    \ in local 'candidate'\n\t/tmp/tmplep86zek.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i = 1, #res do\n    \
    \    res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n    for i = 1,\
    \ #res do\n        res[i] = tostring(res[i])\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsar98skp.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpsar98skp.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpsar98skp.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ map[v])\n        end\n    end\n    table.sort(res)\n    local rev = {}\n   \
    \ for i = #res, 1, -1 do\n        table.insert(rev, res[i])\n    end\n    return\
    \ rev\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jh4tw3r.lua:42:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp1jh4tw3r.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort(arr)\n\
    \    local function swap(i, j)\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function compare(i, j)\n      return arr[i] < arr[j]\n    end\n   \
    \ local function sort(l, r)\n      if l >= r then\n        return\n      end\n\
    \      local i = l\n      for j = l + 1, r do\n        if compare(j, l) then\n\
    \          i = i + 1\n          swap(i, j)\n        end\n      end\n      swap(l,\
    \ i)\n      sort(l, i - 1)\n      sort(i + 1, r)\n    end\n    sort(1, #arr)\n\
    \    return arr\n  end\n  local function reverse(arr)\n    local function swap(i,\
    \ j)\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function reverse(l,\
    \ r)\n      if l >= r then\n        return\n      end\n      swap(l, r)\n    \
    \  reverse(l + 1, r - 1)\n    end\n    reverse(1, #arr)\n    return arr\n  end\n\
    \  local function replace(arr)\n    local function replace(i)\n      if arr[i]\
    \ == 1 then\n        arr[i] = 'One'\n      elseif arr[i] == 2 then\n        arr[i]\
    \ = 'Two'\n      elseif arr[i] == 3 then\n        arr[i] = 'Three'\n      elseif\
    \ arr[i] == 4 then\n        arr[i] = 'Four'\n      elseif arr[i] == 5 then\n \
    \       arr[i] = 'Five'\n      elseif arr[i] == 6 then\n        arr[i] = 'Six'\n\
    \      elseif arr[i] == 7 then\n        arr[i] = 'Seven'\n      elseif arr[i]\
    \ == 8 then\n        arr[i] = 'Eight'\n      elseif arr[i] == 9 then\n       \
    \ arr[i] = 'Nine'\n      end\n    end\n    for i = 1, #arr do\n      replace(i)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw26bo0k4.lua:89: 'end' expected (to close 'for' at line 75)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    local i, j = 1, #result\n    while i < j do\n        result[i], result[j]\
    \ = result[j], result[i]\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb68xzajo.lua:44:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpb68xzajo.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local t = {}\n    for\
    \ i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(t,\
    \ arr[i])\n        end\n    end\n    table.sort(t)\n    local result = {}\n  \
    \  for i = #t, 1, -1 do\n        table.insert(result, tostring(t[i]))\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oihh4k4.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\n\
    stack traceback:\n\t/tmp/tmp0oihh4k4.lua:31: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = string.format('%s', result[i])\n  end\n  table.reverse(result)\n\
    \  for i = 1, #result do\n    if result[i] == '1' then\n      result[i] = 'One'\n\
    \    elseif result[i] == '2' then\n      result[i] = 'Two'\n    elseif result[i]\
    \ == '3' then\n      result[i] = 'Three'\n    elseif result[i] == '4' then\n \
    \     result[i] = 'Four'\n    elseif result[i] == '5' then\n      result[i] =\
    \ 'Five'\n    elseif result[i] == '6' then\n      result[i] = 'Six'\n    elseif\
    \ result[i] == '7' then\n      result[i] = 'Seven'\n    elseif result[i] == '8'\
    \ then\n      result[i] = 'Eight'\n    elseif result[i] == '9' then\n      result[i]\
    \ = 'Nine'\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4r6uh8a.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpl4r6uh8a.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpl4r6uh8a.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local new_arr = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    local reverse_arr = {}\n    for i, v in ipairs(new_arr) do\n        table.insert(reverse_arr,\
    \ 1, v)\n    end\n    local result = {}\n    for i, v in ipairs(reverse_arr) do\n\
    \        if v == 1 then\n            table.insert(result, 'One')\n        elseif\
    \ v == 2 then\n            table.insert(result, 'Two')\n        elseif v == 3\
    \ then\n            table.insert(result, 'Three')\n        elseif v == 4 then\n\
    \            table.insert(result, 'Four')\n        elseif v == 5 then\n      \
    \      table.insert(result, 'Five')\n        elseif v == 6 then\n            table.insert(result,\
    \ 'Six')\n        elseif v == 7 then\n            table.insert(result, 'Seven')\n\
    \        elseif v == 8 then\n            table.insert(result, 'Eight')\n     \
    \   elseif v == 9 then\n            table.insert(result, 'Nine')\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  local res2 = {}\n  for i = #res, 1,\
    \ -1 do\n    table.insert(res2, res[i])\n  end\n  local res3 = {}\n  for _, v\
    \ in ipairs(res2) do\n    if v == 1 then\n      table.insert(res3, \"One\")\n\
    \    elseif v == 2 then\n      table.insert(res3, \"Two\")\n    elseif v == 3\
    \ then\n      table.insert(res3, \"Three\")\n    elseif v == 4 then\n      table.insert(res3,\
    \ \"Four\")\n    elseif v == 5 then\n      table.insert(res3, \"Five\")\n    elseif\
    \ v == 6 then\n      table.insert(res3, \"Six\")\n    elseif v == 7 then\n   \
    \   table.insert(res3, \"Seven\")\n    elseif v == 8 then\n      table.insert(res3,\
    \ \"Eight\")\n    elseif v == 9 then\n      table.insert(res3, \"Nine\")\n   \
    \ end\n  end\n  return res3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = string.format(\"%s\", res[i])\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8ocx_6_.lua:30:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmpz8ocx_6_.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(result, names[v])\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuinkxejz.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmpuinkxejz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  table.reverse(result)\n\
    \  for i = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7usuihc_.lua:21:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp7usuihc_.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp7usuihc_.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  local\
    \ map = {\n    [1] = 'One',\n    [2] = 'Two',\n    [3] = 'Three',\n    [4] = 'Four',\n\
    \    [5] = 'Five',\n    [6] = 'Six',\n    [7] = 'Seven',\n    [8] = 'Eight',\n\
    \    [9] = 'Nine'\n  }\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9\
    \ then\n      table.insert(res, map[v])\n    end\n  end\n  table.sort(res)\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh8tc05o.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpsh8tc05o.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort_table(arr)\n\
    \    local function swap(arr, i, j)\n      local temp = arr[i]\n      arr[i] =\
    \ arr[j]\n      arr[j] = temp\n    end\n    for i = 1, #arr do\n      for j =\
    \ i + 1, #arr do\n        if arr[i] > arr[j] then\n          swap(arr, i, j)\n\
    \        end\n      end\n    end\n    return arr\n  end\n  local function reverse_table(arr)\n\
    \    local function swap(arr, i, j)\n      local temp = arr[i]\n      arr[i] =\
    \ arr[j]\n      arr[j] = temp\n    end\n    for i = 1, #arr / 2 do\n      swap(arr,\
    \ i, #arr - i + 1)\n    end\n    return arr\n  end\n  local function replace_number_by_name(arr)\n\
    \    local function replace_number_by_name_helper(arr, i)\n      if i > #arr then\n\
    \        return arr\n      end\n      if arr[i] == 1 then\n        arr[i] = \"\
    One\"\n      elseif arr[i] == 2 then\n        arr[i] = \"Two\"\n      elseif arr[i]\
    \ == 3 then\n        arr[i] = \"Three\"\n      elseif arr[i] == 4 then\n     \
    \   arr[i] = \"Four\"\n      elseif arr[i] == 5 then\n        arr[i] = \"Five\"\
    \n      elseif arr[i] == 6 then\n        arr[i] = \"Six\"\n      elseif arr[i]\
    \ == 7 then\n        arr[i] = \"Seven\"\n      elseif arr[i] == 8 then\n     \
    \   arr[i] = \"Eight\"\n      elseif arr[i] == 9 then\n        arr[i] = \"Nine\"\
    \n      end\n      return replace_number_by_name_helper(arr, i + 1)\n    end\n\
    \    return replace_number_by_name_helper(arr, 1)\n  end\n  local function filter_table(arr)\n\
    \    local function filter_table_helper(arr, i,\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzf86f7jm.lua:70: ')' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort(arr)\n\
    \        local function swap(i, j)\n            arr[i], arr[j] = arr[j], arr[i]\n\
    \        end\n        local function compare(i, j)\n            return arr[i]\
    \ < arr[j]\n        end\n        local function partition(left, right)\n     \
    \       local pivot = arr[math.floor((left + right) / 2)]\n            local i\
    \ = left\n            local j = right\n            while i <= j do\n         \
    \       while compare(i, pivot) do\n                    i = i + 1\n          \
    \      end\n                while compare(pivot, j) do\n                    j\
    \ = j - 1\n                end\n                if i <= j then\n             \
    \       swap(i, j)\n                    i = i + 1\n                    j = j -\
    \ 1\n                end\n            end\n            return i\n        end\n\
    \        local function sort(left, right)\n            local index = partition(left,\
    \ right)\n            if left < index - 1 then\n                sort(left, index\
    \ - 1)\n            end\n            if index < right then\n                sort(index,\
    \ right)\n            end\n        end\n        sort(1, #arr)\n    end\n    local\
    \ function reverse(arr)\n        local i = 1\n        local j = #arr\n       \
    \ while i < j do\n            arr[i], arr[j] = arr[j], arr[i]\n            i =\
    \ i + 1\n            j = j - 1\n        end\n    end\n    local function replace(arr)\n\
    \        local function replace_one(n)\n            if n == 1 then\n         \
    \       return 'One'\n            elseif n == 2 then\n                return 'Two'\n\
    \            elseif n == 3 then\n                return 'Three'\n            elseif\
    \ n == 4 then\n                return 'Four'\n            elseif n == 5 then\n\
    \                return 'Five'\n            elseif n == 6 then\n             \
    \   return 'Six'\n            elseif n == 7 then\n                return 'Seven'\n\
    \            elseif n == 8 then\n                return 'Eight'\n            elseif\
    \ n == 9 then\n                return 'Nine'\n            end\n        end\n \
    \       for i = 1, #arr do\n            if arr[i] >= 1 and arr[i] <=\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmfuj_1xz.lua:84: 'then' expected near '='\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zpex137.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp_zpex137.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = numbers[result[i]]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4po0vtwi.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp4po0vtwi.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp4po0vtwi.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    for i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy5mnkan9.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpy5mnkan9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpy5mnkan9.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = tostring(v)\n    end\n \
    \   table.reverse(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = string.upper(v:sub(1, 1)) .. v:sub(2)\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjs65yvmg.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpjs65yvmg.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpjs65yvmg.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for _, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n\
    \            table.insert(result, names[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtxy0_z3.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmphtxy0_z3.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    local res = {}\n    for i = #result, 1, -1 do\n        table.insert(res,\
    \ result[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a5s35tw.lua:42:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp6a5s35tw.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      res[#res + 1]\
    \ = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i]\
    \ = names[res[i]]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p5la1uk.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmp2p5la1uk.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp2p5la1uk.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(result, names[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu09o5_pf.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpu09o5_pf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    for i = 1, #res do\n        if res[i] == '1' then\n            res[i] = 'One'\n\
    \        elseif res[i] == '2' then\n            res[i] = 'Two'\n        elseif\
    \ res[i] == '3' then\n            res[i] = 'Three'\n        elseif res[i] == '4'\
    \ then\n            res[i] = 'Four'\n        elseif res[i] == '5' then\n     \
    \       res[i] = 'Five'\n        elseif res[i] == '6' then\n            res[i]\
    \ = 'Six'\n        elseif res[i] == '7' then\n            res[i] = 'Seven'\n \
    \       elseif res[i] == '8' then\n            res[i] = 'Eight'\n        elseif\
    \ res[i] == '9' then\n            res[i] = 'Nine'\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf20lw139.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpf20lw139.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpf20lw139.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = string.format(\"%s\", result[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs1tqai2.lua:30:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmpvs1tqai2.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = numbers[result[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbgewqv4e.lua:22:\
    \ attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpbgewqv4e.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpbgewqv4e.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = numbers[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvuc66xqw.lua:22:\
    \ attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpvuc66xqw.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpvuc66xqw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     result[#result + 1] = arr[i]\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        if result[i] ==\
    \ '1' then\n            result[i] = 'One'\n        elseif result[i] == '2' then\n\
    \            result[i] = 'Two'\n        elseif result[i] == '3' then\n       \
    \     result[i] = 'Three'\n        elseif result[i] == '4' then\n            result[i]\
    \ = 'Four'\n        elseif result[i] == '5' then\n            result[i] = 'Five'\n\
    \        elseif result[i] == '6' then\n            result[i] = 'Six'\n       \
    \ elseif result[i] == '7' then\n            result[i] = 'Seven'\n        elseif\
    \ result[i] == '8' then\n            result[i] = 'Eight'\n        elseif result[i]\
    \ == '9' then\n            result[i] = 'Nine'\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ks0qv3j.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp_ks0qv3j.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp_ks0qv3j.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub(\"\
    1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"\
    ):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\"\
    , \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ooeccvk.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp0ooeccvk.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp0ooeccvk.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(result,\
    \ arr[i])\n    end\n  end\n  table.sort(result)\n  table.reverse(result)\n  for\
    \ i = 1, #result do\n    result[i] = tostring(result[i])\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtrf4077.lua:21:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpbtrf4077.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbtrf4077.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i = 1, #res do\n        res[i] = names[tonumber(res[i])]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ojeucwg.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp5ojeucwg.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp5ojeucwg.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ map[v])\n        end\n    end\n    table.sort(res)\n    local i, j = 1, #res\n\
    \    while i < j do\n        res[i], res[j] = res[j], res[i]\n        i = i +\
    \ 1\n        j = j - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzhvjdmy.lua:44:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpxzhvjdmy.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n\
    \        res[i] = tostring(v)\n    end\n    res = table.reverse(res)\n    for\
    \ i, v in ipairs(res) do\n        res[i] = string.upper(v:sub(1, 1)) .. v:sub(2)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6mktknc.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpy6mktknc.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpy6mktknc.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = numbers[result[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3w46b483.lua:22:\
    \ attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmp3w46b483.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp3w46b483.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = tostring(res[i])\n\
    \  end\n  for i = 1, #res do\n    res[i] = res[i]:gsub(\"1\", \"One\")\n    res[i]\
    \ = res[i]:gsub(\"2\", \"Two\")\n    res[i] = res[i]:gsub(\"3\", \"Three\")\n\
    \    res[i] = res[i]:gsub(\"4\", \"Four\")\n    res[i] = res[i]:gsub(\"5\", \"\
    Five\")\n    res[i] = res[i]:gsub(\"6\", \"Six\")\n    res[i] = res[i]:gsub(\"\
    7\", \"Seven\")\n    res[i] = res[i]:gsub(\"8\", \"Eight\")\n    res[i] = res[i]:gsub(\"\
    9\", \"Nine\")\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m32h4yi.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp4m32h4yi.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(res,\
    \ arr[i])\n    end\n  end\n  table.sort(res)\n  local names = {\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for\
    \ i = 1, #res do\n    res[i] = names[res[i]]\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66w65i8d.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp66w65i8d.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9byk7vgx.lua:21:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp9byk7vgx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp9byk7vgx.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            res[#res\
    \ + 1] = map[v]\n        end\n    end\n    table.sort(res)\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v5ane8_.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp6v5ane8_.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = num_to_str[res[i]]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvi1i5k3g.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpvi1i5k3g.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpvi1i5k3g.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for _, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n\
    \            table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fe5edi5.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp9fe5edi5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n          \
    \  table.insert(result, v)\n        end\n    end\n    table.sort(result)\n   \
    \ for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n  \
    \  table.reverse(result)\n    local names = {'One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #result do\n        result[i]\
    \ = names[tonumber(result[i])]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7ifpaw2.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp_7ifpaw2.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp_7ifpaw2.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   for i = 1, #result do\n        result[i] = result[i]:gsub(\"1\", \"One\")\n\
    \        result[i] = result[i]:gsub(\"2\", \"Two\")\n        result[i] = result[i]:gsub(\"\
    3\", \"Three\")\n        result[i] = result[i]:gsub(\"4\", \"Four\")\n       \
    \ result[i] = result[i]:gsub(\"5\", \"Five\")\n        result[i] = result[i]:gsub(\"\
    6\", \"Six\")\n        result[i] = result[i]:gsub(\"7\", \"Seven\")\n        result[i]\
    \ = result[i]:gsub(\"8\", \"Eight\")\n        result[i] = result[i]:gsub(\"9\"\
    , \"Nine\")\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzeuki4l.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpkzeuki4l.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    for i = 1, #res do\n        if res[i] == '1' then\n            res[i] = 'One'\n\
    \        elseif res[i] == '2' then\n            res[i] = 'Two'\n        elseif\
    \ res[i] == '3' then\n            res[i] = 'Three'\n        elseif res[i] == '4'\
    \ then\n            res[i] = 'Four'\n        elseif res[i] == '5' then\n     \
    \       res[i] = 'Five'\n        elseif res[i] == '6' then\n            res[i]\
    \ = 'Six'\n        elseif res[i] == '7' then\n            res[i] = 'Seven'\n \
    \       elseif res[i] == '8' then\n            res[i] = 'Eight'\n        elseif\
    \ res[i] == '9' then\n            res[i] = 'Nine'\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgepm_mw.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpdgepm_mw.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpdgepm_mw.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = names[res[i]]\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3j2zq0i.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpf3j2zq0i.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpf3j2zq0i.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = names[result[i]]\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfy3cj6rb.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpfy3cj6rb.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpfy3cj6rb.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  local res2 = {}\n  for i = #res, 1,\
    \ -1 do\n    table.insert(res2, res[i])\n  end\n  local res3 = {}\n  for _, v\
    \ in ipairs(res2) do\n    table.insert(res3, tostring(v))\n  end\n  return res3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2p4p2ayz.lua:35:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\n\
    stack traceback:\n\t/tmp/tmp2p4p2ayz.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort_table(arr)\n\
    \        local function swap(arr, i, j)\n            local temp = arr[i]\n   \
    \         arr[i] = arr[j]\n            arr[j] = temp\n        end\n        for\
    \ i = 1, #arr do\n            for j = i + 1, #arr do\n                if arr[i]\
    \ > arr[j] then\n                    swap(arr, i, j)\n                end\n  \
    \          end\n        end\n        return arr\n    end\n    local function reverse_table(arr)\n\
    \        local result = {}\n        for i = #arr, 1, -1 do\n            table.insert(result,\
    \ arr[i])\n        end\n        return result\n    end\n    local function replace_number(arr)\n\
    \        local result = {}\n        local numbers = {\n            [1] = \"One\"\
    ,\n            [2] = \"Two\",\n            [3] = \"Three\",\n            [4] =\
    \ \"Four\",\n            [5] = \"Five\",\n            [6] = \"Six\",\n       \
    \     [7] = \"Seven\",\n            [8] = \"Eight\",\n            [9] = \"Nine\"\
    \n        }\n        for i = 1, #arr do\n            if numbers[arr[i]] then\n\
    \                table.insert(result, numbers[arr[i]])\n            end\n    \
    \    end\n        return result\n    end\n    local function filter_number(arr)\n\
    \        local result = {}\n        for i = 1, #arr do\n            if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n                table.insert(result, arr[i])\n  \
    \          end\n        end\n        return result\n    end\n    return replace_number(reverse_table(sort_table(filter_number(arr))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     result[#result + 1] = arr[i]\n        end\n    end\n    table.sort(result)\n\
    \    local reverse = {}\n    for i = #result, 1, -1 do\n        reverse[#reverse\
    \ + 1] = result[i]\n    end\n    local names = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i = 1, #reverse do\n     \
    \   reverse[i] = names[reverse[i]]\n    end\n    return reverse\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      res[#res + 1] =\
    \ v\n    end\n  end\n  table.sort(res)\n  local names = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i = 1, #res do\n   \
    \ res[i] = names[res[i]]\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngku_mqe.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpngku_mqe.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = names[result[i]]\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmperhyfwd6.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmperhyfwd6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmperhyfwd6.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local new_arr = {}\n\
    \  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      new_arr[#new_arr\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(new_arr)\n  local res = {}\n  for\
    \ i = #new_arr, 1, -1 do\n    res[#res + 1] = num_to_str[new_arr[i]]\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2gimzfj.lua:23:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpb2gimzfj.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpb2gimzfj.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort_func(a,\
    \ b)\n        return a < b\n    end\n    local function reverse_func(a, b)\n \
    \       return a > b\n    end\n    local function replace_func(a)\n        if\
    \ a == 1 then\n            return \"One\"\n        elseif a == 2 then\n      \
    \      return \"Two\"\n        elseif a == 3 then\n            return \"Three\"\
    \n        elseif a == 4 then\n            return \"Four\"\n        elseif a ==\
    \ 5 then\n            return \"Five\"\n        elseif a == 6 then\n          \
    \  return \"Six\"\n        elseif a == 7 then\n            return \"Seven\"\n\
    \        elseif a == 8 then\n            return \"Eight\"\n        elseif a ==\
    \ 9 then\n            return \"Nine\"\n        end\n    end\n    local function\
    \ filter_func(a)\n        return a >= 1 and a <= 9\n    end\n    local function\
    \ map_func(a)\n        return replace_func(a)\n    end\n    return map(map_func,\
    \ filter(filter_func, reverse(sort(arr, sort_func))))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ja8ev4e.lua:47:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp3ja8ev4e.lua:47:\
    \ in local 'candidate'\n\t/tmp/tmp3ja8ev4e.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort(arr)\n\
    \    local function swap(i, j)\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function compare(i, j)\n      return arr[i] < arr[j]\n    end\n   \
    \ local function sort(l, r)\n      if l >= r then\n        return\n      end\n\
    \      local i = l\n      for j = l + 1, r do\n        if compare(j, l) then\n\
    \          i = i + 1\n          swap(i, j)\n        end\n      end\n      swap(l,\
    \ i)\n      sort(l, i - 1)\n      sort(i + 1, r)\n    end\n    sort(1, #arr)\n\
    \    return arr\n  end\n  local function reverse(arr)\n    local function swap(i,\
    \ j)\n      arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function reverse(l,\
    \ r)\n      if l >= r then\n        return\n      end\n      swap(l, r)\n    \
    \  reverse(l + 1, r - 1)\n    end\n    reverse(1, #arr)\n    return arr\n  end\n\
    \  local function replace(arr)\n    local function replace(i)\n      if arr[i]\
    \ == 1 then\n        arr[i] = 'One'\n      elseif arr[i] == 2 then\n        arr[i]\
    \ = 'Two'\n      elseif arr[i] == 3 then\n        arr[i] = 'Three'\n      elseif\
    \ arr[i] == 4 then\n        arr[i] = 'Four'\n      elseif arr[i] == 5 then\n \
    \       arr[i] = 'Five'\n      elseif arr[i] == 6 then\n        arr[i] = 'Six'\n\
    \      elseif arr[i] == 7 then\n        arr[i] = 'Seven'\n      elseif arr[i]\
    \ == 8 then\n        arr[i] = 'Eight'\n      elseif arr[i] == 9 then\n       \
    \ arr[i] = 'Nine'\n      end\n    end\n    for i = 1, #arr do\n      replace(i)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp06p6pysc.lua:89: 'end' expected (to close 'for' at line 75)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = tostring(v)\n    end\n \
    \   table.reverse(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = tostring(v)\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcyj131f4.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpcyj131f4.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpcyj131f4.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = names[result[i]]\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwlgxuou0.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpwlgxuou0.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpwlgxuou0.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrkb2xzh.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpyrkb2xzh.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpyrkb2xzh.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = tostring(result[i])\n  \
    \  end\n    table.reverse(result)\n    for i, v in ipairs(result) do\n       \
    \ if v == '1' then\n            result[i] = 'One'\n        elseif v == '2' then\n\
    \            result[i] = 'Two'\n        elseif v == '3' then\n            result[i]\
    \ = 'Three'\n        elseif v == '4' then\n            result[i] = 'Four'\n  \
    \      elseif v == '5' then\n            result[i] = 'Five'\n        elseif v\
    \ == '6' then\n            result[i] = 'Six'\n        elseif v == '7' then\n \
    \           result[i] = 'Seven'\n        elseif v == '8' then\n            result[i]\
    \ = 'Eight'\n        elseif v == '9' then\n            result[i] = 'Nine'\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphciuoh5_.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmphciuoh5_.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmphciuoh5_.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local dict = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, dict[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gafv6cz.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp5gafv6cz.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    res = table.reverse(res)\n\
    \    for i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfljy6kjt.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpfljy6kjt.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpfljy6kjt.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n\
    \        res[i] = tostring(v)\n    end\n    table.reverse(res)\n    for i, v in\
    \ ipairs(res) do\n        if v == '1' then\n            res[i] = 'One'\n     \
    \   elseif v == '2' then\n            res[i] = 'Two'\n        elseif v == '3'\
    \ then\n            res[i] = 'Three'\n        elseif v == '4' then\n         \
    \   res[i] = 'Four'\n        elseif v == '5' then\n            res[i] = 'Five'\n\
    \        elseif v == '6' then\n            res[i] = 'Six'\n        elseif v ==\
    \ '7' then\n            res[i] = 'Seven'\n        elseif v == '8' then\n     \
    \       res[i] = 'Eight'\n        elseif v == '9' then\n            res[i] = 'Nine'\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpam9lzmbz.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpam9lzmbz.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpam9lzmbz.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = string.gsub(result[i],\
    \ '1', 'One')\n        result[i] = string.gsub(result[i], '2', 'Two')\n      \
    \  result[i] = string.gsub(result[i], '3', 'Three')\n        result[i] = string.gsub(result[i],\
    \ '4', 'Four')\n        result[i] = string.gsub(result[i], '5', 'Five')\n    \
    \    result[i] = string.gsub(result[i], '6', 'Six')\n        result[i] = string.gsub(result[i],\
    \ '7', 'Seven')\n        result[i] = string.gsub(result[i], '8', 'Eight')\n  \
    \      result[i] = string.gsub(result[i], '9', 'Nine')\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsau7shl_.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpsau7shl_.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpsau7shl_.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    local names = {\n        'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n    }\n    for i = 1, #result\
    \ do\n        result[i] = names[tonumber(result[i])]\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1sydlhyl.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp1sydlhyl.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp1sydlhyl.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local new_arr = {}\n\
    \  for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(new_arr,\
    \ v)\n    end\n  end\n  table.sort(new_arr)\n  local reverse_arr = {}\n  for i\
    \ = #new_arr, 1, -1 do\n    table.insert(reverse_arr, new_arr[i])\n  end\n  local\
    \ result = {}\n  for i, v in ipairs(reverse_arr) do\n    if v == 1 then\n    \
    \  table.insert(result, \"One\")\n    elseif v == 2 then\n      table.insert(result,\
    \ \"Two\")\n    elseif v == 3 then\n      table.insert(result, \"Three\")\n  \
    \  elseif v == 4 then\n      table.insert(result, \"Four\")\n    elseif v == 5\
    \ then\n      table.insert(result, \"Five\")\n    elseif v == 6 then\n      table.insert(result,\
    \ \"Six\")\n    elseif v == 7 then\n      table.insert(result, \"Seven\")\n  \
    \  elseif v == 8 then\n      table.insert(result, \"Eight\")\n    elseif v ==\
    \ 9 then\n      table.insert(result, \"Nine\")\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n        \
    \    local digit = arr[i]\n            local digit_name = ''\n            if digit\
    \ == 1 then\n                digit_name = 'One'\n            elseif digit == 2\
    \ then\n                digit_name = 'Two'\n            elseif digit == 3 then\n\
    \                digit_name = 'Three'\n            elseif digit == 4 then\n  \
    \              digit_name = 'Four'\n            elseif digit == 5 then\n     \
    \           digit_name = 'Five'\n            elseif digit == 6 then\n        \
    \        digit_name = 'Six'\n            elseif digit == 7 then\n            \
    \    digit_name = 'Seven'\n            elseif digit == 8 then\n              \
    \  digit_name = 'Eight'\n            elseif digit == 9 then\n                digit_name\
    \ = 'Nine'\n            end\n            table.insert(result, digit_name)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt7mkh_g.lua:47:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmpdt7mkh_g.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(result,\
    \ arr[i])\n    end\n  end\n  table.sort(result)\n  local reverse_result = {}\n\
    \  for i = #result, 1, -1 do\n    table.insert(reverse_result, result[i])\n  end\n\
    \  local final_result = {}\n  for i = 1, #reverse_result do\n    if reverse_result[i]\
    \ == 1 then\n      table.insert(final_result, \"One\")\n    elseif reverse_result[i]\
    \ == 2 then\n      table.insert(final_result, \"Two\")\n    elseif reverse_result[i]\
    \ == 3 then\n      table.insert(final_result, \"Three\")\n    elseif reverse_result[i]\
    \ == 4 then\n      table.insert(final_result, \"Four\")\n    elseif reverse_result[i]\
    \ == 5 then\n      table.insert(final_result, \"Five\")\n    elseif reverse_result[i]\
    \ == 6 then\n      table.insert(final_result, \"Six\")\n    elseif reverse_result[i]\
    \ == 7 then\n      table.insert(final_result, \"Seven\")\n    elseif reverse_result[i]\
    \ == 8 then\n      table.insert(final_result, \"Eight\")\n    elseif reverse_result[i]\
    \ == 9 then\n      table.insert(final_result, \"Nine\")\n    end\n  end\n  return\
    \ final_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n        \
    \    table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #result do\n        result[i]\
    \ = names[result[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmztz2d3i.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpmztz2d3i.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     result[#result + 1] = arr[i]\n        end\n    end\n    table.sort(result)\n\
    \    local res = {}\n    for i = 1, #result do\n        res[#res + 1] = numbers[result[i]]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_i4axst.lua:23:\
    \ attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpt_i4axst.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpt_i4axst.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local dict = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, dict[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlvtkmrp.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpzlvtkmrp.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = string.format(\"%s\", res[i])\n    end\n  \
    \  table.sort(res, function(a, b) return #a > #b end)\n    for i = 1, #res do\n\
    \        res[i] = string.format(\"%s\", res[i])\n    end\n    for i = 1, #res\
    \ do\n        if res[i] == \"1\" then\n            res[i] = \"One\"\n        elseif\
    \ res[i] == \"2\" then\n            res[i] = \"Two\"\n        elseif res[i] ==\
    \ \"3\" then\n            res[i] = \"Three\"\n        elseif res[i] == \"4\" then\n\
    \            res[i] = \"Four\"\n        elseif res[i] == \"5\" then\n        \
    \    res[i] = \"Five\"\n        elseif res[i] == \"6\" then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == \"7\" then\n            res[i] = \"Seven\"\
    \n        elseif res[i] == \"8\" then\n            res[i] = \"Eight\"\n      \
    \  elseif res[i] == \"9\" then\n            res[i] = \"Nine\"\n        end\n \
    \   end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzqjlo7.lua:55:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\"\
    , \"Two\", \"Eight\"}\nstack traceback:\n\t/tmp/tmptxzqjlo7.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"One\"\n\
    \        elseif res[i] == 2 then\n            res[i] = \"Two\"\n        elseif\
    \ res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i] == 4\
    \ then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n     \
    \       res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwjb03q0.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpqwjb03q0.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = string.format(\"%s\", result[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzmzimus.lua:30:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmpwzmzimus.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ local digits = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result\
    \ + 1] = digits[v]\n    end\n  end\n  table.sort(result)\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77_5m5k1.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp77_5m5k1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao6hm35o.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpao6hm35o.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpao6hm35o.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  local result2 = {}\n    for i, v in ipairs(result) do\n        table.insert(result2,\
    \ 1, v)\n    end\n    local result3 = {}\n    for i, v in ipairs(result2) do\n\
    \        if v == 1 then\n            table.insert(result3, 'One')\n        elseif\
    \ v == 2 then\n            table.insert(result3, 'Two')\n        elseif v == 3\
    \ then\n            table.insert(result3, 'Three')\n        elseif v == 4 then\n\
    \            table.insert(result3, 'Four')\n        elseif v == 5 then\n     \
    \       table.insert(result3, 'Five')\n        elseif v == 6 then\n          \
    \  table.insert(result3, 'Six')\n        elseif v == 7 then\n            table.insert(result3,\
    \ 'Seven')\n        elseif v == 8 then\n            table.insert(result3, 'Eight')\n\
    \        elseif v == 9 then\n            table.insert(result3, 'Nine')\n     \
    \   end\n    end\n    return result3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        if result[i] ==\
    \ '1' then\n            result[i] = 'One'\n        elseif result[i] == '2' then\n\
    \            result[i] = 'Two'\n        elseif result[i] == '3' then\n       \
    \     result[i] = 'Three'\n        elseif result[i] == '4' then\n            result[i]\
    \ = 'Four'\n        elseif result[i] == '5' then\n            result[i] = 'Five'\n\
    \        elseif result[i] == '6' then\n            result[i] = 'Six'\n       \
    \ elseif result[i] == '7' then\n            result[i] = 'Seven'\n        elseif\
    \ result[i] == '8' then\n            result[i] = 'Eight'\n        elseif result[i]\
    \ == '9' then\n            result[i] = 'Nine'\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcbjen1kc.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpcbjen1kc.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpcbjen1kc.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      res[#res + 1]\
    \ = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i]\
    \ = names[res[i]]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprk_3h72d.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmprk_3h72d.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmprk_3h72d.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ local one = \"One\"\n  local two = \"Two\"\n  local three = \"Three\"\n  local\
    \ four = \"Four\"\n  local five = \"Five\"\n  local six = \"Six\"\n  local seven\
    \ = \"Seven\"\n  local eight = \"Eight\"\n  local nine = \"Nine\"\n  for i = 1,\
    \ #arr do\n    if arr[i] == 1 then\n      result[#result + 1] = one\n    elseif\
    \ arr[i] == 2 then\n      result[#result + 1] = two\n    elseif arr[i] == 3 then\n\
    \      result[#result + 1] = three\n    elseif arr[i] == 4 then\n      result[#result\
    \ + 1] = four\n    elseif arr[i] == 5 then\n      result[#result + 1] = five\n\
    \    elseif arr[i] == 6 then\n      result[#result + 1] = six\n    elseif arr[i]\
    \ == 7 then\n      result[#result + 1] = seven\n    elseif arr[i] == 8 then\n\
    \      result[#result + 1] = eight\n    elseif arr[i] == 9 then\n      result[#result\
    \ + 1] = nine\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68p55ez3.lua:51:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmp68p55ez3.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort_table(t)\n\
    \        local function compare(a, b)\n            return a < b\n        end\n\
    \        table.sort(t, compare)\n        return t\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9k9cv4ng.lua:32: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i,\
    \ v in ipairs(res) do\n        res[i] = tostring(v)\n    end\n    for i, v in\
    \ ipairs(res) do\n        if v == '1' then\n            res[i] = 'One'\n     \
    \   elseif v == '2' then\n            res[i] = 'Two'\n        elseif v == '3'\
    \ then\n            res[i] = 'Three'\n        elseif v == '4' then\n         \
    \   res[i] = 'Four'\n        elseif v == '5' then\n            res[i] = 'Five'\n\
    \        elseif v == '6' then\n            res[i] = 'Six'\n        elseif v ==\
    \ '7' then\n            res[i] = 'Seven'\n        elseif v == '8' then\n     \
    \       res[i] = 'Eight'\n        elseif v == '9' then\n            res[i] = 'Nine'\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod8gxdc7.lua:51:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpod8gxdc7.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort_table(arr)\n\
    \    local function sort_table_rec(arr, i, j)\n      if i < j then\n        local\
    \ k = math.floor((i + j) / 2)\n        local pivot = arr[k]\n        arr[k] =\
    \ arr[j]\n        local l = i\n        for m = i, j - 1 do\n          if arr[m]\
    \ < pivot then\n            arr[l], arr[m] = arr[m], arr[l]\n            l = l\
    \ + 1\n          end\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n \
    \       sort_table_rec(arr, i, l - 1)\n        sort_table_rec(arr, l + 1, j)\n\
    \      end\n    end\n    sort_table_rec(arr, 1, #arr)\n    return arr\n  end\n\
    \  local function reverse_table(arr)\n    local new_arr = {}\n    for i = #arr,\
    \ 1, -1 do\n      new_arr[#new_arr + 1] = arr[i]\n    end\n    return new_arr\n\
    \  end\n  local function replace_digits(arr)\n    local new_arr = {}\n    for\
    \ i = 1, #arr do\n      if arr[i] == 1 then\n        new_arr[#new_arr + 1] = \"\
    One\"\n      elseif arr[i] == 2 then\n        new_arr[#new_arr + 1] = \"Two\"\n\
    \      elseif arr[i] == 3 then\n        new_arr[#new_arr + 1] = \"Three\"\n  \
    \    elseif arr[i] == 4 then\n        new_arr[#new_arr + 1] = \"Four\"\n     \
    \ elseif arr[i] == 5 then\n        new_arr[#new_arr + 1] = \"Five\"\n      elseif\
    \ arr[i] == 6 then\n        new_arr[#new_arr + 1] = \"Six\"\n      elseif arr[i]\
    \ == 7 then\n        new_arr[#new_arr + 1] = \"Seven\"\n      elseif arr[i] ==\
    \ 8 then\n        new_arr[#new_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr98eoss2.lua:61: ']' expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            table.insert(result, numbers[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuswy5p28.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpuswy5p28.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n    for i, v in\
    \ ipairs(res) do\n        res[i] = tostring(v)\n    end\n    table.sort(res, function(a,\
    \ b) return #a > #b end)\n    for i, v in ipairs(res) do\n        res[i] = tonumber(v)\n\
    \    end\n    for i, v in ipairs(res) do\n        res[i] = tostring(v)\n    end\n\
    \    for i, v in ipairs(res) do\n        res[i] = v:gsub(\"1\", \"One\")\n   \
    \     res[i] = v:gsub(\"2\", \"Two\")\n        res[i] = v:gsub(\"3\", \"Three\"\
    )\n        res[i] = v:gsub(\"4\", \"Four\")\n        res[i] = v:gsub(\"5\", \"\
    Five\")\n        res[i] = v:gsub(\"6\", \"Six\")\n        res[i] = v:gsub(\"7\"\
    , \"Seven\")\n        res[i] = v:gsub(\"8\", \"Eight\")\n        res[i] = v:gsub(\"\
    9\", \"Nine\")\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2i4h823.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"3\", \"4\", \"5\", \"2\", \"1\", \"2\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmpb2i4h823.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i,v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  local names = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for i,v in ipairs(result)\
    \ do\n    result[i] = names[v]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5_k5z4t.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpj5_k5z4t.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    for i = 1, #res do\n        if res[i] == '1' then\n            res[i] = 'One'\n\
    \        elseif res[i] == '2' then\n            res[i] = 'Two'\n        elseif\
    \ res[i] == '3' then\n            res[i] = 'Three'\n        elseif res[i] == '4'\
    \ then\n            res[i] = 'Four'\n        elseif res[i] == '5' then\n     \
    \       res[i] = 'Five'\n        elseif res[i] == '6' then\n            res[i]\
    \ = 'Six'\n        elseif res[i] == '7' then\n            res[i] = 'Seven'\n \
    \       elseif res[i] == '8' then\n            res[i] = 'Eight'\n        elseif\
    \ res[i] == '9' then\n            res[i] = 'Nine'\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpua_hm7li.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpua_hm7li.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpua_hm7li.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    for i = 1, #res\
    \ do\n        res[i] = res[i]:gsub(\"1\", \"One\")\n        res[i] = res[i]:gsub(\"\
    2\", \"Two\")\n        res[i] = res[i]:gsub(\"3\", \"Three\")\n        res[i]\
    \ = res[i]:gsub(\"4\", \"Four\")\n        res[i] = res[i]:gsub(\"5\", \"Five\"\
    )\n        res[i] = res[i]:gsub(\"6\", \"Six\")\n        res[i] = res[i]:gsub(\"\
    7\", \"Seven\")\n        res[i] = res[i]:gsub(\"8\", \"Eight\")\n        res[i]\
    \ = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfu6cmeut.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpfu6cmeut.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n\
    \            result[#result + 1] = numbers[arr[i]]\n        end\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34t5xawh.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmp34t5xawh.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort_by_length(a,\
    \ b)\n        return #a < #b\n    end\n    local function replace_by_name(a)\n\
    \        if a == 1 then\n            return \"One\"\n        elseif a == 2 then\n\
    \            return \"Two\"\n        elseif a == 3 then\n            return \"\
    Three\"\n        elseif a == 4 then\n            return \"Four\"\n        elseif\
    \ a == 5 then\n            return \"Five\"\n        elseif a == 6 then\n     \
    \       return \"Six\"\n        elseif a == 7 then\n            return \"Seven\"\
    \n        elseif a == 8 then\n            return \"Eight\"\n        elseif a ==\
    \ 9 then\n            return \"Nine\"\n        end\n    end\n    local function\
    \ is_valid(a)\n        return a >= 1 and a <= 9\n    end\n    local function filter_valid(arr)\n\
    \        local res = {}\n        for _, v in ipairs(arr) do\n            if is_valid(v)\
    \ then\n                table.insert(res, v)\n            end\n        end\n \
    \       return res\n    end\n    local function replace_by_name_all(arr)\n   \
    \     local res = {}\n        for _, v in ipairs(arr) do\n            table.insert(res,\
    \ replace_by_name(v))\n        end\n        return res\n    end\n    local function\
    \ reverse(arr)\n        local res = {}\n        for i = #arr, 1, -1 do\n     \
    \       table.insert(res, arr[i])\n        end\n        return res\n    end\n\
    \    local function sort_and_replace(arr)\n        local res = {}\n        for\
    \ _, v in ipairs(arr) do\n            table.insert(res, replace_by_name(v))\n\
    \        end\n        table.sort(res, sort_by_length)\n        return res\n  \
    \  end\n    local valid_arr = filter_valid(arr)\n    local sorted_arr = sort_and_replace(valid_arr)\n\
    \    local reversed_arr = reverse(sorted_arr)\n    return reversed_arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjwxm_rq.lua:81:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Three\", \"Eight\", \"Four\", \"Five\", \"One\", \"One\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpvjwxm_rq.lua:81: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = num_to_str[result[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkfac9thc.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpkfac9thc.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkfac9thc.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = num_to_str[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xst5z7t.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp2xst5z7t.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp2xst5z7t.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6svny137.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmp6svny137.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6svny137.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    for i = 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\"):gsub(\"\
    2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"\
    ):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\"\
    , \"Nine\")\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbihs08r6.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpbihs08r6.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpbihs08r6.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n    for i, v in\
    \ ipairs(res) do\n        res[i] = tostring(v)\n    end\n    table.sort(res, function(a,\
    \ b) return #a > #b end)\n    for i, v in ipairs(res) do\n        res[i] = tostring(v)\n\
    \    end\n    for i, v in ipairs(res) do\n        if v == '1' then\n         \
    \   res[i] = 'One'\n        elseif v == '2' then\n            res[i] = 'Two'\n\
    \        elseif v == '3' then\n            res[i] = 'Three'\n        elseif v\
    \ == '4' then\n            res[i] = 'Four'\n        elseif v == '5' then\n   \
    \         res[i] = 'Five'\n        elseif v == '6' then\n            res[i] =\
    \ 'Six'\n        elseif v == '7' then\n            res[i] = 'Seven'\n        elseif\
    \ v == '8' then\n            res[i] = 'Eight'\n        elseif v == '9' then\n\
    \            res[i] = 'Nine'\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgo7kd8ao.lua:55:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\"\
    , \"Two\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpgo7kd8ao.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = numbers[result[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvb7968jw.lua:22:\
    \ attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpvb7968jw.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpvb7968jw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ map[v])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3vis5z1.lua:37:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmpv3vis5z1.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"One\"\n\
    \        elseif res[i] == 2 then\n            res[i] = \"Two\"\n        elseif\
    \ res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i] == 4\
    \ then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n     \
    \       res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuekrj5a.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpmuekrj5a.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = res[#res - i + 1]\n    end\n    for i = 1, #res\
    \ do\n        res[i] = tostring(res[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsa8l6if.lua:33:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmptsa8l6if.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        if result[i] == 1 then\n            result[i]\
    \ = \"One\"\n        elseif result[i] == 2 then\n            result[i] = \"Two\"\
    \n        elseif result[i] == 3 then\n            result[i] = \"Three\"\n    \
    \    elseif result[i] == 4 then\n            result[i] = \"Four\"\n        elseif\
    \ result[i] == 5 then\n            result[i] = \"Five\"\n        elseif result[i]\
    \ == 6 then\n            result[i] = \"Six\"\n        elseif result[i] == 7 then\n\
    \            result[i] = \"Seven\"\n        elseif result[i] == 8 then\n     \
    \       result[i] = \"Eight\"\n        elseif result[i] == 9 then\n          \
    \  result[i] = \"Nine\"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk_gvdec.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpdk_gvdec.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    local map = {\n        ['1'] = 'One',\n        ['2'] = 'Two',\n        ['3']\
    \ = 'Three',\n        ['4'] = 'Four',\n        ['5'] = 'Five',\n        ['6']\
    \ = 'Six',\n        ['7'] = 'Seven',\n        ['8'] = 'Eight',\n        ['9']\
    \ = 'Nine'\n    }\n    for i = 1, #res do\n        res[i] = map[res[i]]\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrns5yh9.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpmrns5yh9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpmrns5yh9.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ map[v])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlyz_x2r.lua:37:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmprlyz_x2r.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     result[#result + 1] = arr[i]\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n\
    \    for i = 1, #result do\n        if result[i] == '1' then\n            result[i]\
    \ = 'One'\n        elseif result[i] == '2' then\n            result[i] = 'Two'\n\
    \        elseif result[i] == '3' then\n            result[i] = 'Three'\n     \
    \   elseif result[i] == '4' then\n            result[i] = 'Four'\n        elseif\
    \ result[i] == '5' then\n            result[i] = 'Five'\n        elseif result[i]\
    \ == '6' then\n            result[i] = 'Six'\n        elseif result[i] == '7'\
    \ then\n            result[i] = 'Seven'\n        elseif result[i] == '8' then\n\
    \            result[i] = 'Eight'\n        elseif result[i] == '9' then\n     \
    \       result[i] = 'Nine'\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ox871s6.lua:51:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp8ox871s6.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    for i = 1, #res\
    \ do\n        res[i] = res[i]:gsub(\"1\", \"One\")\n        res[i] = res[i]:gsub(\"\
    2\", \"Two\")\n        res[i] = res[i]:gsub(\"3\", \"Three\")\n        res[i]\
    \ = res[i]:gsub(\"4\", \"Four\")\n        res[i] = res[i]:gsub(\"5\", \"Five\"\
    )\n        res[i] = res[i]:gsub(\"6\", \"Six\")\n        res[i] = res[i]:gsub(\"\
    7\", \"Seven\")\n        res[i] = res[i]:gsub(\"8\", \"Eight\")\n        res[i]\
    \ = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuuu4yl9.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpcuuu4yl9.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   for i = 1, #result do\n        result[i] = string.upper(result[i]:sub(1, 1))\
    \ .. result[i]:sub(2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskem3b6a.lua:33:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmpskem3b6a.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local new_arr = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    local result = {}\n    for i = #new_arr, 1, -1 do\n        table.insert(result,\
    \ tostring(new_arr[i]))\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j9ns7xw.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\n\
    stack traceback:\n\t/tmp/tmp9j9ns7xw.lua:31: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = DIGITS[result[i]]\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7luk5gfe.lua:22:\
    \ attempt to index a nil value (global 'DIGITS')\nstack traceback:\n\t/tmp/tmp7luk5gfe.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp7luk5gfe.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local t = {}\n    for\
    \ _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    local res = {}\n    for i =\
    \ #t, 1, -1 do\n        table.insert(res, tostring(t[i]))\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogphvpvd.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\n\
    stack traceback:\n\t/tmp/tmpogphvpvd.lua:31: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      res[#res + 1]\
    \ = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i]\
    \ = names[res[i]]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp503hjfke.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmp503hjfke.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp503hjfke.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort_func(a,\
    \ b)\n    return a < b\n  end\n  local function reverse_func(a, b)\n    return\
    \ a > b\n  end\n  local function replace_func(a)\n    if a == 1 then\n      return\
    \ \"One\"\n    elseif a == 2 then\n      return \"Two\"\n    elseif a == 3 then\n\
    \      return \"Three\"\n    elseif a == 4 then\n      return \"Four\"\n    elseif\
    \ a == 5 then\n      return \"Five\"\n    elseif a == 6 then\n      return \"\
    Six\"\n    elseif a == 7 then\n      return \"Seven\"\n    elseif a == 8 then\n\
    \      return \"Eight\"\n    elseif a == 9 then\n      return \"Nine\"\n    end\n\
    \  end\n  local function filter_func(a)\n    return a >= 1 and a <= 9\n  end\n\
    \  local function map_func(a)\n    return replace_func(a)\n  end\n  local function\
    \ reduce_func(a, b)\n    return a .. b\n  end\n  return arr:filter(filter_func):sort(sort_func):reverse():map(map_func):reduce(reduce_func)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshxonmbr.lua:50:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpshxonmbr.lua:50:\
    \ in local 'candidate'\n\t/tmp/tmpshxonmbr.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmf3nnbl2.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpmf3nnbl2.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpmf3nnbl2.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = tostring(result[i])\n  end\n  table.reverse(result)\n  for i = 1, #result\
    \ do\n    result[i] = string.gsub(result[i], '1', 'One')\n    result[i] = string.gsub(result[i],\
    \ '2', 'Two')\n    result[i] = string.gsub(result[i], '3', 'Three')\n    result[i]\
    \ = string.gsub(result[i], '4', 'Four')\n    result[i] = string.gsub(result[i],\
    \ '5', 'Five')\n    result[i] = string.gsub(result[i], '6', 'Six')\n    result[i]\
    \ = string.gsub(result[i], '7', 'Seven')\n    result[i] = string.gsub(result[i],\
    \ '8', 'Eight')\n    result[i] = string.gsub(result[i], '9', 'Nine')\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwoscpcav.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpwoscpcav.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpwoscpcav.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioxso1yr.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpioxso1yr.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = tostring(result[i])\n  end\n  table.reverse(result)\n  for i = 1, #result\
    \ do\n    result[i] = result[i]:gsub(\"1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"\
    3\", \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"\
    ):gsub(\"7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\", \"Nine\")\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_odmhcsj.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp_odmhcsj.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp_odmhcsj.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnbb0u4k.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmplnbb0u4k.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n    result[i]\
    \ = tostring(result[i])\n  end\n  table.reverse(result)\n  for i = 1, #result\
    \ do\n    result[i] = string.gsub(result[i], \"1\", \"One\")\n    result[i] =\
    \ string.gsub(result[i], \"2\", \"Two\")\n    result[i] = string.gsub(result[i],\
    \ \"3\", \"Three\")\n    result[i] = string.gsub(result[i], \"4\", \"Four\")\n\
    \    result[i] = string.gsub(result[i], \"5\", \"Five\")\n    result[i] = string.gsub(result[i],\
    \ \"6\", \"Six\")\n    result[i] = string.gsub(result[i], \"7\", \"Seven\")\n\
    \    result[i] = string.gsub(result[i], \"8\", \"Eight\")\n    result[i] = string.gsub(result[i],\
    \ \"9\", \"Nine\")\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47z89r59.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp47z89r59.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp47z89r59.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local num_to_name = {\n        [1] = \"One\",\n        [2] = \"Two\",\n \
    \       [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n \
    \       [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n \
    \       [9] = \"Nine\"\n    }\n    for i, v in ipairs(arr) do\n        if v >=\
    \ 1 and v <= 9 then\n            table.insert(result, num_to_name[v])\n      \
    \  end\n    end\n    table.sort(result)\n    table.reverse(result)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvfrjqr3.lua:32:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpjvfrjqr3.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpjvfrjqr3.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub(\"\
    1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"\
    ):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\"\
    , \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgtfqovd.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmprgtfqovd.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmprgtfqovd.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    for i = 1, #res\
    \ do\n        res[i] = string.gsub(res[i], \"1\", \"One\")\n        res[i] = string.gsub(res[i],\
    \ \"2\", \"Two\")\n        res[i] = string.gsub(res[i], \"3\", \"Three\")\n  \
    \      res[i] = string.gsub(res[i], \"4\", \"Four\")\n        res[i] = string.gsub(res[i],\
    \ \"5\", \"Five\")\n        res[i] = string.gsub(res[i], \"6\", \"Six\")\n   \
    \     res[i] = string.gsub(res[i], \"7\", \"Seven\")\n        res[i] = string.gsub(res[i],\
    \ \"8\", \"Eight\")\n        res[i] = string.gsub(res[i], \"9\", \"Nine\")\n \
    \   end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgt7uxve.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpvgt7uxve.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = numbers[result[i]]\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mvd3bsz.lua:22:\
    \ attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmp5mvd3bsz.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp5mvd3bsz.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = tostring(result[i])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47zc9mu0.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp47zc9mu0.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp47zc9mu0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort_table(arr)\n\
    \    local function sort_func(a, b)\n      return a < b\n    end\n    table.sort(arr,\
    \ sort_func)\n    return arr\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppkz51b1n.lua:32: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local names = {\n        [1] = \"One\",\n        [2] = \"Two\",\n       \
    \ [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n       \
    \ [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n       \
    \ [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(result, names[v])\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_ya_3vh.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp2_ya_3vh.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i, v in ipairs(result) do\n\
    \    result[i] = tostring(v)\n  end\n  table.sort(result, function(a, b) return\
    \ #a > #b end)\n  for i, v in ipairs(result) do\n    result[i] = tonumber(v)\n\
    \  end\n  for i, v in ipairs(result) do\n    if v == 1 then\n      result[i] =\
    \ \"One\"\n    elseif v == 2 then\n      result[i] = \"Two\"\n    elseif v ==\
    \ 3 then\n      result[i] = \"Three\"\n    elseif v == 4 then\n      result[i]\
    \ = \"Four\"\n    elseif v == 5 then\n      result[i] = \"Five\"\n    elseif v\
    \ == 6 then\n      result[i] = \"Six\"\n    elseif v == 7 then\n      result[i]\
    \ = \"Seven\"\n    elseif v == 8 then\n      result[i] = \"Eight\"\n    elseif\
    \ v == 9 then\n      result[i] = \"Nine\"\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zk0pbz9.lua:55:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\"\
    , \"Two\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp6zk0pbz9.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = num_to_str[result[i]]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwsvmu7dn.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpwsvmu7dn.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpwsvmu7dn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub(\"\
    1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"\
    ):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\"\
    , \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbjye92j2.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpbjye92j2.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpbjye92j2.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort_table(t)\n\
    \        local function sort_func(a, b)\n            return a < b\n        end\n\
    \        table.sort(t, sort_func)\n        return t\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_gtw3ddm.lua:32: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local numbers = {\n        [1] = \"One\",\n        [2] = \"Two\",\n     \
    \   [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n     \
    \   [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n     \
    \   [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n        if v >= 1 and\
    \ v <= 9 then\n            table.insert(result, numbers[v])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewjmilwe.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpewjmilwe.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      res[#res + 1]\
    \ = arr[i]\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    if res[i]\
    \ == 1 then\n      res[i] = 'One'\n    elseif res[i] == 2 then\n      res[i] =\
    \ 'Two'\n    elseif res[i] == 3 then\n      res[i] = 'Three'\n    elseif res[i]\
    \ == 4 then\n      res[i] = 'Four'\n    elseif res[i] == 5 then\n      res[i]\
    \ = 'Five'\n    elseif res[i] == 6 then\n      res[i] = 'Six'\n    elseif res[i]\
    \ == 7 then\n      res[i] = 'Seven'\n    elseif res[i] == 8 then\n      res[i]\
    \ = 'Eight'\n    elseif res[i] == 9 then\n      res[i] = 'Nine'\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu1yyl86.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpzu1yyl86.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i, v in ipairs(result) do\n        result[i] = names[v]\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb80r7g9x.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpb80r7g9x.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        if res[i] == 1 then\n            res[i] = \"One\"\n\
    \        elseif res[i] == 2 then\n            res[i] = \"Two\"\n        elseif\
    \ res[i] == 3 then\n            res[i] = \"Three\"\n        elseif res[i] == 4\
    \ then\n            res[i] = \"Four\"\n        elseif res[i] == 5 then\n     \
    \       res[i] = \"Five\"\n        elseif res[i] == 6 then\n            res[i]\
    \ = \"Six\"\n        elseif res[i] == 7 then\n            res[i] = \"Seven\"\n\
    \        elseif res[i] == 8 then\n            res[i] = \"Eight\"\n        elseif\
    \ res[i] == 9 then\n            res[i] = \"Nine\"\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz91lrcu6.lua:48:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpz91lrcu6.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowi2hodl.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpowi2hodl.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpowi2hodl.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqs0aiaqg.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpqs0aiaqg.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpqs0aiaqg.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    for i, v in ipairs(res) do\n\
    \        res[i] = tostring(v)\n    end\n    for i, v in ipairs(res) do\n     \
    \   if v == '1' then\n            res[i] = 'One'\n        elseif v == '2' then\n\
    \            res[i] = 'Two'\n        elseif v == '3' then\n            res[i]\
    \ = 'Three'\n        elseif v == '4' then\n            res[i] = 'Four'\n     \
    \   elseif v == '5' then\n            res[i] = 'Five'\n        elseif v == '6'\
    \ then\n            res[i] = 'Six'\n        elseif v == '7' then\n           \
    \ res[i] = 'Seven'\n        elseif v == '8' then\n            res[i] = 'Eight'\n\
    \        elseif v == '9' then\n            res[i] = 'Nine'\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3_gw2bd.lua:51:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpq3_gw2bd.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort(arr)\n\
    \        local function swap(i, j)\n            local temp = arr[i]\n        \
    \    arr[i] = arr[j]\n            arr[j] = temp\n        end\n        for i =\
    \ 1, #arr do\n            for j = i + 1, #arr do\n                if arr[i] >\
    \ arr[j] then\n                    swap(i, j)\n                end\n         \
    \   end\n        end\n    end\n    local function reverse(arr)\n        local\
    \ function swap(i, j)\n            local temp = arr[i]\n            arr[i] = arr[j]\n\
    \            arr[j] = temp\n        end\n        for i = 1, #arr / 2 do\n    \
    \        swap(i, #arr - i + 1)\n        end\n    end\n    local function replace(arr)\n\
    \        local function replace_one(num)\n            if num == 1 then\n     \
    \           return 'One'\n            elseif num == 2 then\n                return\
    \ 'Two'\n            elseif num == 3 then\n                return 'Three'\n  \
    \          elseif num == 4 then\n                return 'Four'\n            elseif\
    \ num == 5 then\n                return 'Five'\n            elseif num == 6 then\n\
    \                return 'Six'\n            elseif num == 7 then\n            \
    \    return 'Seven'\n            elseif num == 8 then\n                return\
    \ 'Eight'\n            elseif num == 9 then\n                return 'Nine'\n \
    \           end\n        end\n        for i = 1, #arr do\n            arr[i] =\
    \ replace_one(arr[i])\n        end\n    end\n    local function filter(arr)\n\
    \        local function is_valid(num)\n            return num >= 1 and num <=\
    \ 9\n        end\n        local new_arr = {}\n        for i = 1, #arr do\n   \
    \         if is_valid(arr[i]) then\n                new_arr[#new_arr + 1] = arr[i]\n\
    \            end\n        end\n        return new_arr\n    end\n    arr = filter(arr)\n\
    \    sort(arr)\n    reverse(arr)\n    replace(arr)\n    return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local dict = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ dict[v])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppooxv47t.lua:37:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmppooxv47t.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = number_to_name[v]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2cliqr8.lua:22:\
    \ attempt to index a nil value (global 'number_to_name')\nstack traceback:\n\t\
    /tmp/tmpf2cliqr8.lua:22: in local 'candidate'\n\t/tmp/tmpf2cliqr8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort_table(t)\n\
    \    local function swap(a, b)\n      local temp = t[a]\n      t[a] = t[b]\n \
    \     t[b] = temp\n    end\n    local function compare(a, b)\n      return a >\
    \ b\n    end\n    for i = 1, #t do\n      for j = i + 1, #t do\n        if compare(t[i],\
    \ t[j]) then\n          swap(i, j)\n        end\n      end\n    end\n  end\n \
    \ local function reverse_table(t)\n    local length = #t\n    for i = 1, length\
    \ / 2 do\n      local temp = t[i]\n      t[i] = t[length - i + 1]\n      t[length\
    \ - i + 1] = temp\n    end\n  end\n  local function replace_number(t)\n    local\
    \ number_map = {\n      [1] = 'One',\n      [2] = 'Two',\n      [3] = 'Three',\n\
    \      [4] = 'Four',\n      [5] = 'Five',\n      [6] = 'Six',\n      [7] = 'Seven',\n\
    \      [8] = 'Eight',\n      [9] = 'Nine'\n    }\n    for i = 1, #t do\n     \
    \ t[i] = number_map[t[i]]\n    end\n  end\n  local function filter_table(t)\n\
    \    local new_table = {}\n    for i = 1, #t do\n      if t[i] >= 1 and t[i] <=\
    \ 9 then\n        new_table[#new_table + 1] = t[i]\n      end\n    end\n    return\
    \ new_table\n  end\n  local new_table = filter_table(arr)\n  sort_table(new_table)\n\
    \  reverse_table(new_table)\n  replace_number(new_table)\n  return new_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i = 1, #res do\n        res[i] = names[tonumber(res[i])]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpum2ht5l4.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpum2ht5l4.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpum2ht5l4.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = num_to_str[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gpnogcc.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp6gpnogcc.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6gpnogcc.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = num_to_str[result[i]]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmkt6vcif.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpmkt6vcif.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpmkt6vcif.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = num_to_str[result[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmporgosjaw.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmporgosjaw.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmporgosjaw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    local reverse_result = {}\n    for i = #result, 1, -1 do\n        table.insert(reverse_result,\
    \ result[i])\n    end\n    local final_result = {}\n    for i = 1, #reverse_result\
    \ do\n        if reverse_result[i] == 1 then\n            table.insert(final_result,\
    \ \"One\")\n        elseif reverse_result[i] == 2 then\n            table.insert(final_result,\
    \ \"Two\")\n        elseif reverse_result[i] == 3 then\n            table.insert(final_result,\
    \ \"Three\")\n        elseif reverse_result[i] == 4 then\n            table.insert(final_result,\
    \ \"Four\")\n        elseif reverse_result[i] == 5 then\n            table.insert(final_result,\
    \ \"Five\")\n        elseif reverse_result[i] == 6 then\n            table.insert(final_result,\
    \ \"Six\")\n        elseif reverse_result[i] == 7 then\n            table.insert(final_result,\
    \ \"Seven\")\n        elseif reverse_result[i] == 8 then\n            table.insert(final_result,\
    \ \"Eight\")\n        elseif reverse_result[i] == 9 then\n            table.insert(final_result,\
    \ \"Nine\")\n        end\n    end\n    return final_result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = result[i]:gsub(\"\
    1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"\
    ):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\"\
    , \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jqyi1ux.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp0jqyi1ux.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp0jqyi1ux.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local function sort_table(t)\n\
    \        local function compare(a, b)\n            return a < b\n        end\n\
    \        table.sort(t, compare)\n        return t\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu280u_3o.lua:32: 'end' expected (to close 'function' at line\
    \ 13) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    for i = 1, #res\
    \ do\n        res[i] = res[i]:gsub(\"1\", \"One\")\n        res[i] = res[i]:gsub(\"\
    2\", \"Two\")\n        res[i] = res[i]:gsub(\"3\", \"Three\")\n        res[i]\
    \ = res[i]:gsub(\"4\", \"Four\")\n        res[i] = res[i]:gsub(\"5\", \"Five\"\
    )\n        res[i] = res[i]:gsub(\"6\", \"Six\")\n        res[i] = res[i]:gsub(\"\
    7\", \"Seven\")\n        res[i] = res[i]:gsub(\"8\", \"Eight\")\n        res[i]\
    \ = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaemd_x9w.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpaemd_x9w.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local function sort_by_length(a,\
    \ b)\n    return a < b\n  end\n  local function reverse_table(arr)\n    local\
    \ reversed = {}\n    for i = #arr, 1, -1 do\n      reversed[#reversed + 1] = arr[i]\n\
    \    end\n    return reversed\n  end\n  local function replace_by_name(arr)\n\
    \    local names = {\n      [1] = 'One',\n      [2] = 'Two',\n      [3] = 'Three',\n\
    \      [4] = 'Four',\n      [5] = 'Five',\n      [6] = 'Six',\n      [7] = 'Seven',\n\
    \      [8] = 'Eight',\n      [9] = 'Nine'\n    }\n    local new_arr = {}\n   \
    \ for i = 1, #arr do\n      if arr[i] > 0 and arr[i] < 10 then\n        new_arr[#new_arr\
    \ + 1] = names[arr[i]]\n      end\n    end\n    return new_arr\n  end\n  return\
    \ replace_by_name(reverse_table(table.sort(arr, sort_by_length)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl0l7mndz.lua:19:\
    \ attempt to get length of a nil value (local 'arr')\nstack traceback:\n\t/tmp/tmpl0l7mndz.lua:19:\
    \ in local 'reverse_table'\n\t/tmp/tmpl0l7mndz.lua:44: in local 'candidate'\n\t\
    /tmp/tmpl0l7mndz.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  local res2 = {}\n  for i = #res, 1,\
    \ -1 do\n    table.insert(res2, res[i])\n  end\n  local res3 = {}\n  for _, v\
    \ in ipairs(res2) do\n    if v == 1 then\n      table.insert(res3, \"One\")\n\
    \    elseif v == 2 then\n      table.insert(res3, \"Two\")\n    elseif v == 3\
    \ then\n      table.insert(res3, \"Three\")\n    elseif v == 4 then\n      table.insert(res3,\
    \ \"Four\")\n    elseif v == 5 then\n      table.insert(res3, \"Five\")\n    elseif\
    \ v == 6 then\n      table.insert(res3, \"Six\")\n    elseif v == 7 then\n   \
    \   table.insert(res3, \"Seven\")\n    elseif v == 8 then\n      table.insert(res3,\
    \ \"Eight\")\n    elseif v == 9 then\n      table.insert(res3, \"Nine\")\n   \
    \ end\n  end\n  return res3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local new_arr = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    local result = {}\n    for i = #new_arr, 1, -1 do\n        table.insert(result,\
    \ tostring(new_arr[i]))\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2x2lcd8.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\n\
    stack traceback:\n\t/tmp/tmpz2x2lcd8.lua:31: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local new_arr = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(new_arr, arr[i])\n        end\n    end\n    table.sort(new_arr)\n\
    \    local reverse_arr = {}\n    for i = #new_arr, 1, -1 do\n        table.insert(reverse_arr,\
    \ new_arr[i])\n    end\n    local result = {}\n    for i = 1, #reverse_arr do\n\
    \        if reverse_arr[i] == 1 then\n            table.insert(result, \"One\"\
    )\n        elseif reverse_arr[i] == 2 then\n            table.insert(result, \"\
    Two\")\n        elseif reverse_arr[i] == 3 then\n            table.insert(result,\
    \ \"Three\")\n        elseif reverse_arr[i] == 4 then\n            table.insert(result,\
    \ \"Four\")\n        elseif reverse_arr[i] == 5 then\n            table.insert(result,\
    \ \"Five\")\n        elseif reverse_arr[i] == 6 then\n            table.insert(result,\
    \ \"Six\")\n        elseif reverse_arr[i] == 7 then\n            table.insert(result,\
    \ \"Seven\")\n        elseif reverse_arr[i] == 8 then\n            table.insert(result,\
    \ \"Eight\")\n        elseif reverse_arr[i] == 9 then\n            table.insert(result,\
    \ \"Nine\")\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacn4k023.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpacn4k023.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpacn4k023.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, v)\n        end\n    end\n    table.sort(result)\n  \
    \  for i = 1, #result do\n        result[i] = tostring(result[i])\n    end\n \
    \   table.reverse(result)\n    for i = 1, #result do\n        result[i] = string.gsub(result[i],\
    \ \"1\", \"One\")\n        result[i] = string.gsub(result[i], \"2\", \"Two\")\n\
    \        result[i] = string.gsub(result[i], \"3\", \"Three\")\n        result[i]\
    \ = string.gsub(result[i], \"4\", \"Four\")\n        result[i] = string.gsub(result[i],\
    \ \"5\", \"Five\")\n        result[i] = string.gsub(result[i], \"6\", \"Six\"\
    )\n        result[i] = string.gsub(result[i], \"7\", \"Seven\")\n        result[i]\
    \ = string.gsub(result[i], \"8\", \"Eight\")\n        result[i] = string.gsub(result[i],\
    \ \"9\", \"Nine\")\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_4qqs6_.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpd_4qqs6_.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpd_4qqs6_.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local dict = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3]\
    \ = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6]\
    \ = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9]\
    \ = \"Nine\"\n    }\n    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n            table.insert(result, dict[arr[i]])\n        end\n   \
    \ end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kfbx9nd.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp2kfbx9nd.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i, v in ipairs(result) do\n\
    \    result[i] = tostring(result[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yrtjvxd.lua:30:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmp_yrtjvxd.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   table.insert(result, map[v])\n        end\n    end\n    table.sort(result)\n\
    \    local i, j = 1, #result\n    while i < j do\n        result[i], result[j]\
    \ = result[j], result[i]\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom7pjbkv.lua:44:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpom7pjbkv.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    for i = 1, #res\
    \ do\n        res[i] = res[i]:gsub(\"1\", \"One\")\n        res[i] = res[i]:gsub(\"\
    2\", \"Two\")\n        res[i] = res[i]:gsub(\"3\", \"Three\")\n        res[i]\
    \ = res[i]:gsub(\"4\", \"Four\")\n        res[i] = res[i]:gsub(\"5\", \"Five\"\
    )\n        res[i] = res[i]:gsub(\"6\", \"Six\")\n        res[i] = res[i]:gsub(\"\
    7\", \"Seven\")\n        res[i] = res[i]:gsub(\"8\", \"Eight\")\n        res[i]\
    \ = res[i]:gsub(\"9\", \"Nine\")\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sj7sigz.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmp4sj7sigz.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n         \
    \   res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n    for\
    \ i = 1, #res do\n        res[i] = names[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdu964889.lua:22:\
    \ attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpdu964889.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpdu964889.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n   \
    \   result[#result + 1] = numbers[arr[i]]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfm7nr6y.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmptfm7nr6y.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for _,\
    \ v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ map[v])\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooo7ifew.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpooo7ifew.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    local res2\
    \ = {}\n    for i = #res, 1, -1 do\n        table.insert(res2, res[i])\n    end\n\
    \    local res3 = {}\n    for _, v in ipairs(res2) do\n        table.insert(res3,\
    \ num_to_str[v])\n    end\n    return res3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gc5eh5m.lua:27:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp8gc5eh5m.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp8gc5eh5m.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    local res2\
    \ = {}\n    for i = #res, 1, -1 do\n        table.insert(res2, res[i])\n    end\n\
    \    local res3 = {}\n    for _, v in ipairs(res2) do\n        if v == 1 then\n\
    \            table.insert(res3, \"One\")\n        elseif v == 2 then\n       \
    \     table.insert(res3, \"Two\")\n        elseif v == 3 then\n            table.insert(res3,\
    \ \"Three\")\n        elseif v == 4 then\n            table.insert(res3, \"Four\"\
    )\n        elseif v == 5 then\n            table.insert(res3, \"Five\")\n    \
    \    elseif v == 6 then\n            table.insert(res3, \"Six\")\n        elseif\
    \ v == 7 then\n            table.insert(res3, \"Seven\")\n        elseif v ==\
    \ 8 then\n            table.insert(res3, \"Eight\")\n        elseif v == 9 then\n\
    \            table.insert(res3, \"Nine\")\n        end\n    end\n    return res3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(result,\
    \ arr[i])\n    end\n  end\n  table.sort(result)\n  local result2 = {}\n  for i\
    \ = #result, 1, -1 do\n    table.insert(result2, result[i])\n  end\n  local result3\
    \ = {}\n  for i = 1, #result2 do\n    if result2[i] == 1 then\n      table.insert(result3,\
    \ \"One\")\n    elseif result2[i] == 2 then\n      table.insert(result3, \"Two\"\
    )\n    elseif result2[i] == 3 then\n      table.insert(result3, \"Three\")\n \
    \   elseif result2[i] == 4 then\n      table.insert(result3, \"Four\")\n    elseif\
    \ result2[i] == 5 then\n      table.insert(result3, \"Five\")\n    elseif result2[i]\
    \ == 6 then\n      table.insert(result3, \"Six\")\n    elseif result2[i] == 7\
    \ then\n      table.insert(result3, \"Seven\")\n    elseif result2[i] == 8 then\n\
    \      table.insert(result3, \"Eight\")\n    elseif result2[i] == 9 then\n   \
    \   table.insert(result3, \"Nine\")\n    end\n  end\n  return result3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #result do\n        result[i]\
    \ = names[result[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazm_brjw.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpazm_brjw.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = tostring(res[i])\n    end\n    table.reverse(res)\n\
    \    for i = 1, #res do\n        res[i] = res[i]:gsub(\"1\", \"One\"):gsub(\"\
    2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"4\", \"Four\"):gsub(\"5\", \"Five\"\
    ):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"):gsub(\"8\", \"Eight\"):gsub(\"9\"\
    , \"Nine\")\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlrgjffn.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpjlrgjffn.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpjlrgjffn.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local dict = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] =\
    \ 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n\
    \        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, dict[arr[i]])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7k2o9nk.lua:38:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\"\
    , \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpi7k2o9nk.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #result do\n        result[i]\
    \ = names[result[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgjcb_hs.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpzgjcb_hs.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local new_arr = {}\n\
    \    for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n          \
    \  table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n \
    \   table.reverse(new_arr)\n    local result = {}\n    for i, v in ipairs(new_arr)\
    \ do\n        table.insert(result, num_to_word[v])\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgoy6ji6.lua:21:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpvgoy6ji6.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpvgoy6ji6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = num_to_str[res[i]]\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9wqeynls.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp9wqeynls.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp9wqeynls.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n          \
    \  table.insert(result, v)\n        end\n    end\n    table.sort(result)\n   \
    \ for i, v in ipairs(result) do\n        result[i] = tostring(result[i])\n   \
    \ end\n    table.sort(result, function(a, b) return #a > #b end)\n    for i, v\
    \ in ipairs(result) do\n        if v == '1' then\n            result[i] = 'One'\n\
    \        elseif v == '2' then\n            result[i] = 'Two'\n        elseif v\
    \ == '3' then\n            result[i] = 'Three'\n        elseif v == '4' then\n\
    \            result[i] = 'Four'\n        elseif v == '5' then\n            result[i]\
    \ = 'Five'\n        elseif v == '6' then\n            result[i] = 'Six'\n    \
    \    elseif v == '7' then\n            result[i] = 'Seven'\n        elseif v ==\
    \ '8' then\n            result[i] = 'Eight'\n        elseif v == '9' then\n  \
    \          result[i] = 'Nine'\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczd5bewa.lua:52:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\"\
    , \"Two\", \"Eight\"}\nstack traceback:\n\t/tmp/tmpczd5bewa.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  table.sort(res)\n  for i = 1, #res do\n    res[i] = tostring(res[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fnkfli4.lua:30:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmp8fnkfli4.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    for i = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n\
    \            res[#res + 1] = names[arr[i]]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60_lf_mk.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmp60_lf_mk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   result[#result + 1] = v\n        end\n    end\n    table.sort(result)\n  \
    \  for i, v in ipairs(result) do\n        result[i] = tostring(v)\n    end\n \
    \   table.reverse(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = v:gsub(\"1\", \"One\"):gsub(\"2\", \"Two\"):gsub(\"3\", \"Three\"):gsub(\"\
    4\", \"Four\"):gsub(\"5\", \"Five\"):gsub(\"6\", \"Six\"):gsub(\"7\", \"Seven\"\
    ):gsub(\"8\", \"Eight\"):gsub(\"9\", \"Nine\")\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpww4yteoz.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpww4yteoz.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpww4yteoz.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    local sorted = {}\n    local dict = {\n        [1] = \"One\",\n        [2]\
    \ = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] =\
    \ \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"\
    Eight\",\n        [9] = \"Nine\"\n    }\n    for _, v in ipairs(arr) do\n    \
    \    if v >= 1 and v <= 9 then\n            table.insert(sorted, v)\n        end\n\
    \    end\n    table.sort(sorted)\n    for i = #sorted, 1, -1 do\n        table.insert(result,\
    \ dict[sorted[i]])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ local map = {\n    [1] = 'One',\n    [2] = 'Two',\n    [3] = 'Three',\n    [4]\
    \ = 'Four',\n    [5] = 'Five',\n    [6] = 'Six',\n    [7] = 'Seven',\n    [8]\
    \ = 'Eight',\n    [9] = 'Nine'\n  }\n  for i = 1, #arr do\n    if arr[i] >= 1\
    \ and arr[i] <= 9 then\n      result[#result + 1] = map[arr[i]]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpwk9rak.lua:37:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmplpwk9rak.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  local map = {\n        [1] = 'One',\n        [2] = 'Two',\n        [3] = 'Three',\n\
    \        [4] = 'Four',\n        [5] = 'Five',\n        [6] = 'Six',\n        [7]\
    \ = 'Seven',\n        [8] = 'Eight',\n        [9] = 'Nine'\n    }\n    for i =\
    \ 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n            res[#res\
    \ + 1] = map[arr[i]]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklj8dyt2.lua:37:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\"\
    , \"Two\", \"Three\"}\nstack traceback:\n\t/tmp/tmpklj8dyt2.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    for i = 1, #result do\n        result[i] = num_to_str[result[i]]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_g_cdqe.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpi_g_cdqe.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpi_g_cdqe.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  for i, v in ipairs(result) do\n\
    \    result[i] = tostring(v)\n  end\n  table.reverse(result)\n  for i, v in ipairs(result)\
    \ do\n    result[i] = string.gsub(v, \"1\", \"One\")\n    result[i] = string.gsub(v,\
    \ \"2\", \"Two\")\n    result[i] = string.gsub(v, \"3\", \"Three\")\n    result[i]\
    \ = string.gsub(v, \"4\", \"Four\")\n    result[i] = string.gsub(v, \"5\", \"\
    Five\")\n    result[i] = string.gsub(v, \"6\", \"Six\")\n    result[i] = string.gsub(v,\
    \ \"7\", \"Seven\")\n    result[i] = string.gsub(v, \"8\", \"Eight\")\n    result[i]\
    \ = string.gsub(v, \"9\", \"Nine\")\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxphsxpuz.lua:24:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpxphsxpuz.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpxphsxpuz.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local res = {}\n  \
    \  for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n           \
    \ table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    for i =\
    \ 1, #res do\n        res[i] = num_to_str[res[i]]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3r8tlef4.lua:22:\
    \ attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp3r8tlef4.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp3r8tlef4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] > 0 and arr[i] < 10 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = tostring(result[i])\n  end\n  table.sort(result, function(a,\
    \ b) return #a > #b end)\n  for i = 1, #result do\n    result[i] = number_to_word(result[i])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3oe57ls_.lua:26:\
    \ attempt to call a nil value (global 'number_to_word')\nstack traceback:\n\t\
    /tmp/tmp3oe57ls_.lua:26: in local 'candidate'\n\t/tmp/tmp3oe57ls_.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      result[#result\
    \ + 1] = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, #result do\n\
    \    result[i] = number_to_name[result[i]]\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuc741j43.lua:22:\
    \ attempt to index a nil value (global 'number_to_name')\nstack traceback:\n\t\
    /tmp/tmpuc741j43.lua:22: in local 'candidate'\n\t/tmp/tmpuc741j43.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n    local result = {}\n\
    \    for i = 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n       \
    \     table.insert(result, arr[i])\n        end\n    end\n    table.sort(result)\n\
    \    table.reverse(result)\n    for i = 1, #result do\n        if result[i] ==\
    \ 1 then\n            result[i] = \"One\"\n        elseif result[i] == 2 then\n\
    \            result[i] = \"Two\"\n        elseif result[i] == 3 then\n       \
    \     result[i] = \"Three\"\n        elseif result[i] == 4 then\n            result[i]\
    \ = \"Four\"\n        elseif result[i] == 5 then\n            result[i] = \"Five\"\
    \n        elseif result[i] == 6 then\n            result[i] = \"Six\"\n      \
    \  elseif result[i] == 7 then\n            result[i] = \"Seven\"\n        elseif\
    \ result[i] == 8 then\n            result[i] = \"Eight\"\n        elseif result[i]\
    \ == 9 then\n            result[i] = \"Nine\"\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadw8m_r0.lua:21:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpadw8m_r0.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpadw8m_r0.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
