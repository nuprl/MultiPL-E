---
name: HumanEval_105_by_length
language: lua
results:
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        table.reverse(res)
        for i, v in ipairs(res) do
            if v == '1' then
                res[i] = 'One'
            elseif v == '2' then
                res[i] = 'Two'
            elseif v == '3' then
                res[i] = 'Three'
            elseif v == '4' then
                res[i] = 'Four'
            elseif v == '5' then
                res[i] = 'Five'
            elseif v == '6' then
                res[i] = 'Six'
            elseif v == '7' then
                res[i] = 'Seven'
            elseif v == '8' then
                res[i] = 'Eight'
            elseif v == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacfr45ll.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpacfr45ll.lua:24:
    in local 'candidate'\n\t/tmp/tmpacfr45ll.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            if res[i] == 1 then
                res[i] = "One"
            elseif res[i] == 2 then
                res[i] = "Two"
            elseif res[i] == 3 then
                res[i] = "Three"
            elseif res[i] == 4 then
                res[i] = "Four"
            elseif res[i] == 5 then
                res[i] = "Five"
            elseif res[i] == 6 then
                res[i] = "Six"
            elseif res[i] == 7 then
                res[i] = "Seven"
            elseif res[i] == 8 then
                res[i] = "Eight"
            elseif res[i] == 9 then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8hms325.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpa8hms325.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i, v in ipairs(result) do
            result[i] = names[v]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiln4pos3.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpiln4pos3.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      local numbers = {
        [1] = "One",
        [2] = "Two",
        [3] = "Three",
        [4] = "Four",
        [5] = "Five",
        [6] = "Six",
        [7] = "Seven",
        [8] = "Eight",
        [9] = "Nine"
      }
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, numbers[v])
        end
      end
      table.sort(result)
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufqsney3.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpufqsney3.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      local res2 = {}
      for i = #res, 1, -1 do
        table.insert(res2, res[i])
      end
      local res3 = {}
      for _, v in ipairs(res2) do
        table.insert(res3, num_to_str[v])
      end
      return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97juhbuf.lua:27:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp97juhbuf.lua:27:
    in local 'candidate'\n\t/tmp/tmp97juhbuf.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      for i, v in ipairs(res) do
        res[i] = tostring(v)
      end
      table.reverse(res)
      for i, v in ipairs(res) do
        res[i] = v:gsub('1', 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5', 'Five'):gsub('6', 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptvzdy319.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmptvzdy319.lua:24:
    in local 'candidate'\n\t/tmp/tmptvzdy319.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i, v in ipairs(result) do
            if v == '1' then
                result[i] = 'One'
            elseif v == '2' then
                result[i] = 'Two'
            elseif v == '3' then
                result[i] = 'Three'
            elseif v == '4' then
                result[i] = 'Four'
            elseif v == '5' then
                result[i] = 'Five'
            elseif v == '6' then
                result[i] = 'Six'
            elseif v == '7' then
                result[i] = 'Seven'
            elseif v == '8' then
                result[i] = 'Eight'
            elseif v == '9' then
                result[i] = 'Nine'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqg16mq3.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpsqg16mq3.lua:24:
    in local 'candidate'\n\t/tmp/tmpsqg16mq3.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = result[i]:gsub('1', 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5', 'Five'):gsub('6', 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk01upv8z.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpk01upv8z.lua:24:
    in local 'candidate'\n\t/tmp/tmpk01upv8z.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            if res[i] == 1 then
                res[i] = "One"
            elseif res[i] == 2 then
                res[i] = "Two"
            elseif res[i] == 3 then
                res[i] = "Three"
            elseif res[i] == 4 then
                res[i] = "Four"
            elseif res[i] == 5 then
                res[i] = "Five"
            elseif res[i] == 6 then
                res[i] = "Six"
            elseif res[i] == 7 then
                res[i] = "Seven"
            elseif res[i] == 8 then
                res[i] = "Eight"
            elseif res[i] == 9 then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m83pv9o.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp2m83pv9o.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i, v in ipairs(result) do
            result[i] = names[v]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q5ytnw8.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp3q5ytnw8.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = string.gsub(result[i], "1", "One")
            result[i] = string.gsub(result[i], "2", "Two")
            result[i] = string.gsub(result[i], "3", "Three")
            result[i] = string.gsub(result[i], "4", "Four")
            result[i] = string.gsub(result[i], "5", "Five")
            result[i] = string.gsub(result[i], "6", "Six")
            result[i] = string.gsub(result[i], "7", "Seven")
            result[i] = string.gsub(result[i], "8", "Eight")
            result[i] = string.gsub(result[i], "9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnghutk08.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpnghutk08.lua:24:
    in local 'candidate'\n\t/tmp/tmpnghutk08.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        local names = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"}
        for i = 1, #result do
            result[i] = names[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6c_gdr6.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpf6c_gdr6.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = num_to_str[v]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1mbhay4.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpi1mbhay4.lua:22:
    in local 'candidate'\n\t/tmp/tmpi1mbhay4.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            if res[i] == 1 then
                res[i] = "One"
            elseif res[i] == 2 then
                res[i] = "Two"
            elseif res[i] == 3 then
                res[i] = "Three"
            elseif res[i] == 4 then
                res[i] = "Four"
            elseif res[i] == 5 then
                res[i] = "Five"
            elseif res[i] == 6 then
                res[i] = "Six"
            elseif res[i] == 7 then
                res[i] = "Seven"
            elseif res[i] == 8 then
                res[i] = "Eight"
            elseif res[i] == 9 then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1768zoq8.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp1768zoq8.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i, v in ipairs(result) do
        result[i] = tostring(v)
      end
      table.sort(result, function(a, b) return #a > #b end)
      for i, v in ipairs(result) do
        result[i] = v:gsub('1', 'One'):gsub('2', 'Two'):gsub('3', 'Three'):gsub('4', 'Four'):gsub('5', 'Five'):gsub('6', 'Six'):gsub('7', 'Seven'):gsub('8', 'Eight'):gsub('9', 'Nine')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mnqayav.lua:34:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\", \"Two\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp6mnqayav.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = num_to_str[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27efyx1k.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp27efyx1k.lua:22:
    in local 'candidate'\n\t/tmp/tmp27efyx1k.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          res[#res + 1] = arr[i]
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = tostring(res[i])
      end
      table.sort(res, function(a, b) return #a > #b end)
      for i = 1, #res do
        res[i] = string.gsub(res[i], "1", "One")
        res[i] = string.gsub(res[i], "2", "Two")
        res[i] = string.gsub(res[i], "3", "Three")
        res[i] = string.gsub(res[i], "4", "Four")
        res[i] = string.gsub(res[i], "5", "Five")
        res[i] = string.gsub(res[i], "6", "Six")
        res[i] = string.gsub(res[i], "7", "Seven")
        res[i] = string.gsub(res[i], "8", "Eight")
        res[i] = string.gsub(res[i], "9", "Nine")
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghmfm1fk.lua:42:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\", \"Two\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpghmfm1fk.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            if res[i] == 1 then
                res[i] = "One"
            elseif res[i] == 2 then
                res[i] = "Two"
            elseif res[i] == 3 then
                res[i] = "Three"
            elseif res[i] == 4 then
                res[i] = "Four"
            elseif res[i] == 5 then
                res[i] = "Five"
            elseif res[i] == 6 then
                res[i] = "Six"
            elseif res[i] == 7 then
                res[i] = "Seven"
            elseif res[i] == 8 then
                res[i] = "Eight"
            elseif res[i] == 9 then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h5c2ihd.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp6h5c2ihd.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      local res2 = {}
      for i = #res, 1, -1 do
        table.insert(res2, res[i])
      end
      local res3 = {}
      for _, v in ipairs(res2) do
        table.insert(res3, tostring(v))
      end
      return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhnhxmt6.lua:35:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\nstack
    traceback:\n\t/tmp/tmpkhnhxmt6.lua:35: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        local res2 = {}
        for i = #res, 1, -1 do
            table.insert(res2, res[i])
        end
        local res3 = {}
        for _, v in ipairs(res2) do
            table.insert(res3, tostring(v))
        end
        return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspl41y41.lua:35:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\nstack
    traceback:\n\t/tmp/tmpspl41y41.lua:35: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for i = 1, #arr do
        if arr[i] > 0 and arr[i] < 10 then
          res[#res + 1] = arr[i]
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = tostring(res[i])
      end
      for i = 1, #res do
        if res[i] == '1' then
          res[i] = 'One'
        elseif res[i] == '2' then
          res[i] = 'Two'
        elseif res[i] == '3' then
          res[i] = 'Three'
        elseif res[i] == '4' then
          res[i] = 'Four'
        elseif res[i] == '5' then
          res[i] = 'Five'
        elseif res[i] == '6' then
          res[i] = 'Six'
        elseif res[i] == '7' then
          res[i] = 'Seven'
        elseif res[i] == '8' then
          res[i] = 'Eight'
        elseif res[i] == '9' then
          res[i] = 'Nine'
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb60044w.lua:51:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmphb60044w.lua:51: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, map[v])
            end
        end
        table.sort(res)
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0t3265s.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpi0t3265s.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort_by_length(a, b)
            return a > b
        end
        local function replace_by_name(a)
            if a == 1 then
                return "One"
            elseif a == 2 then
                return "Two"
            elseif a == 3 then
                return "Three"
            elseif a == 4 then
                return "Four"
            elseif a == 5 then
                return "Five"
            elseif a == 6 then
                return "Six"
            elseif a == 7 then
                return "Seven"
            elseif a == 8 then
                return "Eight"
            elseif a == 9 then
                return "Nine"
            end
        end
        local function is_valid(a)
            return a >= 1 and a <= 9
        end
        local function filter_valid(a)
            return is_valid(a)
        end
        local function map_replace(a)
            return replace_by_name(a)
        end
        local function reverse(a)
            local b = {}
            for i = #a, 1, -1 do
                b[#b + 1] = a[i]
            end
            return b
        end
        return reverse(map(map_replace, filter(filter_valid, arr)))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplep86zek.lua:54:
    attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplep86zek.lua:54:
    in local 'candidate'\n\t/tmp/tmplep86zek.lua:60: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsar98skp.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpsar98skp.lua:24:
    in local 'candidate'\n\t/tmp/tmpsar98skp.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, map[v])
            end
        end
        table.sort(res)
        local rev = {}
        for i = #res, 1, -1 do
            table.insert(rev, res[i])
        end
        return rev
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jh4tw3r.lua:42:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp1jh4tw3r.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort(arr)
        local function swap(i, j)
          arr[i], arr[j] = arr[j], arr[i]
        end
        local function compare(i, j)
          return arr[i] < arr[j]
        end
        local function sort(l, r)
          if l >= r then
            return
          end
          local i = l
          for j = l + 1, r do
            if compare(j, l) then
              i = i + 1
              swap(i, j)
            end
          end
          swap(l, i)
          sort(l, i - 1)
          sort(i + 1, r)
        end
        sort(1, #arr)
        return arr
      end
      local function reverse(arr)
        local function swap(i, j)
          arr[i], arr[j] = arr[j], arr[i]
        end
        local function reverse(l, r)
          if l >= r then
            return
          end
          swap(l, r)
          reverse(l + 1, r - 1)
        end
        reverse(1, #arr)
        return arr
      end
      local function replace(arr)
        local function replace(i)
          if arr[i] == 1 then
            arr[i] = 'One'
          elseif arr[i] == 2 then
            arr[i] = 'Two'
          elseif arr[i] == 3 then
            arr[i] = 'Three'
          elseif arr[i] == 4 then
            arr[i] = 'Four'
          elseif arr[i] == 5 then
            arr[i] = 'Five'
          elseif arr[i] == 6 then
            arr[i] = 'Six'
          elseif arr[i] == 7 then
            arr[i] = 'Seven'
          elseif arr[i] == 8 then
            arr[i] = 'Eight'
          elseif arr[i] == 9 then
            arr[i] = 'Nine'
          end
        end
        for i = 1, #arr do
          replace(i)

    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpw26bo0k4.lua:89: ''end'' expected (to close ''for'' at line
    75) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, map[v])
            end
        end
        table.sort(result)
        local i, j = 1, #result
        while i < j do
            result[i], result[j] = result[j], result[i]
            i = i + 1
            j = j - 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb68xzajo.lua:44:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpb68xzajo.lua:44: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local t = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(t, arr[i])
            end
        end
        table.sort(t)
        local result = {}
        for i = #t, 1, -1 do
            table.insert(result, tostring(t[i]))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oihh4k4.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\nstack
    traceback:\n\t/tmp/tmp0oihh4k4.lua:31: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          result[#result + 1] = arr[i]
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = string.format('%s', result[i])
      end
      table.reverse(result)
      for i = 1, #result do
        if result[i] == '1' then
          result[i] = 'One'
        elseif result[i] == '2' then
          result[i] = 'Two'
        elseif result[i] == '3' then
          result[i] = 'Three'
        elseif result[i] == '4' then
          result[i] = 'Four'
        elseif result[i] == '5' then
          result[i] = 'Five'
        elseif result[i] == '6' then
          result[i] = 'Six'
        elseif result[i] == '7' then
          result[i] = 'Seven'
        elseif result[i] == '8' then
          result[i] = 'Eight'
        elseif result[i] == '9' then
          result[i] = 'Nine'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4r6uh8a.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpl4r6uh8a.lua:24:
    in local 'candidate'\n\t/tmp/tmpl4r6uh8a.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local new_arr = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(new_arr, v)
            end
        end
        table.sort(new_arr)
        local reverse_arr = {}
        for i, v in ipairs(new_arr) do
            table.insert(reverse_arr, 1, v)
        end
        local result = {}
        for i, v in ipairs(reverse_arr) do
            if v == 1 then
                table.insert(result, 'One')
            elseif v == 2 then
                table.insert(result, 'Two')
            elseif v == 3 then
                table.insert(result, 'Three')
            elseif v == 4 then
                table.insert(result, 'Four')
            elseif v == 5 then
                table.insert(result, 'Five')
            elseif v == 6 then
                table.insert(result, 'Six')
            elseif v == 7 then
                table.insert(result, 'Seven')
            elseif v == 8 then
                table.insert(result, 'Eight')
            elseif v == 9 then
                table.insert(result, 'Nine')
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v > 0 and v < 10 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      local res2 = {}
      for i = #res, 1, -1 do
        table.insert(res2, res[i])
      end
      local res3 = {}
      for _, v in ipairs(res2) do
        if v == 1 then
          table.insert(res3, "One")
        elseif v == 2 then
          table.insert(res3, "Two")
        elseif v == 3 then
          table.insert(res3, "Three")
        elseif v == 4 then
          table.insert(res3, "Four")
        elseif v == 5 then
          table.insert(res3, "Five")
        elseif v == 6 then
          table.insert(res3, "Six")
        elseif v == 7 then
          table.insert(res3, "Seven")
        elseif v == 8 then
          table.insert(res3, "Eight")
        elseif v == 9 then
          table.insert(res3, "Nine")
        end
      end
      return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = string.format("%s", res[i])
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8ocx_6_.lua:30:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\nstack
    traceback:\n\t/tmp/tmpz8ocx_6_.lua:30: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, names[v])
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuinkxejz.lua:27:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmpuinkxejz.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] > 0 and arr[i] < 10 then
          result[#result + 1] = arr[i]
        end
      end
      table.sort(result)
      table.reverse(result)
      for i = 1, #result do
        result[i] = tostring(result[i])
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7usuihc_.lua:21:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp7usuihc_.lua:21:
    in local 'candidate'\n\t/tmp/tmp7usuihc_.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      local map = {
        [1] = 'One',
        [2] = 'Two',
        [3] = 'Three',
        [4] = 'Four',
        [5] = 'Five',
        [6] = 'Six',
        [7] = 'Seven',
        [8] = 'Eight',
        [9] = 'Nine'
      }
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, map[v])
        end
      end
      table.sort(res)
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh8tc05o.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpsh8tc05o.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort_table(arr)
        local function swap(arr, i, j)
          local temp = arr[i]
          arr[i] = arr[j]
          arr[j] = temp
        end
        for i = 1, #arr do
          for j = i + 1, #arr do
            if arr[i] > arr[j] then
              swap(arr, i, j)
            end
          end
        end
        return arr
      end
      local function reverse_table(arr)
        local function swap(arr, i, j)
          local temp = arr[i]
          arr[i] = arr[j]
          arr[j] = temp
        end
        for i = 1, #arr / 2 do
          swap(arr, i, #arr - i + 1)
        end
        return arr
      end
      local function replace_number_by_name(arr)
        local function replace_number_by_name_helper(arr, i)
          if i > #arr then
            return arr
          end
          if arr[i] == 1 then
            arr[i] = "One"
          elseif arr[i] == 2 then
            arr[i] = "Two"
          elseif arr[i] == 3 then
            arr[i] = "Three"
          elseif arr[i] == 4 then
            arr[i] = "Four"
          elseif arr[i] == 5 then
            arr[i] = "Five"
          elseif arr[i] == 6 then
            arr[i] = "Six"
          elseif arr[i] == 7 then
            arr[i] = "Seven"
          elseif arr[i] == 8 then
            arr[i] = "Eight"
          elseif arr[i] == 9 then
            arr[i] = "Nine"
          end
          return replace_number_by_name_helper(arr, i + 1)
        end
        return replace_number_by_name_helper(arr, 1)
      end
      local function filter_table(arr)
        local function filter_table_helper(arr, i,
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpzf86f7jm.lua:70: '')'' expected near ''=''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort(arr)
            local function swap(i, j)
                arr[i], arr[j] = arr[j], arr[i]
            end
            local function compare(i, j)
                return arr[i] < arr[j]
            end
            local function partition(left, right)
                local pivot = arr[math.floor((left + right) / 2)]
                local i = left
                local j = right
                while i <= j do
                    while compare(i, pivot) do
                        i = i + 1
                    end
                    while compare(pivot, j) do
                        j = j - 1
                    end
                    if i <= j then
                        swap(i, j)
                        i = i + 1
                        j = j - 1
                    end
                end
                return i
            end
            local function sort(left, right)
                local index = partition(left, right)
                if left < index - 1 then
                    sort(left, index - 1)
                end
                if index < right then
                    sort(index, right)
                end
            end
            sort(1, #arr)
        end
        local function reverse(arr)
            local i = 1
            local j = #arr
            while i < j do
                arr[i], arr[j] = arr[j], arr[i]
                i = i + 1
                j = j - 1
            end
        end
        local function replace(arr)
            local function replace_one(n)
                if n == 1 then
                    return 'One'
                elseif n == 2 then
                    return 'Two'
                elseif n == 3 then
                    return 'Three'
                elseif n == 4 then
                    return 'Four'
                elseif n == 5 then
                    return 'Five'
                elseif n == 6 then
                    return 'Six'
                elseif n == 7 then
                    return 'Seven'
                elseif n == 8 then
                    return 'Eight'
                elseif n == 9 then
                    return 'Nine'
                end
            end
            for i = 1, #arr do
                if arr[i] >= 1 and arr[i] <=
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpmfuj_1xz.lua:84: ''then'' expected near ''=''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, map[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zpex137.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp_zpex137.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = numbers[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4po0vtwi.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp4po0vtwi.lua:24:
    in local 'candidate'\n\t/tmp/tmp4po0vtwi.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy5mnkan9.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpy5mnkan9.lua:24:
    in local 'candidate'\n\t/tmp/tmpy5mnkan9.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = tostring(v)
        end
        table.reverse(result)
        for i, v in ipairs(result) do
            result[i] = string.upper(v:sub(1, 1)) .. v:sub(2)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjs65yvmg.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpjs65yvmg.lua:24:
    in local 'candidate'\n\t/tmp/tmpjs65yvmg.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for _, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(result, names[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtxy0_z3.lua:28:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmphtxy0_z3.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, map[v])
            end
        end
        table.sort(result)
        local res = {}
        for i = #result, 1, -1 do
            table.insert(res, result[i])
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a5s35tw.lua:42:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp6a5s35tw.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for i = 1, #arr do
        if arr[i] > 0 and arr[i] < 10 then
          res[#res + 1] = arr[i]
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = names[res[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p5la1uk.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmp2p5la1uk.lua:22:
    in local 'candidate'\n\t/tmp/tmp2p5la1uk.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, names[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu09o5_pf.lua:28:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpu09o5_pf.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        for i = 1, #res do
            if res[i] == '1' then
                res[i] = 'One'
            elseif res[i] == '2' then
                res[i] = 'Two'
            elseif res[i] == '3' then
                res[i] = 'Three'
            elseif res[i] == '4' then
                res[i] = 'Four'
            elseif res[i] == '5' then
                res[i] = 'Five'
            elseif res[i] == '6' then
                res[i] = 'Six'
            elseif res[i] == '7' then
                res[i] = 'Seven'
            elseif res[i] == '8' then
                res[i] = 'Eight'
            elseif res[i] == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf20lw139.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpf20lw139.lua:24:
    in local 'candidate'\n\t/tmp/tmpf20lw139.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = string.format("%s", result[i])
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs1tqai2.lua:30:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\nstack
    traceback:\n\t/tmp/tmpvs1tqai2.lua:30: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = numbers[result[i]]
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbgewqv4e.lua:22:
    attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpbgewqv4e.lua:22:
    in local 'candidate'\n\t/tmp/tmpbgewqv4e.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = numbers[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvuc66xqw.lua:22:
    attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpvuc66xqw.lua:22:
    in local 'candidate'\n\t/tmp/tmpvuc66xqw.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                result[#result + 1] = arr[i]
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            if result[i] == '1' then
                result[i] = 'One'
            elseif result[i] == '2' then
                result[i] = 'Two'
            elseif result[i] == '3' then
                result[i] = 'Three'
            elseif result[i] == '4' then
                result[i] = 'Four'
            elseif result[i] == '5' then
                result[i] = 'Five'
            elseif result[i] == '6' then
                result[i] = 'Six'
            elseif result[i] == '7' then
                result[i] = 'Seven'
            elseif result[i] == '8' then
                result[i] = 'Eight'
            elseif result[i] == '9' then
                result[i] = 'Nine'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ks0qv3j.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp_ks0qv3j.lua:24:
    in local 'candidate'\n\t/tmp/tmp_ks0qv3j.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = result[i]:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ooeccvk.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp0ooeccvk.lua:24:
    in local 'candidate'\n\t/tmp/tmp0ooeccvk.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          table.insert(result, arr[i])
        end
      end
      table.sort(result)
      table.reverse(result)
      for i = 1, #result do
        result[i] = tostring(result[i])
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtrf4077.lua:21:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpbtrf4077.lua:21:
    in local 'candidate'\n\t/tmp/tmpbtrf4077.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i = 1, #res do
            res[i] = names[tonumber(res[i])]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ojeucwg.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp5ojeucwg.lua:24:
    in local 'candidate'\n\t/tmp/tmp5ojeucwg.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, map[v])
            end
        end
        table.sort(res)
        local i, j = 1, #res
        while i < j do
            res[i], res[j] = res[j], res[i]
            i = i + 1
            j = j - 1
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzhvjdmy.lua:44:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpxzhvjdmy.lua:44: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        res = table.reverse(res)
        for i, v in ipairs(res) do
            res[i] = string.upper(v:sub(1, 1)) .. v:sub(2)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6mktknc.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpy6mktknc.lua:24:
    in local 'candidate'\n\t/tmp/tmpy6mktknc.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          result[#result + 1] = arr[i]
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = numbers[result[i]]
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3w46b483.lua:22:
    attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmp3w46b483.lua:22:
    in local 'candidate'\n\t/tmp/tmp3w46b483.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = tostring(res[i])
      end
      for i = 1, #res do
        res[i] = res[i]:gsub("1", "One")
        res[i] = res[i]:gsub("2", "Two")
        res[i] = res[i]:gsub("3", "Three")
        res[i] = res[i]:gsub("4", "Four")
        res[i] = res[i]:gsub("5", "Five")
        res[i] = res[i]:gsub("6", "Six")
        res[i] = res[i]:gsub("7", "Seven")
        res[i] = res[i]:gsub("8", "Eight")
        res[i] = res[i]:gsub("9", "Nine")
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4m32h4yi.lua:41:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp4m32h4yi.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          table.insert(res, arr[i])
        end
      end
      table.sort(res)
      local names = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"}
      for i = 1, #res do
        res[i] = names[res[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66w65i8d.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp66w65i8d.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        table.reverse(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9byk7vgx.lua:21:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp9byk7vgx.lua:21:
    in local 'candidate'\n\t/tmp/tmp9byk7vgx.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                res[#res + 1] = map[v]
            end
        end
        table.sort(res)
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v5ane8_.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp6v5ane8_.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = num_to_str[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvi1i5k3g.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpvi1i5k3g.lua:22:
    in local 'candidate'\n\t/tmp/tmpvi1i5k3g.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for _, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(result, numbers[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fe5edi5.lua:28:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp9fe5edi5.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i = 1, #result do
            result[i] = names[tonumber(result[i])]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7ifpaw2.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp_7ifpaw2.lua:24:
    in local 'candidate'\n\t/tmp/tmp_7ifpaw2.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        for i = 1, #result do
            result[i] = result[i]:gsub("1", "One")
            result[i] = result[i]:gsub("2", "Two")
            result[i] = result[i]:gsub("3", "Three")
            result[i] = result[i]:gsub("4", "Four")
            result[i] = result[i]:gsub("5", "Five")
            result[i] = result[i]:gsub("6", "Six")
            result[i] = result[i]:gsub("7", "Seven")
            result[i] = result[i]:gsub("8", "Eight")
            result[i] = result[i]:gsub("9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzeuki4l.lua:41:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpkzeuki4l.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        for i = 1, #res do
            if res[i] == '1' then
                res[i] = 'One'
            elseif res[i] == '2' then
                res[i] = 'Two'
            elseif res[i] == '3' then
                res[i] = 'Three'
            elseif res[i] == '4' then
                res[i] = 'Four'
            elseif res[i] == '5' then
                res[i] = 'Five'
            elseif res[i] == '6' then
                res[i] = 'Six'
            elseif res[i] == '7' then
                res[i] = 'Seven'
            elseif res[i] == '8' then
                res[i] = 'Eight'
            elseif res[i] == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgepm_mw.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpdgepm_mw.lua:24:
    in local 'candidate'\n\t/tmp/tmpdgepm_mw.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = names[res[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3j2zq0i.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpf3j2zq0i.lua:22:
    in local 'candidate'\n\t/tmp/tmpf3j2zq0i.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = names[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfy3cj6rb.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpfy3cj6rb.lua:22:
    in local 'candidate'\n\t/tmp/tmpfy3cj6rb.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      local res2 = {}
      for i = #res, 1, -1 do
        table.insert(res2, res[i])
      end
      local res3 = {}
      for _, v in ipairs(res2) do
        table.insert(res3, tostring(v))
      end
      return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2p4p2ayz.lua:35:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\nstack
    traceback:\n\t/tmp/tmp2p4p2ayz.lua:35: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort_table(arr)
            local function swap(arr, i, j)
                local temp = arr[i]
                arr[i] = arr[j]
                arr[j] = temp
            end
            for i = 1, #arr do
                for j = i + 1, #arr do
                    if arr[i] > arr[j] then
                        swap(arr, i, j)
                    end
                end
            end
            return arr
        end
        local function reverse_table(arr)
            local result = {}
            for i = #arr, 1, -1 do
                table.insert(result, arr[i])
            end
            return result
        end
        local function replace_number(arr)
            local result = {}
            local numbers = {
                [1] = "One",
                [2] = "Two",
                [3] = "Three",
                [4] = "Four",
                [5] = "Five",
                [6] = "Six",
                [7] = "Seven",
                [8] = "Eight",
                [9] = "Nine"
            }
            for i = 1, #arr do
                if numbers[arr[i]] then
                    table.insert(result, numbers[arr[i]])
                end
            end
            return result
        end
        local function filter_number(arr)
            local result = {}
            for i = 1, #arr do
                if arr[i] >= 1 and arr[i] <= 9 then
                    table.insert(result, arr[i])
                end
            end
            return result
        end
        return replace_number(reverse_table(sort_table(filter_number(arr))))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                result[#result + 1] = arr[i]
            end
        end
        table.sort(result)
        local reverse = {}
        for i = #result, 1, -1 do
            reverse[#reverse + 1] = result[i]
        end
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i = 1, #reverse do
            reverse[i] = names[reverse[i]]
        end
        return reverse
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          res[#res + 1] = v
        end
      end
      table.sort(res)
      local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
      for i = 1, #res do
        res[i] = names[res[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngku_mqe.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpngku_mqe.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = names[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmperhyfwd6.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmperhyfwd6.lua:22:
    in local 'candidate'\n\t/tmp/tmperhyfwd6.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local new_arr = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          new_arr[#new_arr + 1] = arr[i]
        end
      end
      table.sort(new_arr)
      local res = {}
      for i = #new_arr, 1, -1 do
        res[#res + 1] = num_to_str[new_arr[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2gimzfj.lua:23:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpb2gimzfj.lua:23:
    in local 'candidate'\n\t/tmp/tmpb2gimzfj.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort_func(a, b)
            return a < b
        end
        local function reverse_func(a, b)
            return a > b
        end
        local function replace_func(a)
            if a == 1 then
                return "One"
            elseif a == 2 then
                return "Two"
            elseif a == 3 then
                return "Three"
            elseif a == 4 then
                return "Four"
            elseif a == 5 then
                return "Five"
            elseif a == 6 then
                return "Six"
            elseif a == 7 then
                return "Seven"
            elseif a == 8 then
                return "Eight"
            elseif a == 9 then
                return "Nine"
            end
        end
        local function filter_func(a)
            return a >= 1 and a <= 9
        end
        local function map_func(a)
            return replace_func(a)
        end
        return map(map_func, filter(filter_func, reverse(sort(arr, sort_func))))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ja8ev4e.lua:47:
    attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp3ja8ev4e.lua:47:
    in local 'candidate'\n\t/tmp/tmp3ja8ev4e.lua:53: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort(arr)
        local function swap(i, j)
          arr[i], arr[j] = arr[j], arr[i]
        end
        local function compare(i, j)
          return arr[i] < arr[j]
        end
        local function sort(l, r)
          if l >= r then
            return
          end
          local i = l
          for j = l + 1, r do
            if compare(j, l) then
              i = i + 1
              swap(i, j)
            end
          end
          swap(l, i)
          sort(l, i - 1)
          sort(i + 1, r)
        end
        sort(1, #arr)
        return arr
      end
      local function reverse(arr)
        local function swap(i, j)
          arr[i], arr[j] = arr[j], arr[i]
        end
        local function reverse(l, r)
          if l >= r then
            return
          end
          swap(l, r)
          reverse(l + 1, r - 1)
        end
        reverse(1, #arr)
        return arr
      end
      local function replace(arr)
        local function replace(i)
          if arr[i] == 1 then
            arr[i] = 'One'
          elseif arr[i] == 2 then
            arr[i] = 'Two'
          elseif arr[i] == 3 then
            arr[i] = 'Three'
          elseif arr[i] == 4 then
            arr[i] = 'Four'
          elseif arr[i] == 5 then
            arr[i] = 'Five'
          elseif arr[i] == 6 then
            arr[i] = 'Six'
          elseif arr[i] == 7 then
            arr[i] = 'Seven'
          elseif arr[i] == 8 then
            arr[i] = 'Eight'
          elseif arr[i] == 9 then
            arr[i] = 'Nine'
          end
        end
        for i = 1, #arr do
          replace(i)

    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp06p6pysc.lua:89: ''end'' expected (to close ''for'' at line
    75) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = tostring(v)
        end
        table.reverse(result)
        for i, v in ipairs(result) do
            result[i] = tostring(v)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcyj131f4.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpcyj131f4.lua:24:
    in local 'candidate'\n\t/tmp/tmpcyj131f4.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = names[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwlgxuou0.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpwlgxuou0.lua:22:
    in local 'candidate'\n\t/tmp/tmpwlgxuou0.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrkb2xzh.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpyrkb2xzh.lua:22:
    in local 'candidate'\n\t/tmp/tmpyrkb2xzh.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i, v in ipairs(result) do
            if v == '1' then
                result[i] = 'One'
            elseif v == '2' then
                result[i] = 'Two'
            elseif v == '3' then
                result[i] = 'Three'
            elseif v == '4' then
                result[i] = 'Four'
            elseif v == '5' then
                result[i] = 'Five'
            elseif v == '6' then
                result[i] = 'Six'
            elseif v == '7' then
                result[i] = 'Seven'
            elseif v == '8' then
                result[i] = 'Eight'
            elseif v == '9' then
                result[i] = 'Nine'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphciuoh5_.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmphciuoh5_.lua:24:
    in local 'candidate'\n\t/tmp/tmphciuoh5_.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local dict = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, dict[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gafv6cz.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp5gafv6cz.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        res = table.reverse(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfljy6kjt.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpfljy6kjt.lua:24:
    in local 'candidate'\n\t/tmp/tmpfljy6kjt.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        table.reverse(res)
        for i, v in ipairs(res) do
            if v == '1' then
                res[i] = 'One'
            elseif v == '2' then
                res[i] = 'Two'
            elseif v == '3' then
                res[i] = 'Three'
            elseif v == '4' then
                res[i] = 'Four'
            elseif v == '5' then
                res[i] = 'Five'
            elseif v == '6' then
                res[i] = 'Six'
            elseif v == '7' then
                res[i] = 'Seven'
            elseif v == '8' then
                res[i] = 'Eight'
            elseif v == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpam9lzmbz.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpam9lzmbz.lua:24:
    in local 'candidate'\n\t/tmp/tmpam9lzmbz.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = string.gsub(result[i], '1', 'One')
            result[i] = string.gsub(result[i], '2', 'Two')
            result[i] = string.gsub(result[i], '3', 'Three')
            result[i] = string.gsub(result[i], '4', 'Four')
            result[i] = string.gsub(result[i], '5', 'Five')
            result[i] = string.gsub(result[i], '6', 'Six')
            result[i] = string.gsub(result[i], '7', 'Seven')
            result[i] = string.gsub(result[i], '8', 'Eight')
            result[i] = string.gsub(result[i], '9', 'Nine')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsau7shl_.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpsau7shl_.lua:24:
    in local 'candidate'\n\t/tmp/tmpsau7shl_.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        local names = {
            'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'
        }
        for i = 1, #result do
            result[i] = names[tonumber(result[i])]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1sydlhyl.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp1sydlhyl.lua:24:
    in local 'candidate'\n\t/tmp/tmp1sydlhyl.lua:37: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local new_arr = {}
      for i, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(new_arr, v)
        end
      end
      table.sort(new_arr)
      local reverse_arr = {}
      for i = #new_arr, 1, -1 do
        table.insert(reverse_arr, new_arr[i])
      end
      local result = {}
      for i, v in ipairs(reverse_arr) do
        if v == 1 then
          table.insert(result, "One")
        elseif v == 2 then
          table.insert(result, "Two")
        elseif v == 3 then
          table.insert(result, "Three")
        elseif v == 4 then
          table.insert(result, "Four")
        elseif v == 5 then
          table.insert(result, "Five")
        elseif v == 6 then
          table.insert(result, "Six")
        elseif v == 7 then
          table.insert(result, "Seven")
        elseif v == 8 then
          table.insert(result, "Eight")
        elseif v == 9 then
          table.insert(result, "Nine")
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] > 0 and arr[i] < 10 then
                local digit = arr[i]
                local digit_name = ''
                if digit == 1 then
                    digit_name = 'One'
                elseif digit == 2 then
                    digit_name = 'Two'
                elseif digit == 3 then
                    digit_name = 'Three'
                elseif digit == 4 then
                    digit_name = 'Four'
                elseif digit == 5 then
                    digit_name = 'Five'
                elseif digit == 6 then
                    digit_name = 'Six'
                elseif digit == 7 then
                    digit_name = 'Seven'
                elseif digit == 8 then
                    digit_name = 'Eight'
                elseif digit == 9 then
                    digit_name = 'Nine'
                end
                table.insert(result, digit_name)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt7mkh_g.lua:47:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmpdt7mkh_g.lua:47: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          table.insert(result, arr[i])
        end
      end
      table.sort(result)
      local reverse_result = {}
      for i = #result, 1, -1 do
        table.insert(reverse_result, result[i])
      end
      local final_result = {}
      for i = 1, #reverse_result do
        if reverse_result[i] == 1 then
          table.insert(final_result, "One")
        elseif reverse_result[i] == 2 then
          table.insert(final_result, "Two")
        elseif reverse_result[i] == 3 then
          table.insert(final_result, "Three")
        elseif reverse_result[i] == 4 then
          table.insert(final_result, "Four")
        elseif reverse_result[i] == 5 then
          table.insert(final_result, "Five")
        elseif reverse_result[i] == 6 then
          table.insert(final_result, "Six")
        elseif reverse_result[i] == 7 then
          table.insert(final_result, "Seven")
        elseif reverse_result[i] == 8 then
          table.insert(final_result, "Eight")
        elseif reverse_result[i] == 9 then
          table.insert(final_result, "Nine")
        end
      end
      return final_result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] > 0 and arr[i] < 10 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        local names = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"}
        for i = 1, #result do
            result[i] = names[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmztz2d3i.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpmztz2d3i.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                result[#result + 1] = arr[i]
            end
        end
        table.sort(result)
        local res = {}
        for i = 1, #result do
            res[#res + 1] = numbers[result[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_i4axst.lua:23:
    attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpt_i4axst.lua:23:
    in local 'candidate'\n\t/tmp/tmpt_i4axst.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local dict = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, dict[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlvtkmrp.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpzlvtkmrp.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = string.format("%s", res[i])
        end
        table.sort(res, function(a, b) return #a > #b end)
        for i = 1, #res do
            res[i] = string.format("%s", res[i])
        end
        for i = 1, #res do
            if res[i] == "1" then
                res[i] = "One"
            elseif res[i] == "2" then
                res[i] = "Two"
            elseif res[i] == "3" then
                res[i] = "Three"
            elseif res[i] == "4" then
                res[i] = "Four"
            elseif res[i] == "5" then
                res[i] = "Five"
            elseif res[i] == "6" then
                res[i] = "Six"
            elseif res[i] == "7" then
                res[i] = "Seven"
            elseif res[i] == "8" then
                res[i] = "Eight"
            elseif res[i] == "9" then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzqjlo7.lua:55:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\", \"Two\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmptxzqjlo7.lua:55: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            if res[i] == 1 then
                res[i] = "One"
            elseif res[i] == 2 then
                res[i] = "Two"
            elseif res[i] == 3 then
                res[i] = "Three"
            elseif res[i] == 4 then
                res[i] = "Four"
            elseif res[i] == 5 then
                res[i] = "Five"
            elseif res[i] == 6 then
                res[i] = "Six"
            elseif res[i] == 7 then
                res[i] = "Seven"
            elseif res[i] == 8 then
                res[i] = "Eight"
            elseif res[i] == 9 then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwjb03q0.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpqwjb03q0.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = string.format("%s", result[i])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzmzimus.lua:30:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\nstack
    traceback:\n\t/tmp/tmpwzmzimus.lua:30: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      local digits = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
      for i, v in ipairs(arr) do
        if v > 0 and v < 10 then
          result[#result + 1] = digits[v]
        end
      end
      table.sort(result)
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77_5m5k1.lua:28:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp77_5m5k1.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao6hm35o.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpao6hm35o.lua:22:
    in local 'candidate'\n\t/tmp/tmpao6hm35o.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        local result2 = {}
        for i, v in ipairs(result) do
            table.insert(result2, 1, v)
        end
        local result3 = {}
        for i, v in ipairs(result2) do
            if v == 1 then
                table.insert(result3, 'One')
            elseif v == 2 then
                table.insert(result3, 'Two')
            elseif v == 3 then
                table.insert(result3, 'Three')
            elseif v == 4 then
                table.insert(result3, 'Four')
            elseif v == 5 then
                table.insert(result3, 'Five')
            elseif v == 6 then
                table.insert(result3, 'Six')
            elseif v == 7 then
                table.insert(result3, 'Seven')
            elseif v == 8 then
                table.insert(result3, 'Eight')
            elseif v == 9 then
                table.insert(result3, 'Nine')
            end
        end
        return result3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            if result[i] == '1' then
                result[i] = 'One'
            elseif result[i] == '2' then
                result[i] = 'Two'
            elseif result[i] == '3' then
                result[i] = 'Three'
            elseif result[i] == '4' then
                result[i] = 'Four'
            elseif result[i] == '5' then
                result[i] = 'Five'
            elseif result[i] == '6' then
                result[i] = 'Six'
            elseif result[i] == '7' then
                result[i] = 'Seven'
            elseif result[i] == '8' then
                result[i] = 'Eight'
            elseif result[i] == '9' then
                result[i] = 'Nine'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcbjen1kc.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpcbjen1kc.lua:24:
    in local 'candidate'\n\t/tmp/tmpcbjen1kc.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          res[#res + 1] = arr[i]
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = names[res[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprk_3h72d.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmprk_3h72d.lua:22:
    in local 'candidate'\n\t/tmp/tmprk_3h72d.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      local one = "One"
      local two = "Two"
      local three = "Three"
      local four = "Four"
      local five = "Five"
      local six = "Six"
      local seven = "Seven"
      local eight = "Eight"
      local nine = "Nine"
      for i = 1, #arr do
        if arr[i] == 1 then
          result[#result + 1] = one
        elseif arr[i] == 2 then
          result[#result + 1] = two
        elseif arr[i] == 3 then
          result[#result + 1] = three
        elseif arr[i] == 4 then
          result[#result + 1] = four
        elseif arr[i] == 5 then
          result[#result + 1] = five
        elseif arr[i] == 6 then
          result[#result + 1] = six
        elseif arr[i] == 7 then
          result[#result + 1] = seven
        elseif arr[i] == 8 then
          result[#result + 1] = eight
        elseif arr[i] == 9 then
          result[#result + 1] = nine
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68p55ez3.lua:51:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmp68p55ez3.lua:51: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort_table(t)
            local function compare(a, b)
                return a < b
            end
            table.sort(t, compare)
            return t
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp9k9cv4ng.lua:32: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        for i, v in ipairs(res) do
            if v == '1' then
                res[i] = 'One'
            elseif v == '2' then
                res[i] = 'Two'
            elseif v == '3' then
                res[i] = 'Three'
            elseif v == '4' then
                res[i] = 'Four'
            elseif v == '5' then
                res[i] = 'Five'
            elseif v == '6' then
                res[i] = 'Six'
            elseif v == '7' then
                res[i] = 'Seven'
            elseif v == '8' then
                res[i] = 'Eight'
            elseif v == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod8gxdc7.lua:51:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpod8gxdc7.lua:51: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort_table(arr)
        local function sort_table_rec(arr, i, j)
          if i < j then
            local k = math.floor((i + j) / 2)
            local pivot = arr[k]
            arr[k] = arr[j]
            local l = i
            for m = i, j - 1 do
              if arr[m] < pivot then
                arr[l], arr[m] = arr[m], arr[l]
                l = l + 1
              end
            end
            arr[l], arr[j] = arr[j], arr[l]
            sort_table_rec(arr, i, l - 1)
            sort_table_rec(arr, l + 1, j)
          end
        end
        sort_table_rec(arr, 1, #arr)
        return arr
      end
      local function reverse_table(arr)
        local new_arr = {}
        for i = #arr, 1, -1 do
          new_arr[#new_arr + 1] = arr[i]
        end
        return new_arr
      end
      local function replace_digits(arr)
        local new_arr = {}
        for i = 1, #arr do
          if arr[i] == 1 then
            new_arr[#new_arr + 1] = "One"
          elseif arr[i] == 2 then
            new_arr[#new_arr + 1] = "Two"
          elseif arr[i] == 3 then
            new_arr[#new_arr + 1] = "Three"
          elseif arr[i] == 4 then
            new_arr[#new_arr + 1] = "Four"
          elseif arr[i] == 5 then
            new_arr[#new_arr + 1] = "Five"
          elseif arr[i] == 6 then
            new_arr[#new_arr + 1] = "Six"
          elseif arr[i] == 7 then
            new_arr[#new_arr + 1] = "Seven"
          elseif arr[i] == 8 then
            new_arr[#new_
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpr98eoss2.lua:61: '']'' expected near ''lu''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, numbers[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuswy5p28.lua:28:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpuswy5p28.lua:28: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                res[#res + 1] = v
            end
        end
        table.sort(res)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        table.sort(res, function(a, b) return #a > #b end)
        for i, v in ipairs(res) do
            res[i] = tonumber(v)
        end
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        for i, v in ipairs(res) do
            res[i] = v:gsub("1", "One")
            res[i] = v:gsub("2", "Two")
            res[i] = v:gsub("3", "Three")
            res[i] = v:gsub("4", "Four")
            res[i] = v:gsub("5", "Five")
            res[i] = v:gsub("6", "Six")
            res[i] = v:gsub("7", "Seven")
            res[i] = v:gsub("8", "Eight")
            res[i] = v:gsub("9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2i4h823.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"1\", \"3\", \"4\", \"5\", \"2\", \"1\", \"2\", \"8\"}\nstack
    traceback:\n\t/tmp/tmpb2i4h823.lua:48: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i,v in ipairs(arr) do
        if v > 0 and v < 10 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
      for i,v in ipairs(result) do
        result[i] = names[v]
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5_k5z4t.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpj5_k5z4t.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        for i = 1, #res do
            if res[i] == '1' then
                res[i] = 'One'
            elseif res[i] == '2' then
                res[i] = 'Two'
            elseif res[i] == '3' then
                res[i] = 'Three'
            elseif res[i] == '4' then
                res[i] = 'Four'
            elseif res[i] == '5' then
                res[i] = 'Five'
            elseif res[i] == '6' then
                res[i] = 'Six'
            elseif res[i] == '7' then
                res[i] = 'Seven'
            elseif res[i] == '8' then
                res[i] = 'Eight'
            elseif res[i] == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpua_hm7li.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpua_hm7li.lua:24:
    in local 'candidate'\n\t/tmp/tmpua_hm7li.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        for i = 1, #res do
            res[i] = res[i]:gsub("1", "One")
            res[i] = res[i]:gsub("2", "Two")
            res[i] = res[i]:gsub("3", "Three")
            res[i] = res[i]:gsub("4", "Four")
            res[i] = res[i]:gsub("5", "Five")
            res[i] = res[i]:gsub("6", "Six")
            res[i] = res[i]:gsub("7", "Seven")
            res[i] = res[i]:gsub("8", "Eight")
            res[i] = res[i]:gsub("9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfu6cmeut.lua:41:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpfu6cmeut.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i = 1, #arr do
            if arr[i] > 0 and arr[i] < 10 then
                result[#result + 1] = numbers[arr[i]]
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34t5xawh.lua:27:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmp34t5xawh.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort_by_length(a, b)
            return #a < #b
        end
        local function replace_by_name(a)
            if a == 1 then
                return "One"
            elseif a == 2 then
                return "Two"
            elseif a == 3 then
                return "Three"
            elseif a == 4 then
                return "Four"
            elseif a == 5 then
                return "Five"
            elseif a == 6 then
                return "Six"
            elseif a == 7 then
                return "Seven"
            elseif a == 8 then
                return "Eight"
            elseif a == 9 then
                return "Nine"
            end
        end
        local function is_valid(a)
            return a >= 1 and a <= 9
        end
        local function filter_valid(arr)
            local res = {}
            for _, v in ipairs(arr) do
                if is_valid(v) then
                    table.insert(res, v)
                end
            end
            return res
        end
        local function replace_by_name_all(arr)
            local res = {}
            for _, v in ipairs(arr) do
                table.insert(res, replace_by_name(v))
            end
            return res
        end
        local function reverse(arr)
            local res = {}
            for i = #arr, 1, -1 do
                table.insert(res, arr[i])
            end
            return res
        end
        local function sort_and_replace(arr)
            local res = {}
            for _, v in ipairs(arr) do
                table.insert(res, replace_by_name(v))
            end
            table.sort(res, sort_by_length)
            return res
        end
        local valid_arr = filter_valid(arr)
        local sorted_arr = sort_and_replace(valid_arr)
        local reversed_arr = reverse(sorted_arr)
        return reversed_arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjwxm_rq.lua:81:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Three\", \"Eight\", \"Four\", \"Five\", \"One\", \"One\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpvjwxm_rq.lua:81: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = num_to_str[result[i]]
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkfac9thc.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpkfac9thc.lua:22:
    in local 'candidate'\n\t/tmp/tmpkfac9thc.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = num_to_str[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xst5z7t.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp2xst5z7t.lua:22:
    in local 'candidate'\n\t/tmp/tmp2xst5z7t.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6svny137.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmp6svny137.lua:22:
    in local 'candidate'\n\t/tmp/tmp6svny137.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        for i = 1, #res do
            res[i] = res[i]:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbihs08r6.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpbihs08r6.lua:24:
    in local 'candidate'\n\t/tmp/tmpbihs08r6.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                res[#res + 1] = v
            end
        end
        table.sort(res)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        table.sort(res, function(a, b) return #a > #b end)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        for i, v in ipairs(res) do
            if v == '1' then
                res[i] = 'One'
            elseif v == '2' then
                res[i] = 'Two'
            elseif v == '3' then
                res[i] = 'Three'
            elseif v == '4' then
                res[i] = 'Four'
            elseif v == '5' then
                res[i] = 'Five'
            elseif v == '6' then
                res[i] = 'Six'
            elseif v == '7' then
                res[i] = 'Seven'
            elseif v == '8' then
                res[i] = 'Eight'
            elseif v == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgo7kd8ao.lua:55:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\", \"Two\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpgo7kd8ao.lua:55: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          result[#result + 1] = arr[i]
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = numbers[result[i]]
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvb7968jw.lua:22:
    attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmpvb7968jw.lua:22:
    in local 'candidate'\n\t/tmp/tmpvb7968jw.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, map[v])
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3vis5z1.lua:37:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmpv3vis5z1.lua:37: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            if res[i] == 1 then
                res[i] = "One"
            elseif res[i] == 2 then
                res[i] = "Two"
            elseif res[i] == 3 then
                res[i] = "Three"
            elseif res[i] == 4 then
                res[i] = "Four"
            elseif res[i] == 5 then
                res[i] = "Five"
            elseif res[i] == 6 then
                res[i] = "Six"
            elseif res[i] == 7 then
                res[i] = "Seven"
            elseif res[i] == 8 then
                res[i] = "Eight"
            elseif res[i] == 9 then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuekrj5a.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpmuekrj5a.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = res[#res - i + 1]
        end
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsa8l6if.lua:33:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"3\", \"4\", \"5\", \"8\"}\nstack
    traceback:\n\t/tmp/tmptsa8l6if.lua:33: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        for i = 1, #result do
            if result[i] == 1 then
                result[i] = "One"
            elseif result[i] == 2 then
                result[i] = "Two"
            elseif result[i] == 3 then
                result[i] = "Three"
            elseif result[i] == 4 then
                result[i] = "Four"
            elseif result[i] == 5 then
                result[i] = "Five"
            elseif result[i] == 6 then
                result[i] = "Six"
            elseif result[i] == 7 then
                result[i] = "Seven"
            elseif result[i] == 8 then
                result[i] = "Eight"
            elseif result[i] == 9 then
                result[i] = "Nine"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk_gvdec.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpdk_gvdec.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        local map = {
            ['1'] = 'One',
            ['2'] = 'Two',
            ['3'] = 'Three',
            ['4'] = 'Four',
            ['5'] = 'Five',
            ['6'] = 'Six',
            ['7'] = 'Seven',
            ['8'] = 'Eight',
            ['9'] = 'Nine'
        }
        for i = 1, #res do
            res[i] = map[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrns5yh9.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpmrns5yh9.lua:24:
    in local 'candidate'\n\t/tmp/tmpmrns5yh9.lua:45: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, map[v])
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlyz_x2r.lua:37:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmprlyz_x2r.lua:37: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                result[#result + 1] = arr[i]
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        for i = 1, #result do
            if result[i] == '1' then
                result[i] = 'One'
            elseif result[i] == '2' then
                result[i] = 'Two'
            elseif result[i] == '3' then
                result[i] = 'Three'
            elseif result[i] == '4' then
                result[i] = 'Four'
            elseif result[i] == '5' then
                result[i] = 'Five'
            elseif result[i] == '6' then
                result[i] = 'Six'
            elseif result[i] == '7' then
                result[i] = 'Seven'
            elseif result[i] == '8' then
                result[i] = 'Eight'
            elseif result[i] == '9' then
                result[i] = 'Nine'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ox871s6.lua:51:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp8ox871s6.lua:51: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        for i = 1, #res do
            res[i] = res[i]:gsub("1", "One")
            res[i] = res[i]:gsub("2", "Two")
            res[i] = res[i]:gsub("3", "Three")
            res[i] = res[i]:gsub("4", "Four")
            res[i] = res[i]:gsub("5", "Five")
            res[i] = res[i]:gsub("6", "Six")
            res[i] = res[i]:gsub("7", "Seven")
            res[i] = res[i]:gsub("8", "Eight")
            res[i] = res[i]:gsub("9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuuu4yl9.lua:41:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpcuuu4yl9.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        for i = 1, #result do
            result[i] = string.upper(result[i]:sub(1, 1)) .. result[i]:sub(2)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskem3b6a.lua:33:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\nstack
    traceback:\n\t/tmp/tmpskem3b6a.lua:33: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local new_arr = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(new_arr, v)
            end
        end
        table.sort(new_arr)
        local result = {}
        for i = #new_arr, 1, -1 do
            table.insert(result, tostring(new_arr[i]))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j9ns7xw.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\nstack
    traceback:\n\t/tmp/tmp9j9ns7xw.lua:31: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = DIGITS[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7luk5gfe.lua:22:
    attempt to index a nil value (global 'DIGITS')\nstack traceback:\n\t/tmp/tmp7luk5gfe.lua:22:
    in local 'candidate'\n\t/tmp/tmp7luk5gfe.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local t = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(t, v)
            end
        end
        table.sort(t)
        local res = {}
        for i = #t, 1, -1 do
            table.insert(res, tostring(t[i]))
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogphvpvd.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\nstack
    traceback:\n\t/tmp/tmpogphvpvd.lua:31: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          res[#res + 1] = arr[i]
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = names[res[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp503hjfke.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmp503hjfke.lua:22:
    in local 'candidate'\n\t/tmp/tmp503hjfke.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort_func(a, b)
        return a < b
      end
      local function reverse_func(a, b)
        return a > b
      end
      local function replace_func(a)
        if a == 1 then
          return "One"
        elseif a == 2 then
          return "Two"
        elseif a == 3 then
          return "Three"
        elseif a == 4 then
          return "Four"
        elseif a == 5 then
          return "Five"
        elseif a == 6 then
          return "Six"
        elseif a == 7 then
          return "Seven"
        elseif a == 8 then
          return "Eight"
        elseif a == 9 then
          return "Nine"
        end
      end
      local function filter_func(a)
        return a >= 1 and a <= 9
      end
      local function map_func(a)
        return replace_func(a)
      end
      local function reduce_func(a, b)
        return a .. b
      end
      return arr:filter(filter_func):sort(sort_func):reverse():map(map_func):reduce(reduce_func)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshxonmbr.lua:50:
    attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpshxonmbr.lua:50:
    in local 'candidate'\n\t/tmp/tmpshxonmbr.lua:56: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmf3nnbl2.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpmf3nnbl2.lua:22:
    in local 'candidate'\n\t/tmp/tmpmf3nnbl2.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = tostring(result[i])
      end
      table.reverse(result)
      for i = 1, #result do
        result[i] = string.gsub(result[i], '1', 'One')
        result[i] = string.gsub(result[i], '2', 'Two')
        result[i] = string.gsub(result[i], '3', 'Three')
        result[i] = string.gsub(result[i], '4', 'Four')
        result[i] = string.gsub(result[i], '5', 'Five')
        result[i] = string.gsub(result[i], '6', 'Six')
        result[i] = string.gsub(result[i], '7', 'Seven')
        result[i] = string.gsub(result[i], '8', 'Eight')
        result[i] = string.gsub(result[i], '9', 'Nine')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwoscpcav.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpwoscpcav.lua:24:
    in local 'candidate'\n\t/tmp/tmpwoscpcav.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, map[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioxso1yr.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpioxso1yr.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = tostring(result[i])
      end
      table.reverse(result)
      for i = 1, #result do
        result[i] = result[i]:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_odmhcsj.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp_odmhcsj.lua:24:
    in local 'candidate'\n\t/tmp/tmp_odmhcsj.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, map[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnbb0u4k.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmplnbb0u4k.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = tostring(result[i])
      end
      table.reverse(result)
      for i = 1, #result do
        result[i] = string.gsub(result[i], "1", "One")
        result[i] = string.gsub(result[i], "2", "Two")
        result[i] = string.gsub(result[i], "3", "Three")
        result[i] = string.gsub(result[i], "4", "Four")
        result[i] = string.gsub(result[i], "5", "Five")
        result[i] = string.gsub(result[i], "6", "Six")
        result[i] = string.gsub(result[i], "7", "Seven")
        result[i] = string.gsub(result[i], "8", "Eight")
        result[i] = string.gsub(result[i], "9", "Nine")
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47z89r59.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp47z89r59.lua:24:
    in local 'candidate'\n\t/tmp/tmp47z89r59.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local num_to_name = {
            [1] = "One",
            [2] = "Two",
            [3] = "Three",
            [4] = "Four",
            [5] = "Five",
            [6] = "Six",
            [7] = "Seven",
            [8] = "Eight",
            [9] = "Nine"
        }
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, num_to_name[v])
            end
        end
        table.sort(result)
        table.reverse(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvfrjqr3.lua:32:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpjvfrjqr3.lua:32:
    in local 'candidate'\n\t/tmp/tmpjvfrjqr3.lua:39: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = result[i]:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgtfqovd.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmprgtfqovd.lua:24:
    in local 'candidate'\n\t/tmp/tmprgtfqovd.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        for i = 1, #res do
            res[i] = string.gsub(res[i], "1", "One")
            res[i] = string.gsub(res[i], "2", "Two")
            res[i] = string.gsub(res[i], "3", "Three")
            res[i] = string.gsub(res[i], "4", "Four")
            res[i] = string.gsub(res[i], "5", "Five")
            res[i] = string.gsub(res[i], "6", "Six")
            res[i] = string.gsub(res[i], "7", "Seven")
            res[i] = string.gsub(res[i], "8", "Eight")
            res[i] = string.gsub(res[i], "9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgt7uxve.lua:41:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpvgt7uxve.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = numbers[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mvd3bsz.lua:22:
    attempt to index a nil value (global 'numbers')\nstack traceback:\n\t/tmp/tmp5mvd3bsz.lua:22:
    in local 'candidate'\n\t/tmp/tmp5mvd3bsz.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47zc9mu0.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp47zc9mu0.lua:24:
    in local 'candidate'\n\t/tmp/tmp47zc9mu0.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort_table(arr)
        local function sort_func(a, b)
          return a < b
        end
        table.sort(arr, sort_func)
        return arr
      end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmppkz51b1n.lua:32: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local names = {
            [1] = "One",
            [2] = "Two",
            [3] = "Three",
            [4] = "Four",
            [5] = "Five",
            [6] = "Six",
            [7] = "Seven",
            [8] = "Eight",
            [9] = "Nine"
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, names[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_ya_3vh.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp2_ya_3vh.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i, v in ipairs(arr) do
        if v > 0 and v < 10 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i, v in ipairs(result) do
        result[i] = tostring(v)
      end
      table.sort(result, function(a, b) return #a > #b end)
      for i, v in ipairs(result) do
        result[i] = tonumber(v)
      end
      for i, v in ipairs(result) do
        if v == 1 then
          result[i] = "One"
        elseif v == 2 then
          result[i] = "Two"
        elseif v == 3 then
          result[i] = "Three"
        elseif v == 4 then
          result[i] = "Four"
        elseif v == 5 then
          result[i] = "Five"
        elseif v == 6 then
          result[i] = "Six"
        elseif v == 7 then
          result[i] = "Seven"
        elseif v == 8 then
          result[i] = "Eight"
        elseif v == 9 then
          result[i] = "Nine"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zk0pbz9.lua:55:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\", \"Two\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp6zk0pbz9.lua:55: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = num_to_str[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwsvmu7dn.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpwsvmu7dn.lua:22:
    in local 'candidate'\n\t/tmp/tmpwsvmu7dn.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = result[i]:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbjye92j2.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpbjye92j2.lua:24:
    in local 'candidate'\n\t/tmp/tmpbjye92j2.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort_table(t)
            local function sort_func(a, b)
                return a < b
            end
            table.sort(t, sort_func)
            return t
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmp_gtw3ddm.lua:32: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local numbers = {
            [1] = "One",
            [2] = "Two",
            [3] = "Three",
            [4] = "Four",
            [5] = "Five",
            [6] = "Six",
            [7] = "Seven",
            [8] = "Eight",
            [9] = "Nine"
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, numbers[v])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewjmilwe.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpewjmilwe.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          res[#res + 1] = arr[i]
        end
      end
      table.sort(res)
      for i = 1, #res do
        if res[i] == 1 then
          res[i] = 'One'
        elseif res[i] == 2 then
          res[i] = 'Two'
        elseif res[i] == 3 then
          res[i] = 'Three'
        elseif res[i] == 4 then
          res[i] = 'Four'
        elseif res[i] == 5 then
          res[i] = 'Five'
        elseif res[i] == 6 then
          res[i] = 'Six'
        elseif res[i] == 7 then
          res[i] = 'Seven'
        elseif res[i] == 8 then
          res[i] = 'Eight'
        elseif res[i] == 9 then
          res[i] = 'Nine'
        end
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu1yyl86.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpzu1yyl86.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i, v in ipairs(result) do
            result[i] = names[v]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb80r7g9x.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpb80r7g9x.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            if res[i] == 1 then
                res[i] = "One"
            elseif res[i] == 2 then
                res[i] = "Two"
            elseif res[i] == 3 then
                res[i] = "Three"
            elseif res[i] == 4 then
                res[i] = "Four"
            elseif res[i] == 5 then
                res[i] = "Five"
            elseif res[i] == 6 then
                res[i] = "Six"
            elseif res[i] == 7 then
                res[i] = "Seven"
            elseif res[i] == 8 then
                res[i] = "Eight"
            elseif res[i] == 9 then
                res[i] = "Nine"
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz91lrcu6.lua:48:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpz91lrcu6.lua:48: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowi2hodl.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpowi2hodl.lua:22:
    in local 'candidate'\n\t/tmp/tmpowi2hodl.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqs0aiaqg.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpqs0aiaqg.lua:22:
    in local 'candidate'\n\t/tmp/tmpqs0aiaqg.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i, v in ipairs(res) do
            res[i] = tostring(v)
        end
        for i, v in ipairs(res) do
            if v == '1' then
                res[i] = 'One'
            elseif v == '2' then
                res[i] = 'Two'
            elseif v == '3' then
                res[i] = 'Three'
            elseif v == '4' then
                res[i] = 'Four'
            elseif v == '5' then
                res[i] = 'Five'
            elseif v == '6' then
                res[i] = 'Six'
            elseif v == '7' then
                res[i] = 'Seven'
            elseif v == '8' then
                res[i] = 'Eight'
            elseif v == '9' then
                res[i] = 'Nine'
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3_gw2bd.lua:51:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpq3_gw2bd.lua:51: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort(arr)
            local function swap(i, j)
                local temp = arr[i]
                arr[i] = arr[j]
                arr[j] = temp
            end
            for i = 1, #arr do
                for j = i + 1, #arr do
                    if arr[i] > arr[j] then
                        swap(i, j)
                    end
                end
            end
        end
        local function reverse(arr)
            local function swap(i, j)
                local temp = arr[i]
                arr[i] = arr[j]
                arr[j] = temp
            end
            for i = 1, #arr / 2 do
                swap(i, #arr - i + 1)
            end
        end
        local function replace(arr)
            local function replace_one(num)
                if num == 1 then
                    return 'One'
                elseif num == 2 then
                    return 'Two'
                elseif num == 3 then
                    return 'Three'
                elseif num == 4 then
                    return 'Four'
                elseif num == 5 then
                    return 'Five'
                elseif num == 6 then
                    return 'Six'
                elseif num == 7 then
                    return 'Seven'
                elseif num == 8 then
                    return 'Eight'
                elseif num == 9 then
                    return 'Nine'
                end
            end
            for i = 1, #arr do
                arr[i] = replace_one(arr[i])
            end
        end
        local function filter(arr)
            local function is_valid(num)
                return num >= 1 and num <= 9
            end
            local new_arr = {}
            for i = 1, #arr do
                if is_valid(arr[i]) then
                    new_arr[#new_arr + 1] = arr[i]
                end
            end
            return new_arr
        end
        arr = filter(arr)
        sort(arr)
        reverse(arr)
        replace(arr)
        return arr
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local dict = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, dict[v])
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppooxv47t.lua:37:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmppooxv47t.lua:37: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = number_to_name[v]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2cliqr8.lua:22:
    attempt to index a nil value (global 'number_to_name')\nstack traceback:\n\t/tmp/tmpf2cliqr8.lua:22:
    in local 'candidate'\n\t/tmp/tmpf2cliqr8.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort_table(t)
        local function swap(a, b)
          local temp = t[a]
          t[a] = t[b]
          t[b] = temp
        end
        local function compare(a, b)
          return a > b
        end
        for i = 1, #t do
          for j = i + 1, #t do
            if compare(t[i], t[j]) then
              swap(i, j)
            end
          end
        end
      end
      local function reverse_table(t)
        local length = #t
        for i = 1, length / 2 do
          local temp = t[i]
          t[i] = t[length - i + 1]
          t[length - i + 1] = temp
        end
      end
      local function replace_number(t)
        local number_map = {
          [1] = 'One',
          [2] = 'Two',
          [3] = 'Three',
          [4] = 'Four',
          [5] = 'Five',
          [6] = 'Six',
          [7] = 'Seven',
          [8] = 'Eight',
          [9] = 'Nine'
        }
        for i = 1, #t do
          t[i] = number_map[t[i]]
        end
      end
      local function filter_table(t)
        local new_table = {}
        for i = 1, #t do
          if t[i] >= 1 and t[i] <= 9 then
            new_table[#new_table + 1] = t[i]
          end
        end
        return new_table
      end
      local new_table = filter_table(arr)
      sort_table(new_table)
      reverse_table(new_table)
      replace_number(new_table)
      return new_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i = 1, #res do
            res[i] = names[tonumber(res[i])]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpum2ht5l4.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpum2ht5l4.lua:24:
    in local 'candidate'\n\t/tmp/tmpum2ht5l4.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = num_to_str[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gpnogcc.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp6gpnogcc.lua:22:
    in local 'candidate'\n\t/tmp/tmp6gpnogcc.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = num_to_str[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmkt6vcif.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpmkt6vcif.lua:22:
    in local 'candidate'\n\t/tmp/tmpmkt6vcif.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] > 0 and arr[i] < 10 then
          result[#result + 1] = arr[i]
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = num_to_str[result[i]]
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmporgosjaw.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmporgosjaw.lua:22:
    in local 'candidate'\n\t/tmp/tmporgosjaw.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        local reverse_result = {}
        for i = #result, 1, -1 do
            table.insert(reverse_result, result[i])
        end
        local final_result = {}
        for i = 1, #reverse_result do
            if reverse_result[i] == 1 then
                table.insert(final_result, "One")
            elseif reverse_result[i] == 2 then
                table.insert(final_result, "Two")
            elseif reverse_result[i] == 3 then
                table.insert(final_result, "Three")
            elseif reverse_result[i] == 4 then
                table.insert(final_result, "Four")
            elseif reverse_result[i] == 5 then
                table.insert(final_result, "Five")
            elseif reverse_result[i] == 6 then
                table.insert(final_result, "Six")
            elseif reverse_result[i] == 7 then
                table.insert(final_result, "Seven")
            elseif reverse_result[i] == 8 then
                table.insert(final_result, "Eight")
            elseif reverse_result[i] == 9 then
                table.insert(final_result, "Nine")
            end
        end
        return final_result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = result[i]:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jqyi1ux.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp0jqyi1ux.lua:24:
    in local 'candidate'\n\t/tmp/tmp0jqyi1ux.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local function sort_table(t)
            local function compare(a, b)
                return a < b
            end
            table.sort(t, compare)
            return t
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpu280u_3o.lua:32: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        for i = 1, #res do
            res[i] = res[i]:gsub("1", "One")
            res[i] = res[i]:gsub("2", "Two")
            res[i] = res[i]:gsub("3", "Three")
            res[i] = res[i]:gsub("4", "Four")
            res[i] = res[i]:gsub("5", "Five")
            res[i] = res[i]:gsub("6", "Six")
            res[i] = res[i]:gsub("7", "Seven")
            res[i] = res[i]:gsub("8", "Eight")
            res[i] = res[i]:gsub("9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaemd_x9w.lua:41:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpaemd_x9w.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local function sort_by_length(a, b)
        return a < b
      end
      local function reverse_table(arr)
        local reversed = {}
        for i = #arr, 1, -1 do
          reversed[#reversed + 1] = arr[i]
        end
        return reversed
      end
      local function replace_by_name(arr)
        local names = {
          [1] = 'One',
          [2] = 'Two',
          [3] = 'Three',
          [4] = 'Four',
          [5] = 'Five',
          [6] = 'Six',
          [7] = 'Seven',
          [8] = 'Eight',
          [9] = 'Nine'
        }
        local new_arr = {}
        for i = 1, #arr do
          if arr[i] > 0 and arr[i] < 10 then
            new_arr[#new_arr + 1] = names[arr[i]]
          end
        end
        return new_arr
      end
      return replace_by_name(reverse_table(table.sort(arr, sort_by_length)))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl0l7mndz.lua:19:
    attempt to get length of a nil value (local 'arr')\nstack traceback:\n\t/tmp/tmpl0l7mndz.lua:19:
    in local 'reverse_table'\n\t/tmp/tmpl0l7mndz.lua:44: in local 'candidate'\n\t/tmp/tmpl0l7mndz.lua:50:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      local res2 = {}
      for i = #res, 1, -1 do
        table.insert(res2, res[i])
      end
      local res3 = {}
      for _, v in ipairs(res2) do
        if v == 1 then
          table.insert(res3, "One")
        elseif v == 2 then
          table.insert(res3, "Two")
        elseif v == 3 then
          table.insert(res3, "Three")
        elseif v == 4 then
          table.insert(res3, "Four")
        elseif v == 5 then
          table.insert(res3, "Five")
        elseif v == 6 then
          table.insert(res3, "Six")
        elseif v == 7 then
          table.insert(res3, "Seven")
        elseif v == 8 then
          table.insert(res3, "Eight")
        elseif v == 9 then
          table.insert(res3, "Nine")
        end
      end
      return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local new_arr = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(new_arr, v)
            end
        end
        table.sort(new_arr)
        local result = {}
        for i = #new_arr, 1, -1 do
            table.insert(result, tostring(new_arr[i]))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2x2lcd8.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"8\", \"5\", \"4\", \"3\", \"2\", \"2\", \"1\", \"1\"}\nstack
    traceback:\n\t/tmp/tmpz2x2lcd8.lua:31: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local new_arr = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(new_arr, arr[i])
            end
        end
        table.sort(new_arr)
        local reverse_arr = {}
        for i = #new_arr, 1, -1 do
            table.insert(reverse_arr, new_arr[i])
        end
        local result = {}
        for i = 1, #reverse_arr do
            if reverse_arr[i] == 1 then
                table.insert(result, "One")
            elseif reverse_arr[i] == 2 then
                table.insert(result, "Two")
            elseif reverse_arr[i] == 3 then
                table.insert(result, "Three")
            elseif reverse_arr[i] == 4 then
                table.insert(result, "Four")
            elseif reverse_arr[i] == 5 then
                table.insert(result, "Five")
            elseif reverse_arr[i] == 6 then
                table.insert(result, "Six")
            elseif reverse_arr[i] == 7 then
                table.insert(result, "Seven")
            elseif reverse_arr[i] == 8 then
                table.insert(result, "Eight")
            elseif reverse_arr[i] == 9 then
                table.insert(result, "Nine")
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacn4k023.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpacn4k023.lua:22:
    in local 'candidate'\n\t/tmp/tmpacn4k023.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = tostring(result[i])
        end
        table.reverse(result)
        for i = 1, #result do
            result[i] = string.gsub(result[i], "1", "One")
            result[i] = string.gsub(result[i], "2", "Two")
            result[i] = string.gsub(result[i], "3", "Three")
            result[i] = string.gsub(result[i], "4", "Four")
            result[i] = string.gsub(result[i], "5", "Five")
            result[i] = string.gsub(result[i], "6", "Six")
            result[i] = string.gsub(result[i], "7", "Seven")
            result[i] = string.gsub(result[i], "8", "Eight")
            result[i] = string.gsub(result[i], "9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_4qqs6_.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpd_4qqs6_.lua:24:
    in local 'candidate'\n\t/tmp/tmpd_4qqs6_.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local dict = {
            [1] = "One",
            [2] = "Two",
            [3] = "Three",
            [4] = "Four",
            [5] = "Five",
            [6] = "Six",
            [7] = "Seven",
            [8] = "Eight",
            [9] = "Nine"
        }
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, dict[arr[i]])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kfbx9nd.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmp2kfbx9nd.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i, v in ipairs(result) do
        result[i] = tostring(result[i])
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yrtjvxd.lua:30:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\nstack
    traceback:\n\t/tmp/tmp_yrtjvxd.lua:30: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(result, map[v])
            end
        end
        table.sort(result)
        local i, j = 1, #result
        while i < j do
            result[i], result[j] = result[j], result[i]
            i = i + 1
            j = j - 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom7pjbkv.lua:44:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"Two\", \"Three\", \"One\", \"One\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpom7pjbkv.lua:44: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        for i = 1, #res do
            res[i] = res[i]:gsub("1", "One")
            res[i] = res[i]:gsub("2", "Two")
            res[i] = res[i]:gsub("3", "Three")
            res[i] = res[i]:gsub("4", "Four")
            res[i] = res[i]:gsub("5", "Five")
            res[i] = res[i]:gsub("6", "Six")
            res[i] = res[i]:gsub("7", "Seven")
            res[i] = res[i]:gsub("8", "Eight")
            res[i] = res[i]:gsub("9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sj7sigz.lua:41:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmp4sj7sigz.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                res[#res + 1] = arr[i]
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = names[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdu964889.lua:22:
    attempt to index a nil value (global 'names')\nstack traceback:\n\t/tmp/tmpdu964889.lua:22:
    in local 'candidate'\n\t/tmp/tmpdu964889.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      local numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          result[#result + 1] = numbers[arr[i]]
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfm7nr6y.lua:27:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmptfm7nr6y.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, map[v])
            end
        end
        table.sort(res)
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooo7ifew.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpooo7ifew.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        local res2 = {}
        for i = #res, 1, -1 do
            table.insert(res2, res[i])
        end
        local res3 = {}
        for _, v in ipairs(res2) do
            table.insert(res3, num_to_str[v])
        end
        return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gc5eh5m.lua:27:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp8gc5eh5m.lua:27:
    in local 'candidate'\n\t/tmp/tmp8gc5eh5m.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        local res2 = {}
        for i = #res, 1, -1 do
            table.insert(res2, res[i])
        end
        local res3 = {}
        for _, v in ipairs(res2) do
            if v == 1 then
                table.insert(res3, "One")
            elseif v == 2 then
                table.insert(res3, "Two")
            elseif v == 3 then
                table.insert(res3, "Three")
            elseif v == 4 then
                table.insert(res3, "Four")
            elseif v == 5 then
                table.insert(res3, "Five")
            elseif v == 6 then
                table.insert(res3, "Six")
            elseif v == 7 then
                table.insert(res3, "Seven")
            elseif v == 8 then
                table.insert(res3, "Eight")
            elseif v == 9 then
                table.insert(res3, "Nine")
            end
        end
        return res3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          table.insert(result, arr[i])
        end
      end
      table.sort(result)
      local result2 = {}
      for i = #result, 1, -1 do
        table.insert(result2, result[i])
      end
      local result3 = {}
      for i = 1, #result2 do
        if result2[i] == 1 then
          table.insert(result3, "One")
        elseif result2[i] == 2 then
          table.insert(result3, "Two")
        elseif result2[i] == 3 then
          table.insert(result3, "Three")
        elseif result2[i] == 4 then
          table.insert(result3, "Four")
        elseif result2[i] == 5 then
          table.insert(result3, "Five")
        elseif result2[i] == 6 then
          table.insert(result3, "Six")
        elseif result2[i] == 7 then
          table.insert(result3, "Seven")
        elseif result2[i] == 8 then
          table.insert(result3, "Eight")
        elseif result2[i] == 9 then
          table.insert(result3, "Nine")
        end
      end
      return result3
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        local names = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"}
        for i = 1, #result do
            result[i] = names[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazm_brjw.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpazm_brjw.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = tostring(res[i])
        end
        table.reverse(res)
        for i = 1, #res do
            res[i] = res[i]:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjlrgjffn.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpjlrgjffn.lua:24:
    in local 'candidate'\n\t/tmp/tmpjlrgjffn.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local dict = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, dict[arr[i]])
            end
        end
        table.sort(result)
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7k2o9nk.lua:38:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Eight\", \"Five\", \"Four\", \"One\", \"One\", \"Three\",
    \"Two\", \"Two\"}\nstack traceback:\n\t/tmp/tmpi7k2o9nk.lua:38: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        local names = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"}
        for i = 1, #result do
            result[i] = names[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgjcb_hs.lua:31:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"One\", \"Two\", \"Two\", \"Three\", \"Four\", \"Five\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpzgjcb_hs.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local new_arr = {}
        for i, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(new_arr, v)
            end
        end
        table.sort(new_arr)
        table.reverse(new_arr)
        local result = {}
        for i, v in ipairs(new_arr) do
            table.insert(result, num_to_word[v])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgoy6ji6.lua:21:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpvgoy6ji6.lua:21:
    in local 'candidate'\n\t/tmp/tmpvgoy6ji6.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = num_to_str[res[i]]
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9wqeynls.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp9wqeynls.lua:22:
    in local 'candidate'\n\t/tmp/tmp9wqeynls.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v > 0 and v < 10 then
                table.insert(result, v)
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = tostring(result[i])
        end
        table.sort(result, function(a, b) return #a > #b end)
        for i, v in ipairs(result) do
            if v == '1' then
                result[i] = 'One'
            elseif v == '2' then
                result[i] = 'Two'
            elseif v == '3' then
                result[i] = 'Three'
            elseif v == '4' then
                result[i] = 'Four'
            elseif v == '5' then
                result[i] = 'Five'
            elseif v == '6' then
                result[i] = 'Six'
            elseif v == '7' then
                result[i] = 'Seven'
            elseif v == '8' then
                result[i] = 'Eight'
            elseif v == '9' then
                result[i] = 'Nine'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczd5bewa.lua:52:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"One\", \"Three\", \"Four\", \"Five\", \"Two\", \"One\", \"Two\",
    \"Eight\"}\nstack traceback:\n\t/tmp/tmpczd5bewa.lua:52: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local res = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(res, v)
        end
      end
      table.sort(res)
      for i = 1, #res do
        res[i] = tostring(res[i])
      end
      return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fnkfli4.lua:30:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\nstack
    traceback:\n\t/tmp/tmp8fnkfli4.lua:30: in function 'test_humaneval'\n\nRan 1 tests
    in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}
        for i = 1, #arr do
            if arr[i] > 0 and arr[i] < 10 then
                res[#res + 1] = names[arr[i]]
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60_lf_mk.lua:27:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmp60_lf_mk.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                result[#result + 1] = v
            end
        end
        table.sort(result)
        for i, v in ipairs(result) do
            result[i] = tostring(v)
        end
        table.reverse(result)
        for i, v in ipairs(result) do
            result[i] = v:gsub("1", "One"):gsub("2", "Two"):gsub("3", "Three"):gsub("4", "Four"):gsub("5", "Five"):gsub("6", "Six"):gsub("7", "Seven"):gsub("8", "Eight"):gsub("9", "Nine")
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpww4yteoz.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpww4yteoz.lua:24:
    in local 'candidate'\n\t/tmp/tmpww4yteoz.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        local sorted = {}
        local dict = {
            [1] = "One",
            [2] = "Two",
            [3] = "Three",
            [4] = "Four",
            [5] = "Five",
            [6] = "Six",
            [7] = "Seven",
            [8] = "Eight",
            [9] = "Nine"
        }
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(sorted, v)
            end
        end
        table.sort(sorted)
        for i = #sorted, 1, -1 do
            table.insert(result, dict[sorted[i]])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      local map = {
        [1] = 'One',
        [2] = 'Two',
        [3] = 'Three',
        [4] = 'Four',
        [5] = 'Five',
        [6] = 'Six',
        [7] = 'Seven',
        [8] = 'Eight',
        [9] = 'Nine'
      }
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          result[#result + 1] = map[arr[i]]
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpwk9rak.lua:37:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmplpwk9rak.lua:37: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        local map = {
            [1] = 'One',
            [2] = 'Two',
            [3] = 'Three',
            [4] = 'Four',
            [5] = 'Five',
            [6] = 'Six',
            [7] = 'Seven',
            [8] = 'Eight',
            [9] = 'Nine'
        }
        for i = 1, #arr do
            if arr[i] > 0 and arr[i] < 10 then
                res[#res + 1] = map[arr[i]]
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpklj8dyt2.lua:37:
    expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\",
    \"One\"}\nactual: {\"Two\", \"One\", \"One\", \"Four\", \"Five\", \"Eight\", \"Two\",
    \"Three\"}\nstack traceback:\n\t/tmp/tmpklj8dyt2.lua:37: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        for i = 1, #result do
            result[i] = num_to_str[result[i]]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_g_cdqe.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpi_g_cdqe.lua:22:
    in local 'candidate'\n\t/tmp/tmpi_g_cdqe.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for _, v in ipairs(arr) do
        if v >= 1 and v <= 9 then
          table.insert(result, v)
        end
      end
      table.sort(result)
      for i, v in ipairs(result) do
        result[i] = tostring(v)
      end
      table.reverse(result)
      for i, v in ipairs(result) do
        result[i] = string.gsub(v, "1", "One")
        result[i] = string.gsub(v, "2", "Two")
        result[i] = string.gsub(v, "3", "Three")
        result[i] = string.gsub(v, "4", "Four")
        result[i] = string.gsub(v, "5", "Five")
        result[i] = string.gsub(v, "6", "Six")
        result[i] = string.gsub(v, "7", "Seven")
        result[i] = string.gsub(v, "8", "Eight")
        result[i] = string.gsub(v, "9", "Nine")
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxphsxpuz.lua:24:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpxphsxpuz.lua:24:
    in local 'candidate'\n\t/tmp/tmpxphsxpuz.lua:42: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local res = {}
        for _, v in ipairs(arr) do
            if v >= 1 and v <= 9 then
                table.insert(res, v)
            end
        end
        table.sort(res)
        for i = 1, #res do
            res[i] = num_to_str[res[i]]
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3r8tlef4.lua:22:
    attempt to index a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmp3r8tlef4.lua:22:
    in local 'candidate'\n\t/tmp/tmp3r8tlef4.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] > 0 and arr[i] < 10 then
          result[#result + 1] = arr[i]
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = tostring(result[i])
      end
      table.sort(result, function(a, b) return #a > #b end)
      for i = 1, #result do
        result[i] = number_to_word(result[i])
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3oe57ls_.lua:26:
    attempt to call a nil value (global 'number_to_word')\nstack traceback:\n\t/tmp/tmp3oe57ls_.lua:26:
    in local 'candidate'\n\t/tmp/tmp3oe57ls_.lua:34: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
      local result = {}
      for i = 1, #arr do
        if arr[i] >= 1 and arr[i] <= 9 then
          result[#result + 1] = arr[i]
        end
      end
      table.sort(result)
      for i = 1, #result do
        result[i] = number_to_name[result[i]]
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuc741j43.lua:22:
    attempt to index a nil value (global 'number_to_name')\nstack traceback:\n\t/tmp/tmpuc741j43.lua:22:
    in local 'candidate'\n\t/tmp/tmpuc741j43.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given a table of integers, sort the integers that are between 1 and 9 inclusive,
    -- reverse the resulting table, and then replace each digit by its corresponding name from
    -- "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".
    -- For example:
    -- >>> by_length({2, 1, 1, 4, 5, 8, 2, 3})
    -- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'}
    -- If the table is empty, return an empty table:
    -- >>> by_length({})
    -- {}
    -- If the table has any strange number ignore it:
    -- >>> by_length({1, -1, 55})
    -- {'One'}
    local function by_length(arr)
        local result = {}
        for i = 1, #arr do
            if arr[i] >= 1 and arr[i] <= 9 then
                table.insert(result, arr[i])
            end
        end
        table.sort(result)
        table.reverse(result)
        for i = 1, #result do
            if result[i] == 1 then
                result[i] = "One"
            elseif result[i] == 2 then
                result[i] = "Two"
            elseif result[i] == 3 then
                result[i] = "Three"
            elseif result[i] == 4 then
                result[i] = "Four"
            elseif result[i] == 5 then
                result[i] = "Five"
            elseif result[i] == 6 then
                result[i] = "Six"
            elseif result[i] == 7 then
                result[i] = "Seven"
            elseif result[i] == 8 then
                result[i] = "Eight"
            elseif result[i] == 9 then
                result[i] = "Nine"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = by_length
        lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({1, -1, 55}), {'One'})
        lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})
        lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadw8m_r0.lua:21:
    attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpadw8m_r0.lua:21:
    in local 'candidate'\n\t/tmp/tmpadw8m_r0.lua:49: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
