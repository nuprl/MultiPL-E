---
name: HumanEval_67_fruit_distribution
language: lua
prompt: "-- In this task, you will be given a string that represents a number of apples
  and oranges \n-- that are distributed in a basket of fruit this basket contains
  \n-- apples, oranges, and mango fruits. Given the string that represents the total
  number of \n-- the oranges and apples and an integer that represent the total number
  of the fruits \n-- in the basket return the number of the mango fruits in the basket.\n--
  for examble:\n-- >>> fruit_distribution('5 apples and 6 oranges', 19)\n-- 8\n--
  >>> fruit_distribution('0 apples and 1 oranges', 3)\n-- 2\n-- >>> fruit_distribution('2
  apples and 3 oranges', 100)\n-- 95\n-- >>> fruit_distribution('100 apples and 1
  oranges', 120)\n-- 19\nlocal function fruit_distribution(s, n)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = fruit_distribution
      lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)
      lu.assertEquals(candidate('5 apples and 6 oranges', 21), 10)
      lu.assertEquals(candidate('0 apples and 1 oranges', 3), 2)
      lu.assertEquals(candidate('1 apples and 0 oranges', 3), 2)
      lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)
      lu.assertEquals(candidate('2 apples and 3 oranges', 5), 0)
      lu.assertEquals(candidate('1 apples and 100 oranges', 120), 19)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- write your code here
      local apples = tonumber(string.match(s, '%d+ apples'))
      local oranges = tonumber(string.match(s, '%d+ oranges'))
      return n - apples - oranges
  end
- |2-
      -- your code here
      local apples, oranges = s:match("(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = string.match(s, "(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = string.match(s, "(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    -- your code here
    local a, o = s:match('(%d+) apples and (%d+) oranges')
    return n - (a + o)
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- write your code here
  end
- |2-
      -- your code here
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(a) + tonumber(o))
  end
- |2-
      -- your code here
      local a, o = string.match(s, "(%d+) apples and (%d+) oranges")
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - apples - oranges
  end
- |2-
    -- your code here
    local apples, oranges = string.match(s, "(%d+) apples and (%d+) oranges")
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- "\tlocal apples, oranges = s:match('(%d+) apples and (%d+) oranges')\n\treturn n
  - (tonumber(apples) + tonumber(oranges))\nend"
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match("(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match("(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local total = 0
      local apples = 0
      local oranges = 0
      local mango = 0
      local i = 1
      local j = 1
      local k = 1
      local l = 1
      while i <= string.len(s) do
          if string.sub(s, i, i) == " " then
              j = i + 1
              while j <= string.len(s) do
                  if string.sub(s, j, j) == " " then
                      k = j + 1
                      while k <= string.len(s) do
                          if string.sub(s, k, k) == " " then
                              l = k + 1
                              while l <= string.len(s) do
                                  if string.sub(s, l, l) == " " then
                                      mango = n - (tonumber(string.sub(s, 1, i - 1)) + tonumber(string.sub(s, j + 1, k - 1)))
                                      return mango
                                  end
                                  l = l + 1
                              end
                          end
                          k = k + 1
                      end
                  end
                  j = j + 1
              end
          end
          i = i + 1
      end
  end
- |2-
      -- your code here
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      -- your code here
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(a) + tonumber(o))
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    -- your code here
    local a, o = s:match('(%d+) apples and (%d+) oranges')
    return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - tonumber(a) - tonumber(o)
  end
- |2-
      local apples, oranges = s:match("(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    local a, o = s:match('(%d+) apples and (%d+) oranges')
    return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- "\tlocal a, o = s:match('(%d+) apples and (%d+) oranges')\n\treturn n - (a + o)\nend"
- |2-
    -- your code here
    local a, o = string.match(s, "(%d+) apples and (%d+) oranges")
    return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - apples - oranges
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      -- your code here
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match("(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples = tonumber(string.match(s, "(%d+) apples"))
      local oranges = tonumber(string.match(s, "(%d+) oranges"))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local a, b = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(a) + tonumber(b))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    -- your code here
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - tonumber(a) - tonumber(o)
  end
- |2-
    -- your code here
    local a, b = s:match("(%d+) apples and (%d+) oranges")
    return n - (a + b)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- "\tlocal apples, oranges = s:match('(%d+) apples and (%d+) oranges')\n\treturn n
  - (tonumber(apples) + tonumber(oranges))\nend"
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - tonumber(a) - tonumber(o)
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- "\tlocal a, o = s:match('(%d+) apples and (%d+) oranges')\n\treturn n - tonumber(a)
  - tonumber(o)\nend"
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      apples, oranges = tonumber(apples), tonumber(oranges)
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    -- your code here
    local a, b = s:match("(%d+) apples and (%d+) oranges")
    return n - (a + b)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = s:match("(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    -- your code here
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      apples, oranges = tonumber(apples), tonumber(oranges)
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match("(%d+) apples and (%d+) oranges")
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(a) + tonumber(o))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
  end
- |2-
      local total_apples, total_oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (total_apples + total_oranges)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - tonumber(a) - tonumber(o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      apples, oranges = tonumber(apples), tonumber(oranges)
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
  end
- |2-
      local apples = tonumber(s:match('(%d+) apples'))
      local oranges = tonumber(s:match('(%d+) oranges'))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - tonumber(apples) - tonumber(oranges)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - tonumber(a) - tonumber(o)
  end
- |2-
      local apples = tonumber(s:match("(%d+) apples"))
      local oranges = tonumber(s:match("(%d+) oranges"))
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local a, o = s:match('(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local a, o = string.match(s, '(%d+) apples and (%d+) oranges')
      return n - (a + o)
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
    -- your code here
    local apples = tonumber(string.match(s, "(%d+) apples"))
    local oranges = tonumber(string.match(s, "(%d+) oranges"))
    return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      apples, oranges = tonumber(apples), tonumber(oranges)
      return n - apples - oranges
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - tonumber(apples) - tonumber(oranges)
  end
- |2-
    -- your code here
    local a, o = s:match('(%d+) apples and (%d+) oranges')
    return n - tonumber(a) - tonumber(o)
  end
- |2-
    local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
    return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      -- your code here
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
- |2-
      local apples, oranges = s:match('(%d+) apples and (%d+) oranges')
      return n - (tonumber(apples) + tonumber(oranges))
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
