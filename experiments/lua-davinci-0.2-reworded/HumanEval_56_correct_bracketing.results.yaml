---
name: HumanEval_56_correct_bracketing
language: lua
results:
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local b = brackets:sub(i, i)
        if b == '<' then
          table.insert(stack, b)
        elseif b == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdifuwm8r.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpdifuwm8r.lua:12:
    in local 'candidate'\n\t/tmp/tmpdifuwm8r.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20i6q5t6.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp20i6q5t6.lua:12:
    in local 'candidate'\n\t/tmp/tmp20i6q5t6.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl83vhx0l.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpl83vhx0l.lua:12:
    in local 'candidate'\n\t/tmp/tmpl83vhx0l.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                count = count + 1
            elseif c == '>' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3hoxsx37.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp3hoxsx37.lua:12:
    in local 'candidate'\n\t/tmp/tmp3hoxsx37.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                local top = table.remove(stack)
                if top ~= '<' then
                    return false
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6tuley1c.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp6tuley1c.lua:12:
    in local 'candidate'\n\t/tmp/tmp6tuley1c.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, '<')
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                stack:push(bracket)
            elseif bracket == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrriqpcx.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpdrriqpcx.lua:12:
    in local 'candidate'\n\t/tmp/tmpdrriqpcx.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          stack[#stack + 1] = c
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          stack[#stack] = nil
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_mur8om4.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp_mur8om4.lua:12:
    in local 'candidate'\n\t/tmp/tmp_mur8om4.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          count = count + 1
        elseif c == '>' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                stack:push(bracket)
            elseif bracket == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1le5f1sg.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp1le5f1sg.lua:12:
    in local 'candidate'\n\t/tmp/tmp1le5f1sg.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkawpzq_n.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpkawpzq_n.lua:12:
    in local 'candidate'\n\t/tmp/tmpkawpzq_n.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack:new()
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                stack:push(b)
            elseif b == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeickmhl3.lua:12:
    attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpeickmhl3.lua:12:
    in local 'candidate'\n\t/tmp/tmpeickmhl3.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = Stack()
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          stack:push(c)
        elseif c == '>' then
          if stack:is_empty() then
            return false
          else
            stack:pop()
          end
        end
      end
      return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8uhrdy_.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp_8uhrdy_.lua:12:
    in local 'candidate'\n\t/tmp/tmp_8uhrdy_.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj57qkckm.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpj57qkckm.lua:12:
    in local 'candidate'\n\t/tmp/tmpj57qkckm.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = Stack()
      for i = 1, #brackets do
        local bracket = brackets:sub(i, i)
        if bracket == '<' then
          stack:push(bracket)
        elseif bracket == '>' then
          if stack:is_empty() then
            return false
          else
            stack:pop()
          end
        end
      end
      return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphy3l9zzz.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmphy3l9zzz.lua:12:
    in local 'candidate'\n\t/tmp/tmphy3l9zzz.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqdletnl_.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpqdletnl_.lua:12:
    in local 'candidate'\n\t/tmp/tmpqdletnl_.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                count = count + 1
            elseif c == '>' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening
    bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n--
    false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n--
    true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\tlocal
    count = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == '<' then\n\t\t\tcount
    = count + 1\n\t\telse\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn
    false\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),
    true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),
    true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'),
    false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'),
    false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'),
    false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'),
    false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack[#stack + 1] = c
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                stack[#stack] = nil
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                count = count + 1
            elseif c == '>' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjnfn_c5a.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpjnfn_c5a.lua:12:
    in local 'candidate'\n\t/tmp/tmpjnfn_c5a.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpobpov1dk.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpobpov1dk.lua:12:
    in local 'candidate'\n\t/tmp/tmpobpov1dk.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                count = count + 1
            elseif c == '>' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local b = brackets:sub(i, i)
        if b == '<' then
          table.insert(stack, b)
        elseif b == '>' then
          if #stack == 0 then
            return false
          else
            table.remove(stack)
          end
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                stack:push(b)
            elseif b == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5kzq0q50.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp5kzq0q50.lua:12:
    in local 'candidate'\n\t/tmp/tmp5kzq0q50.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          stack[#stack + 1] = c
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          stack[#stack] = nil
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = Stack()
      for i = 1, #brackets do
        local b = brackets:sub(i, i)
        if b == '<' then
          stack:push(b)
        else
          if stack:is_empty() then
            return false
          else
            stack:pop()
          end
        end
      end
      return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ga3d4uo.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp1ga3d4uo.lua:12:
    in local 'candidate'\n\t/tmp/tmp1ga3d4uo.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzjbly6v.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpyzjbly6v.lua:12:
    in local 'candidate'\n\t/tmp/tmpyzjbly6v.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local b = brackets:sub(i, i)
        if b == '<' then
          table.insert(stack, b)
        elseif b == '>' then
          if #stack == 0 then
            return false
          else
            table.remove(stack)
          end
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jt4btrv.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp2jt4btrv.lua:12:
    in local 'candidate'\n\t/tmp/tmp2jt4btrv.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                stack:push(bracket)
            elseif bracket == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxpdjbtm.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmplxpdjbtm.lua:12:
    in local 'candidate'\n\t/tmp/tmplxpdjbtm.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening
    bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n--
    false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n--
    true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\tlocal
    stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif
    c == '<' then\n\t\t\ttable.insert(stack, c)\n\t\telseif c == '>' then\n\t\t\tif
    #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\t\tend\n\tend\n\treturn
    #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),
    true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),
    true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),
    false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),
    false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),
    false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv6vu4h9i.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpv6vu4h9i.lua:12:
    in local 'candidate'\n\t/tmp/tmpv6vu4h9i.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local char = brackets:sub(i, i)
            if char == '<' then
                table.insert(stack, char)
            elseif char == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack[#stack + 1] = c
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                stack[#stack] = nil
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local depth = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                depth = depth + 1
            elseif brackets:sub(i, i) == '>' then
                depth = depth - 1
            end
            if depth < 0 then
                return false
            end
        end
        return depth == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local char = brackets:sub(i, i)
            if char == '<' then
                table.insert(stack, char)
            elseif char == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '<' then
                table.insert(stack, bracket)
            elseif bracket == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppqdtu0n.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpppqdtu0n.lua:12:
    in local 'candidate'\n\t/tmp/tmpppqdtu0n.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                count = count + 1
            elseif c == '>' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for c in brackets:gmatch('.') do
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '<' then
          count = count + 1
        else
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local char = brackets:sub(i, i)
            if char == '<' then
                table.insert(stack, char)
            elseif char == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local bracket = brackets:sub(i, i)
        if bracket == '<' then
          stack[#stack + 1] = bracket
        elseif bracket == '>' then
          if #stack == 0 then
            return false
          end
          stack[#stack] = nil
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = Stack()
      for i = 1, #brackets do
        local b = brackets:sub(i, i)
        if b == '<' then
          stack:push(b)
        elseif b == '>' then
          if stack:is_empty() then
            return false
          else
            stack:pop()
          end
        end
      end
      return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xaar6bv.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp6xaar6bv.lua:12:
    in local 'candidate'\n\t/tmp/tmp6xaar6bv.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '<' then
          table.insert(stack, c)
        elseif c == '>' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6qme0ty.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpr6qme0ty.lua:12:
    in local 'candidate'\n\t/tmp/tmpr6qme0ty.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                table.insert(stack, c)
            elseif c == '>' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '<' then
                count = count + 1
            else
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '<' then
                table.insert(stack, b)
            elseif b == '>' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "<" and ">".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('<')
    -- false
    -- >>> correct_bracketing('<>')
    -- true
    -- >>> correct_bracketing('<<><>>')
    -- true
    -- >>> correct_bracketing('><<>')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '<' then
                stack:push(c)
            elseif c == '>' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('<>'), true)
        lu.assertEquals(candidate('<<><>>'), true)
        lu.assertEquals(candidate('<><><<><>><>'), true)
        lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)
        lu.assertEquals(candidate('<<<><>>>>'), false)
        lu.assertEquals(candidate('><<>'), false)
        lu.assertEquals(candidate('<'), false)
        lu.assertEquals(candidate('<<<<'), false)
        lu.assertEquals(candidate('>'), false)
        lu.assertEquals(candidate('<<>'), false)
        lu.assertEquals(candidate('<><><<><>><>><<>'), false)
        lu.assertEquals(candidate('<><><<><>><>>><>'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqua6iufz.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpqua6iufz.lua:12:
    in local 'candidate'\n\t/tmp/tmpqua6iufz.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
