name: HumanEval_155_even_odd_count
language: lua
results:
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3ikackg.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpa3ikackg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpa3ikackg.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp57y7jq09.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp57y7jq09.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp57y7jq09.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(string.sub(tostring(num), i, i))\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2lvpfn0.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpx2lvpfn0.lua:11: in local 'candidate'\n\t/tmp/tmpx2lvpfn0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47ab8wam.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp47ab8wam.lua:11: in local 'candidate'\n\t/tmp/tmp47ab8wam.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    if num < 0 then\n        num = -num\n    end\n \
    \   while num > 0 do\n        if num % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe10rp7pt.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpe10rp7pt.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local num = math.abs(num)\n    while\
    \ num > 0 do\n        if num % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqhrql1x.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpjqhrql1x.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdyxkwb10.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpdyxkwb10.lua:11: in local 'candidate'\n\t/tmp/tmpdyxkwb10.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptfnblf7v.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmptfnblf7v.lua:12: in local 'candidate'\n\t/tmp/tmptfnblf7v.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dyhkpok.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp3dyhkpok.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    local\
    \ digit = tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n    \
    \  even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n  \
    \  end\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfhczhs78.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpfhczhs78.lua:12: in local 'candidate'\n\t/tmp/tmpfhczhs78.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        local digit = num_abs % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num_abs = math.floor(num_abs\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtufvlnv.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpjtufvlnv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(split_digits(num)) do\n     \
    \   if v % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67cefwqf.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmp67cefwqf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp67cefwqf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, #tostring(num) do\n    local digit =\
    \ tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7azxgmjp.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp7azxgmjp.lua:12: in local 'candidate'\n\t/tmp/tmp7azxgmjp.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for digit in tostring(num):gmatch(\"\
    %d\") do\n        if tonumber(digit) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphbttlhdv.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmphbttlhdv.lua:11: in local 'candidate'\n\t/tmp/tmphbttlhdv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    local\
    \ digit = tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n    \
    \  even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n  \
    \  end\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi44pb60u.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpi44pb60u.lua:12: in local 'candidate'\n\t/tmp/tmpi44pb60u.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num %\
    \ 10) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5788xf1.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpb5788xf1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_str = tostring(num)\n\
    \    for i = 1, #num_str do\n        local digit = tonumber(num_str:sub(i, i))\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpazkp3b6j.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpazkp3b6j.lua:13: in local 'candidate'\n\t/tmp/tmpazkp3b6j.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm99awwt.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpsm99awwt.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpsm99awwt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        local digit = num_abs % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num_abs = math.floor(num_abs\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok94jq20.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpok94jq20.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in pairs(split_number(num)) do\n      \
    \  if v % 2 == 0 then\n            even = even + 1\n        else\n           \
    \ odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxlytzsr9.lua:9:\
    \ attempt to call a nil value (global 'split_number')\nstack traceback:\n\t/tmp/tmpxlytzsr9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxlytzsr9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num %\
    \ 10) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_hqclow.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpa_hqclow.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n  \
    \  end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpav70olwz.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpav70olwz.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpav70olwz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n \
    \   end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcrrm8chn.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpcrrm8chn.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcrrm8chn.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    num = math.abs(num)\n    while num >\
    \ 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return {even, odd}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4xt5r8s.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmps4xt5r8s.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_str = tostring(num)\n\
    \    for i = 1, #num_str do\n        local digit = tonumber(num_str:sub(i, i))\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrm2hs18.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpyrm2hs18.lua:13: in local 'candidate'\n\t/tmp/tmpyrm2hs18.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8rkzeix.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpe8rkzeix.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpe8rkzeix.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, #tostring(num) do\n    local digit =\
    \ tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwh6sx_u6.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpwh6sx_u6.lua:12: in local 'candidate'\n\t/tmp/tmpwh6sx_u6.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(string.sub(tostring(num), i, i))\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkew43f31.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpkew43f31.lua:11: in local 'candidate'\n\t/tmp/tmpkew43f31.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for _, digit in ipairs(digits(num))\
    \ do\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8ks8z9c.lua:10:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmpx8ks8z9c.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpx8ks8z9c.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if (num % 10) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw6fb_jj.lua:25:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpgw6fb_jj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local abs = math.abs(num)\n    while\
    \ abs > 0 do\n        local digit = abs % 10\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        abs = math.floor(abs / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps29xf5sj.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmps29xf5sj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num %\
    \ 10) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kuoc8wy.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp8kuoc8wy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, v in ipairs(digits(num)) do\n    if v % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jwk8xqe.lua:9:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmp1jwk8xqe.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1jwk8xqe.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if num % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq1d8jfh.lua:23:\
    \ expected: {1, 1}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmppq1d8jfh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbgbxxigf.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpbgbxxigf.lua:11: in local 'candidate'\n\t/tmp/tmpbgbxxigf.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfickup7r.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpfickup7r.lua:12: in local 'candidate'\n\t/tmp/tmpfickup7r.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num ~= 0 do\n    local digit\
    \ = num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n\
    \    else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0g8g6tu.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpa0g8g6tu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw6g7pop.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpaw6g7pop.lua:12: in local 'candidate'\n\t/tmp/tmpaw6g7pop.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprlbl1xpi.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmprlbl1xpi.lua:11: in local 'candidate'\n\t/tmp/tmprlbl1xpi.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local num = math.abs(num)\n  while num > 0 do\n\
    \    local digit = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n\
    \    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzwskwg0.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmptzwskwg0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, digit in ipairs(to_digits(num)) do\n    \
    \    if digit % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptd2k3hds.lua:9:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmptd2k3hds.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptd2k3hds.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq690olij.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpq690olij.lua:11: in local 'candidate'\n\t/tmp/tmpq690olij.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_str = tostring(num)\n\
    \    for i = 1, #num_str do\n        local digit = tonumber(num_str:sub(i, i))\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnb2y3thr.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpnb2y3thr.lua:13: in local 'candidate'\n\t/tmp/tmpnb2y3thr.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66qeq2hj.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp66qeq2hj.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp66qeq2hj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n        num = math.floor(num / 10)\n \
    \   end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(split_digits(num)) do\n     \
    \   if v % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1j2rz1c.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmpp1j2rz1c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpp1j2rz1c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp436645kn.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp436645kn.lua:12: in local 'candidate'\n\t/tmp/tmp436645kn.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzlnzsk9p.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpzlnzsk9p.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzlnzsk9p.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvmulpve.lua:25:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmppvmulpve.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7h5rbhn2.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp7h5rbhn2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7h5rbhn2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkahp95c2.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpkahp95c2.lua:11: in local 'candidate'\n\t/tmp/tmpkahp95c2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  local num_abs = math.abs(num)\n  while\
    \ num_abs > 0 do\n    local digit = num_abs % 10\n    if digit % 2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n    num_abs = math.floor(num_abs / 10)\n  end\n  return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgg0jbx46.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpgg0jbx46.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpked2rf2o.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpked2rf2o.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpked2rf2o.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(int_to_digits(num)) do\n    \
    \    if v % 2 == 0 then\n            even = even + 1\n        else\n         \
    \   odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl6whewgk.lua:9:\
    \ attempt to call a nil value (global 'int_to_digits')\nstack traceback:\n\t/tmp/tmpl6whewgk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl6whewgk.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        local digit = num_abs % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num_abs = math.floor(num_abs\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00cqk0ir.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp00cqk0ir.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6up85znj.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp6up85znj.lua:11: in local 'candidate'\n\t/tmp/tmp6up85znj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3b2juy9.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpy3b2juy9.lua:11: in local 'candidate'\n\t/tmp/tmpy3b2juy9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplk8uhihc.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmplk8uhihc.lua:12: in local 'candidate'\n\t/tmp/tmplk8uhihc.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjchxvsy_.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpjchxvsy_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpjchxvsy_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local n = math.abs(num)\n    while n\
    \ > 0 do\n        local d = n % 10\n        if d % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n        n\
    \ = math.floor(n / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyjgn_ta.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpeyjgn_ta.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    if num == 0 then\n      \
    \  return {0, 0}\n    end\n    while num ~= 0 do\n        local digit = num %\
    \ 10\n        if digit % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return {even_count, odd_count}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i in tostring(num):gmatch(\"%d\") do\n    if\
    \ tonumber(i) % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, #tostring(num) do\n    local digit =\
    \ tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79bpy55d.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp79bpy55d.lua:12: in local 'candidate'\n\t/tmp/tmp79bpy55d.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps0i_txdy.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmps0i_txdy.lua:11: in local 'candidate'\n\t/tmp/tmps0i_txdy.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, v in ipairs(split_digits(num)) do\n    if v % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsht9idrp.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmpsht9idrp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsht9idrp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqvh21y29.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpqvh21y29.lua:11: in local 'candidate'\n\t/tmp/tmpqvh21y29.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(split_digits(num)) do\n     \
    \   if v % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k5y3927.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmp7k5y3927.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7k5y3927.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num %\
    \ 10) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wvr3emi.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp4wvr3emi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for _, digit in ipairs(digits(num))\
    \ do\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb42ypx9r.lua:10:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmpb42ypx9r.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpb42ypx9r.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, #tostring(num) do\n    local digit =\
    \ tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwhsin3x.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpdwhsin3x.lua:12: in local 'candidate'\n\t/tmp/tmpdwhsin3x.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_he2aoof.lua:25:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp_he2aoof.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, d in ipairs(digits(num)) do\n    if d % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3j6d67gt.lua:9:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmp3j6d67gt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3j6d67gt.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    if num < 0 then\n       \
    \ num = -num\n    end\n    while num > 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n        num =\
    \ math.floor(num / 10)\n    end\n    return {even_count, odd_count}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_7mybi2.lua:35:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpl_7mybi2.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2i5pvyo.lua:25:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmph2i5pvyo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for _, digit in ipairs(to_digits(num))\
    \ do\n        if digit % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvtul4xii.lua:10:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpvtul4xii.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvtul4xii.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, string.len(tostring(num)) do\n      \
    \  if tonumber(string.sub(tostring(num), i, i)) % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1vm9l5v.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpx1vm9l5v.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpx1vm9l5v.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6p1awe77.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp6p1awe77.lua:12: in local 'candidate'\n\t/tmp/tmp6p1awe77.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdhe939o.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpbdhe939o.lua:11: in local 'candidate'\n\t/tmp/tmpbdhe939o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvq_ht524.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpvq_ht524.lua:11: in local 'candidate'\n\t/tmp/tmpvq_ht524.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1etil0g.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpi1etil0g.lua:11: in local 'candidate'\n\t/tmp/tmpi1etil0g.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, digit in ipairs(split_digits(num)) do\n \
    \       if digit % 2 == 0 then\n            even = even + 1\n        else\n  \
    \          odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxj_zetww.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmpxj_zetww.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxj_zetww.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl6otyo_b.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpl6otyo_b.lua:12: in local 'candidate'\n\t/tmp/tmpl6otyo_b.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(string.sub(tostring(num), i, i))\n      \
    \  if digit % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse5sxw82.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpse5sxw82.lua:12: in local 'candidate'\n\t/tmp/tmpse5sxw82.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_str = tostring(num)\n\
    \    for i = 1, #num_str do\n        local digit = tonumber(num_str:sub(i, i))\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_tas5yx.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpl_tas5yx.lua:13: in local 'candidate'\n\t/tmp/tmpl_tas5yx.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for digit in tostring(num):gmatch(\"\
    %d\") do\n        if tonumber(digit) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppd662vcx.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmppd662vcx.lua:11: in local 'candidate'\n\t/tmp/tmppd662vcx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(string.sub(tostring(num), i, i))\n      \
    \  if digit % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpisedh_nx.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpisedh_nx.lua:12: in local 'candidate'\n\t/tmp/tmpisedh_nx.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(split_digits(num)) do\n     \
    \   if v % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8t1a5187.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmp8t1a5187.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8t1a5187.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, digit in ipairs(split_digits(num)) do\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnai8h6m.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmpnnai8h6m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnnai8h6m.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        local digit = num_abs % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num_abs = math.floor(num_abs\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7_zz175.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpe7_zz175.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n        num = math.floor(num / 10)\n \
    \   end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3d_cka54.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp3d_cka54.lua:12: in local 'candidate'\n\t/tmp/tmp3d_cka54.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = num % 10\n        if digit % 2 == 0 then\n       \
    \     even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx353joh2.lua:26:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpx353joh2.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        local digit = num_abs % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num_abs = math.floor(num_abs\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5e979kv.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpm5e979kv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num ~= 0 do\n    if num % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbz8wzlr.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpfbz8wzlr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(int_to_table(num)) do\n     \
    \   if v % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppoz3qfx1.lua:9:\
    \ attempt to call a nil value (global 'int_to_table')\nstack traceback:\n\t/tmp/tmppoz3qfx1.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmppoz3qfx1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppw32ojw6.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmppw32ojw6.lua:11: in local 'candidate'\n\t/tmp/tmppw32ojw6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccw8u7es.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpccw8u7es.lua:11: in local 'candidate'\n\t/tmp/tmpccw8u7es.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = (num - digit)\
    \ / 10\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbl6zyvm1.lua:25:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpbl6zyvm1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for digit in tostring(num):gmatch(\"%d\") do\n    if tonumber(digit)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsarbfa0g.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpsarbfa0g.lua:12: in local 'candidate'\n\t/tmp/tmpsarbfa0g.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, #tostring(num) do\n    local digit =\
    \ tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavwcdibu.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpavwcdibu.lua:12: in local 'candidate'\n\t/tmp/tmpavwcdibu.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptc4mbaqy.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmptc4mbaqy.lua:11: in local 'candidate'\n\t/tmp/tmptc4mbaqy.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(to_digits(num)) do\n        if\
    \ v % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpot45aq37.lua:9:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpot45aq37.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpot45aq37.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, d in ipairs(num_to_digits(num)) do\n    \
    \    if d % 2 == 0 then\n            even = even + 1\n        else\n         \
    \   odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkz7d9vk9.lua:9:\
    \ attempt to call a nil value (global 'num_to_digits')\nstack traceback:\n\t/tmp/tmpkz7d9vk9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkz7d9vk9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if (num % 2) == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        local digit = num_abs % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num_abs = math.floor(num_abs\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9zti6o7.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpx9zti6o7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpstwn_f2o.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpstwn_f2o.lua:12: in local 'candidate'\n\t/tmp/tmpstwn_f2o.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvidkg9sv.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpvidkg9sv.lua:12: in local 'candidate'\n\t/tmp/tmpvidkg9sv.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_kz901vc.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp_kz901vc.lua:11: in local 'candidate'\n\t/tmp/tmp_kz901vc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n  \
    \  end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2lkzzx17.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp2lkzzx17.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2lkzzx17.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(string.sub(tostring(num),\
    \ i, i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02elp0tt.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp02elp0tt.lua:11: in local 'candidate'\n\t/tmp/tmp02elp0tt.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num %\
    \ 10) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbi7_1szf.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpbi7_1szf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(int_to_digits(num)) do\n    \
    \    if v % 2 == 0 then\n            even = even + 1\n        else\n         \
    \   odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_ysw_gn.lua:9:\
    \ attempt to call a nil value (global 'int_to_digits')\nstack traceback:\n\t/tmp/tmpq_ysw_gn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq_ysw_gn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55m9cktp.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp55m9cktp.lua:12: in local 'candidate'\n\t/tmp/tmp55m9cktp.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n  \
    \  end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr5le0qaj.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpr5le0qaj.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpr5le0qaj.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_abs = math.abs(num)\n\
    \    while num_abs > 0 do\n        local digit = num_abs % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num_abs = math.floor(num_abs\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstu_c1ll.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpstu_c1ll.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, v in ipairs(split_digits(num)) do\n    if v % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmkkkkhe4.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmpmkkkkhe4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmkkkkhe4.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num ~= 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjrrtu3yy.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpjrrtu3yy.lua:12: in local 'candidate'\n\t/tmp/tmpjrrtu3yy.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(string.sub(tostring(num), i, i))\n      \
    \  if digit % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vv8te83.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp8vv8te83.lua:12: in local 'candidate'\n\t/tmp/tmp8vv8te83.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tonumber(tostring(num):sub(i,\
    \ i))\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5cp6o0h.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpd5cp6o0h.lua:11: in local 'candidate'\n\t/tmp/tmpd5cp6o0h.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (tostring(num):sub(i,\
    \ i) % 2 == 0) then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kfy531e.lua:10:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp4kfy531e.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp4kfy531e.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpks3rlc73.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpks3rlc73.lua:11: in local 'candidate'\n\t/tmp/tmpks3rlc73.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, v in ipairs(to_digits(num)) do\n    if v % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj3vo1p_l.lua:9:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpj3vo1p_l.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpj3vo1p_l.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvx2vum3u.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpvx2vum3u.lua:11: in local 'candidate'\n\t/tmp/tmpvx2vum3u.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n  \
    \  end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnorqy_73.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpnorqy_73.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnorqy_73.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchtr2o2o.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpchtr2o2o.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5t8rrf7g.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp5t8rrf7g.lua:12: in local 'candidate'\n\t/tmp/tmp5t8rrf7g.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, digit in ipairs(to_digits(num)) do\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwtkh2phv.lua:9:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpwtkh2phv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwtkh2phv.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, digit in ipairs(digits(num)) do\n       \
    \ if digit % 2 == 0 then\n            even = even + 1\n        else\n        \
    \    odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf79sr8br.lua:9:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmpf79sr8br.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpf79sr8br.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(split_digits(num)) do\n     \
    \   if v % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7eg87_pp.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmp7eg87_pp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7eg87_pp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvl_sezi2.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpvl_sezi2.lua:12: in local 'candidate'\n\t/tmp/tmpvl_sezi2.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9kj1fsz_.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp9kj1fsz_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, d in ipairs(digits(num)) do\n        if d\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps96p4gst.lua:9:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmps96p4gst.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmps96p4gst.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4vb_gm5.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpf4vb_gm5.lua:12: in local 'candidate'\n\t/tmp/tmpf4vb_gm5.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmaa00sly.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpmaa00sly.lua:12: in local 'candidate'\n\t/tmp/tmpmaa00sly.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i in tostring(num):gmatch('%d') do\n    if tonumber(i)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0qm5ugf.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpp0qm5ugf.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpp0qm5ugf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\tfor i = 1, #tostring(num) do\n\t\tif tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\t\
    end\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9scws64f.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp9scws64f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9scws64f.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for _, digit in ipairs(to_digits(num))\
    \ do\n        if digit % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hi38o0e.lua:10:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmp6hi38o0e.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6hi38o0e.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp179p26bq.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp179p26bq.lua:12: in local 'candidate'\n\t/tmp/tmp179p26bq.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(to_digits(num)) do\n        if\
    \ v % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpicc91ntx.lua:9:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpicc91ntx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpicc91ntx.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in ipairs(to_digits(num)) do\n        if\
    \ v % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn3bx22dc.lua:9:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpn3bx22dc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpn3bx22dc.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzck8o8qd.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpzck8o8qd.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzck8o8qd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    if\
    \ num % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfli2mjg.lua:25:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpgfli2mjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(string.sub(tostring(num), i, i))\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps7fxgnaz.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmps7fxgnaz.lua:11: in local 'candidate'\n\t/tmp/tmps7fxgnaz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if num % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq3caykp.lua:24:\
    \ expected: {1, 1}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmplq3caykp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num = math.abs(num)\n\
    \    while num > 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdonb9q5.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpcdonb9q5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_str = tostring(num)\n\
    \    for i = 1, #num_str do\n        local digit = tonumber(num_str:sub(i, i))\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgta4ll6i.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpgta4ll6i.lua:13: in local 'candidate'\n\t/tmp/tmpgta4ll6i.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(string.sub(tostring(num), i, i))\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97zwv8qv.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp97zwv8qv.lua:11: in local 'candidate'\n\t/tmp/tmp97zwv8qv.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph58o33e5.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmph58o33e5.lua:12: in local 'candidate'\n\t/tmp/tmph58o33e5.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    local\
    \ digit = tonumber(string.sub(tostring(num), i, i))\n    if digit % 2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo5ub_1sb.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpo5ub_1sb.lua:12: in local 'candidate'\n\t/tmp/tmpo5ub_1sb.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for digit in tostring(num):gmatch(\"\
    %d\") do\n        if tonumber(digit) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbttrszk7.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpbttrszk7.lua:12: in local 'candidate'\n\t/tmp/tmpbttrszk7.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    if\
    \ (num % 10) % 2 == 0 then\n      even_count = even_count + 1\n    else\n    \
    \  odd_count = odd_count + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7l9_3hmt.lua:25:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp7l9_3hmt.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if num % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphle3ed9k.lua:23:\
    \ expected: {1, 1}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmphle3ed9k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(string.sub(tostring(num), i, i))\n      \
    \  if digit % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3fuqw_z1.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp3fuqw_z1.lua:12: in local 'candidate'\n\t/tmp/tmp3fuqw_z1.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    num = math.abs(num)\n   \
    \ while num > 0 do\n        local digit = num % 10\n        if digit % 2 == 0\
    \ then\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8t8rqghb.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp8t8rqghb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkucivy_v.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpkucivy_v.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpkucivy_v.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  local num_abs = math.abs(num)\n  while\
    \ num_abs > 0 do\n    local digit = num_abs % 10\n    if digit % 2 == 0 then\n\
    \      even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n    num_abs = math.floor(num_abs / 10)\n  end\n  return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72dj3iwk.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp72dj3iwk.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hl9al67.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp6hl9al67.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6hl9al67.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for digit in tostring(num):gmatch(\"%d\") do\n    if tonumber(digit)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if num % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbvj45hb.lua:23:\
    \ expected: {1, 1}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmpbbvj45hb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if num % 2 == 0 then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gs3efqj.lua:24:\
    \ expected: {1, 1}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmp7gs3efqj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpycenyikp.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpycenyikp.lua:11: in local 'candidate'\n\t/tmp/tmpycenyikp.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        if (num %\
    \ 10) % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg793pms.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpmg793pms.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for digit in tostring(num):gmatch(\"\
    %d\") do\n        if tonumber(digit) % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    local\
    \ digit = tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n    \
    \  even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n  \
    \  end\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd474tn9x.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpd474tn9x.lua:12: in local 'candidate'\n\t/tmp/tmpd474tn9x.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7cn4kldh.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp7cn4kldh.lua:12: in local 'candidate'\n\t/tmp/tmp7cn4kldh.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #tostring(num) do\n    local\
    \ digit = tonumber(tostring(num):sub(i, i))\n    if digit % 2 == 0 then\n    \
    \  even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n  \
    \  end\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdncb9bbd.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpdncb9bbd.lua:12: in local 'candidate'\n\t/tmp/tmpdncb9bbd.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqlqwfnsh.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpqlqwfnsh.lua:11: in local 'candidate'\n\t/tmp/tmpqlqwfnsh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu7q4q6ov.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpu7q4q6ov.lua:12: in local 'candidate'\n\t/tmp/tmpu7q4q6ov.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local digit\
    \ = tonumber(tostring(num):sub(i, i))\n        if digit % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki09s5i7.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpki09s5i7.lua:11: in local 'candidate'\n\t/tmp/tmpki09s5i7.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n           \
    \ even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslqpsyme.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpslqpsyme.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpslqpsyme.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    if (num % 10) % 2 == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst65wpgu.lua:24:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpst65wpgu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
