---
name: HumanEval_87_get_row
language: lua
prompt: |
  -- You are given a 2 dimensional data, as a nested tables,
  -- which is similar to matrix, however, unlike matrices,
  -- each row may contain a different number of columns.
  -- Given lst, and integer x, find integers x in the table,
  -- and return table of tables, [(x1, y1), (x2, y2) ...] such that
  -- each table is a coordinate - (row, columns), starting with 0.
  -- Sort coordinates initially by rows in ascending order.
  -- Also, sort coordinates of the row by columns in descending order.
  -- Examples:
  -- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)
  -- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}
  -- >>> get_row({}, 1)
  -- {}
  -- >>> get_row({{}, {1}, {1, 2, 3}}, 3)
  -- {{2, 2}}
  local function get_row(lst, x)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = get_row
      lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})
      lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})
      lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})
      lu.assertEquals(candidate({}, 1), {})
      lu.assertEquals(candidate({{1}}, 2), {})
      lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] < b[1] then
              return true
          elseif a[1] > b[1] then
              return false
          else
              return a[2] > b[2]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, item in ipairs(row) do
              if item == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] < b[1] then
              return true
          elseif a[1] > b[1] then
              return false
          else
              return a[2] > b[2]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local result = {}
    for i, row in ipairs(lst) do
      for j, value in ipairs(row) do
        if value == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
    local res = {}
    for i, row in ipairs(lst) do
      for j, v in ipairs(row) do
        if v == x then
          table.insert(res, {i - 1, j - 1})
        end
      end
    end
    table.sort(res, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
    local result = {}
    for i, row in ipairs(lst) do
      for j, val in ipairs(row) do
        if val == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] < b[1] then
              return true
          elseif a[1] > b[1] then
              return false
          else
              return a[2] > b[2]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local result = {}
    for i, row in ipairs(lst) do
      for j, val in ipairs(row) do
        if val == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, item in ipairs(row) do
              if item == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, column in ipairs(row) do
              if column == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  res[#res + 1] = {i - 1, j - 1}
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- "\tlocal res = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, col in ipairs(row)
  do\n\t\t\tif col == x then\n\t\t\t\ttable.insert(res, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,
  function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn
  a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\nend"
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local res = {}
    for i, row in ipairs(lst) do
      for j, el in ipairs(row) do
        if el == x then
          table.insert(res, {i - 1, j - 1})
        end
      end
    end
    table.sort(res, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      local row = 0
      for _, v in ipairs(lst) do
          local col = 0
          for _, v2 in ipairs(v) do
              if v2 == x then
                  table.insert(result, {row, col})
              end
              col = col + 1
          end
          row = row + 1
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- "\tlocal result = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, value in ipairs(row)
  do\n\t\t\tif value == x then\n\t\t\t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,
  function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn
  a[1] < b[1]\n\t\tend\n\tend)\n\treturn result\nend"
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, item in ipairs(row) do
              if item == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local res = {}
    for i, row in ipairs(lst) do
      for j, val in ipairs(row) do
        if val == x then
          table.insert(res, {i - 1, j - 1})
        end
      end
    end
    table.sort(res, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local res = {}
    for i, row in ipairs(lst) do
      for j, val in ipairs(row) do
        if val == x then
          table.insert(res, {i - 1, j - 1})
        end
      end
    end
    table.sort(res, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return res
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for row, row_lst in ipairs(lst) do
          for col, value in ipairs(row_lst) do
              if value == x then
                  table.insert(result, {row - 1, col - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  res[#res + 1] = {i - 1, j - 1}
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local result = {}
    for i = 1, #lst do
      for j = 1, #lst[i] do
        if lst[i][j] == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
    local result = {}
    for i, row in ipairs(lst) do
      for j, value in ipairs(row) do
        if value == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
    local result = {}
    for i, row in ipairs(lst) do
      for j, col in ipairs(row) do
        if col == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, v in ipairs(lst) do
          for j, v2 in ipairs(v) do
              if v2 == x then
                  res[#res + 1] = {i - 1, j - 1}
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local result = {}
    for i, row in ipairs(lst) do
      for j, v in ipairs(row) do
        if v == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
    local res = {}
    for i, row in ipairs(lst) do
      for j, val in ipairs(row) do
        if val == x then
          table.insert(res, {i - 1, j - 1})
        end
      end
    end
    table.sort(res, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- "\tlocal result = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, elem in ipairs(row)
  do\n\t\t\tif elem == x then\n\t\t\t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,
  function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn
  a[1] < b[1]\n\t\tend\n\tend)\n\treturn result\nend"
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
    local result = {}
    for i, row in ipairs(lst) do
      for j, val in ipairs(row) do
        if val == x then
          table.insert(result, {i - 1, j - 1})
        end
      end
    end
    table.sort(result, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i = 1, #lst do
          for j = 1, #lst[i] do
              if lst[i][j] == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
    local res = {}
    for i = 1, #lst do
      for j = 1, #lst[i] do
        if lst[i][j] == x then
          res[#res + 1] = {i - 1, j - 1}
        end
      end
    end
    table.sort(res, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, v in ipairs(row) do
              if v == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
    local res = {}
    for i, row in ipairs(lst) do
      for j, val in ipairs(row) do
        if val == x then
          table.insert(res, {i - 1, j - 1})
        end
      end
    end
    table.sort(res, function(a, b)
      if a[1] == b[1] then
        return a[2] > b[2]
      else
        return a[1] < b[1]
      end
    end)
    return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, elem in ipairs(row) do
              if elem == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, value in ipairs(row) do
              if value == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local res = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(res, {i - 1, j - 1})
              end
          end
      end
      table.sort(res, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return res
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, col in ipairs(row) do
              if col == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, val in ipairs(row) do
              if val == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
- |2-
      local result = {}
      for i, row in ipairs(lst) do
          for j, item in ipairs(row) do
              if item == x then
                  table.insert(result, {i - 1, j - 1})
              end
          end
      end
      table.sort(result, function(a, b)
          if a[1] == b[1] then
              return a[2] > b[2]
          else
              return a[1] < b[1]
          end
      end)
      return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
