name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the table,\n-- and\
  \ return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6},\
  \ {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\n-- >>> get_row({},\
  \ 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}}, 3)\n-- {{2, 2}}\nlocal function\
  \ get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local res = {}\n    for i, row in ipairs(lst) do\n        for j,\
    \ val in ipairs(row) do\n            if val == x then\n                table.insert(res,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, elem in ipairs(row) do\n            if elem == x then\n            \
    \    table.insert(result, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n       \
    \     return a[2] > b[2]\n        else\n            return a[1] < b[1]\n     \
    \   end\n    end)\n    return result\nend", "    local res = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, val in ipairs(row) do\n            if val\
    \ == x then\n                table.insert(res, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local result\
    \ = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n\
    \            if val == x then\n                table.insert(result, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, value in ipairs(row) do\n            if value == x then\n       \
    \         table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n         \
    \   if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n   \
    \         if lst[i][j] == x then\n                res[#res + 1] = {i - 1, j -\
    \ 1}\n            end\n        end\n    end\n    table.sort(res, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "  local result = {}\n  for i, row in ipairs(lst) do\n    for j, value in ipairs(row)\
    \ do\n      if value == x then\n        table.insert(result, {i - 1, j - 1})\n\
    \      end\n    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\n  return result\nend", "    local res = {}\n    for i, row in\
    \ ipairs(lst) do\n        for j, val in ipairs(row) do\n            if val ==\
    \ x then\n                table.insert(res, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend", "  local res = {}\n\
    \  for i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val\
    \ == x then\n        table.insert(res, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(res, function(a, b)\n    return a[1] < b[1] or (a[1] == b[1]\
    \ and a[2] > b[2])\n  end)\n  return res\nend", "    local res = {}\n    for i,\
    \ row in ipairs(lst) do\n        for j, val in ipairs(row) do\n            if\
    \ val == x then\n                table.insert(res, {i - 1, j - 1})\n         \
    \   end\n        end\n    end\n    table.sort(res, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, col in\
    \ ipairs(row) do\n            if col == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, val in ipairs(row) do\n            if val == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, col in ipairs(row)\
    \ do\n      if col == x then\n        table.insert(res, {i - 1, j - 1})\n    \
    \  end\n    end\n  end\n  table.sort(res, function(a, b)\n    return a[1] < b[1]\
    \ or (a[1] == b[1] and a[2] > b[2])\n  end)\n  return res\nend", "    local result\
    \ = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n\
    \            if val == x then\n                table.insert(result, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, col in ipairs(row) do\n            if col == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "  local result = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row)\
    \ do\n      if val == x then\n        table.insert(result, {i - 1, j - 1})\n \
    \     end\n    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\n  return result\nend", "    local result = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, value in ipairs(row) do\n            if value\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, val in\
    \ ipairs(row) do\n            if val == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, val in ipairs(row) do\n            if val == x then\n              \
    \  table.insert(res, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(res, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return res\nend", "    local res = {}\n    for i,\
    \ row in ipairs(lst) do\n        for j, col in ipairs(row) do\n            if\
    \ col == x then\n                table.insert(res, {i - 1, j - 1})\n         \
    \   end\n        end\n    end\n    table.sort(res, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row)\
    \ do\n      if val == x then\n        res[#res + 1] = {i - 1, j - 1}\n      end\n\
    \    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n\
    \        for j, item in ipairs(row) do\n            if item == x then\n      \
    \          table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n          \
    \  if item == x then\n                table.insert(result, {i - 1, j - 1})\n \
    \           end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local result = {}\n  for i, row in ipairs(lst) do\n    for j, col in ipairs(row)\
    \ do\n      if col == x then\n        table.insert(result, {i - 1, j - 1})\n \
    \     end\n    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\n  return result\nend", "    local result = {}\n    for i = 1,\
    \ #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                table.insert(result, {i - 1, j - 1})\n            end\n     \
    \   end\n    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return result\nend", "  local result = {}\n\
    \  for i, row in ipairs(lst) do\n    for j, col in ipairs(row) do\n      if col\
    \ == x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n\
    \  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end", "    local result = {}\n    for i, row in ipairs(lst) do\n        for j,\
    \ val in ipairs(row) do\n            if val == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, value in ipairs(row) do\n            if value == x then\n       \
    \         table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n          \
    \  if elem == x then\n                table.insert(res, {i - 1, j - 1})\n    \
    \        end\n        end\n    end\n    table.sort(res, function(a, b)\n     \
    \   if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n     \
    \       return a[1] < b[1]\n        end\n    end)\n    return res\nend", "   \
    \ local res = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i = 1, #lst do\n        for j = 1,\
    \ #lst[i] do\n            if lst[i][j] == x then\n                table.insert(res,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, value in ipairs(row) do\n            if value == x then\n          \
    \      table.insert(result, {i - 1, j - 1})\n            end\n        end\n  \
    \  end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, col in\
    \ ipairs(row) do\n            if col == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, col in ipairs(row) do\n            if col == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ result = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n       \
    \     if lst[i][j] == x then\n                table.insert(result, {i - 1, j -\
    \ 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, elem in ipairs(row)\
    \ do\n            if elem == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, col in\
    \ ipairs(row) do\n            if col == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, col in ipairs(row) do\n            if col == x then\n              \
    \  table.insert(res, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n         \
    \   if value == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return result\nend", "   \
    \ local result = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(result, {i -\
    \ 1, j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, val in ipairs(row) do\n            if val == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n          \
    \  if lst[i][j] == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return res\nend", " \
    \   local result = {}\n    for i, row in ipairs(lst) do\n        for j, val in\
    \ ipairs(row) do\n            if val == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, v in ipairs(row) do\n            if v == x then\n               \
    \ table.insert(result, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n       \
    \     return a[2] > b[2]\n        else\n            return a[1] < b[1]\n     \
    \   end\n    end)\n    return result\nend", "    local res = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, col in ipairs(row) do\n            if col\
    \ == x then\n                table.insert(res, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local res = {}\n\
    \    for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n    \
    \        if val == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return res\nend", " \
    \   local result = {}\n    for i, row in ipairs(lst) do\n        for j, val in\
    \ ipairs(row) do\n            if val == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, val in ipairs(row) do\n            if val == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "  local result = {}\n  for i, row in ipairs(lst) do\n    for\
    \ j, v in ipairs(row) do\n      if v == x then\n        table.insert(result, {i\
    \ - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result, function(a, b)\n\
    \    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end)\n  return result\nend", "    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, elem in\
    \ ipairs(row) do\n            if elem == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, item in ipairs(row) do\n            if item == x then\n         \
    \       table.insert(result, {i - 1, j - 1})\n            end\n        end\n \
    \   end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n          \
    \  if item == x then\n                table.insert(result, {i - 1, j - 1})\n \
    \           end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, value in ipairs(row) do\n            if value == x then\n       \
    \         table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, col in ipairs(row)\
    \ do\n      if col == x then\n        table.insert(res, {i - 1, j - 1})\n    \
    \  end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, col in ipairs(row) do\n            if col == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ result = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, elem in ipairs(row) do\n            if elem == x then\n            \
    \    table.insert(res, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n          \
    \  if lst[i][j] == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return res\nend", " \
    \   local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "  local result = {}\n  for i, row in ipairs(lst) do\n    for\
    \ j, value in ipairs(row) do\n      if value == x then\n        table.insert(result,\
    \ {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return\
    \ a[1] < b[1]\n    end\n  end)\n  return result\nend", "    local result = {}\n\
    \    for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n  \
    \          if value == x then\n                table.insert(result, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(res, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, val in\
    \ ipairs(row) do\n            if val == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, val in ipairs(row) do\n            if val == x then\n              \
    \  table.insert(res, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local res = {}\n    for i, v in ipairs(lst)\
    \ do\n        for j, v2 in ipairs(v) do\n            if v2 == x then\n       \
    \         table.insert(res, {i - 1, j - 1})\n            end\n        end\n  \
    \  end\n    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n   \
    \         return a[2] > b[2]\n        else\n            return a[1] < b[1]\n \
    \       end\n    end)\n    return res\nend", "    local res = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, v in ipairs(row) do\n            if v == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend", "    local result = {}\n\
    \    for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n    \
    \        if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n   \
    \         if lst[i][j] == x then\n                table.insert(res, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, val in\
    \ ipairs(row) do\n            if val == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return result\nend", "  local\
    \ result = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n\
    \      if val == x then\n        table.insert(result, {i - 1, j - 1})\n      end\n\
    \    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return result\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, value in ipairs(row) do\n            if value == x then\n\
    \                table.insert(result, {i - 1, j - 1})\n            end\n     \
    \   end\n    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return result\nend", "    local result =\
    \ {}\n    for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n\
    \            if value == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, elem in ipairs(row)\
    \ do\n            if elem == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, val in ipairs(row) do\n            if val == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n            if\
    \ v == x then\n                table.insert(result, {i - 1, j - 1})\n        \
    \    end\n        end\n    end\n    table.sort(result, function(a, b)\n      \
    \  if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n      \
    \      return a[1] < b[1]\n        end\n    end)\n    return result\nend", " \
    \   local res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n  \
    \          if lst[i][j] == x then\n                table.insert(res, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i = 1, #lst do\n        for j = 1,\
    \ #lst[i] do\n            if lst[i][j] == x then\n                table.insert(res,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, val in ipairs(row) do\n            if val == x then\n              \
    \  table.insert(result, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n       \
    \     return a[2] > b[2]\n        else\n            return a[1] < b[1]\n     \
    \   end\n    end)\n    return result\nend", "  local result = {}\n  for i, row\
    \ in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend", "  local res\
    \ = {}\n  for i, row in ipairs(lst) do\n    for j, col in ipairs(row) do\n   \
    \   if col == x then\n        table.insert(res, {i - 1, j - 1})\n      end\n \
    \   end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n \
    \     return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n\
    \        for j, value in ipairs(row) do\n            if value == x then\n    \
    \            table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ result = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row)\
    \ do\n      if val == x then\n        table.insert(res, {i - 1, j - 1})\n    \
    \  end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local result = {}\n  for i, row in ipairs(lst) do\n    for j, value in ipairs(row)\
    \ do\n      if value == x then\n        table.insert(result, {i - 1, j - 1})\n\
    \      end\n    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\n  return result\nend", "    local result = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, item in ipairs(row) do\n            if item\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend", "    local\
    \ result = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n       \
    \     if lst[i][j] == x then\n                table.insert(result, {i - 1, j -\
    \ 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, col in\
    \ ipairs(row) do\n            if col == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, item in ipairs(row) do\n            if item == x then\n         \
    \       table.insert(result, {i - 1, j - 1})\n            end\n        end\n \
    \   end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                table.insert(result, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    table.sort(result, function(a, b)\n        if a[1]\
    \ == b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return result\nend", "    local result\
    \ = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n\
    \            if val == x then\n                table.insert(result, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local result = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row)\
    \ do\n      if val == x then\n        table.insert(result, {i - 1, j - 1})\n \
    \     end\n    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\n  return result\nend", "    local result = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, val in ipairs(row) do\n            if val\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend", "  local\
    \ res = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n\
    \      if val == x then\n        table.insert(res, {i - 1, j - 1})\n      end\n\
    \    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return res\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n \
    \       for j, val in ipairs(row) do\n            if val == x then\n         \
    \       table.insert(res, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ result = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(result, {i -\
    \ 1, j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row)\
    \ do\n      if val == x then\n        table.insert(res, {i - 1, j - 1})\n    \
    \  end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, value in ipairs(row) do\n            if value == x then\n\
    \                table.insert(result, {i - 1, j - 1})\n            end\n     \
    \   end\n    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return result\nend", "    local result =\
    \ {}\n    for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n\
    \            if value == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n\
    \            if lst[i][j] == x then\n                table.insert(result, {i -\
    \ 1, j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "  local res = {}\n  for i, v in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n\
    \      if v2 == x then\n        table.insert(res, {i - 1, j - 1})\n      end\n\
    \    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n\
    \        for j, value in ipairs(row) do\n            if value == x then\n    \
    \            table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, v in ipairs(lst) do\n        for j, v2 in ipairs(v)\
    \ do\n            if v2 == x then\n                table.insert(res, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n\
    \            if lst[i][j] == x then\n                table.insert(result, {i -\
    \ 1, j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, value in\
    \ ipairs(row) do\n            if value == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, val in ipairs(row) do\n            if val == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row)\
    \ do\n      if val == x then\n        table.insert(res, {i - 1, j - 1})\n    \
    \  end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return res\nend", "    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(res, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return res\nend", "    local result = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, elem in ipairs(row) do\n            if elem == x then\n         \
    \       table.insert(result, {i - 1, j - 1})\n            end\n        end\n \
    \   end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, val in ipairs(row) do\n            if val == x then\n           \
    \     table.insert(result, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "  local result = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, col in ipairs(row) do\n      if col == x then\n\
    \        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend", "    local\
    \ result = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(result, {i -\
    \ 1, j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, elem in\
    \ ipairs(row) do\n            if elem == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, value in ipairs(row) do\n            if value == x then\n       \
    \         table.insert(result, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return result\nend", "  local result = {}\n  for row,\
    \ row_lst in ipairs(lst) do\n    for col, val in ipairs(row_lst) do\n      if\
    \ val == x then\n        table.insert(result, {row - 1, col - 1})\n      end\n\
    \    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return result\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n\
    \        for j, val in ipairs(row) do\n            if val == x then\n        \
    \        table.insert(res, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n    \
    \        return a[2] > b[2]\n        else\n            return a[1] < b[1]\n  \
    \      end\n    end)\n    return res\nend", "    local res = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, val in ipairs(row) do\n            if val\
    \ == x then\n                table.insert(res, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local result\
    \ = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n\
    \            if val == x then\n                table.insert(result, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, col in\
    \ ipairs(row) do\n            if col == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, val in ipairs(row) do\n            if val == x then\n              \
    \  table.insert(res, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, value in ipairs(row) do\n            if value == x then\n\
    \                table.insert(result, {i - 1, j - 1})\n            end\n     \
    \   end\n    end\n    table.sort(result, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return result\nend", "    local result =\
    \ {}\n    for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n\
    \            if value == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, col in\
    \ ipairs(row) do\n            if col == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i = 1, #lst do\n        for j = 1,\
    \ #lst[i] do\n            if lst[i][j] == x then\n                table.insert(res,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, col in ipairs(row) do\n            if col == x then\n              \
    \  table.insert(result, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n       \
    \     return a[2] > b[2]\n        else\n            return a[1] < b[1]\n     \
    \   end\n    end)\n    return result\nend", "    local res = {}\n    for i, row\
    \ in ipairs(lst) do\n        for j, v in ipairs(row) do\n            if v == x\
    \ then\n                table.insert(res, {i - 1, j - 1})\n            end\n \
    \       end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend", "    local res = {}\n \
    \   for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n     \
    \       if col == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return res\nend", " \
    \   local result = {}\n    for i, row in ipairs(lst) do\n        for j, val in\
    \ ipairs(row) do\n            if val == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, val in ipairs(row) do\n            if val == x then\n              \
    \  table.insert(res, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n          \
    \  return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, col in ipairs(row) do\n            if col == x then\n   \
    \             table.insert(res, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1] then\n \
    \           return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    return res\nend", "    local res = {}\n    for i,\
    \ row in ipairs(lst) do\n        for j, val in ipairs(row) do\n            if\
    \ val == x then\n                table.insert(res, {i - 1, j - 1})\n         \
    \   end\n        end\n    end\n    table.sort(res, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return res\nend", "    local\
    \ result = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(result, {i -\
    \ 1, j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, col in ipairs(row)\
    \ do\n            if col == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local result = {}\n    for i, row in ipairs(lst) do\n        for j, item in\
    \ ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ result\nend", "    local res = {}\n    for i = 1, #lst do\n        for j = 1,\
    \ #lst[i] do\n            if lst[i][j] == x then\n                table.insert(res,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n      \
    \  for j, elem in ipairs(row) do\n            if elem == x then\n            \
    \    table.insert(result, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n       \
    \     return a[2] > b[2]\n        else\n            return a[1] < b[1]\n     \
    \   end\n    end)\n    return result\nend", "    local result = {}\n    for i,\
    \ row in ipairs(lst) do\n        for j, value in ipairs(row) do\n            if\
    \ value == x then\n                table.insert(result, {i - 1, j - 1})\n    \
    \        end\n        end\n    end\n    table.sort(result, function(a, b)\n  \
    \      if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n  \
    \          return a[1] < b[1]\n        end\n    end)\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
