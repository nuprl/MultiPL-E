---
name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: |
  -- pairs_sum_to_zero takes a table of integers as an input.
  -- it returns true if there are two distinct elements in the table that
  -- sum to zero, and false otherwise.
  -- >>> pairs_sum_to_zero({1, 3, 5, 0})
  -- false
  -- >>> pairs_sum_to_zero({1, 3, -2, 1})
  -- false
  -- >>> pairs_sum_to_zero({1, 2, 3, 7})
  -- false
  -- >>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})
  -- true
  -- >>> pairs_sum_to_zero({1})
  -- false
  local function pairs_sum_to_zero(l)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = pairs_sum_to_zero
      lu.assertEquals(candidate({1, 3, 5, 0}), false)
      lu.assertEquals(candidate({1, 3, -2, 1}), false)
      lu.assertEquals(candidate({1, 2, 3, 7}), false)
      lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)
      lu.assertEquals(candidate({1}), false)
      lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)
      lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}), true)
      lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)
      lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      -- YOUR CODE HERE
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2
      -- TODO: implement this function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.move function
      -- Hint: use the table.maxn function
      -- Hint: use the table.foreach function
      -- Hint: use the table.foreachi function
      -- Hint: use the table.getn function
      -- Hint: use the table.setn function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.move function
      -- Hint: use the table.maxn function
      -- Hint: use the table.foreach function
      -- Hint: use the table.foreachi function
      -- Hint: use the table.getn function
      -- Hint: use the table.setn function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
      -- Hint: use the table.unpack function
      -- Hint: use the table.pack function
      -- Hint: use the table.move function
      -- Hint: use the table.maxn function
      -- Hint: use the table.foreach function
      -- Hint: use the table.foreachi function
      -- Hint: use the table.getn function
      -- Hint: use the table.setn function
      -- Hint: use the table.sort function
      -- Hint: use the table.concat function
      -- Hint: use the table.insert function
      -- Hint: use the table.remove function
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      -- TODO: implement this function
      --[[
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
      ]]
      local hash = {}
      for i = 1, #l do
          if hash[-l[i]] then
              return true
          end
          hash[l[i]] = true
      end
      return false
  end
- |2-
      local t = {}
      for i, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
      local h = {}
      for _, v in ipairs(l) do
          if h[-v] then
              return true
          end
          h[v] = true
      end
      return false
  end
- |2-
      local t = {}
      for i, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
    -- your code here
    local s = {}
    for i, v in ipairs(l) do
      if s[v] then
        return true
      else
        s[-v] = true
      end
    end
    return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    -- your code here
    local set = {}
    for _, v in ipairs(l) do
      if set[-v] then
        return true
      end
      set[v] = true
    end
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    local s = {}
    for _, v in ipairs(l) do
      if s[-v] then
        return true
      end
      s[v] = true
    end
    return false
  end
- |2-
      local zero_set = {}
      for _, v in ipairs(l) do
          if zero_set[-v] then
              return true
          end
          zero_set[v] = true
      end
      return false
  end
- |2-
    local h = {}
    for i = 1, #l do
      if h[l[i]] then
        return true
      end
      h[-l[i]] = true
    end
    return false
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
      local t = {}
      for i, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      for i = 1, #l do
          for j = i+1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local zero_set = {}
      for _, v in ipairs(l) do
          if zero_set[-v] then
              return true
          end
          zero_set[v] = true
      end
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    for i = 1, #l do
      for j = i + 1, #l do
        if l[i] + l[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- your code here
    for i = 1, #l do
      for j = i + 1, #l do
        if l[i] + l[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
      -- TODO: implement this function
      -- Hint: you may want to use the helper function `contains`
      -- which is defined above.
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local n = #l
      for i = 1, n do
          for j = i + 1, n do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      -- Hint: use a nested loop
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local s = {}
    for _, v in ipairs(l) do
      if s[-v] then
        return true
      end
      s[v] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: use the table.sort function
    local sorted = {}
    for k, v in pairs(l) do
      table.insert(sorted, v)
    end
    table.sort(sorted)
    local i = 1
    local j = #sorted
    while i < j do
      if sorted[i] + sorted[j] == 0 then
        return true
      elseif sorted[i] + sorted[j] < 0 then
        i = i + 1
      else
        j = j - 1
      end
    end
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    local set = {}
    for _, v in ipairs(l) do
      if set[-v] then
        return true
      end
      set[v] = true
    end
    return false
  end
- |2-
      local t = {}
      for i, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: use a nested loop.
    -- Hint: use the table.sort function.
    -- Hint: use the table.concat function.
    -- Hint: use the table.insert function.
    -- Hint: use the table.remove function.
    -- Hint: use the table.unpack function.
    -- Hint: use the string.format function.
    -- Hint: use the string.sub function.
    -- Hint: use the string.gsub function.
    -- Hint: use the string.match function.
    -- Hint: use the string.gmatch function.
    -- Hint: use the string.find function.
    -- Hint: use the string.reverse function.
    -- Hint: use the string.len function.
    -- Hint: use the string.char function.
    -- Hint: use the string.byte function.
    -- Hint: use the string.rep function.
    -- Hint: use the string.lower function.
    -- Hint: use the string.upper function.
    -- Hint: use the string.dump function.
    -- Hint: use the string.gsub function.
    -- Hint: use the string.match function.
    -- Hint: use the string.gmatch function.
    -- Hint: use the string.find function.
    -- Hint: use the string.reverse function.
    -- Hint: use the string.len function.
    -- Hint: use the string.char function.
    -- Hint: use the string.byte function.
    -- Hint: use the string.rep function.
    -- Hint: use the string.lower function.
    -- Hint: use the string.upper function.
    -- Hint: use the string.dump function.
    -- Hint: use the string.gsub function.
    -- Hint: use the string.match function.
    -- Hint: use the string.gmatch function.
    -- Hint: use the string.find function.
    -- Hint: use the string.reverse function.
    -- Hint: use the string.len function.
    --
- |2-
      local found = {}
      for _, v in ipairs(l) do
          if found[-v] then
              return true
          end
          found[v] = true
      end
      return false
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
      for i, v in ipairs(l) do
          for j, w in ipairs(l) do
              if i ~= j and v + w == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local set = {}
      for _, v in ipairs(l) do
          if set[-v] then
              return true
          end
          set[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: use the table.sort function
    local sorted = table.sort(l)
    for i = 1, #sorted do
      for j = i+1, #sorted do
        if sorted[i] + sorted[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.insert function
      -- Hint: you can use the table.remove function
      -- Hint: you can use the table.concat function
      -- Hint: you can use the table.unpack function
      -- Hint: you can use the table.pack function
      -- Hint: you can use the table.move function
      -- Hint: you can use the table.maxn function
      -- Hint: you can use the table.foreach function
      -- Hint: you can use the table.foreachi function
      -- Hint: you can use the table.getn function
      -- Hint: you can use the table.setn function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.insert function
      -- Hint: you can use the table.remove function
      -- Hint: you can use the table.concat function
      -- Hint: you can use the table.unpack function
      -- Hint: you can use the table.pack function
      -- Hint: you can use the table.move function
      -- Hint: you can use the table.maxn function
      -- Hint: you can use the table.foreach function
      -- Hint: you can use the table.foreachi function
      -- Hint: you can use the table.getn function
      -- Hint: you can use the table.setn function
      -- Hint: you can use the table.sort function
      -- Hint: you can use the table.insert function
      -- Hint: you can use the table.remove function
      -- Hint: you can use the table.concat function
      -- Hint: you can use the table.unpack function
      -- Hint: you can use the table.pack function
      -- Hint: you can use the table.move function
      -- Hint: you can use the table.maxn function
      -- Hint: you can use the table.foreach function
      -- Hint: you can use the table.foreachi function
      -- Hint: you can
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
    local s = {}
    for i, v in ipairs(l) do
      if s[v] then
        return true
      end
      s[-v] = true
    end
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- TODO: implement this function
    local t = {}
    for i, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: you can use the table.sort function to sort a table
    -- in-place.
    -- Hint: you can use the table.concat function to concatenate
    -- two tables.
    -- Hint: you can use the table.insert function to insert an
    -- element into a table.
    -- Hint: you can use the table.remove function to remove an
    -- element from a table.
    -- Hint: you can use the # operator to get the length of a table.
    -- Hint: you can use the pairs function to iterate over the
    -- elements of a table.
    -- Hint: you can use the ipairs function to iterate over the
    -- elements of a table in order.
    -- Hint: you can use the math.abs function to get the absolute
    -- value of a number.
    -- Hint: you can use the math.max function to get the maximum
    -- of two numbers.
    -- Hint: you can use the math.min function to get the minimum
    -- of two numbers.
    -- Hint: you can use the math.random function to get a random
    -- number.
    -- Hint: you can use the math.randomseed function to set the
    -- random seed.
    -- Hint: you can use the string.format function to format a
    -- string.
    -- Hint: you can use the string.gsub function to replace
    -- substrings in a string.
    -- Hint: you can use the string.len function to get the length
    -- of a string.
    -- Hint: you can use the string.lower function to convert a
    -- string to lowercase.
    -- Hint: you can use the string.match function to match a
    -- regular expression.
    -- Hint: you can use the string.reverse function to reverse a
    -- string.
    -- Hint: you can use the string.sub function to get a substring
    -- of a string.
    -- Hint: you can use the string.upper function to convert a
    -- string to uppercase.
    -- Hint: you can use the table.
- |2-
      -- your code here
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      -- YOUR CODE HERE
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    -- TODO: implement this function
    local sum = 0
    for i, v in ipairs(l) do
      for j, w in ipairs(l) do
        if i ~= j then
          sum = v + w
          if sum == 0 then
            return true
          end
        end
      end
    end
    return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
      -- your code here
      for i, v in ipairs(l) do
          for j, w in ipairs(l) do
              if i ~= j and v + w == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local function pairs_sum_to_zero_helper(l, i, j)
          if i == #l then
              return false
          elseif j == #l then
              return pairs_sum_to_zero_helper(l, i + 1, i + 2)
          elseif l[i] + l[j] == 0 then
              return true
          else
              return pairs_sum_to_zero_helper(l, i, j + 1)
          end
      end
      return pairs_sum_to_zero_helper(l, 1, 2)
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local t = {}
      for i = 1, #l do
          if t[l[i]] then
              return true
          end
          t[-l[i]] = true
      end
      return false
  end
- |2-
      local set = {}
      for _, v in ipairs(l) do
          if set[-v] then
              return true
          end
          set[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: use the table.sort function
    -- Hint: use the table.insert function
    -- Hint: use the table.remove function
    -- Hint: use the # operator
    -- Hint: use the pairs function
    -- Hint: use the ipairs function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- H
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.insert function
    -- Hint: use the table.remove function
    -- Hint: use the table.getn function
    -- Hint: use the pairs function
    -- Hint: use the ipairs function
    -- Hint: use the tostring function
    -- Hint: use the tonumber function
    -- Hint: use the type function
    -- Hint: use the print function
    -- Hint: use the error function
    -- Hint: use the assert function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.maxn function
    -- Hint: use the table.move function
    -- Hint: use the table.new function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.getn function
    -- Hint: use the pairs function
    -- Hint: use the ipairs function
    -- Hint: use the tostring function
    -- Hint: use the tonumber function
    -- Hint: use the type function
    -- Hint: use the print function
    -- Hint: use the error function
    -- Hint: use the assert function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.maxn function
    -- Hint: use the table.move function
    -- Hint: use the table.new function
    -- Hint: use the table.remove function
    -- Hint: use the table.insert function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.getn function
    -- Hint: use the pairs function
    -- Hint: use the ipairs function
    -- Hint:
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      -- YOUR CODE HERE
      local sum = 0
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local t = {}
      for i, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
    -- your code here
    local t = {}
    for i,v in ipairs(l) do
      if t[v] ~= nil then
        return true
      else
        t[-v] = true
      end
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local n = #l
      for i = 1, n do
          for j = i + 1, n do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
      local hash = {}
      for _, v in ipairs(l) do
          if hash[-v] then
              return true
          end
          hash[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- your code here
    for i = 1, #l do
      for j = i + 1, #l do
        if l[i] + l[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
    local s = {}
    for _, v in ipairs(l) do
      if s[-v] then
        return true
      end
      s[v] = true
    end
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local h = {}
      for _, v in ipairs(l) do
          if h[-v] then
              return true
          end
          h[v] = true
      end
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
      -- YOUR CODE HERE
      for i, v in ipairs(l) do
          for j, k in ipairs(l) do
              if v + k == 0 and i ~= j then
                  return true
              end
          end
      end
      return false
  end
- |2-
      -- TODO: write this function
      -- Hint: you can use the function `contains` from above
      -- to check if a table contains a value.
      -- Hint: you can use the function `pairs` to iterate
      -- over the elements of a table.
      -- Hint: you can use the function `unpack` to get the
      -- elements of a table as a list of arguments.
      -- Hint: you can use the function `table.insert` to
      -- add an element to a table.
      -- Hint: you can use the function `table.remove` to
      -- remove an element from a table.
      -- Hint: you can use the function `table.concat` to
      -- concatenate the elements of a table into a string.
      -- Hint: you can use the function `table.sort` to
      -- sort the elements of a table.
      -- Hint: you can use the function `table.pack` to
      -- create a table from a list of arguments.
      -- Hint: you can use the function `table.unpack` to
      -- get the elements of a table as a list of arguments.
      -- Hint: you can use the function `table.maxn` to
      -- get the number of elements in a table.
      -- Hint: you can use the function `table.getn` to
      -- get the number of elements in a table.
      -- Hint: you can use the function `table.setn` to
      -- set the number of elements in a table.
      -- Hint: you can use the function `table.foreach` to
      -- iterate over the elements of a table.
      -- Hint: you can use the function `table.foreachi` to
      -- iterate over the elements of a table.
      -- Hint: you can use the function `table.getn` to
      -- get the number of elements in a table.
      -- Hint: you can use the function `table.insert` to
      -- insert an element into a table.
      -- Hint: you can use the function `table.remove` to
      -- remove an element from a table.
      -- Hint
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: you can use the table.sort function to sort a table
    -- in-place.
    -- Hint: you can use the table.concat function to concatenate
    -- two tables.
    -- Hint: you can use the table.insert function to insert an
    -- element into a table.
    -- Hint: you can use the table.remove function to remove an
    -- element from a table.
    -- Hint: you can use the # operator to get the length of a table.
    -- Hint: you can use the == operator to compare two tables.
    -- Hint: you can use the == operator to compare two numbers.
    -- Hint: you can use the < operator to compare two numbers.
    -- Hint: you can use the > operator to compare two numbers.
    -- Hint: you can use the <= operator to compare two numbers.
    -- Hint: you can use the >= operator to compare two numbers.
    -- Hint: you can use the ~= operator to compare two numbers.
    -- Hint: you can use the ~= operator to compare two tables.
    -- Hint: you can use the and operator to combine two boolean
    -- values.
    -- Hint: you can use the or operator to combine two boolean
    -- values.
    -- Hint: you can use the not operator to negate a boolean value.
    -- Hint: you can use the if-then-else statement to conditionally
    -- execute code.
    -- Hint: you can use the while statement to repeatedly execute
    -- code.
    -- Hint: you can use the for statement to repeatedly execute code.
    -- Hint: you can use the break statement to break out of a loop.
    -- Hint: you can use the return statement to return a value.
    -- Hint: you can use the do-end statement to group statements.
    -- Hint: you can use the do-end statement to group statements.
    -- Hint: you can use the do-end statement to group statements.
    -- Hint: you can use the do-end statement to group statements.
    -- Hint: you can use the do-end statement to
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
    local t = {}
    for i, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
      local nums = {}
      for _, v in ipairs(l) do
          if nums[v] then
              return true
          end
          nums[-v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    local t = {}
    for i, v in ipairs(l) do
      if t[v] then
        return true
      else
        t[-v] = true
      end
    end
    return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- TODO: implement this function
    local table = {}
    for i,v in ipairs(l) do
      table[v] = true
    end
    for i,v in ipairs(l) do
      if table[-v] then
        return true
      end
    end
    return false
  end
- |2-
      -- your code here
      local sum = 0
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local set = {}
      for _, v in ipairs(l) do
          if set[-v] then
              return true
          end
          set[v] = true
      end
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local hash = {}
      for i = 1, #l do
          if hash[-l[i]] then
              return true
          end
          hash[l[i]] = true
      end
      return false
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
    -- TODO: implement this function
    local flag = false
    for i = 1, #l do
      for j = i + 1, #l do
        if l[i] + l[j] == 0 then
          flag = true
        end
      end
    end
    return flag
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    for i = 1, #l do
      for j = i + 1, #l do
        if l[i] + l[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
      -- YOUR CODE HERE
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: use the table.sort function
    table.sort(l)
    for i = 1, #l do
      for j = i + 1, #l do
        if l[i] + l[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      -- your code here
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    for i, v in ipairs(l) do
      for j, w in ipairs(l) do
        if i ~= j and v + w == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
    local seen = {}
    for _, x in ipairs(l) do
      if seen[-x] then
        return true
      end
      seen[x] = true
    end
    return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    local s = {}
    for _, v in ipairs(l) do
      if s[-v] then
        return true
      end
      s[v] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      local t = {}
      for _, v in ipairs(l) do
          if t[-v] then
              return true
          end
          t[v] = true
      end
      return false
  end
- |2-
      local seen = {}
      for i = 1, #l do
          if seen[-l[i]] then
              return true
          end
          seen[l[i]] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
      local s = {}
      for _, v in ipairs(l) do
          if s[-v] then
              return true
          end
          s[v] = true
      end
      return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      -- Hint: you can use the table.sort function to sort a table
      -- of integers.
      -- table.sort(l)
      -- for i = 1, #l do
      --     for j = i + 1, #l do
      --         if l[i] + l[j] == 0 then
      --             return true
      --         end
      --     end
      -- end
      -- return false
      table.sort(l)
      local i = 1
      local j = #l
      while i < j do
          if l[i] + l[j] == 0 then
              return true
          elseif l[i] + l[j] < 0 then
              i = i + 1
          else
              j = j - 1
          end
      end
      return false
  end
- |2-
      local t = {}
      for i = 1, #l do
          if t[-l[i]] then
              return true
          end
          t[l[i]] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    local seen = {}
    for _, v in ipairs(l) do
      if seen[-v] then
        return true
      end
      seen[v] = true
    end
    return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: use the table.sort function
    -- Hint: use the table.insert function
    -- Hint: use the table.remove function
    -- Hint: use the table.concat function
    -- Hint: use the tostring function
    -- Hint: use the tonumber function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.move function
    -- Hint: use the table.maxn function
    -- Hint: use the table.getn function
    -- Hint: use the table.foreach function
    -- Hint: use the table.foreachi function
    -- Hint: use the table.insert function
    -- Hint: use the table.remove function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.move function
    -- Hint: use the table.maxn function
    -- Hint: use the table.getn function
    -- Hint: use the table.foreach function
    -- Hint: use the table.foreachi function
    -- Hint: use the table.insert function
    -- Hint: use the table.remove function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint: use the table.pack function
    -- Hint: use the table.move function
    -- Hint: use the table.maxn function
    -- Hint: use the table.getn function
    -- Hint: use the table.foreach function
    -- Hint: use the table.foreachi function
    -- Hint: use the table.insert function
    -- Hint: use the table.remove function
    -- Hint: use the table.sort function
    -- Hint: use the table.concat function
    -- Hint: use the table.unpack function
    -- Hint
- |2-
    local s = {}
    for _, v in ipairs(l) do
      if s[-v] then
        return true
      end
      s[v] = true
    end
    return false
  end
- |2-
      -- TODO: implement this function
      -- Hint: you can use the table.sort function to sort a table.
      -- Hint: you can use the table.insert function to insert an element
      -- into a table.
      -- Hint: you can use the table.remove function to remove an element
      -- from a table.
      -- Hint: you can use the # operator to get the length of a table.
      -- Hint: you can use the pairs function to iterate over the elements
      -- of a table.
      -- Hint: you can use the ipairs function to iterate over the elements
      -- of a table.
      -- Hint: you can use the table.concat function to concatenate two
      -- tables.
      -- Hint: you can use the table.unpack function to unpack a table.
      -- Hint: you can use the table.pack function to pack a list of values
      -- into a table.
      -- Hint: you can use the table.remove function to remove an element
      -- from a table.
      -- Hint: you can use the table.insert function to insert an element
      -- into a table.
      -- Hint: you can use the table.sort function to sort a table.
      -- Hint: you can use the table.concat function to concatenate two
      -- tables.
      -- Hint: you can use the table.unpack function to unpack a table.
      -- Hint: you can use the table.pack function to pack a list of values
      -- into a table.
      -- Hint: you can use the table.remove function to remove an element
      -- from a table.
      -- Hint: you can use the table.insert function to insert an element
      -- into a table.
      -- Hint: you can use the table.sort function to sort a table.
      -- Hint: you can use the table.concat function to concatenate two
      -- tables.
      -- Hint: you can use the table.unpack function to unpack a table.
      -- Hint: you can use the table.pack function to pack a list of values
      -- into a table.
      -- Hint:
- |2-
    local map = {}
    for _, v in ipairs(l) do
      map[v] = true
    end
    for _, v in ipairs(l) do
      if map[-v] then
        return true
      end
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- your code here
    local n = #l
    if n == 1 then
      return false
    end
    for i = 1, n do
      for j = i + 1, n do
        if l[i] + l[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    -- TODO: implement this function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.concat function
    -- Hint: you can use the table.insert function
    -- Hint: you can use the table.remove function
    -- Hint: you can use the table.unpack function
    -- Hint: you can use the table.pack function
    -- Hint: you can use the table.move function
    -- Hint: you can use the table.maxn function
    -- Hint: you can use the table.getn function
    -- Hint: you can use the table.foreach function
    -- Hint: you can use the table.foreachi function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you can use the table.sort function
    -- Hint: you
- |2-
      -- your code here
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    local t = {}
    for i = 1, #l do
      if t[l[i]] then
        return true
      end
      t[-l[i]] = true
    end
    return false
  end
- |2-
      local seen = {}
      for _, v in ipairs(l) do
          if seen[-v] then
              return true
          end
          seen[v] = true
      end
      return false
  end
- |2-
      -- your code here
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    local t = {}
    for _, v in ipairs(l) do
      if t[-v] then
        return true
      end
      t[v] = true
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
    -- TODO: implement this function
    return false
  end
- |2-
    local sum = 0
    for i = 1, #l do
      for j = i + 1, #l do
        if l[i] + l[j] == 0 then
          return true
        end
      end
    end
    return false
  end
- |2-
      -- TODO: implement this function
      return false
  end
- |2-
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
- |2-
      -- TODO: implement this function
      for i = 1, #l do
          for j = i + 1, #l do
              if l[i] + l[j] == 0 then
                  return true
              end
          end
      end
      return false
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
