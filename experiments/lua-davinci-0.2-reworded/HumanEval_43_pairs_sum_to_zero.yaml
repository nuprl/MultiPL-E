name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
  \ true if there are two distinct elements in the table that\n-- sum to zero, and\
  \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
  \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
  -- false\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- YOUR CODE HERE\n    for i = 1, #l do\n        for j = i + 1,\
    \ #l do\n            if l[i] + l[j] == 0 then\n                return true\n \
    \           end\n        end\n    end\n    return false\nend", "    local seen\
    \ = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n            return\
    \ true\n        end\n        seen[v] = true\n    end\n    return false\nend",
  "    local t = {}\n    for _, v in ipairs(l) do\n        if t[-v] then\n       \
    \     return true\n        end\n        t[v] = true\n    end\n    return false\n\
    end", "    -- TODO: implement this function\n    -- Hint: use the table.sort function\n\
    \    -- Hint: use the table.concat function\n    -- Hint: use the table.insert\
    \ function\n    -- Hint: use the table.remove function\n    -- Hint: use the table.unpack\
    \ function\n    -- Hint: use the table.pack function\n    -- Hint: use the table.move\
    \ function\n    -- Hint: use the table.maxn function\n    -- Hint: use the table.foreach\
    \ function\n    -- Hint: use the table.foreachi function\n    -- Hint: use the\
    \ table.getn function\n    -- Hint: use the table.setn function\n    -- Hint:\
    \ use the table.sort function\n    -- Hint: use the table.concat function\n  \
    \  -- Hint: use the table.insert function\n    -- Hint: use the table.remove function\n\
    \    -- Hint: use the table.unpack function\n    -- Hint: use the table.pack function\n\
    \    -- Hint: use the table.move function\n    -- Hint: use the table.maxn function\n\
    \    -- Hint: use the table.foreach function\n    -- Hint: use the table.foreachi\
    \ function\n    -- Hint: use the table.getn function\n    -- Hint: use the table.setn\
    \ function\n    -- Hint: use the table.sort function\n    -- Hint: use the table.concat\
    \ function\n    -- Hint: use the table.insert function\n    -- Hint: use the table.remove\
    \ function\n    -- Hint: use the table.unpack function\n    -- Hint: use the table.pack\
    \ function\n    -- Hint: use the table.move function\n    -- Hint: use the table.maxn\
    \ function\n    -- Hint: use the table.foreach function\n    -- Hint: use the\
    \ table.foreachi function\n    -- Hint: use the table.getn function\n    -- Hint:\
    \ use the table.setn function\n    -- Hint: use the table.sort function\n    --\
    \ Hint: use the table.concat function\n    -- Hint: use the table.insert function\n\
    \    -- Hint: use the table.remove function\n", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    if t[-v] then\n      return true\n    end\n    t[v] = true\n\
    \  end\n  return false\nend", "    local s = {}\n    for _, v in ipairs(l) do\n\
    \        if s[-v] then\n            return true\n        end\n        s[v] = true\n\
    \    end\n    return false\nend", "  local seen = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n \
    \ end\n  return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l\
    \ do\n            if l[i] + l[j] == 0 then\n                return true\n    \
    \        end\n        end\n    end\n    return false\nend", "    -- TODO: implement\
    \ this function\n    --[[\n    for i = 1, #l do\n        for j = i + 1, #l do\n\
    \            if l[i] + l[j] == 0 then\n                return true\n         \
    \   end\n        end\n    end\n    return false\n    ]]\n    local hash = {}\n\
    \    for i = 1, #l do\n        if hash[-l[i]] then\n            return true\n\
    \        end\n        hash[l[i]] = true\n    end\n    return false\nend", "  \
    \  local t = {}\n    for i, v in ipairs(l) do\n        if t[-v] then\n       \
    \     return true\n        end\n        t[v] = true\n    end\n    return false\n\
    end", "    local h = {}\n    for _, v in ipairs(l) do\n        if h[-v] then\n\
    \            return true\n        end\n        h[v] = true\n    end\n    return\
    \ false\nend", "    local t = {}\n    for i, v in ipairs(l) do\n        if t[-v]\
    \ then\n            return true\n        end\n        t[v] = true\n    end\n \
    \   return false\nend", "  -- your code here\n  local s = {}\n  for i, v in ipairs(l)\
    \ do\n    if s[v] then\n      return true\n    else\n      s[-v] = true\n    end\n\
    \  end\n  return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l\
    \ do\n            if l[i] + l[j] == 0 then\n                return true\n    \
    \        end\n        end\n    end\n    return false\nend", "  -- your code here\n\
    \  local set = {}\n  for _, v in ipairs(l) do\n    if set[-v] then\n      return\
    \ true\n    end\n    set[v] = true\n  end\n  return false\nend", "  local seen\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return true\n\
    \    end\n    seen[v] = true\n  end\n  return false\nend", "  -- TODO: implement\
    \ this function\n  return false\nend", "  -- TODO: implement this function\n \
    \ return false\nend", "  local s = {}\n  for _, v in ipairs(l) do\n    if s[-v]\
    \ then\n      return true\n    end\n    s[v] = true\n  end\n  return false\nend",
  "    local zero_set = {}\n    for _, v in ipairs(l) do\n        if zero_set[-v]\
    \ then\n            return true\n        end\n        zero_set[v] = true\n   \
    \ end\n    return false\nend", "  local h = {}\n  for i = 1, #l do\n    if h[l[i]]\
    \ then\n      return true\n    end\n    h[-l[i]] = true\n  end\n  return false\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        if t[-v] then\n\
    \            return true\n        end\n        t[v] = true\n    end\n    return\
    \ false\nend", "    local t = {}\n    for i, v in ipairs(l) do\n        if t[-v]\
    \ then\n            return true\n        end\n        t[v] = true\n    end\n \
    \   return false\nend", "    -- TODO: implement this function\n    for i = 1,\
    \ #l do\n        for j = i+1, #l do\n            if l[i] + l[j] == 0 then\n  \
    \              return true\n            end\n        end\n    end\n    return\
    \ false\nend", "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v]\
    \ then\n      return true\n    end\n    seen[v] = true\n  end\n  return false\n\
    end", "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v]\
    \ then\n            return true\n        end\n        seen[v] = true\n    end\n\
    \    return false\nend", "    local zero_set = {}\n    for _, v in ipairs(l) do\n\
    \        if zero_set[-v] then\n            return true\n        end\n        zero_set[v]\
    \ = true\n    end\n    return false\nend", "    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "  for\
    \ i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "  -- your code here\n  for\
    \ i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "    -- TODO:\
    \ implement this function\n    -- Hint: you may want to use the helper function\
    \ `contains`\n    -- which is defined above.\n    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    local\
    \ n = #l\n    for i = 1, n do\n        for j = i + 1, n do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  local seen = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n \
    \ end\n  return false\nend", "  -- TODO: implement this function\n  return false\n\
    end", "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n \
    \     return true\n    end\n    seen[v] = true\n  end\n  return false\nend", " \
    \   local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n\
    \            return true\n        end\n        seen[v] = true\n    end\n    return\
    \ false\nend", "    -- TODO: implement this function\n    -- Hint: use a nested\
    \ loop\n    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  local s = {}\n  for _, v in ipairs(l) do\n\
    \    if s[-v] then\n      return true\n    end\n    s[v] = true\n  end\n  return\
    \ false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend", "  -- TODO: implement this function\n  -- Hint:\
    \ use the table.sort function\n  local sorted = {}\n  for k, v in pairs(l) do\n\
    \    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n  local i = 1\n  local\
    \ j = #sorted\n  while i < j do\n    if sorted[i] + sorted[j] == 0 then\n    \
    \  return true\n    elseif sorted[i] + sorted[j] < 0 then\n      i = i + 1\n \
    \   else\n      j = j - 1\n    end\n  end\n  return false\nend", "  local seen\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return true\n\
    \    end\n    seen[v] = true\n  end\n  return false\nend", "  local set = {}\n\
    \  for _, v in ipairs(l) do\n    if set[-v] then\n      return true\n    end\n\
    \    set[v] = true\n  end\n  return false\nend", "    local t = {}\n    for i,\
    \ v in ipairs(l) do\n        if t[-v] then\n            return true\n        end\n\
    \        t[v] = true\n    end\n    return false\nend", "  -- TODO: implement this\
    \ function\n  -- Hint: use a nested loop.\n  -- Hint: use the table.sort function.\n\
    \  -- Hint: use the table.concat function.\n  -- Hint: use the table.insert function.\n\
    \  -- Hint: use the table.remove function.\n  -- Hint: use the table.unpack function.\n\
    \  -- Hint: use the string.format function.\n  -- Hint: use the string.sub function.\n\
    \  -- Hint: use the string.gsub function.\n  -- Hint: use the string.match function.\n\
    \  -- Hint: use the string.gmatch function.\n  -- Hint: use the string.find function.\n\
    \  -- Hint: use the string.reverse function.\n  -- Hint: use the string.len function.\n\
    \  -- Hint: use the string.char function.\n  -- Hint: use the string.byte function.\n\
    \  -- Hint: use the string.rep function.\n  -- Hint: use the string.lower function.\n\
    \  -- Hint: use the string.upper function.\n  -- Hint: use the string.dump function.\n\
    \  -- Hint: use the string.gsub function.\n  -- Hint: use the string.match function.\n\
    \  -- Hint: use the string.gmatch function.\n  -- Hint: use the string.find function.\n\
    \  -- Hint: use the string.reverse function.\n  -- Hint: use the string.len function.\n\
    \  -- Hint: use the string.char function.\n  -- Hint: use the string.byte function.\n\
    \  -- Hint: use the string.rep function.\n  -- Hint: use the string.lower function.\n\
    \  -- Hint: use the string.upper function.\n  -- Hint: use the string.dump function.\n\
    \  -- Hint: use the string.gsub function.\n  -- Hint: use the string.match function.\n\
    \  -- Hint: use the string.gmatch function.\n  -- Hint: use the string.find function.\n\
    \  -- Hint: use the string.reverse function.\n  -- Hint: use the string.len function.\n\
    \  --", "    local found = {}\n    for _, v in ipairs(l) do\n        if found[-v]\
    \ then\n            return true\n        end\n        found[v] = true\n    end\n\
    \    return false\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    if t[-v]\
    \ then\n      return true\n    end\n    t[v] = true\n  end\n  return false\nend",
  "    for i, v in ipairs(l) do\n        for j, w in ipairs(l) do\n            if\
    \ i ~= j and v + w == 0 then\n                return true\n            end\n \
    \       end\n    end\n    return false\nend", "    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend", "    local set\
    \ = {}\n    for _, v in ipairs(l) do\n        if set[-v] then\n            return\
    \ true\n        end\n        set[v] = true\n    end\n    return false\nend", " \
    \   -- TODO: implement this function\n    return false\nend", "  -- TODO: implement\
    \ this function\n  -- Hint: use the table.sort function\n  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    for j = i+1, #sorted do\n      if sorted[i] + sorted[j]\
    \ == 0 then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    for i = 1, #l do\n        for j = i + 1,\
    \ #l do\n            if l[i] + l[j] == 0 then\n                return true\n \
    \           end\n        end\n    end\n    return false\nend", "    local seen\
    \ = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n            return\
    \ true\n        end\n        seen[v] = true\n    end\n    return false\nend",
  "    local s = {}\n    for _, v in ipairs(l) do\n        if s[-v] then\n       \
    \     return true\n        end\n        s[v] = true\n    end\n    return false\n\
    end", "    -- TODO: implement this function\n    -- Hint: you can use the table.sort\
    \ function\n    -- Hint: you can use the table.insert function\n    -- Hint: you\
    \ can use the table.remove function\n    -- Hint: you can use the table.concat\
    \ function\n    -- Hint: you can use the table.unpack function\n    -- Hint: you\
    \ can use the table.pack function\n    -- Hint: you can use the table.move function\n\
    \    -- Hint: you can use the table.maxn function\n    -- Hint: you can use the\
    \ table.foreach function\n    -- Hint: you can use the table.foreachi function\n\
    \    -- Hint: you can use the table.getn function\n    -- Hint: you can use the\
    \ table.setn function\n    -- Hint: you can use the table.sort function\n    --\
    \ Hint: you can use the table.insert function\n    -- Hint: you can use the table.remove\
    \ function\n    -- Hint: you can use the table.concat function\n    -- Hint: you\
    \ can use the table.unpack function\n    -- Hint: you can use the table.pack function\n\
    \    -- Hint: you can use the table.move function\n    -- Hint: you can use the\
    \ table.maxn function\n    -- Hint: you can use the table.foreach function\n \
    \   -- Hint: you can use the table.foreachi function\n    -- Hint: you can use\
    \ the table.getn function\n    -- Hint: you can use the table.setn function\n\
    \    -- Hint: you can use the table.sort function\n    -- Hint: you can use the\
    \ table.insert function\n    -- Hint: you can use the table.remove function\n\
    \    -- Hint: you can use the table.concat function\n    -- Hint: you can use\
    \ the table.unpack function\n    -- Hint: you can use the table.pack function\n\
    \    -- Hint: you can use the table.move function\n    -- Hint: you can use the\
    \ table.maxn function\n    -- Hint: you can use the table.foreach function\n \
    \   -- Hint: you can use the table.foreachi function\n    -- Hint: you can", " \
    \   local t = {}\n    for _, v in ipairs(l) do\n        if t[-v] then\n      \
    \      return true\n        end\n        t[v] = true\n    end\n    return false\n\
    end", "  local s = {}\n  for i, v in ipairs(l) do\n    if s[v] then\n      return\
    \ true\n    end\n    s[-v] = true\n  end\n  return false\nend", "  local seen\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return true\n\
    \    end\n    seen[v] = true\n  end\n  return false\nend", "    local seen = {}\n\
    \    for _, v in ipairs(l) do\n        if seen[-v] then\n            return true\n\
    \        end\n        seen[v] = true\n    end\n    return false\nend", "    --\
    \ TODO: implement this function\n    return false\nend", "  -- TODO: implement\
    \ this function\n  local t = {}\n  for i, v in ipairs(l) do\n    if t[-v] then\n\
    \      return true\n    end\n    t[v] = true\n  end\n  return false\nend", " \
    \   local s = {}\n    for _, v in ipairs(l) do\n        if s[-v] then\n      \
    \      return true\n        end\n        s[v] = true\n    end\n    return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "  -- TODO:\
    \ implement this function\n  -- Hint: you can use the table.sort function to sort\
    \ a table\n  -- in-place.\n  -- Hint: you can use the table.concat function to\
    \ concatenate\n  -- two tables.\n  -- Hint: you can use the table.insert function\
    \ to insert an\n  -- element into a table.\n  -- Hint: you can use the table.remove\
    \ function to remove an\n  -- element from a table.\n  -- Hint: you can use the\
    \ # operator to get the length of a table.\n  -- Hint: you can use the pairs function\
    \ to iterate over the\n  -- elements of a table.\n  -- Hint: you can use the ipairs\
    \ function to iterate over the\n  -- elements of a table in order.\n  -- Hint:\
    \ you can use the math.abs function to get the absolute\n  -- value of a number.\n\
    \  -- Hint: you can use the math.max function to get the maximum\n  -- of two\
    \ numbers.\n  -- Hint: you can use the math.min function to get the minimum\n\
    \  -- of two numbers.\n  -- Hint: you can use the math.random function to get\
    \ a random\n  -- number.\n  -- Hint: you can use the math.randomseed function\
    \ to set the\n  -- random seed.\n  -- Hint: you can use the string.format function\
    \ to format a\n  -- string.\n  -- Hint: you can use the string.gsub function to\
    \ replace\n  -- substrings in a string.\n  -- Hint: you can use the string.len\
    \ function to get the length\n  -- of a string.\n  -- Hint: you can use the string.lower\
    \ function to convert a\n  -- string to lowercase.\n  -- Hint: you can use the\
    \ string.match function to match a\n  -- regular expression.\n  -- Hint: you can\
    \ use the string.reverse function to reverse a\n  -- string.\n  -- Hint: you can\
    \ use the string.sub function to get a substring\n  -- of a string.\n  -- Hint:\
    \ you can use the string.upper function to convert a\n  -- string to uppercase.\n\
    \  -- Hint: you can use the table.", "    -- your code here\n    for i = 1, #l\
    \ do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n   \
    \             return true\n            end\n        end\n    end\n    return false\n\
    end", "    -- YOUR CODE HERE\n    for i = 1, #l do\n        for j = i + 1, #l\
    \ do\n            if l[i] + l[j] == 0 then\n                return true\n    \
    \        end\n        end\n    end\n    return false\nend", "    for i = 1, #l\
    \ do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n   \
    \             return true\n            end\n        end\n    end\n    return false\n\
    end", "  -- TODO: implement this function\n  local sum = 0\n  for i, v in ipairs(l)\
    \ do\n    for j, w in ipairs(l) do\n      if i ~= j then\n        sum = v + w\n\
    \        if sum == 0 then\n          return true\n        end\n      end\n   \
    \ end\n  end\n  return false\nend", "    local s = {}\n    for _, v in ipairs(l)\
    \ do\n        if s[-v] then\n            return true\n        end\n        s[v]\
    \ = true\n    end\n    return false\nend", "  -- TODO: implement this function\n\
    \  return false\nend", "    -- your code here\n    for i, v in ipairs(l) do\n\
    \        for j, w in ipairs(l) do\n            if i ~= j and v + w == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    local function pairs_sum_to_zero_helper(l, i, j)\n       \
    \ if i == #l then\n            return false\n        elseif j == #l then\n   \
    \         return pairs_sum_to_zero_helper(l, i + 1, i + 2)\n        elseif l[i]\
    \ + l[j] == 0 then\n            return true\n        else\n            return\
    \ pairs_sum_to_zero_helper(l, i, j + 1)\n        end\n    end\n    return pairs_sum_to_zero_helper(l,\
    \ 1, 2)\nend", "    local s = {}\n    for _, v in ipairs(l) do\n        if s[-v]\
    \ then\n            return true\n        end\n        s[v] = true\n    end\n \
    \   return false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n \
    \       if seen[-v] then\n            return true\n        end\n        seen[v]\
    \ = true\n    end\n    return false\nend", "  -- TODO: implement this function\n\
    \  return false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n  \
    \      if seen[-v] then\n            return true\n        end\n        seen[v]\
    \ = true\n    end\n    return false\nend", "    -- TODO: implement this function\n\
    \    return false\nend", "    -- TODO: implement this function\n    return false\n\
    end", "    local t = {}\n    for i = 1, #l do\n        if t[l[i]] then\n     \
    \       return true\n        end\n        t[-l[i]] = true\n    end\n    return\
    \ false\nend", "    local set = {}\n    for _, v in ipairs(l) do\n        if set[-v]\
    \ then\n            return true\n        end\n        set[v] = true\n    end\n\
    \    return false\nend", "  -- TODO: implement this function\n  -- Hint: use the\
    \ table.sort function\n  -- Hint: use the table.insert function\n  -- Hint: use\
    \ the table.remove function\n  -- Hint: use the # operator\n  -- Hint: use the\
    \ pairs function\n  -- Hint: use the ipairs function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.remove function\n  -- Hint: use the table.insert\
    \ function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.remove function\n  -- Hint: use the table.insert\
    \ function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.remove function\n  -- Hint: use the table.insert\
    \ function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.remove function\n  -- Hint: use the table.insert\
    \ function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.remove function\n  -- Hint: use the table.insert\
    \ function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.remove function\n  -- Hint: use the table.insert\
    \ function\n  -- H", "    for i = 1, #l do\n        for j = i + 1, #l do\n   \
    \         if l[i] + l[j] == 0 then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    local s = {}\n    for _, v\
    \ in ipairs(l) do\n        if s[-v] then\n            return true\n        end\n\
    \        s[v] = true\n    end\n    return false\nend", "  -- TODO: implement this\
    \ function\n  return false\nend", "    for i = 1, #l do\n        for j = i + 1,\
    \ #l do\n            if l[i] + l[j] == 0 then\n                return true\n \
    \           end\n        end\n    end\n    return false\nend", "  -- TODO: implement\
    \ this function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.insert function\n  -- Hint: use the table.remove\
    \ function\n  -- Hint: use the table.getn function\n  -- Hint: use the pairs function\n\
    \  -- Hint: use the ipairs function\n  -- Hint: use the tostring function\n  --\
    \ Hint: use the tonumber function\n  -- Hint: use the type function\n  -- Hint:\
    \ use the print function\n  -- Hint: use the error function\n  -- Hint: use the\
    \ assert function\n  -- Hint: use the table.unpack function\n  -- Hint: use the\
    \ table.pack function\n  -- Hint: use the table.maxn function\n  -- Hint: use\
    \ the table.move function\n  -- Hint: use the table.new function\n  -- Hint: use\
    \ the table.remove function\n  -- Hint: use the table.insert function\n  -- Hint:\
    \ use the table.sort function\n  -- Hint: use the table.concat function\n  --\
    \ Hint: use the table.getn function\n  -- Hint: use the pairs function\n  -- Hint:\
    \ use the ipairs function\n  -- Hint: use the tostring function\n  -- Hint: use\
    \ the tonumber function\n  -- Hint: use the type function\n  -- Hint: use the\
    \ print function\n  -- Hint: use the error function\n  -- Hint: use the assert\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.maxn function\n  -- Hint: use the table.move\
    \ function\n  -- Hint: use the table.new function\n  -- Hint: use the table.remove\
    \ function\n  -- Hint: use the table.insert function\n  -- Hint: use the table.sort\
    \ function\n  -- Hint: use the table.concat function\n  -- Hint: use the table.getn\
    \ function\n  -- Hint: use the pairs function\n  -- Hint: use the ipairs function\n\
    \  -- Hint:", "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v]\
    \ then\n      return true\n    end\n    seen[v] = true\n  end\n  return false\n\
    end", "    -- YOUR CODE HERE\n    local sum = 0\n    for i = 1, #l do\n      \
    \  for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n              \
    \  return true\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n\
    \            if l[i] + l[j] == 0 then\n                return true\n         \
    \   end\n        end\n    end\n    return false\nend", "    local t = {}\n   \
    \ for i, v in ipairs(l) do\n        if t[-v] then\n            return true\n \
    \       end\n        t[v] = true\n    end\n    return false\nend", "  -- your\
    \ code here\n  local t = {}\n  for i,v in ipairs(l) do\n    if t[v] ~= nil then\n\
    \      return true\n    else\n      t[-v] = true\n    end\n  end\n  return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "    local\
    \ n = #l\n    for i = 1, n do\n        for j = i + 1, n do\n            if l[i]\
    \ + l[j] == 0 then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  local t = {}\n  for _, v in ipairs(l) do\n\
    \    if t[-v] then\n      return true\n    end\n    t[v] = true\n  end\n  return\
    \ false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n         \
    \   if l[i] + l[j] == 0 then\n                return true\n            end\n \
    \       end\n    end\n    return false\nend", "    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend", "  local t =\
    \ {}\n  for _, v in ipairs(l) do\n    if t[-v] then\n      return true\n    end\n\
    \    t[v] = true\n  end\n  return false\nend", "    local seen = {}\n    for _,\
    \ v in ipairs(l) do\n        if seen[-v] then\n            return true\n     \
    \   end\n        seen[v] = true\n    end\n    return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    local hash = {}\n    for\
    \ _, v in ipairs(l) do\n        if hash[-v] then\n            return true\n  \
    \      end\n        hash[v] = true\n    end\n    return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "  -- your code here\n  for\
    \ i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "  local s\
    \ = {}\n  for _, v in ipairs(l) do\n    if s[-v] then\n      return true\n   \
    \ end\n    s[v] = true\n  end\n  return false\nend", "  local seen = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n   \
    \ seen[v] = true\n  end\n  return false\nend", "  local t = {}\n  for _, v in\
    \ ipairs(l) do\n    if t[-v] then\n      return true\n    end\n    t[v] = true\n\
    \  end\n  return false\nend", "  -- TODO: implement this function\n  return false\n\
    end", "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n \
    \     return true\n    end\n    seen[v] = true\n  end\n  return false\nend", " \
    \   -- TODO: implement this function\n    return false\nend", "    local h = {}\n\
    \    for _, v in ipairs(l) do\n        if h[-v] then\n            return true\n\
    \        end\n        h[v] = true\n    end\n    return false\nend", "    for i\
    \ = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    local s = {}\n    for _, v in ipairs(l) do\n        if s[-v]\
    \ then\n            return true\n        end\n        s[v] = true\n    end\n \
    \   return false\nend", "    local t = {}\n    for _, v in ipairs(l) do\n    \
    \    if t[-v] then\n            return true\n        end\n        t[v] = true\n\
    \    end\n    return false\nend", "    -- YOUR CODE HERE\n    for i, v in ipairs(l)\
    \ do\n        for j, k in ipairs(l) do\n            if v + k == 0 and i ~= j then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    -- TODO: write this function\n    -- Hint: you can use the\
    \ function `contains` from above\n    -- to check if a table contains a value.\n\
    \    -- Hint: you can use the function `pairs` to iterate\n    -- over the elements\
    \ of a table.\n    -- Hint: you can use the function `unpack` to get the\n   \
    \ -- elements of a table as a list of arguments.\n    -- Hint: you can use the\
    \ function `table.insert` to\n    -- add an element to a table.\n    -- Hint:\
    \ you can use the function `table.remove` to\n    -- remove an element from a\
    \ table.\n    -- Hint: you can use the function `table.concat` to\n    -- concatenate\
    \ the elements of a table into a string.\n    -- Hint: you can use the function\
    \ `table.sort` to\n    -- sort the elements of a table.\n    -- Hint: you can\
    \ use the function `table.pack` to\n    -- create a table from a list of arguments.\n\
    \    -- Hint: you can use the function `table.unpack` to\n    -- get the elements\
    \ of a table as a list of arguments.\n    -- Hint: you can use the function `table.maxn`\
    \ to\n    -- get the number of elements in a table.\n    -- Hint: you can use\
    \ the function `table.getn` to\n    -- get the number of elements in a table.\n\
    \    -- Hint: you can use the function `table.setn` to\n    -- set the number\
    \ of elements in a table.\n    -- Hint: you can use the function `table.foreach`\
    \ to\n    -- iterate over the elements of a table.\n    -- Hint: you can use the\
    \ function `table.foreachi` to\n    -- iterate over the elements of a table.\n\
    \    -- Hint: you can use the function `table.getn` to\n    -- get the number\
    \ of elements in a table.\n    -- Hint: you can use the function `table.insert`\
    \ to\n    -- insert an element into a table.\n    -- Hint: you can use the function\
    \ `table.remove` to\n    -- remove an element from a table.\n    -- Hint", " \
    \   -- TODO: implement this function\n    return false\nend", "    local t = {}\n\
    \    for _, v in ipairs(l) do\n        if t[-v] then\n            return true\n\
    \        end\n        t[v] = true\n    end\n    return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "  local seen = {}\n  for _,\
    \ v in ipairs(l) do\n    if seen[-v] then\n      return true\n    end\n    seen[v]\
    \ = true\n  end\n  return false\nend", "  -- TODO: implement this function\n \
    \ -- Hint: you can use the table.sort function to sort a table\n  -- in-place.\n\
    \  -- Hint: you can use the table.concat function to concatenate\n  -- two tables.\n\
    \  -- Hint: you can use the table.insert function to insert an\n  -- element into\
    \ a table.\n  -- Hint: you can use the table.remove function to remove an\n  --\
    \ element from a table.\n  -- Hint: you can use the # operator to get the length\
    \ of a table.\n  -- Hint: you can use the == operator to compare two tables.\n\
    \  -- Hint: you can use the == operator to compare two numbers.\n  -- Hint: you\
    \ can use the < operator to compare two numbers.\n  -- Hint: you can use the >\
    \ operator to compare two numbers.\n  -- Hint: you can use the <= operator to\
    \ compare two numbers.\n  -- Hint: you can use the >= operator to compare two\
    \ numbers.\n  -- Hint: you can use the ~= operator to compare two numbers.\n \
    \ -- Hint: you can use the ~= operator to compare two tables.\n  -- Hint: you\
    \ can use the and operator to combine two boolean\n  -- values.\n  -- Hint: you\
    \ can use the or operator to combine two boolean\n  -- values.\n  -- Hint: you\
    \ can use the not operator to negate a boolean value.\n  -- Hint: you can use\
    \ the if-then-else statement to conditionally\n  -- execute code.\n  -- Hint:\
    \ you can use the while statement to repeatedly execute\n  -- code.\n  -- Hint:\
    \ you can use the for statement to repeatedly execute code.\n  -- Hint: you can\
    \ use the break statement to break out of a loop.\n  -- Hint: you can use the\
    \ return statement to return a value.\n  -- Hint: you can use the do-end statement\
    \ to group statements.\n  -- Hint: you can use the do-end statement to group statements.\n\
    \  -- Hint: you can use the do-end statement to group statements.\n  -- Hint:\
    \ you can use the do-end statement to group statements.\n  -- Hint: you can use\
    \ the do-end statement to", "    local t = {}\n    for _, v in ipairs(l) do\n\
    \        if t[-v] then\n            return true\n        end\n        t[v] = true\n\
    \    end\n    return false\nend", "  local t = {}\n  for i, v in ipairs(l) do\n\
    \    if t[-v] then\n      return true\n    end\n    t[v] = true\n  end\n  return\
    \ false\nend", "    local nums = {}\n    for _, v in ipairs(l) do\n        if\
    \ nums[v] then\n            return true\n        end\n        nums[-v] = true\n\
    \    end\n    return false\nend", "  -- TODO: implement this function\n  local\
    \ t = {}\n  for i, v in ipairs(l) do\n    if t[v] then\n      return true\n  \
    \  else\n      t[-v] = true\n    end\n  end\n  return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    -- TODO: implement this\
    \ function\n    return false\nend", "  -- TODO: implement this function\n  local\
    \ table = {}\n  for i,v in ipairs(l) do\n    table[v] = true\n  end\n  for i,v\
    \ in ipairs(l) do\n    if table[-v] then\n      return true\n    end\n  end\n\
    \  return false\nend", "    -- your code here\n    local sum = 0\n    for i =\
    \ 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend", "    local set = {}\n    for _, v in ipairs(l)\
    \ do\n        if set[-v] then\n            return true\n        end\n        set[v]\
    \ = true\n    end\n    return false\nend", "  local seen = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n \
    \ end\n  return false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n\
    \        if seen[-v] then\n            return true\n        end\n        seen[v]\
    \ = true\n    end\n    return false\nend", "    for i = 1, #l do\n        for\
    \ j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "  local\
    \ seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return true\n\
    \    end\n    seen[v] = true\n  end\n  return false\nend", "    for i = 1, #l\
    \ do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n   \
    \             return true\n            end\n        end\n    end\n    return false\n\
    end", "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v]\
    \ then\n            return true\n        end\n        seen[v] = true\n    end\n\
    \    return false\nend", "    local hash = {}\n    for i = 1, #l do\n        if\
    \ hash[-l[i]] then\n            return true\n        end\n        hash[l[i]] =\
    \ true\n    end\n    return false\nend", "    local t = {}\n    for _, v in ipairs(l)\
    \ do\n        if t[-v] then\n            return true\n        end\n        t[v]\
    \ = true\n    end\n    return false\nend", "  -- TODO: implement this function\n\
    \  local flag = false\n  for i = 1, #l do\n    for j = i + 1, #l do\n      if\
    \ l[i] + l[j] == 0 then\n        flag = true\n      end\n    end\n  end\n  return\
    \ flag\nend", "    -- TODO: implement this function\n    return false\nend", " \
    \   -- TODO: implement this function\n    return false\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "  for i = 1, #l do\n    for j = i +\
    \ 1, #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n \
    \   end\n  end\n  return false\nend", "    -- YOUR CODE HERE\n    for i = 1, #l\
    \ do\n        for j = i + 1, #l do\n            if l[i] + l[j] == 0 then\n   \
    \             return true\n            end\n        end\n    end\n    return false\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    if t[-v] then\n      return\
    \ true\n    end\n    t[v] = true\n  end\n  return false\nend", "  -- TODO: implement\
    \ this function\n  -- Hint: use the table.sort function\n  table.sort(l)\n  for\
    \ i = 1, #l do\n    for j = i + 1, #l do\n      if l[i] + l[j] == 0 then\n   \
    \     return true\n      end\n    end\n  end\n  return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "    -- your code here\n  \
    \  for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "  -- TODO: implement this function\n  return false\n\
    end", "  for i, v in ipairs(l) do\n    for j, w in ipairs(l) do\n      if i ~=\
    \ j and v + w == 0 then\n        return true\n      end\n    end\n  end\n  return\
    \ false\nend", "    local seen = {}\n    for _, v in ipairs(l) do\n        if\
    \ seen[-v] then\n            return true\n        end\n        seen[v] = true\n\
    \    end\n    return false\nend", "  local seen = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[-v] then\n      return true\n    end\n    seen[v] = true\n \
    \ end\n  return false\nend", "  return false\nend", "    local seen = {}\n   \
    \ for _, v in ipairs(l) do\n        if seen[-v] then\n            return true\n\
    \        end\n        seen[v] = true\n    end\n    return false\nend", "    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        if t[-v] then\n            return\
    \ true\n        end\n        t[v] = true\n    end\n    return false\nend", " \
    \   local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n\
    \            return true\n        end\n        seen[v] = true\n    end\n    return\
    \ false\nend", "    -- TODO: implement this function\n    return false\nend",
  "    local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n \
    \           return true\n        end\n        seen[v] = true\n    end\n    return\
    \ false\nend", "  local seen = {}\n  for _, x in ipairs(l) do\n    if seen[-x]\
    \ then\n      return true\n    end\n    seen[x] = true\n  end\n  return false\n\
    end", "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n \
    \     return true\n    end\n    seen[v] = true\n  end\n  return false\nend", " \
    \   -- TODO: implement this function\n    return false\nend", "  local seen =\
    \ {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return true\n  \
    \  end\n    seen[v] = true\n  end\n  return false\nend", "  local s = {}\n  for\
    \ _, v in ipairs(l) do\n    if s[-v] then\n      return true\n    end\n    s[v]\
    \ = true\n  end\n  return false\nend", "    local seen = {}\n    for _, v in ipairs(l)\
    \ do\n        if seen[-v] then\n            return true\n        end\n       \
    \ seen[v] = true\n    end\n    return false\nend", "    local t = {}\n    for\
    \ _, v in ipairs(l) do\n        if t[-v] then\n            return true\n     \
    \   end\n        t[v] = true\n    end\n    return false\nend", "    local seen\
    \ = {}\n    for i = 1, #l do\n        if seen[-l[i]] then\n            return\
    \ true\n        end\n        seen[l[i]] = true\n    end\n    return false\nend",
  "    -- TODO: implement this function\n    return false\nend", "    local s = {}\n\
    \    for _, v in ipairs(l) do\n        if s[-v] then\n            return true\n\
    \        end\n        s[v] = true\n    end\n    return false\nend", "    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        if s[-v] then\n            return\
    \ true\n        end\n        s[v] = true\n    end\n    return false\nend", " \
    \   local seen = {}\n    for _, v in ipairs(l) do\n        if seen[-v] then\n\
    \            return true\n        end\n        seen[v] = true\n    end\n    return\
    \ false\nend", "    -- TODO: implement this function\n    -- Hint: you can use\
    \ the table.sort function to sort a table\n    -- of integers.\n    -- table.sort(l)\n\
    \    -- for i = 1, #l do\n    --     for j = i + 1, #l do\n    --         if l[i]\
    \ + l[j] == 0 then\n    --             return true\n    --         end\n    --\
    \     end\n    -- end\n    -- return false\n    table.sort(l)\n    local i = 1\n\
    \    local j = #l\n    while i < j do\n        if l[i] + l[j] == 0 then\n    \
    \        return true\n        elseif l[i] + l[j] < 0 then\n            i = i +\
    \ 1\n        else\n            j = j - 1\n        end\n    end\n    return false\n\
    end", "    local t = {}\n    for i = 1, #l do\n        if t[-l[i]] then\n    \
    \        return true\n        end\n        t[l[i]] = true\n    end\n    return\
    \ false\nend", "    -- TODO: implement this function\n    return false\nend",
  "  local seen = {}\n  for _, v in ipairs(l) do\n    if seen[-v] then\n      return\
    \ true\n    end\n    seen[v] = true\n  end\n  return false\nend", "  -- TODO:\
    \ implement this function\n  -- Hint: use the table.sort function\n  -- Hint:\
    \ use the table.insert function\n  -- Hint: use the table.remove function\n  --\
    \ Hint: use the table.concat function\n  -- Hint: use the tostring function\n\
    \  -- Hint: use the tonumber function\n  -- Hint: use the table.unpack function\n\
    \  -- Hint: use the table.pack function\n  -- Hint: use the table.move function\n\
    \  -- Hint: use the table.maxn function\n  -- Hint: use the table.getn function\n\
    \  -- Hint: use the table.foreach function\n  -- Hint: use the table.foreachi\
    \ function\n  -- Hint: use the table.insert function\n  -- Hint: use the table.remove\
    \ function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint: use the table.pack\
    \ function\n  -- Hint: use the table.move function\n  -- Hint: use the table.maxn\
    \ function\n  -- Hint: use the table.getn function\n  -- Hint: use the table.foreach\
    \ function\n  -- Hint: use the table.foreachi function\n  -- Hint: use the table.insert\
    \ function\n  -- Hint: use the table.remove function\n  -- Hint: use the table.sort\
    \ function\n  -- Hint: use the table.concat function\n  -- Hint: use the table.unpack\
    \ function\n  -- Hint: use the table.pack function\n  -- Hint: use the table.move\
    \ function\n  -- Hint: use the table.maxn function\n  -- Hint: use the table.getn\
    \ function\n  -- Hint: use the table.foreach function\n  -- Hint: use the table.foreachi\
    \ function\n  -- Hint: use the table.insert function\n  -- Hint: use the table.remove\
    \ function\n  -- Hint: use the table.sort function\n  -- Hint: use the table.concat\
    \ function\n  -- Hint: use the table.unpack function\n  -- Hint", "  local s =\
    \ {}\n  for _, v in ipairs(l) do\n    if s[-v] then\n      return true\n    end\n\
    \    s[v] = true\n  end\n  return false\nend", "    -- TODO: implement this function\n\
    \    -- Hint: you can use the table.sort function to sort a table.\n    -- Hint:\
    \ you can use the table.insert function to insert an element\n    -- into a table.\n\
    \    -- Hint: you can use the table.remove function to remove an element\n   \
    \ -- from a table.\n    -- Hint: you can use the # operator to get the length\
    \ of a table.\n    -- Hint: you can use the pairs function to iterate over the\
    \ elements\n    -- of a table.\n    -- Hint: you can use the ipairs function to\
    \ iterate over the elements\n    -- of a table.\n    -- Hint: you can use the\
    \ table.concat function to concatenate two\n    -- tables.\n    -- Hint: you can\
    \ use the table.unpack function to unpack a table.\n    -- Hint: you can use the\
    \ table.pack function to pack a list of values\n    -- into a table.\n    -- Hint:\
    \ you can use the table.remove function to remove an element\n    -- from a table.\n\
    \    -- Hint: you can use the table.insert function to insert an element\n   \
    \ -- into a table.\n    -- Hint: you can use the table.sort function to sort a\
    \ table.\n    -- Hint: you can use the table.concat function to concatenate two\n\
    \    -- tables.\n    -- Hint: you can use the table.unpack function to unpack\
    \ a table.\n    -- Hint: you can use the table.pack function to pack a list of\
    \ values\n    -- into a table.\n    -- Hint: you can use the table.remove function\
    \ to remove an element\n    -- from a table.\n    -- Hint: you can use the table.insert\
    \ function to insert an element\n    -- into a table.\n    -- Hint: you can use\
    \ the table.sort function to sort a table.\n    -- Hint: you can use the table.concat\
    \ function to concatenate two\n    -- tables.\n    -- Hint: you can use the table.unpack\
    \ function to unpack a table.\n    -- Hint: you can use the table.pack function\
    \ to pack a list of values\n    -- into a table.\n    -- Hint:", "  local map\
    \ = {}\n  for _, v in ipairs(l) do\n    map[v] = true\n  end\n  for _, v in ipairs(l)\
    \ do\n    if map[-v] then\n      return true\n    end\n  end\n  return false\n\
    end", "    -- TODO: implement this function\n    return false\nend", "  -- your\
    \ code here\n  local n = #l\n  if n == 1 then\n    return false\n  end\n  for\
    \ i = 1, n do\n    for j = i + 1, n do\n      if l[i] + l[j] == 0 then\n     \
    \   return true\n      end\n    end\n  end\n  return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "  -- TODO: implement this function\n\
    \  return false\nend", "  -- TODO: implement this function\n  -- Hint: you can\
    \ use the table.sort function\n  -- Hint: you can use the table.concat function\n\
    \  -- Hint: you can use the table.insert function\n  -- Hint: you can use the\
    \ table.remove function\n  -- Hint: you can use the table.unpack function\n  --\
    \ Hint: you can use the table.pack function\n  -- Hint: you can use the table.move\
    \ function\n  -- Hint: you can use the table.maxn function\n  -- Hint: you can\
    \ use the table.getn function\n  -- Hint: you can use the table.foreach function\n\
    \  -- Hint: you can use the table.foreachi function\n  -- Hint: you can use the\
    \ table.sort function\n  -- Hint: you can use the table.sort function\n  -- Hint:\
    \ you can use the table.sort function\n  -- Hint: you can use the table.sort function\n\
    \  -- Hint: you can use the table.sort function\n  -- Hint: you can use the table.sort\
    \ function\n  -- Hint: you can use the table.sort function\n  -- Hint: you can\
    \ use the table.sort function\n  -- Hint: you can use the table.sort function\n\
    \  -- Hint: you can use the table.sort function\n  -- Hint: you can use the table.sort\
    \ function\n  -- Hint: you can use the table.sort function\n  -- Hint: you can\
    \ use the table.sort function\n  -- Hint: you can use the table.sort function\n\
    \  -- Hint: you can use the table.sort function\n  -- Hint: you can use the table.sort\
    \ function\n  -- Hint: you can use the table.sort function\n  -- Hint: you can\
    \ use the table.sort function\n  -- Hint: you can use the table.sort function\n\
    \  -- Hint: you can use the table.sort function\n  -- Hint: you can use the table.sort\
    \ function\n  -- Hint: you can use the table.sort function\n  -- Hint: you can\
    \ use the table.sort function\n  -- Hint: you can use the table.sort function\n\
    \  -- Hint: you", "    -- your code here\n    return false\nend", "  -- TODO:\
    \ implement this function\n  return false\nend", "    local seen = {}\n    for\
    \ _, v in ipairs(l) do\n        if seen[-v] then\n            return true\n  \
    \      end\n        seen[v] = true\n    end\n    return false\nend", "    -- TODO:\
    \ implement this function\n    return false\nend", "  local t = {}\n  for i =\
    \ 1, #l do\n    if t[l[i]] then\n      return true\n    end\n    t[-l[i]] = true\n\
    \  end\n  return false\nend", "    local seen = {}\n    for _, v in ipairs(l)\
    \ do\n        if seen[-v] then\n            return true\n        end\n       \
    \ seen[v] = true\n    end\n    return false\nend", "    -- your code here\n  \
    \  for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend", "    -- TODO: implement this function\n    return false\n\
    end", "  local t = {}\n  for _, v in ipairs(l) do\n    if t[-v] then\n      return\
    \ true\n    end\n    t[v] = true\n  end\n  return false\nend", "    -- TODO: implement\
    \ this function\n    return false\nend", "  -- TODO: implement this function\n\
    \  return false\nend", "  local sum = 0\n  for i = 1, #l do\n    for j = i + 1,\
    \ #l do\n      if l[i] + l[j] == 0 then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "    -- TODO: implement this function\n    return\
    \ false\nend", "    for i = 1, #l do\n        for j = i + 1, #l do\n         \
    \   if l[i] + l[j] == 0 then\n                return true\n            end\n \
    \       end\n    end\n    return false\nend", "    -- TODO: implement this function\n\
    \    for i = 1, #l do\n        for j = i + 1, #l do\n            if l[i] + l[j]\
    \ == 0 then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
