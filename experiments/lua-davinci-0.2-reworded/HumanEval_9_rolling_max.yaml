---
name: HumanEval_9_rolling_max
language: lua
prompt: |
  -- From a given table of integers, generate a table of rolling maximum element found until given moment
  -- in the sequence.
  -- >>> rolling_max({1, 2, 3, 2, 3, 4, 2})
  -- {1, 2, 3, 3, 3, 4, 4}
  local function rolling_max(numbers)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = rolling_max
      lu.assertEquals(candidate({}), {})
      lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})
      lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})
      lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = 0
      for i, v in ipairs(numbers) do
          max = math.max(max, v)
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    result[1] = max
    for i = 2, #numbers do
      if numbers[i] > max then
        max = numbers[i]
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local maximum = numbers[1]
      result[1] = maximum
      for i = 2, #numbers do
          local number = numbers[i]
          if number > maximum then
              maximum = number
          end
          result[i] = maximum
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {}
      for i, number in ipairs(numbers) do
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- "\tlocal result = {}\n\tlocal current_max = numbers[1]\n\tresult[1] = current_max\n\tfor
  i = 2, #numbers do\n\t\tif numbers[i] > current_max then\n\t\t\tcurrent_max = numbers[i]\n\t\tend\n\t\tresult[i]
  = current_max\n\tend\n\treturn result\nend"
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local num = numbers[i]
          if num > max then
              max = num
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max_so_far = numbers[1]
      local result = {max_so_far}
      for i = 2, #numbers do
          local current = numbers[i]
          if current > max_so_far then
              max_so_far = current
          end
          result[i] = max_so_far
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max_so_far = numbers[1]
      result[1] = max_so_far
      for i = 2, #numbers do
          max_so_far = math.max(max_so_far, numbers[i])
          result[i] = max_so_far
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      result[1] = current_max
      for i = 2, #numbers do
          local current_number = numbers[i]
          if current_number > current_max then
              current_max = current_number
          end
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
    local max = numbers[1]
    local result = {max}
    for i = 2, #numbers do
      local n = numbers[i]
      if n > max then
        max = n
      end
      result[i] = max
    end
    return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {}
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = 0
      for i, v in ipairs(numbers) do
          current_max = math.max(current_max, v)
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max_so_far = numbers[1]
      result[1] = max_so_far
      for i = 2, #numbers do
          max_so_far = math.max(max_so_far, numbers[i])
          result[i] = max_so_far
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    result[1] = max
    for i = 2, #numbers do
      if numbers[i] > max then
        max = numbers[i]
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      result[1] = current_max
      for i = 2, #numbers do
          if numbers[i] > current_max then
              current_max = numbers[i]
          end
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          max = math.max(max, n)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i, number in ipairs(numbers) do
          if number > current_max then
              current_max = number
          end
          result[i] = current_max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i = 1, #numbers do
          current_max = math.max(current_max, numbers[i])
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max_numbers = {}
      local current_max = nil
      for i, number in ipairs(numbers) do
          if current_max == nil or number > current_max then
              current_max = number
          end
          max_numbers[i] = current_max
      end
      return max_numbers
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
    local max = numbers[1]
    local result = {max}
    for i = 2, #numbers do
      max = math.max(max, numbers[i])
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i = 1, #numbers do
          current_max = math.max(current_max, numbers[i])
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local n = numbers[i]
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i = 1, #numbers do
          current_max = math.max(current_max, numbers[i])
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
    local max = numbers[1]
    local result = {max}
    for i = 2, #numbers do
      if numbers[i] > max then
        max = numbers[i]
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    for i, n in ipairs(numbers) do
      if n > max then
        max = n
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          max = math.max(max, n)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          max = math.max(max, v)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          max = math.max(max, v)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i = 1, #numbers do
          if numbers[i] > current_max then
              current_max = numbers[i]
          end
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = 0
      for _, number in ipairs(numbers) do
          current_max = math.max(current_max, number)
          table.insert(result, current_max)
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = 0
      for i, v in ipairs(numbers) do
          max = math.max(max, v)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          max = math.max(max, n)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      result[1] = current_max
      for i = 2, #numbers do
          current_max = math.max(current_max, numbers[i])
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, number in ipairs(numbers) do
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = 0
      for i, number in ipairs(numbers) do
          max = math.max(max, number)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
    local max = numbers[1]
    local result = {max}
    for i=2,#numbers do
      max = math.max(max, numbers[i])
      result[i] = max
    end
    return result
  end
- |2-
    local max = 0
    local result = {}
    for _, n in ipairs(numbers) do
      max = math.max(max, n)
      table.insert(result, max)
    end
    return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    result[1] = max
    for i = 2, #numbers do
      if numbers[i] > max then
        max = numbers[i]
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i = 1, #numbers do
          current_max = math.max(current_max, numbers[i])
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    result[1] = max
    for i = 2, #numbers do
      if numbers[i] > max then
        max = numbers[i]
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      result[1] = current_max
      for i = 2, #numbers do
          if numbers[i] > current_max then
              current_max = numbers[i]
          end
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      result[1] = current_max
      for i = 2, #numbers do
          local current_number = numbers[i]
          if current_number > current_max then
              current_max = current_number
          end
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    for i = 1, #numbers do
      max = math.max(max, numbers[i])
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i, number in ipairs(numbers) do
          if number > current_max then
              current_max = number
          end
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max = 0
      for i, n in ipairs(numbers) do
          max = math.max(max, n)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      result[1] = current_max
      for i = 2, #numbers do
          if numbers[i] > current_max then
              current_max = numbers[i]
          end
          result[i] = current_max
      end
      return result
  end
- |2-
    local result = {}
    local current_max = numbers[1]
    result[1] = current_max
    for i = 2, #numbers do
      if numbers[i] > current_max then
        current_max = numbers[i]
      end
      result[i] = current_max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local num = numbers[i]
          if num > max then
              max = num
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = 0
      for i, v in ipairs(numbers) do
          max = math.max(max, v)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      for i = 1, #numbers do
          current_max = math.max(current_max, numbers[i])
          result[i] = current_max
      end
      return result
  end
- |2-
      local result = {}
      local max_so_far = 0
      for i, n in ipairs(numbers) do
          max_so_far = math.max(max_so_far, n)
          result[i] = max_so_far
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local n = numbers[i]
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          local n = numbers[i]
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = 0
      for i, number in ipairs(numbers) do
          max = math.max(max, number)
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, v in ipairs(numbers) do
          if v > max then
              max = v
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i, n in ipairs(numbers) do
          if n > max then
              max = n
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    result[1] = max
    for i = 2, #numbers do
      local number = numbers[i]
      if number > max then
        max = number
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    for i, v in ipairs(numbers) do
      if v > max then
        max = v
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      for i = 1, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max_so_far = numbers[1]
      local result = {max_so_far}
      for i = 2, #numbers do
          max_so_far = math.max(max_so_far, numbers[i])
          result[i] = max_so_far
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local max_so_far = numbers[1]
      local result = {max_so_far}
      for i = 2, #numbers do
          local current = numbers[i]
          if current > max_so_far then
              max_so_far = current
          end
          result[i] = max_so_far
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    result[1] = max
    for i = 2, #numbers do
      max = math.max(max, numbers[i])
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
      local result = {}
      local current_max = numbers[1]
      result[1] = current_max
      for i = 2, #numbers do
          current_max = math.max(current_max, numbers[i])
          result[i] = current_max
      end
      return result
  end
- |2-
      local max = numbers[1]
      local result = {max}
      for i = 2, #numbers do
          local number = numbers[i]
          if number > max then
              max = number
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    for i, n in ipairs(numbers) do
      if n > max then
        max = n
      end
      result[i] = max
    end
    return result
  end
- |2-
    local result = {}
    local max = numbers[1]
    result[1] = max
    for i = 2, #numbers do
      if numbers[i] > max then
        max = numbers[i]
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          if numbers[i] > max then
              max = numbers[i]
          end
          result[i] = max
      end
      return result
  end
- |2-
    local result = {}
    local max = 0
    for i, v in ipairs(numbers) do
      if v > max then
        max = v
      end
      result[i] = max
    end
    return result
  end
- |2-
      local result = {}
      local max = numbers[1]
      result[1] = max
      for i = 2, #numbers do
          max = math.max(max, numbers[i])
          result[i] = max
      end
      return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
