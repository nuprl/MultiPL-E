name: HumanEval_17_parse_music
language: lua
results:
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch(\"\
    %S+\") do\n        if note == 'o' then\n            table.insert(beats, 4)\n \
    \       elseif note == 'o|' then\n            table.insert(beats, 2)\n       \
    \ elseif note == '.|' then\n            table.insert(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local music_table_index\
    \ = 1\n    for i = 1, #music_string do\n        if music_string:sub(i, i) == 'o'\
    \ then\n            if music_string:sub(i + 1, i + 1) == ' ' then\n          \
    \      music_table[music_table_index] = 4\n                music_table_index =\
    \ music_table_index + 1\n            elseif music_string:sub(i + 1, i + 1) ==\
    \ '|' then\n                music_table[music_table_index] = 2\n             \
    \   music_table_index = music_table_index + 1\n            end\n        elseif\
    \ music_string:sub(i, i) == '.' then\n            if music_string:sub(i + 1, i\
    \ + 1) == '|' then\n                music_table[music_table_index] = 1\n     \
    \           music_table_index = music_table_index + 1\n            end\n     \
    \   end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkb2_odk.lua:36:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpqkb2_odk.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_length = {\n\
    \        ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for beat\
    \ in music_string:gmatch('%S+') do\n        table.insert(beats, beat_length[beat])\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local beats = {}\n  for beat in music_string:gmatch('%S+')\
    \ do\n    if beat == 'o' then\n      table.insert(beats, 4)\n    elseif beat ==\
    \ 'o|' then\n      table.insert(beats, 2)\n    elseif beat == '.|' then\n    \
    \  table.insert(beats, 1)\n    end\n  end\n  return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.%|]')\
    \ do\n        table.insert(beats, beat_to_int[beat])\n    end\n    return beats\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpearl7724.lua:13:\
    \ attempt to index a nil value (global 'beat_to_int')\nstack traceback:\n\t/tmp/tmpearl7724.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpearl7724.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local music_table_index\
    \ = 1\n    local music_string_index = 1\n    local music_string_length = string.len(music_string)\n\
    \    while music_string_index <= music_string_length do\n        if string.sub(music_string,\
    \ music_string_index, music_string_index) == 'o' then\n            if string.sub(music_string,\
    \ music_string_index + 1, music_string_index + 1) == ' ' then\n              \
    \  music_table[music_table_index] = 4\n                music_table_index = music_table_index\
    \ + 1\n                music_string_index = music_string_index + 2\n         \
    \   elseif string.sub(music_string, music_string_index + 1, music_string_index\
    \ + 1) == '|' then\n                music_table[music_table_index] = 2\n     \
    \           music_table_index = music_table_index + 1\n                music_string_index\
    \ = music_string_index + 2\n            end\n        elseif string.sub(music_string,\
    \ music_string_index, music_string_index) == '.' then\n            if string.sub(music_string,\
    \ music_string_index + 1, music_string_index + 1) == '|' then\n              \
    \  music_table[music_table_index] = 1\n                music_table_index = music_table_index\
    \ + 1\n                music_string_index = music_string_index + 2\n         \
    \   end\n        end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local beats = {\n    \
    \    ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(result, beats[note])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('[o.|]+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('[o%.|]+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local beats = {\n    \
    \    ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(result, beats[note])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_index = 1\n\
    \    for i = 1, #music_string do\n        local char = music_string:sub(i, i)\n\
    \        if char == 'o' then\n            beats[beat_index] = 4\n            beat_index\
    \ = beat_index + 1\n        elseif char == '|' then\n            beats[beat_index]\
    \ = beats[beat_index] / 2\n            beat_index = beat_index + 1\n        elseif\
    \ char == '.' then\n            beats[beat_index] = beats[beat_index] / 2\n  \
    \      end\n    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaom3a9ja.lua:22:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpaom3a9ja.lua:22: in local 'candidate'\n\t/tmp/tmpaom3a9ja.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local i = 1\n    while\
    \ i <= #music_string do\n        local char = music_string:sub(i, i)\n       \
    \ if char == 'o' then\n            table.insert(result, 4)\n            i = i\
    \ + 1\n        elseif char == '.' then\n            table.insert(result, 1)\n\
    \            i = i + 3\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beat = 1\n        if note == 'o' then\n            beat =\
    \ 4\n        elseif note == 'o|' then\n            beat = 2\n        end\n   \
    \     table.insert(beats, beat)\n    end\n    return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for i in string.gmatch(music_string,\
    \ '%S+') do\n        if i == 'o' then\n            table.insert(result, 4)\n \
    \       elseif i == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ i == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n\tlocal beats = {}\n\tfor beat in music_string:gmatch('%S+')\
    \ do\n\t\tif beat == 'o' then\n\t\t\ttable.insert(beats, 4)\n\t\telseif beat ==\
    \ 'o|' then\n\t\t\ttable.insert(beats, 2)\n\t\telseif beat == '.|' then\n\t\t\t\
    table.insert(beats, 1)\n\t\tend\n\tend\n\treturn beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beats = 1\n        if note == 'o' then\n            beats\
    \ = 4\n        elseif note == 'o|' then\n            beats = 2\n        end\n\
    \        table.insert(notes, beats)\n    end\n    return notes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_map = {\n  \
    \      ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(beats, beat_map[note])\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local i = 1\n    for note\
    \ in music_string:gmatch('%S+') do\n        if note == 'o' then\n            beats[i]\
    \ = 4\n        elseif note == 'o|' then\n            beats[i] = 2\n        elseif\
    \ note == '.|' then\n            beats[i] = 1\n        end\n        i = i + 1\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beats = 1\n        if note == 'o' then\n            beats\
    \ = 4\n        elseif note == 'o|' then\n            beats = 2\n        end\n\
    \        table.insert(notes, beats)\n    end\n    return notes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for i = 1, #music_string\
    \ do\n        local char = music_string:sub(i, i)\n        if char == 'o' then\n\
    \            table.insert(beats, 4)\n        elseif char == '.' then\n       \
    \     table.insert(beats, 1)\n        end\n    end\n    return beats\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwy00fiy.lua:29:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpxwy00fiy.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(music_table, 4)\n\
    \        elseif note == 'o|' then\n            table.insert(music_table, 2)\n\
    \        elseif note == '.|' then\n            table.insert(music_table, 1)\n\
    \        end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local i = 1\n    for note\
    \ in music_string:gmatch('%S+') do\n        if note == 'o' then\n            beats[i]\
    \ = 4\n        elseif note == 'o|' then\n            beats[i] = 2\n        elseif\
    \ note == '.|' then\n            beats[i] = 1\n        end\n        i = i + 1\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local beats = {}\n  for beat in music_string:gmatch('[o|.]+')\
    \ do\n    local duration = 0\n    for note in beat:gmatch('[o|.]') do\n      if\
    \ note == 'o' then\n        duration = duration + 4\n      elseif note == '|'\
    \ then\n        duration = duration + 2\n      elseif note == '.' then\n     \
    \   duration = duration + 1\n      end\n    end\n    table.insert(beats, duration)\n\
    \  end\n  return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamwbr1yt.lua:33:\
    \ expected: {1, 1, 1, 1}\nactual: {3, 3, 3, 3}\nstack traceback:\n\t/tmp/tmpamwbr1yt.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n\tlocal beats = {}\n\tfor beat in music_string:gmatch('%S+')\
    \ do\n\t\tif beat == 'o' then\n\t\t\ttable.insert(beats, 4)\n\t\telseif beat ==\
    \ 'o|' then\n\t\t\ttable.insert(beats, 2)\n\t\telseif beat == '.|' then\n\t\t\t\
    table.insert(beats, 1)\n\t\tend\n\tend\n\treturn beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('[o.|]+')\
    \ do\n        local beat = 0\n        for _ in note:gmatch('o') do\n         \
    \   beat = beat + 4\n        end\n        for _ in note:gmatch('%.') do\n    \
    \        beat = beat + 1\n        end\n        table.insert(beats, beat)\n   \
    \ end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuniz6c6.lua:31:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpfuniz6c6.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beat = 1\n        if note == 'o' then\n            beat =\
    \ 4\n        elseif note == 'o|' then\n            beat = 2\n        end\n   \
    \     table.insert(beats, beat)\n    end\n    return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[^%s]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n\tlocal notes = {}\n\tfor note in music_string:gmatch(\"\
    %S+\") do\n\t\tif note == \"o\" then\n\t\t\ttable.insert(notes, 4)\n\t\telseif\
    \ note == \"o|\" then\n\t\t\ttable.insert(notes, 2)\n\t\telseif note == \".|\"\
    \ then\n\t\t\ttable.insert(notes, 1)\n\t\tend\n\tend\n\treturn notes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local i = 1\n   \
    \ for note in string.gmatch(music_string, '%S+') do\n        if note == 'o' then\n\
    \            music_table[i] = 4\n        elseif note == 'o|' then\n          \
    \  music_table[i] = 2\n        elseif note == '.|' then\n            music_table[i]\
    \ = 1\n        end\n        i = i + 1\n    end\n    return music_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n\tlocal beats = {}\n\tfor beat in music_string:gmatch('%S+')\
    \ do\n\t\tif beat == 'o' then\n\t\t\ttable.insert(beats, 4)\n\t\telseif beat ==\
    \ 'o|' then\n\t\t\ttable.insert(beats, 2)\n\t\telseif beat == '.|' then\n\t\t\t\
    table.insert(beats, 1)\n\t\tend\n\tend\n\treturn beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local beats = {\n    \
    \    ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(result, beats[note])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local i = 1\n   \
    \ for note in string.gmatch(music_string, '%S+') do\n        if note == 'o' then\n\
    \            music_table[i] = 4\n        elseif note == 'o|' then\n          \
    \  music_table[i] = 2\n        elseif note == '.|' then\n            music_table[i]\
    \ = 1\n        end\n        i = i + 1\n    end\n    return music_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n\tlocal music_table = {}\n\tlocal i = 1\n\tlocal\
    \ j = 1\n\tlocal k = 1\n\tlocal l = 1\n\tlocal m = 1\n\tlocal n = 1\n\tlocal o\
    \ = 1\n\tlocal p = 1\n\tlocal q = 1\n\tlocal r = 1\n\tlocal s = 1\n\tlocal t =\
    \ 1\n\tlocal u = 1\n\tlocal v = 1\n\tlocal w = 1\n\tlocal x = 1\n\tlocal y = 1\n\
    \tlocal z = 1\n\tlocal aa = 1\n\tlocal bb = 1\n\tlocal cc = 1\n\tlocal dd = 1\n\
    \tlocal ee = 1\n\tlocal ff = 1\n\tlocal gg = 1\n\tlocal hh = 1\n\tlocal ii = 1\n\
    \tlocal jj = 1\n\tlocal kk = 1\n\tlocal ll = 1\n\tlocal mm = 1\n\tlocal nn = 1\n\
    \tlocal oo = 1\n\tlocal pp = 1\n\tlocal qq = 1\n\tlocal rr = 1\n\tlocal ss = 1\n\
    \tlocal tt = 1\n\tlocal uu = 1\n\tlocal vv = 1\n\tlocal ww = 1\n\tlocal xx = 1\n\
    \tlocal yy = 1\n\tlocal zz = 1\n\tlocal aaa = 1\n\tlocal bbb = 1\n\tlocal ccc\
    \ = 1\n\tlocal ddd = 1\n\tlocal eee = 1\n\tlocal fff = 1\n\tlocal ggg = 1\n\t\
    local hhh = 1\n\tlocal iii = 1\n\tlocal jjj = 1\n\tlocal kkk = 1\n\tlocal lll\
    \ = 1\n\tlocal mmm = 1\n\tlocal nnn = 1\n\tlocal ooo = 1\n\tlocal ppp = 1\n\t\
    local qqq = 1\n\tlocal rrr = 1\n\tlocal sss = 1\n\tlocal ttt = 1\n\tlocal uuu\
    \ = 1\n\tlocal vvv = 1\n\tlocal www = 1\n\tlocal xxx = 1\n\tlocal yyy = 1\n\t\
    local zzz = 1\n\tlocal aaaa = 1\n\tlocal bbbb = 1\n\tlocal cccc = 1\n\tlocal dddd\
    \ = 1\n\tlocal eeee = 1\n\tlocal f\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjzajn8ra.lua:99: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beats = 1\n        if note == 'o' then\n            beats\
    \ = 4\n        elseif note == 'o|' then\n            beats = 2\n        end\n\
    \        table.insert(result, beats)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for i = 1, #music_string\
    \ do\n        if music_string:sub(i, i) == 'o' then\n            if music_string:sub(i\
    \ + 1, i + 1) == ' ' then\n                table.insert(music_table, 4)\n    \
    \        elseif music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(music_table,\
    \ 2)\n            end\n        elseif music_string:sub(i, i) == '.' then\n   \
    \         if music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(music_table,\
    \ 1)\n            end\n        end\n    end\n    return music_table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsya83bq.lua:32:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmphsya83bq.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o|.]+')\
    \ do\n        table.insert(beats, beat:len())\n    end\n    return beats\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy1dqlk9.lua:22:\
    \ expected: {4, 4, 4, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpqy1dqlk9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('[o.|]+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.%|]')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx7w7y20.lua:29:\
    \ expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpyx7w7y20.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for i = 1, #music_string\
    \ do\n        local char = music_string:sub(i, i)\n        if char == 'o' then\n\
    \            table.insert(beats, 4)\n        elseif char == '.' then\n       \
    \     table.insert(beats, 1)\n        end\n    end\n    return beats\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl86_vui.lua:29:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmptl86_vui.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local i = 1\n   \
    \ for note in string.gmatch(music_string, '%S+') do\n        if note == 'o' then\n\
    \            music_table[i] = 4\n        elseif note == 'o|' then\n          \
    \  music_table[i] = 2\n        elseif note == '.|' then\n            music_table[i]\
    \ = 1\n        end\n        i = i + 1\n    end\n    return music_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('[o%.|]+')\
    \ do\n        local duration = 0\n        for i = 1, #note do\n            if\
    \ note:sub(i, i) == 'o' then\n                duration = duration + 4\n      \
    \      elseif note:sub(i, i) == '.' then\n                duration = duration\
    \ + 1\n            end\n        end\n        table.insert(result, duration)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw6k_t_c.lua:32:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpmw6k_t_c.lua:32: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_length = {\n\
    \        ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for beat\
    \ in music_string:gmatch('%S+') do\n        table.insert(beats, beat_length[beat])\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local i = 1\n    for beat\
    \ in string.gmatch(music_string, '%S+') do\n        if beat == 'o' then\n    \
    \        beats[i] = 4\n        elseif beat == 'o|' then\n            beats[i]\
    \ = 2\n        elseif beat == '.|' then\n            beats[i] = 1\n        end\n\
    \        i = i + 1\n    end\n    return beats\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        local len = beat:len()\n        if len == 1 then\n            beats[#beats\
    \ + 1] = 4\n        elseif len == 2 then\n            beats[#beats + 1] = 2\n\
    \        elseif len == 3 then\n            beats[#beats + 1] = 1\n        end\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmf0iubh.lua:30:\
    \ expected: {1, 1, 1, 1}\nactual: {2, 2, 2, 2}\nstack traceback:\n\t/tmp/tmppmf0iubh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_count = 0\n\
    \    for i = 1, #music_string do\n        local char = music_string:sub(i, i)\n\
    \        if char == 'o' then\n            beat_count = beat_count + 4\n      \
    \  elseif char == '|' then\n            beat_count = beat_count + 1\n        elseif\
    \ char == ' ' then\n            table.insert(beats, beat_count)\n            beat_count\
    \ = 0\n        end\n    end\n    table.insert(beats, beat_count)\n    return beats\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekb6mb2o.lua:31:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpekb6mb2o.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beat = 1\n        if note == 'o' then\n            beat =\
    \ 4\n        elseif note == 'o|' then\n            beat = 2\n        end\n   \
    \     table.insert(beats, beat)\n    end\n    return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_count = 0\n\
    \    for i = 1, #music_string do\n        if music_string:sub(i, i) == 'o' then\n\
    \            beat_count = beat_count + 1\n            if music_string:sub(i +\
    \ 1, i + 1) == ' ' then\n                table.insert(beats, beat_count)\n   \
    \             beat_count = 0\n            end\n        elseif music_string:sub(i,\
    \ i) == '.' then\n            beat_count = beat_count + 1\n            if music_string:sub(i\
    \ + 1, i + 1) == ' ' then\n                table.insert(beats, beat_count)\n \
    \               beat_count = 0\n            end\n        end\n    end\n    return\
    \ beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuhim7sq.lua:35:\
    \ expected: {4, 4, 4, 4}\nactual: {1, 1, 1}\nstack traceback:\n\t/tmp/tmpiuhim7sq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(music_table, 4)\n\
    \        elseif note == 'o|' then\n            table.insert(music_table, 2)\n\
    \        elseif note == '.|' then\n            table.insert(music_table, 1)\n\
    \        end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_count = 0\n\
    \    for i = 1, #music_string do\n        local c = music_string:sub(i, i)\n \
    \       if c == 'o' then\n            beat_count = beat_count + 4\n        elseif\
    \ c == '|' then\n            table.insert(beats, beat_count)\n            beat_count\
    \ = 0\n        elseif c == '.' then\n            beat_count = beat_count + 1\n\
    \        end\n    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssuus4mv.lua:31:\
    \ expected: {4, 4, 4, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpssuus4mv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.]')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  else\n            table.insert(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gy3uqp9.lua:28:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmp1gy3uqp9.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    -- TODO: implement this function\n    local result\
    \ = {}\n    local i = 1\n    for note in string.gmatch(music_string, '%S+') do\n\
    \        if note == 'o' then\n            result[i] = 4\n        elseif note ==\
    \ 'o|' then\n            result[i] = 2\n        elseif note == '.|' then\n   \
    \         result[i] = 1\n        end\n        i = i + 1\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local music_string_table\
    \ = {}\n    local i = 1\n    for note in string.gmatch(music_string, \"%S+\")\
    \ do\n        music_string_table[i] = note\n        i = i + 1\n    end\n    for\
    \ i = 1, #music_string_table do\n        if music_string_table[i] == 'o' then\n\
    \            music_table[i] = 4\n        elseif music_string_table[i] == 'o|'\
    \ then\n            music_table[i] = 2\n        elseif music_string_table[i] ==\
    \ '.|' then\n            music_table[i] = 1\n        end\n    end\n    return\
    \ music_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for i = 1, #music_string\
    \ do\n        if music_string:sub(i, i) == 'o' then\n            if music_string:sub(i\
    \ + 1, i + 1) == ' ' then\n                table.insert(music_table, 4)\n    \
    \        elseif music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(music_table,\
    \ 2)\n            end\n        elseif music_string:sub(i, i) == '.' then\n   \
    \         if music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(music_table,\
    \ 1)\n            end\n        end\n    end\n    return music_table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ek4s1c3.lua:32:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmp7ek4s1c3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local i = 1\n    while\
    \ i <= #music_string do\n        if music_string:sub(i, i) == 'o' then\n     \
    \       if music_string:sub(i + 1, i + 1) == ' ' then\n                table.insert(result,\
    \ 4)\n                i = i + 2\n            elseif music_string:sub(i + 1, i\
    \ + 2) == '| ' then\n                table.insert(result, 2)\n               \
    \ i = i + 3\n            else\n                table.insert(result, 4)\n     \
    \           i = i + 1\n            end\n        elseif music_string:sub(i, i +\
    \ 1) == '.|' then\n            table.insert(result, 1)\n            i = i + 3\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for i = 1, #music_string\
    \ do\n        local char = music_string:sub(i, i)\n        if char == 'o' then\n\
    \            table.insert(result, 4)\n        elseif char == '.' then\n      \
    \      table.insert(result, 1)\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0dayzq1.lua:29:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpe0dayzq1.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local notes = {\n    \
    \    ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(result, notes[note])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for i in string.gmatch(music_string,\
    \ '%S+') do\n        if i == 'o' then\n            table.insert(music_table, 4)\n\
    \        elseif i == 'o|' then\n            table.insert(music_table, 2)\n   \
    \     elseif i == '.|' then\n            table.insert(music_table, 1)\n      \
    \  end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g8hh5vx.lua:29:\
    \ expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmp6g8hh5vx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_index = 1\n\
    \    for i = 1, #music_string do\n        local char = music_string:sub(i, i)\n\
    \        if char == 'o' then\n            beats[beat_index] = 4\n            beat_index\
    \ = beat_index + 1\n        elseif char == '.' then\n            beats[beat_index]\
    \ = 1\n            beat_index = beat_index + 1\n        end\n    end\n    return\
    \ beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptuxfnz.lua:32:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpwptuxfnz.lua:32: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local beats = {}\n  for beat in music_string:gmatch('%S+')\
    \ do\n    if beat == 'o' then\n      table.insert(beats, 4)\n    elseif beat ==\
    \ 'o|' then\n      table.insert(beats, 2)\n    elseif beat == '.|' then\n    \
    \  table.insert(beats, 1)\n    end\n  end\n  return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local notes = {\n    \
    \    ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(result, notes[note])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local i = 1\n   \
    \ local j = 1\n    while i <= #music_string do\n        if music_string:sub(i,\
    \ i) == 'o' then\n            if music_string:sub(i + 1, i + 1) == ' ' then\n\
    \                music_table[j] = 4\n                i = i + 2\n             \
    \   j = j + 1\n            elseif music_string:sub(i + 1, i + 1) == '|' then\n\
    \                music_table[j] = 2\n                i = i + 3\n             \
    \   j = j + 1\n            end\n        elseif music_string:sub(i, i) == '.' then\n\
    \            if music_string:sub(i + 1, i + 1) == '|' then\n                music_table[j]\
    \ = 1\n                i = i + 3\n                j = j + 1\n            end\n\
    \        end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local i = 1\n   \
    \ for note in string.gmatch(music_string, \"%S+\") do\n        if note == 'o'\
    \ then\n            music_table[i] = 4\n        elseif note == 'o|' then\n   \
    \         music_table[i] = 2\n        elseif note == '.|' then\n            music_table[i]\
    \ = 1\n        end\n        i = i + 1\n    end\n    return music_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beat = 1\n        if note == 'o' then\n            beat =\
    \ 4\n        elseif note == 'o|' then\n            beat = 2\n        end\n   \
    \     table.insert(beats, beat)\n    end\n    return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local beats = {\n    \
    \    ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(result, beats[note])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.]%|?')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    local note_lengths = {\n\
    \        ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(notes, note_lengths[note])\n\
    \    end\n    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.]')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  else\n            table.insert(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrvbsy6k.lua:28:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpmrvbsy6k.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for i = 1, #music_string\
    \ do\n        if music_string:sub(i, i) == 'o' then\n            if music_string:sub(i\
    \ + 1, i + 1) == ' ' then\n                table.insert(music_table, 4)\n    \
    \        elseif music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(music_table,\
    \ 2)\n            end\n        elseif music_string:sub(i, i) == '.' then\n   \
    \         if music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(music_table,\
    \ 1)\n            end\n        end\n    end\n    return music_table\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpwuk6bj.lua:32:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpvpwuk6bj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o%.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o|.]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_count = 0\n\
    \    for i = 1, #music_string do\n        local char = music_string:sub(i, i)\n\
    \        if char == 'o' then\n            beat_count = beat_count + 4\n      \
    \  elseif char == '|' then\n            table.insert(beats, beat_count)\n    \
    \        beat_count = 0\n        elseif char == '.' then\n            beat_count\
    \ = beat_count + 1\n        end\n    end\n    return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13nzpcrq.lua:31:\
    \ expected: {4, 4, 4, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp13nzpcrq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    local notes = {\n    \
    \    ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for note\
    \ in music_string:gmatch('%S+') do\n        table.insert(result, notes[note])\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beat = 1\n        if note == 'o' then\n            beat =\
    \ 4\n        elseif note == 'o|' then\n            beat = 2\n        end\n   \
    \     table.insert(beats, beat)\n    end\n    return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for i in string.gmatch(music_string,\
    \ '.') do\n        if i == 'o' then\n            table.insert(music_table, 4)\n\
    \        elseif i == 'o' then\n            table.insert(music_table, 2)\n    \
    \    elseif i == '.' then\n            table.insert(music_table, 1)\n        end\n\
    \    end\n    return music_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllb_g3oj.lua:30:\
    \ expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack\
    \ traceback:\n\t/tmp/tmpllb_g3oj.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local i = 1\n   \
    \ for note in string.gmatch(music_string, \"%S+\") do\n        if note == 'o'\
    \ then\n            music_table[i] = 4\n        elseif note == 'o|' then\n   \
    \         music_table[i] = 2\n        elseif note == '.|' then\n            music_table[i]\
    \ = 1\n        end\n        i = i + 1\n    end\n    return music_table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('[o.|]+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for note in music_string:gmatch('[o%.]%|?')\
    \ do\n        if note == 'o' then\n            table.insert(result, 4)\n     \
    \   elseif note == 'o|' then\n            table.insert(result, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(result, 1)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beat = note:match('%a+')\n        if beat == 'o' then\n  \
    \          table.insert(beats, 4)\n        elseif beat == 'o|' then\n        \
    \    table.insert(beats, 2)\n        elseif beat == '.|' then\n            table.insert(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqeitsjnh.lua:30:\
    \ expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpqeitsjnh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local i = 1\n   \
    \ while i <= #music_string do\n        if music_string:sub(i, i) == 'o' then\n\
    \            if music_string:sub(i + 1, i + 1) == ' ' then\n                table.insert(music_table,\
    \ 4)\n                i = i + 2\n            elseif music_string:sub(i + 1, i\
    \ + 2) == '| ' then\n                table.insert(music_table, 2)\n          \
    \      i = i + 3\n            else\n                table.insert(music_table,\
    \ 4)\n                i = i + 1\n            end\n        elseif music_string:sub(i,\
    \ i + 1) == '.|' then\n            table.insert(music_table, 1)\n            i\
    \ = i + 3\n        end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local beats = {}\n  for note in music_string:gmatch('%S+')\
    \ do\n    if note == 'o' then\n      table.insert(beats, 4)\n    elseif note ==\
    \ 'o|' then\n      table.insert(beats, 2)\n    elseif note == '.|' then\n    \
    \  table.insert(beats, 1)\n    end\n  end\n  return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_count = 0\n\
    \    for i = 1, #music_string do\n        local c = music_string:sub(i, i)\n \
    \       if c == 'o' then\n            beat_count = beat_count + 4\n        elseif\
    \ c == '|' then\n            table.insert(beats, beat_count)\n            beat_count\
    \ = 0\n        elseif c == '.' then\n            beat_count = beat_count + 1\n\
    \        end\n    end\n    table.insert(beats, beat_count)\n    return beats\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o\
    \ o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,\
    \ 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1,\
    \ 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze93aqq2.lua:31:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpze93aqq2.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_index = 1\n\
    \    for beat in string.gmatch(music_string, '%S+') do\n        if beat == 'o'\
    \ then\n            beats[beat_index] = 4\n        elseif beat == 'o|' then\n\
    \            beats[beat_index] = 2\n        elseif beat == '.|' then\n       \
    \     beats[beat_index] = 1\n        end\n        beat_index = beat_index + 1\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(music_table, 4)\n\
    \        elseif note == 'o|' then\n            table.insert(music_table, 2)\n\
    \        elseif note == '.|' then\n            table.insert(music_table, 1)\n\
    \        end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    local beat_map = {\n  \
    \      ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n    for beat\
    \ in music_string:gmatch('%S+') do\n        table.insert(beats, beat_map[beat])\n\
    \    end\n    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local result = {}\n    for i = 1, #music_string\
    \ do\n        if music_string:sub(i, i) == 'o' then\n            if music_string:sub(i\
    \ + 1, i + 1) == ' ' then\n                table.insert(result, 4)\n         \
    \   elseif music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(result,\
    \ 2)\n            end\n        elseif music_string:sub(i, i) == '.' then\n   \
    \         if music_string:sub(i + 1, i + 1) == '|' then\n                table.insert(result,\
    \ 1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0fin960.lua:32:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpm0fin960.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n  local beats = {}\n  for beat in music_string:gmatch('[o%.]+')\
    \ do\n    table.insert(beats, beat:len())\n  end\n  return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiak2uyo.lua:22:\
    \ expected: {4, 4, 4, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpoiak2uyo.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        local beat = 1\n        if note == 'o' then\n            beat =\
    \ 4\n        elseif note == 'o|' then\n            beat = 2\n        end\n   \
    \     table.insert(beats, beat)\n    end\n    return beats\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('[o.|]+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    for i in string.gmatch(music_string,\
    \ \"%S+\") do\n        if i == 'o' then\n            table.insert(music_table,\
    \ 4)\n        elseif i == 'o|' then\n            table.insert(music_table, 2)\n\
    \        elseif i == '.|' then\n            table.insert(music_table, 1)\n   \
    \     end\n    end\n    return music_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local beats = {}\n    for beat in music_string:gmatch('%S+')\
    \ do\n        if beat == 'o' then\n            table.insert(beats, 4)\n      \
    \  elseif beat == 'o|' then\n            table.insert(beats, 2)\n        elseif\
    \ beat == '.|' then\n            table.insert(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local notes = {}\n    for note in music_string:gmatch('%S+')\
    \ do\n        if note == 'o' then\n            table.insert(notes, 4)\n      \
    \  elseif note == 'o|' then\n            table.insert(notes, 2)\n        elseif\
    \ note == '.|' then\n            table.insert(notes, 1)\n        end\n    end\n\
    \    return notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o\
    \ o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1,\
    \ 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4,\
    \ 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2,\
    \ 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n-- Your task is to parse this string and return table\
    \ of integers corresponding to how many beats does each\n-- not last.\n-- Here\
    \ is a legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts\
    \ two beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .|\
    \ o| o| .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function\
    \ parse_music(music_string)\n    local music_table = {}\n    local beat_table\
    \ = {\n        ['o'] = 4,\n        ['o|'] = 2,\n        ['.|'] = 1\n    }\n  \
    \  for beat in string.gmatch(music_string, '%S+') do\n        table.insert(music_table,\
    \ beat_table[beat])\n    end\n    return music_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_music\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.|\
    \ .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o| o| .| .| o o o\
    \ o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o\
    \ o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
