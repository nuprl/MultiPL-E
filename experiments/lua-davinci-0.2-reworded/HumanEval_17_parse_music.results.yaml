---
name: HumanEval_17_parse_music
language: lua
results:
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch("%S+") do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local music_table_index = 1
        for i = 1, #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    music_table[music_table_index] = 4
                    music_table_index = music_table_index + 1
                elseif music_string:sub(i + 1, i + 1) == '|' then
                    music_table[music_table_index] = 2
                    music_table_index = music_table_index + 1
                end
            elseif music_string:sub(i, i) == '.' then
                if music_string:sub(i + 1, i + 1) == '|' then
                    music_table[music_table_index] = 1
                    music_table_index = music_table_index + 1
                end
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkb2_odk.lua:36:
    expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpqkb2_odk.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_length = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for beat in music_string:gmatch('%S+') do
            table.insert(beats, beat_length[beat])
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
      local beats = {}
      for beat in music_string:gmatch('%S+') do
        if beat == 'o' then
          table.insert(beats, 4)
        elseif beat == 'o|' then
          table.insert(beats, 2)
        elseif beat == '.|' then
          table.insert(beats, 1)
        end
      end
      return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.%|]') do
            table.insert(beats, beat_to_int[beat])
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpearl7724.lua:13:
    attempt to index a nil value (global 'beat_to_int')\nstack traceback:\n\t/tmp/tmpearl7724.lua:13:
    in local 'candidate'\n\t/tmp/tmpearl7724.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local music_table_index = 1
        local music_string_index = 1
        local music_string_length = string.len(music_string)
        while music_string_index <= music_string_length do
            if string.sub(music_string, music_string_index, music_string_index) == 'o' then
                if string.sub(music_string, music_string_index + 1, music_string_index + 1) == ' ' then
                    music_table[music_table_index] = 4
                    music_table_index = music_table_index + 1
                    music_string_index = music_string_index + 2
                elseif string.sub(music_string, music_string_index + 1, music_string_index + 1) == '|' then
                    music_table[music_table_index] = 2
                    music_table_index = music_table_index + 1
                    music_string_index = music_string_index + 2
                end
            elseif string.sub(music_string, music_string_index, music_string_index) == '.' then
                if string.sub(music_string, music_string_index + 1, music_string_index + 1) == '|' then
                    music_table[music_table_index] = 1
                    music_table_index = music_table_index + 1
                    music_string_index = music_string_index + 2
                end
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local beats = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(result, beats[note])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('[o.|]+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('[o%.|]+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local beats = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(result, beats[note])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_index = 1
        for i = 1, #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                beats[beat_index] = 4
                beat_index = beat_index + 1
            elseif char == '|' then
                beats[beat_index] = beats[beat_index] / 2
                beat_index = beat_index + 1
            elseif char == '.' then
                beats[beat_index] = beats[beat_index] / 2
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaom3a9ja.lua:22:
    attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpaom3a9ja.lua:22:
    in local 'candidate'\n\t/tmp/tmpaom3a9ja.lua:33: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local i = 1
        while i <= #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                table.insert(result, 4)
                i = i + 1
            elseif char == '.' then
                table.insert(result, 1)
                i = i + 3
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            local beat = 1
            if note == 'o' then
                beat = 4
            elseif note == 'o|' then
                beat = 2
            end
            table.insert(beats, beat)
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for i in string.gmatch(music_string, '%S+') do
            if i == 'o' then
                table.insert(result, 4)
            elseif i == 'o|' then
                table.insert(result, 2)
            elseif i == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a
    special ASCII format.\n-- Your task is to parse this string and return table of
    integers corresponding to how many beats does each\n-- not last.\n-- Here is a
    legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts two
    beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .| o| o|
    .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function parse_music(music_string)\n\tlocal
    beats = {}\n\tfor beat in music_string:gmatch('%S+') do\n\t\tif beat == 'o' then\n\t\t\ttable.insert(beats,
    4)\n\t\telseif beat == 'o|' then\n\t\t\ttable.insert(beats, 2)\n\t\telseif beat
    == '.|' then\n\t\t\ttable.insert(beats, 1)\n\t\tend\n\tend\n\treturn beats\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n
    \   lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o o'),
    {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o|
    o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o|
    .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            local beats = 1
            if note == 'o' then
                beats = 4
            elseif note == 'o|' then
                beats = 2
            end
            table.insert(notes, beats)
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_map = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(beats, beat_map[note])
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local i = 1
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                beats[i] = 4
            elseif note == 'o|' then
                beats[i] = 2
            elseif note == '.|' then
                beats[i] = 1
            end
            i = i + 1
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            local beats = 1
            if note == 'o' then
                beats = 4
            elseif note == 'o|' then
                beats = 2
            end
            table.insert(notes, beats)
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for i = 1, #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                table.insert(beats, 4)
            elseif char == '.' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwy00fiy.lua:29:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpxwy00fiy.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(music_table, 4)
            elseif note == 'o|' then
                table.insert(music_table, 2)
            elseif note == '.|' then
                table.insert(music_table, 1)
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local i = 1
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                beats[i] = 4
            elseif note == 'o|' then
                beats[i] = 2
            elseif note == '.|' then
                beats[i] = 1
            end
            i = i + 1
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
      local beats = {}
      for beat in music_string:gmatch('[o|.]+') do
        local duration = 0
        for note in beat:gmatch('[o|.]') do
          if note == 'o' then
            duration = duration + 4
          elseif note == '|' then
            duration = duration + 2
          elseif note == '.' then
            duration = duration + 1
          end
        end
        table.insert(beats, duration)
      end
      return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamwbr1yt.lua:33:
    expected: {1, 1, 1, 1}\nactual: {3, 3, 3, 3}\nstack traceback:\n\t/tmp/tmpamwbr1yt.lua:33:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a
    special ASCII format.\n-- Your task is to parse this string and return table of
    integers corresponding to how many beats does each\n-- not last.\n-- Here is a
    legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts two
    beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .| o| o|
    .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function parse_music(music_string)\n\tlocal
    beats = {}\n\tfor beat in music_string:gmatch('%S+') do\n\t\tif beat == 'o' then\n\t\t\ttable.insert(beats,
    4)\n\t\telseif beat == 'o|' then\n\t\t\ttable.insert(beats, 2)\n\t\telseif beat
    == '.|' then\n\t\t\ttable.insert(beats, 1)\n\t\tend\n\tend\n\treturn beats\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n
    \   lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o o'),
    {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o|
    o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o|
    .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('[o.|]+') do
            local beat = 0
            for _ in note:gmatch('o') do
                beat = beat + 4
            end
            for _ in note:gmatch('%.') do
                beat = beat + 1
            end
            table.insert(beats, beat)
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuniz6c6.lua:31:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpfuniz6c6.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            local beat = 1
            if note == 'o' then
                beat = 4
            elseif note == 'o|' then
                beat = 2
            end
            table.insert(beats, beat)
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[^%s]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a
    special ASCII format.\n-- Your task is to parse this string and return table of
    integers corresponding to how many beats does each\n-- not last.\n-- Here is a
    legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts two
    beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .| o| o|
    .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function parse_music(music_string)\n\tlocal
    notes = {}\n\tfor note in music_string:gmatch(\"%S+\") do\n\t\tif note == \"o\"
    then\n\t\t\ttable.insert(notes, 4)\n\t\telseif note == \"o|\" then\n\t\t\ttable.insert(notes,
    2)\n\t\telseif note == \".|\" then\n\t\t\ttable.insert(notes, 1)\n\t\tend\n\tend\n\treturn
    notes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o
    o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,
    1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,
    4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4,
    2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local i = 1
        for note in string.gmatch(music_string, '%S+') do
            if note == 'o' then
                music_table[i] = 4
            elseif note == 'o|' then
                music_table[i] = 2
            elseif note == '.|' then
                music_table[i] = 1
            end
            i = i + 1
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a
    special ASCII format.\n-- Your task is to parse this string and return table of
    integers corresponding to how many beats does each\n-- not last.\n-- Here is a
    legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts two
    beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .| o| o|
    .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function parse_music(music_string)\n\tlocal
    beats = {}\n\tfor beat in music_string:gmatch('%S+') do\n\t\tif beat == 'o' then\n\t\t\ttable.insert(beats,
    4)\n\t\telseif beat == 'o|' then\n\t\t\ttable.insert(beats, 2)\n\t\telseif beat
    == '.|' then\n\t\t\ttable.insert(beats, 1)\n\t\tend\n\tend\n\treturn beats\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_music\n
    \   lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o o o o'),
    {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})\n    lu.assertEquals(candidate('o|
    o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})\n    lu.assertEquals(candidate('o|
    .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local beats = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(result, beats[note])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local i = 1
        for note in string.gmatch(music_string, '%S+') do
            if note == 'o' then
                music_table[i] = 4
            elseif note == 'o|' then
                music_table[i] = 2
            elseif note == '.|' then
                music_table[i] = 1
            end
            i = i + 1
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input to this function is a string representing musical notes in a
    special ASCII format.\n-- Your task is to parse this string and return table of
    integers corresponding to how many beats does each\n-- not last.\n-- Here is a
    legend:\n-- 'o' - whole note, lasts four beats\n-- 'o|' - half note, lasts two
    beats\n-- '.|' - quater note, lasts one beat\n-- >>> parse_music('o o| .| o| o|
    .| .| .| .| o o')\n-- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nlocal function parse_music(music_string)\n\tlocal
    music_table = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal l = 1\n\tlocal
    m = 1\n\tlocal n = 1\n\tlocal o = 1\n\tlocal p = 1\n\tlocal q = 1\n\tlocal r =
    1\n\tlocal s = 1\n\tlocal t = 1\n\tlocal u = 1\n\tlocal v = 1\n\tlocal w = 1\n\tlocal
    x = 1\n\tlocal y = 1\n\tlocal z = 1\n\tlocal aa = 1\n\tlocal bb = 1\n\tlocal cc
    = 1\n\tlocal dd = 1\n\tlocal ee = 1\n\tlocal ff = 1\n\tlocal gg = 1\n\tlocal hh
    = 1\n\tlocal ii = 1\n\tlocal jj = 1\n\tlocal kk = 1\n\tlocal ll = 1\n\tlocal mm
    = 1\n\tlocal nn = 1\n\tlocal oo = 1\n\tlocal pp = 1\n\tlocal qq = 1\n\tlocal rr
    = 1\n\tlocal ss = 1\n\tlocal tt = 1\n\tlocal uu = 1\n\tlocal vv = 1\n\tlocal ww
    = 1\n\tlocal xx = 1\n\tlocal yy = 1\n\tlocal zz = 1\n\tlocal aaa = 1\n\tlocal
    bbb = 1\n\tlocal ccc = 1\n\tlocal ddd = 1\n\tlocal eee = 1\n\tlocal fff = 1\n\tlocal
    ggg = 1\n\tlocal hhh = 1\n\tlocal iii = 1\n\tlocal jjj = 1\n\tlocal kkk = 1\n\tlocal
    lll = 1\n\tlocal mmm = 1\n\tlocal nnn = 1\n\tlocal ooo = 1\n\tlocal ppp = 1\n\tlocal
    qqq = 1\n\tlocal rrr = 1\n\tlocal sss = 1\n\tlocal ttt = 1\n\tlocal uuu = 1\n\tlocal
    vvv = 1\n\tlocal www = 1\n\tlocal xxx = 1\n\tlocal yyy = 1\n\tlocal zzz = 1\n\tlocal
    aaaa = 1\n\tlocal bbbb = 1\n\tlocal cccc = 1\n\tlocal dddd = 1\n\tlocal eeee =
    1\n\tlocal f\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = parse_music\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('o
    o o o'), {4, 4, 4, 4})\n    lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1,
    1})\n    lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4,
    4, 4})\n    lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4,
    2, 4, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: 'lua: /tmp/tmpjzajn8ra.lua:99: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            local beats = 1
            if note == 'o' then
                beats = 4
            elseif note == 'o|' then
                beats = 2
            end
            table.insert(result, beats)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for i = 1, #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(music_table, 4)
                elseif music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(music_table, 2)
                end
            elseif music_string:sub(i, i) == '.' then
                if music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(music_table, 1)
                end
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsya83bq.lua:32:
    expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmphsya83bq.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o|.]+') do
            table.insert(beats, beat:len())
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy1dqlk9.lua:22:
    expected: {4, 4, 4, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpqy1dqlk9.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('[o.|]+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.%|]') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx7w7y20.lua:29:
    expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpyx7w7y20.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for i = 1, #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                table.insert(beats, 4)
            elseif char == '.' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl86_vui.lua:29:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmptl86_vui.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local i = 1
        for note in string.gmatch(music_string, '%S+') do
            if note == 'o' then
                music_table[i] = 4
            elseif note == 'o|' then
                music_table[i] = 2
            elseif note == '.|' then
                music_table[i] = 1
            end
            i = i + 1
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('[o%.|]+') do
            local duration = 0
            for i = 1, #note do
                if note:sub(i, i) == 'o' then
                    duration = duration + 4
                elseif note:sub(i, i) == '.' then
                    duration = duration + 1
                end
            end
            table.insert(result, duration)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw6k_t_c.lua:32:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpmw6k_t_c.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_length = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for beat in music_string:gmatch('%S+') do
            table.insert(beats, beat_length[beat])
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local i = 1
        for beat in string.gmatch(music_string, '%S+') do
            if beat == 'o' then
                beats[i] = 4
            elseif beat == 'o|' then
                beats[i] = 2
            elseif beat == '.|' then
                beats[i] = 1
            end
            i = i + 1
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            local len = beat:len()
            if len == 1 then
                beats[#beats + 1] = 4
            elseif len == 2 then
                beats[#beats + 1] = 2
            elseif len == 3 then
                beats[#beats + 1] = 1
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmf0iubh.lua:30:
    expected: {1, 1, 1, 1}\nactual: {2, 2, 2, 2}\nstack traceback:\n\t/tmp/tmppmf0iubh.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_count = 0
        for i = 1, #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                beat_count = beat_count + 4
            elseif char == '|' then
                beat_count = beat_count + 1
            elseif char == ' ' then
                table.insert(beats, beat_count)
                beat_count = 0
            end
        end
        table.insert(beats, beat_count)
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekb6mb2o.lua:31:
    expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpekb6mb2o.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            local beat = 1
            if note == 'o' then
                beat = 4
            elseif note == 'o|' then
                beat = 2
            end
            table.insert(beats, beat)
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_count = 0
        for i = 1, #music_string do
            if music_string:sub(i, i) == 'o' then
                beat_count = beat_count + 1
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(beats, beat_count)
                    beat_count = 0
                end
            elseif music_string:sub(i, i) == '.' then
                beat_count = beat_count + 1
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(beats, beat_count)
                    beat_count = 0
                end
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuhim7sq.lua:35:
    expected: {4, 4, 4, 4}\nactual: {1, 1, 1}\nstack traceback:\n\t/tmp/tmpiuhim7sq.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(music_table, 4)
            elseif note == 'o|' then
                table.insert(music_table, 2)
            elseif note == '.|' then
                table.insert(music_table, 1)
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_count = 0
        for i = 1, #music_string do
            local c = music_string:sub(i, i)
            if c == 'o' then
                beat_count = beat_count + 4
            elseif c == '|' then
                table.insert(beats, beat_count)
                beat_count = 0
            elseif c == '.' then
                beat_count = beat_count + 1
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssuus4mv.lua:31:
    expected: {4, 4, 4, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpssuus4mv.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.]') do
            if beat == 'o' then
                table.insert(beats, 4)
            else
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gy3uqp9.lua:28:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmp1gy3uqp9.lua:28:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        -- TODO: implement this function
        local result = {}
        local i = 1
        for note in string.gmatch(music_string, '%S+') do
            if note == 'o' then
                result[i] = 4
            elseif note == 'o|' then
                result[i] = 2
            elseif note == '.|' then
                result[i] = 1
            end
            i = i + 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local music_string_table = {}
        local i = 1
        for note in string.gmatch(music_string, "%S+") do
            music_string_table[i] = note
            i = i + 1
        end
        for i = 1, #music_string_table do
            if music_string_table[i] == 'o' then
                music_table[i] = 4
            elseif music_string_table[i] == 'o|' then
                music_table[i] = 2
            elseif music_string_table[i] == '.|' then
                music_table[i] = 1
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for i = 1, #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(music_table, 4)
                elseif music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(music_table, 2)
                end
            elseif music_string:sub(i, i) == '.' then
                if music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(music_table, 1)
                end
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ek4s1c3.lua:32:
    expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmp7ek4s1c3.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local i = 1
        while i <= #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(result, 4)
                    i = i + 2
                elseif music_string:sub(i + 1, i + 2) == '| ' then
                    table.insert(result, 2)
                    i = i + 3
                else
                    table.insert(result, 4)
                    i = i + 1
                end
            elseif music_string:sub(i, i + 1) == '.|' then
                table.insert(result, 1)
                i = i + 3
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for i = 1, #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                table.insert(result, 4)
            elseif char == '.' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0dayzq1.lua:29:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpe0dayzq1.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local notes = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(result, notes[note])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for i in string.gmatch(music_string, '%S+') do
            if i == 'o' then
                table.insert(music_table, 4)
            elseif i == 'o|' then
                table.insert(music_table, 2)
            elseif i == '.|' then
                table.insert(music_table, 1)
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g8hh5vx.lua:29:
    expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmp6g8hh5vx.lua:29:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_index = 1
        for i = 1, #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                beats[beat_index] = 4
                beat_index = beat_index + 1
            elseif char == '.' then
                beats[beat_index] = 1
                beat_index = beat_index + 1
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwptuxfnz.lua:32:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpwptuxfnz.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
      local beats = {}
      for beat in music_string:gmatch('%S+') do
        if beat == 'o' then
          table.insert(beats, 4)
        elseif beat == 'o|' then
          table.insert(beats, 2)
        elseif beat == '.|' then
          table.insert(beats, 1)
        end
      end
      return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local notes = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(result, notes[note])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local i = 1
        local j = 1
        while i <= #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    music_table[j] = 4
                    i = i + 2
                    j = j + 1
                elseif music_string:sub(i + 1, i + 1) == '|' then
                    music_table[j] = 2
                    i = i + 3
                    j = j + 1
                end
            elseif music_string:sub(i, i) == '.' then
                if music_string:sub(i + 1, i + 1) == '|' then
                    music_table[j] = 1
                    i = i + 3
                    j = j + 1
                end
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local i = 1
        for note in string.gmatch(music_string, "%S+") do
            if note == 'o' then
                music_table[i] = 4
            elseif note == 'o|' then
                music_table[i] = 2
            elseif note == '.|' then
                music_table[i] = 1
            end
            i = i + 1
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            local beat = 1
            if note == 'o' then
                beat = 4
            elseif note == 'o|' then
                beat = 2
            end
            table.insert(beats, beat)
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local beats = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(result, beats[note])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.]%|?') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        local note_lengths = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(notes, note_lengths[note])
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.]') do
            if beat == 'o' then
                table.insert(beats, 4)
            else
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrvbsy6k.lua:28:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpmrvbsy6k.lua:28:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for i = 1, #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(music_table, 4)
                elseif music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(music_table, 2)
                end
            elseif music_string:sub(i, i) == '.' then
                if music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(music_table, 1)
                end
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpwuk6bj.lua:32:
    expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpvpwuk6bj.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o%.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o|.]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_count = 0
        for i = 1, #music_string do
            local char = music_string:sub(i, i)
            if char == 'o' then
                beat_count = beat_count + 4
            elseif char == '|' then
                table.insert(beats, beat_count)
                beat_count = 0
            elseif char == '.' then
                beat_count = beat_count + 1
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13nzpcrq.lua:31:
    expected: {4, 4, 4, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmp13nzpcrq.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        local notes = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for note in music_string:gmatch('%S+') do
            table.insert(result, notes[note])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            local beat = 1
            if note == 'o' then
                beat = 4
            elseif note == 'o|' then
                beat = 2
            end
            table.insert(beats, beat)
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for i in string.gmatch(music_string, '.') do
            if i == 'o' then
                table.insert(music_table, 4)
            elseif i == 'o' then
                table.insert(music_table, 2)
            elseif i == '.' then
                table.insert(music_table, 1)
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllb_g3oj.lua:30:
    expected: {2, 2, 1, 1, 4, 4, 4, 4}\nactual: {4, 4, 1, 1, 4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpllb_g3oj.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local i = 1
        for note in string.gmatch(music_string, "%S+") do
            if note == 'o' then
                music_table[i] = 4
            elseif note == 'o|' then
                music_table[i] = 2
            elseif note == '.|' then
                music_table[i] = 1
            end
            i = i + 1
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('[o.|]+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for note in music_string:gmatch('[o%.]%|?') do
            if note == 'o' then
                table.insert(result, 4)
            elseif note == 'o|' then
                table.insert(result, 2)
            elseif note == '.|' then
                table.insert(result, 1)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            local beat = note:match('%a+')
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqeitsjnh.lua:30:
    expected: {1, 1, 1, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpqeitsjnh.lua:30:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local i = 1
        while i <= #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(music_table, 4)
                    i = i + 2
                elseif music_string:sub(i + 1, i + 2) == '| ' then
                    table.insert(music_table, 2)
                    i = i + 3
                else
                    table.insert(music_table, 4)
                    i = i + 1
                end
            elseif music_string:sub(i, i + 1) == '.|' then
                table.insert(music_table, 1)
                i = i + 3
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
      local beats = {}
      for note in music_string:gmatch('%S+') do
        if note == 'o' then
          table.insert(beats, 4)
        elseif note == 'o|' then
          table.insert(beats, 2)
        elseif note == '.|' then
          table.insert(beats, 1)
        end
      end
      return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_count = 0
        for i = 1, #music_string do
            local c = music_string:sub(i, i)
            if c == 'o' then
                beat_count = beat_count + 4
            elseif c == '|' then
                table.insert(beats, beat_count)
                beat_count = 0
            elseif c == '.' then
                beat_count = beat_count + 1
            end
        end
        table.insert(beats, beat_count)
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze93aqq2.lua:31:
    expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpze93aqq2.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_index = 1
        for beat in string.gmatch(music_string, '%S+') do
            if beat == 'o' then
                beats[beat_index] = 4
            elseif beat == 'o|' then
                beats[beat_index] = 2
            elseif beat == '.|' then
                beats[beat_index] = 1
            end
            beat_index = beat_index + 1
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(music_table, 4)
            elseif note == 'o|' then
                table.insert(music_table, 2)
            elseif note == '.|' then
                table.insert(music_table, 1)
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        local beat_map = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for beat in music_string:gmatch('%S+') do
            table.insert(beats, beat_map[beat])
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local result = {}
        for i = 1, #music_string do
            if music_string:sub(i, i) == 'o' then
                if music_string:sub(i + 1, i + 1) == ' ' then
                    table.insert(result, 4)
                elseif music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(result, 2)
                end
            elseif music_string:sub(i, i) == '.' then
                if music_string:sub(i + 1, i + 1) == '|' then
                    table.insert(result, 1)
                end
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0fin960.lua:32:
    expected: {4, 4, 4, 4}\nactual: {4, 4, 4}\nstack traceback:\n\t/tmp/tmpm0fin960.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
      local beats = {}
      for beat in music_string:gmatch('[o%.]+') do
        table.insert(beats, beat:len())
      end
      return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiak2uyo.lua:22:
    expected: {4, 4, 4, 4}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpoiak2uyo.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            local beat = 1
            if note == 'o' then
                beat = 4
            elseif note == 'o|' then
                beat = 2
            end
            table.insert(beats, beat)
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('[o.|]+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(beats, 4)
            elseif note == 'o|' then
                table.insert(beats, 2)
            elseif note == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        for i in string.gmatch(music_string, "%S+") do
            if i == 'o' then
                table.insert(music_table, 4)
            elseif i == 'o|' then
                table.insert(music_table, 2)
            elseif i == '.|' then
                table.insert(music_table, 1)
            end
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local beats = {}
        for beat in music_string:gmatch('%S+') do
            if beat == 'o' then
                table.insert(beats, 4)
            elseif beat == 'o|' then
                table.insert(beats, 2)
            elseif beat == '.|' then
                table.insert(beats, 1)
            end
        end
        return beats
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local notes = {}
        for note in music_string:gmatch('%S+') do
            if note == 'o' then
                table.insert(notes, 4)
            elseif note == 'o|' then
                table.insert(notes, 2)
            elseif note == '.|' then
                table.insert(notes, 1)
            end
        end
        return notes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input to this function is a string representing musical notes in a special ASCII format.
    -- Your task is to parse this string and return table of integers corresponding to how many beats does each
    -- not last.
    -- Here is a legend:
    -- 'o' - whole note, lasts four beats
    -- 'o|' - half note, lasts two beats
    -- '.|' - quater note, lasts one beat
    -- >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    -- {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}
    local function parse_music(music_string)
        local music_table = {}
        local beat_table = {
            ['o'] = 4,
            ['o|'] = 2,
            ['.|'] = 1
        }
        for beat in string.gmatch(music_string, '%S+') do
            table.insert(music_table, beat_table[beat])
        end
        return music_table
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = parse_music
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('o o o o'), {4, 4, 4, 4})
        lu.assertEquals(candidate('.| .| .| .|'), {1, 1, 1, 1})
        lu.assertEquals(candidate('o| o| .| .| o o o o'), {2, 2, 1, 1, 4, 4, 4, 4})
        lu.assertEquals(candidate('o| .| o| .| o o| o o|'), {2, 1, 2, 1, 4, 2, 4, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
