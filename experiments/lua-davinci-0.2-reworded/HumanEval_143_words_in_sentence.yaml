name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n\
  -- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = {}\n    for word in sentence:gmatch('%w+') do\n \
    \       table.insert(words, word)\n    end\n    local result = {}\n    for _,\
    \ word in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(result, word)\n   \
    \     end\n    end\n    return table.concat(result, ' ')\nend", "    local words\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, words[i])\n\
    \        end\n    end\n    return table.concat(primes, ' ')\nend", "    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(result, word)\n   \
    \     end\n    end\n    return table.concat(result, ' ')\nend", "    local words\
    \ = {}\n    local primes = {}\n    local result = {}\n    local function is_prime(n)\n\
    \        if n < 2 then\n            return false\n        end\n        if primes[n]\
    \ ~= nil then\n            return primes[n]\n        end\n        for i = 2, math.sqrt(n)\
    \ do\n            if n % i == 0 then\n                primes[n] = false\n    \
    \            return false\n            end\n        end\n        primes[n] = true\n\
    \        return true\n    end\n    for word in sentence:gmatch('%S+') do\n   \
    \     table.insert(words, word)\n    end\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(result, word)\n   \
    \     end\n    end\n    return table.concat(result, ' ')\nend", "    local words\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ ' ')\nend", "  local words = {}\n  for word in sentence:gmatch('%w+') do\n \
    \   table.insert(words, word)\n  end\n  local function is_prime(n)\n    if n ==\
    \ 1 then return false end\n    for i = 2, math.sqrt(n) do\n      if n % i == 0\
    \ then return false end\n    end\n    return true\n  end\n  local result = {}\n\
    \  for _, word in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, ' ')\nend", "    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, index in ipairs(primes)\
    \ do\n        table.insert(result, words[index])\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    for word in sentence:gmatch('%w+') do\n\
    \        table.insert(words, word)\n    end\n    local primes = {}\n    for i\
    \ = 2, #words do\n        local is_prime = true\n        for j = 2, i - 1 do\n\
    \            if i % j == 0 then\n                is_prime = false\n          \
    \      break\n            end\n        end\n        if is_prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for _, i in ipairs(primes) do\n        table.insert(result, words[i])\n  \
    \  end\n    return table.concat(result, ' ')\nend", "    local function is_prime(n)\n\
    \        if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend", "    local words = {}\n    for word in sentence:gmatch('%w+') do\n\
    \        table.insert(words, word)\n    end\n    local function is_prime(n)\n\
    \        if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word) then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    for word in sentence:gmatch('%w+') do\n\
    \        table.insert(words, word)\n    end\n    local result = {}\n    for i,\
    \ word in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    for word in sentence:gmatch('%w+') do\n\
    \        table.insert(words, word)\n    end\n    local function is_prime(n)\n\
    \        if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word) then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local function is_prime(n)\n        if n < 2 then\n       \
    \     return false\n        end\n        for i = 2, math.sqrt(n) do\n        \
    \    if n % i == 0 then\n                return false\n            end\n     \
    \   end\n        return true\n    end\n    local words = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if is_prime(#word) then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, ' ')\nend", "    local words\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for i = 2, #words do\n        local\
    \ is_prime = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local result = {}\n    for _, i in ipairs(primes) do\n\
    \        table.insert(result, words[i])\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    for word in sentence:gmatch('%S+') do\n\
    \        table.insert(words, word)\n    end\n    local primes = {}\n    for i\
    \ = 2, #words do\n        if is_prime(#words[i]) then\n            table.insert(primes,\
    \ words[i])\n        end\n    end\n    return table.concat(primes, ' ')\nend",
  "    local words = {}\n    for word in sentence:gmatch('%w+') do\n        words[#words\
    \ + 1] = word\n    end\n    local result = {}\n    for i = 1, #words do\n    \
    \    local word = words[i]\n        local is_prime = true\n        for j = 2,\
    \ #word - 1 do\n            if word:sub(j, j) == word:sub(1, 1) then\n       \
    \         is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            result[#result + 1] = word\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend", "    local words = {}\n\
    \    for word in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n\
    \    end\n    local primes = {}\n    for i = 2, 100 do\n        local is_prime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            primes[#primes + 1] = i\n        end\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ for _, prime in ipairs(primes) do\n            if #word == prime then\n    \
    \            result[#result + 1] = word\n                break\n            end\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(result, word)\n   \
    \     end\n    end\n    return table.concat(result, ' ')\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
