---
name: HumanEval_84_solve
language: lua
prompt: |
  -- Given a positive integer N, return the total sum of its digits in binary.
  -- Example
  -- >>> solve(1000)
  -- '1'
  -- >>> solve(150)
  -- '110'
  -- >>> solve(147)
  -- '1100'
  -- Variables:
  -- @N integer
  -- Constraints: 0 ≤ N ≤ 10000.
  -- Output:
  -- a string of binary number
  local function solve(N)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = solve
      lu.assertEquals(candidate(1000), '1')
      lu.assertEquals(candidate(150), '110')
      lu.assertEquals(candidate(147), '1100')
      lu.assertEquals(candidate(333), '1001')
      lu.assertEquals(candidate(963), '10010')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
      local t = {}
      while N > 0 do
          table.insert(t, N % 2)
          N = math.floor(N / 2)
      end
      return table.concat(t)
  end
- |2-
    local sum = 0
    for i = 1, N do
      sum = sum + i
    end
    return sum
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local sum = 0
    for i = 1, #N do
      sum = sum + tonumber(N:sub(i, i))
    end
    return sum
  end
- |2-
    local s = ''
    while N > 0 do
      s = tostring(N % 2) .. s
      N = math.floor(N / 2)
    end
    return s
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local function to_binary(N)
      local binary = {}
      local i = 0
      while N > 0 do
        i = i + 1
        binary[i] = N % 2
        N = math.floor(N / 2)
      end
      return binary
    end
    local function sum_digits(binary)
      local sum = 0
      for i = 1, #binary do
        sum = sum + binary[i]
      end
      return sum
    end
    return sum_digits(to_binary(N))
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
      local result = ''
      local remainder = 0
      while N > 0 do
          remainder = N % 2
          N = math.floor(N / 2)
          result = remainder .. result
      end
      return result
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local remainder = N % 2
      sum = sum + remainder
      binary = remainder .. binary
      N = math.floor(N / 2)
    end
    return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local result = ''
    while N > 0 do
      local remainder = N % 2
      result = remainder .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local result = ''
    local remainder = 0
    while N > 0 do
      remainder = N % 2
      N = math.floor(N / 2)
      result = remainder .. result
    end
    return result
  end
- |2-
      local res = {}
      local i = 1
      while N > 0 do
          res[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(res)
  end
- |2-
    local sum = 0
    local binary = {}
    while N > 0 do
      local r = N % 2
      sum = sum + r
      table.insert(binary, r)
      N = (N - r) / 2
    end
    return sum
  end
- |2-
      local sum = 0
      local binary = ''
      while N > 0 do
          local remainder = N % 2
          binary = remainder .. binary
          N = math.floor(N / 2)
      end
      for i = 1, #binary do
          sum = sum + tonumber(binary:sub(i, i))
      end
      return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local result = ''
    local remainder = 0
    while N > 0 do
      remainder = N % 2
      N = math.floor(N / 2)
      result = remainder .. result
    end
    return result
  end
- |2-
    return tostring(N):gsub(".", function(c) return tonumber(c) end):reverse()
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local sum = 0
    local bin = ''
    while N > 0 do
      local r = N % 2
      N = (N - r) / 2
      sum = sum + r
      bin = r .. bin
    end
    return bin
  end
- |2-
    local result = ""
    while N > 0 do
      local remainder = N % 2
      result = tostring(remainder) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local result = ''
    while N > 0 do
      local r = N % 2
      result = tostring(r) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
      local s = tostring(N)
      local sum = 0
      for i = 1, #s do
          sum = sum + tonumber(s:sub(i, i))
      end
      return sum
  end
- |2-
      local result = ''
      while N > 0 do
          local remainder = N % 2
          N = math.floor(N / 2)
          result = tostring(remainder) .. result
      end
      return result
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local rem = N % 2
      sum = sum + rem
      binary = tostring(rem) .. binary
      N = (N - rem) / 2
    end
    return binary
  end
- |2-
      local bin = string.format("%b", N)
      local sum = 0
      for i = 1, #bin do
          sum = sum + tonumber(bin:sub(i, i))
      end
      return sum
  end
- |2-
      local s = ''
      while N > 0 do
          local r = N % 2
          s = r .. s
          N = (N - r) / 2
      end
      return s
  end
- |2-
    local s = ''
    local t = {}
    while N > 0 do
      local r = N % 2
      N = math.floor(N / 2)
      table.insert(t, r)
    end
    for i = #t, 1, -1 do
      s = s .. t[i]
    end
    return s
  end
- |2-
    local result = ''
    while N > 0 do
      local r = N % 2
      result = tostring(r) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    return N:to_binary()
  end
- |2-
    local bin = ""
    while N > 0 do
      local rem = N % 2
      bin = rem .. bin
      N = (N - rem) / 2
    end
    return bin
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = string.format("%b", N)
    local sum = 0
    for i = 1, #bin do
      sum = sum + tonumber(bin:sub(i, i))
    end
    return sum
  end
- |2-
      local binary = {}
      local i = 1
      while N > 0 do
          binary[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(binary)
  end
- |2-
    local sum = 0
    local bin = ""
    while N > 0 do
      local r = N % 2
      sum = sum + r
      bin = r .. bin
      N = (N - r) / 2
    end
    return sum
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
      local sum = 0
      local binary = ""
      while N > 0 do
          local remainder = N % 2
          sum = sum + remainder
          binary = remainder .. binary
          N = math.floor(N / 2)
      end
      return sum
  end
- |2-
    local s = ''
    while N > 0 do
      local r = N % 2
      s = r .. s
      N = (N - r) / 2
    end
    return s
  end
- |2-
      local sum = 0
      local binary = ''
      while N > 0 do
          local remainder = N % 2
          sum = sum + remainder
          binary = remainder .. binary
          N = (N - remainder) / 2
      end
      return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local result = {}
      local i = 1
      while N > 0 do
          result[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(result)
  end
- |2-
    local result = ''
    while N > 0 do
      local r = N % 2
      N = math.floor(N / 2)
      result = r .. result
    end
    return result
  end
- |2-
    local sum = 0
    local b = ""
    while N > 0 do
      local r = N % 2
      N = math.floor(N / 2)
      b = r .. b
      sum = sum + r
    end
    return sum
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local remainder = N % 2
      N = math.floor(N / 2)
      sum = sum + remainder
      binary = tostring(remainder) .. binary
    end
    return sum
  end
- |2-
    local sum = 0
    for i = 1, #N do
      sum = sum + tonumber(N:sub(i, i))
    end
    return sum
  end
- |2-
      local t = {}
      local i = 1
      while N > 0 do
          t[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(t)
  end
- |2-
    local s = ''
    while N > 0 do
      s = tostring(N % 2) .. s
      N = math.floor(N / 2)
    end
    return s
  end
- |2-
    local sum = 0
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    for i = 1, #bin do
      sum = sum + bin[i]
    end
    return sum
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
      local bin = string.format("%b", N)
      local sum = 0
      for i = 1, #bin do
          sum = sum + tonumber(bin:sub(i, i))
      end
      return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local s = ''
      while N > 0 do
          s = tostring(N % 2) .. s
          N = math.floor(N / 2)
      end
      return s
  end
- |2-
    local result = ''
    while N > 0 do
      local r = N % 2
      result = result .. tostring(r)
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local result = ''
      while N > 0 do
          result = tostring(N % 2) .. result
          N = math.floor(N / 2)
      end
      return result
  end
- |2-
    local bin = {}
    while N > 0 do
      table.insert(bin, N % 2)
      N = math.floor(N / 2)
    end
    return table.concat(bin):reverse()
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local t = {}
    while N > 0 do
      local r = N % 2
      N = (N - r) / 2
      table.insert(t, r)
    end
    return table.concat(t)
  end
- |2-
      local function to_binary(n)
          local t = {}
          while n > 0 do
              local rest = math.fmod(n, 2)
              t[#t+1] = rest
              n = (n-rest) / 2
          end
          return table.concat(t):reverse()
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              local rest = math.fmod(n, 10)
              sum = sum + rest
              n = (n-rest) / 10
          end
          return sum
      end
      return sum_digits(tonumber(to_binary(N)))
  end
- |2-
    local sum = 0
    local binary = {}
    local i = 1
    while N > 0 do
      local remainder = N % 2
      binary[i] = remainder
      N = (N - remainder) / 2
      i = i + 1
    end
    for i = 1, #binary do
      sum = sum + binary[i]
    end
    return sum
  end
- |2-
    local function to_binary(N)
      local bin = ""
      while N > 0 do
        local rest = N % 2
        bin = rest .. bin
        N = (N - rest) / 2
      end
      return bin
    end
    local function sum_digits(bin)
      local sum = 0
      for i = 1, #bin do
        sum = sum + tonumber(bin:sub(i, i))
      end
      return sum
    end
    return sum_digits(to_binary(N))
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local s = ''
    while N > 0 do
      s = tostring(N % 2) .. s
      N = math.floor(N / 2)
    end
    return s
  end
- |2-
    local sum = 0
    local bin = ''
    while N > 0 do
      local r = N % 2
      sum = sum + r
      bin = r .. bin
      N = (N - r) / 2
    end
    return sum
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local sum = 0
    while N > 0 do
      sum = sum + N % 2
      N = math.floor(N / 2)
    end
    return sum
  end
- |2-
    local function to_binary(N)
      local t = {}
      while N > 0 do
        local r = N % 2
        table.insert(t, r)
        N = (N - r) / 2
      end
      return t
    end
    local function sum_digits(t)
      local sum = 0
      for _, v in ipairs(t) do
        sum = sum + v
      end
      return sum
    end
    local t = to_binary(N)
    return sum_digits(t)
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local sum = 0
    local binary = {}
    while N > 0 do
      local remainder = N % 2
      table.insert(binary, remainder)
      N = (N - remainder) / 2
    end
    for i = 1, #binary do
      sum = sum + binary[i]
    end
    return sum
  end
- |2-
    local s = ""
    while N > 0 do
      s = tostring(N % 2) .. s
      N = math.floor(N / 2)
    end
    return s
  end
- |2-
    local sum = 0
    local bin = ""
    while N > 0 do
      local rem = N % 2
      bin = bin .. rem
      N = (N - rem) / 2
    end
    for i = 1, #bin do
      sum = sum + tonumber(bin:sub(i, i))
    end
    return sum
  end
- |2-
      local sum = 0
      local bin = ''
      while N > 0 do
          local r = N % 2
          N = math.floor(N / 2)
          sum = sum + r
          bin = r .. bin
      end
      return sum
  end
- |2-
    local binary = {}
    local i = 1
    while N > 0 do
      binary[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    local result = 0
    for i = 1, #binary do
      result = result + binary[i]
    end
    return result
  end
- |2-
    local t = {}
    local i = 1
    while N > 0 do
      t[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(t)
  end
- |2-
      return N:tobinary()
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local s = ""
    while N > 0 do
      s = tostring(N % 2) .. s
      N = math.floor(N / 2)
    end
    return s
  end
- |2-
    return N:to_binary()
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local function to_binary(N)
          local bin = ""
          while N > 0 do
              bin = bin .. tostring(N % 2)
              N = math.floor(N / 2)
          end
          return bin
      end
      local bin = to_binary(N)
      local sum = 0
      for i = 1, #bin do
          sum = sum + tonumber(bin:sub(i, i))
      end
      return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local result = ''
    local remainder = 0
    while N > 0 do
      remainder = N % 2
      N = math.floor(N / 2)
      result = remainder .. result
    end
    return result
  end
- |2-
    local bin = {}
    local sum = 0
    while N > 0 do
      local rest = N % 2
      sum = sum + rest
      N = (N - rest) / 2
      table.insert(bin, rest)
    end
    return table.concat(bin)
  end
- |2-
    local sum = 0
    local binary = {}
    while N > 0 do
      local remainder = N % 2
      N = (N - remainder) / 2
      table.insert(binary, remainder)
    end
    for i = 1, #binary do
      sum = sum + binary[i]
    end
    return sum
  end
- |2-
    local s = ''
    while N > 0 do
      local r = N % 2
      s = r .. s
      N = (N - r) / 2
    end
    return s
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local result = ''
      while N > 0 do
          local r = N % 2
          result = r .. result
          N = math.floor(N / 2)
      end
      return result
  end
- |2-
    local result = 0
    while N > 0 do
      result = result + N % 2
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
      local res = {}
      while N > 0 do
          table.insert(res, N % 2)
          N = math.floor(N / 2)
      end
      return table.concat(res)
  end
- |2-
    local sum = 0
    local binary = ""
    while N > 0 do
      local remainder = N % 2
      sum = sum + remainder
      binary = remainder .. binary
      N = math.floor(N / 2)
    end
    return sum
  end
- |2-
    local s = ''
    while N > 0 do
      local r = N % 2
      s = r .. s
      N = (N - r) / 2
    end
    return s
  end
- |2-
      local sum = 0
      local binary = ''
      while N > 0 do
          local r = N % 2
          sum = sum + r
          binary = tostring(r) .. binary
          N = (N - r) / 2
      end
      return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local sum = 0
      local binary = {}
      local i = 1
      while N > 0 do
          local remainder = N % 2
          N = (N - remainder) / 2
          binary[i] = remainder
          i = i + 1
      end
      for i = 1, #binary do
          sum = sum + binary[i]
      end
      return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
      local result = ''
      while N > 0 do
          result = tostring(N % 2) .. result
          N = math.floor(N / 2)
      end
      return result
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin):reverse()
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local result = ''
    local remainder = 0
    while N > 0 do
      remainder = N % 2
      N = math.floor(N / 2)
      result = result .. remainder
    end
    return result
  end
- |2-
    local bin = {}
    local sum = 0
    while N > 0 do
      local rest = N % 2
      sum = sum + rest
      N = (N - rest) / 2
      table.insert(bin, rest)
    end
    return table.concat(bin)
  end
- |2-
    local result = ""
    local remainder = 0
    while N > 0 do
      remainder = N % 2
      N = math.floor(N / 2)
      result = remainder .. result
    end
    return result
  end
- |2-
    return N:to_binary()
  end
- |2-
      return N:to_binary()
  end
- |2-
    local result = ''
    local remainder = 0
    repeat
      remainder = N % 2
      N = math.floor(N / 2)
      result = remainder .. result
    until N == 0
    return result
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local rest = N % 2
      sum = sum + rest
      binary = rest .. binary
      N = (N - rest) / 2
    end
    return sum
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local sum = 0
    local bin = {}
    local i = 1
    while N > 0 do
      local rem = N % 2
      bin[i] = rem
      N = (N - rem) / 2
      i = i + 1
    end
    for i = 1, #bin do
      sum = sum + bin[i]
    end
    return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      local rest = math.fmod(N,2)
      bin[i] = rest
      N = (N-rest)/2
      i = i+1
    end
    return table.concat(bin)
  end
- |2-
    local binary = {}
    while N > 0 do
      local rest = N % 2
      table.insert(binary, 1, rest)
      N = (N - rest) / 2
    end
    return table.concat(binary)
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local rest = N % 2
      sum = sum + rest
      binary = tostring(rest) .. binary
      N = (N - rest) / 2
    end
    return tostring(sum)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    local sum = 0
    for i = 1, #bin do
      sum = sum + bin[i]
    end
    return sum
  end
- |2-
    local function to_binary(N)
      local result = ''
      while N > 0 do
        local r = N % 2
        result = r .. result
        N = (N - r) / 2
      end
      return result
    end
    local function sum_digits(str)
      local result = 0
      for i = 1, #str do
        result = result + tonumber(str:sub(i, i))
      end
      return result
    end
    return sum_digits(to_binary(N))
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local result = ''
    local quotient = N
    local remainder = 0
    while quotient > 0 do
      remainder = quotient % 2
      quotient = math.floor(quotient / 2)
      result = remainder .. result
    end
    return result
  end
- |2-
      local bin = ""
      while N > 0 do
          bin = tostring(N % 2) .. bin
          N = math.floor(N / 2)
      end
      return bin
  end
- |2-
    local function to_binary(n)
      local t = {}
      while n > 0 do
        local rest = math.fmod(n,2)
        t[#t+1] = rest
        n = (n-rest)/2
      end
      return table.concat(t):reverse()
    end
    local function sum_digits(s)
      local sum = 0
      for i = 1, #s do
        sum = sum + tonumber(s:sub(i,i))
      end
      return sum
    end
    return sum_digits(to_binary(N))
  end
- |2-
    local s = ''
    while N > 0 do
      local r = N % 2
      s = r .. s
      N = math.floor(N / 2)
    end
    return s
  end
- |2-
    local binary = {}
    local sum = 0
    local i = 0
    while N > 0 do
      binary[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    for i = 0, #binary - 1 do
      sum = sum + binary[i]
    end
    return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local result = ''
    while N > 0 do
      local r = N % 2
      result = result .. tostring(r)
      N = (N - r) / 2
    end
    return result
  end
- |2-
    local result = 0
    local bin = ''
    while N > 0 do
      local rest = N % 2
      bin = bin .. tostring(rest)
      N = (N - rest) / 2
    end
    for i = 1, #bin do
      result = result + tonumber(bin:sub(i, i))
    end
    return tostring(result)
  end
- |2-
      local bin = {}
      while N > 0 do
          table.insert(bin, N % 2)
          N = math.floor(N / 2)
      end
      return table.concat(bin)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = ""
    local sum = 0
    while N > 0 do
      local rest = N % 2
      N = (N - rest) / 2
      bin = bin .. rest
      sum = sum + rest
    end
    return sum
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
      local binary = {}
      local sum = 0
      while N > 0 do
          local remainder = N % 2
          N = (N - remainder) / 2
          table.insert(binary, remainder)
      end
      for i = 1, #binary do
          sum = sum + binary[i]
      end
      return sum
  end
- |2-
      local bin = ""
      while N > 0 do
          local r = N % 2
          bin = r .. bin
          N = (N - r) / 2
      end
      return bin
  end
- |2-
    local bin = {}
    local sum = 0
    while N > 0 do
      local rest = N % 2
      sum = sum + rest
      N = (N - rest) / 2
      table.insert(bin, rest)
    end
    return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local remainder = N % 2
      sum = sum + remainder
      binary = remainder .. binary
      N = math.floor(N / 2)
    end
    return sum
  end
- |2-
    local function to_binary(n)
      local t = {}
      while n > 0 do
        local r = n % 2
        t[#t + 1] = r
        n = (n - r) / 2
      end
      return table.concat(t):reverse()
    end
    local function sum_digits(s)
      local sum = 0
      for i = 1, #s do
        sum = sum + tonumber(s:sub(i, i))
      end
      return sum
    end
    return sum_digits(to_binary(N))
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local r = N % 2
      sum = sum + r
      binary = r .. binary
      N = (N - r) / 2
    end
    return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local s = ''
    while N > 0 do
      s = tostring(N % 2) .. s
      N = math.floor(N / 2)
    end
    return s
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
      local s = ''
      while N > 0 do
          s = tostring(N % 2) .. s
          N = math.floor(N / 2)
      end
      return s
  end
- |2-
      local result = ''
      while N > 0 do
          local r = N % 2
          result = tostring(r) .. result
          N = math.floor(N / 2)
      end
      return result
  end
- |2-
    local result = ''
    while N > 0 do
      local r = N % 2
      result = tostring(r) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local sum = 0
    local bin = ''
    while N > 0 do
      local r = N % 2
      N = (N - r) / 2
      sum = sum + r
      bin = tostring(r) .. bin
    end
    return bin, sum
  end
- |2-
    local res = ""
    while N > 0 do
      local r = N % 2
      res = r .. res
      N = (N - r) / 2
    end
    return res
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local function to_binary(n)
      local function to_binary_iter(n, acc)
        if n == 0 then
          return acc
        else
          return to_binary_iter(math.floor(n / 2), n % 2 .. acc)
        end
      end
      return to_binary_iter(n, "")
    end
    local function sum_digits(n)
      local function sum_digits_iter(n, acc)
        if n == 0 then
          return acc
        else
          return sum_digits_iter(math.floor(n / 10), n % 10 + acc)
        end
      end
      return sum_digits_iter(n, 0)
    end
    local function to_decimal(n)
      local function to_decimal_iter(n, acc)
        if n == 0 then
          return acc
        else
          return to_decimal_iter(math.floor(n / 10), n % 10 + acc * 2)
        end
      end
      return to_decimal_iter(n, 0)
    end
    return to_binary(sum_digits(to_decimal(N)))
  end
- |2-
    local bin = ''
    local sum = 0
    while N > 0 do
      local rem = N % 2
      bin = bin .. rem
      sum = sum + rem
      N = math.floor(N / 2)
    end
    return sum
  end
- |2-
    local result = ''
    while N > 0 do
      result = tostring(N % 2) .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local res = ''
    local n = N
    while n > 0 do
      res = tostring(n % 2) .. res
      n = math.floor(n / 2)
    end
    return res
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local result = ""
      local remainder = 0
      while N > 0 do
          remainder = N % 2
          N = math.floor(N / 2)
          result = remainder .. result
      end
      return result
  end
- |2-
      local bin = string.format("%b", N)
      local sum = 0
      for i = 1, #bin do
          sum = sum + tonumber(bin:sub(i, i))
      end
      return sum
  end
- |2-
    local sum = 0
    local binary = {}
    while N > 0 do
      local remainder = N % 2
      N = (N - remainder) / 2
      table.insert(binary, remainder)
    end
    for i = 1, #binary do
      sum = sum + binary[i]
    end
    return sum
  end
- |2-
    local binary = {}
    local i = 1
    while N > 0 do
      binary[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(binary)
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local remainder = N % 2
      N = math.floor(N / 2)
      binary = remainder .. binary
      sum = sum + remainder
    end
    return sum
  end
- |2-
    local binary = {}
    local i = 1
    while N > 0 do
      binary[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(binary)
  end
- |2-
    local sum = 0
    local bin = ''
    while N > 0 do
      local r = N % 2
      sum = sum + r
      bin = bin .. tostring(r)
      N = math.floor(N / 2)
    end
    return sum
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local function to_binary(N)
          local res = ''
          while N > 0 do
              res = tostring(N % 2) .. res
              N = math.floor(N / 2)
          end
          return res
      end
      local function sum_digits(N)
          local res = 0
          while N > 0 do
              res = res + N % 10
              N = math.floor(N / 10)
          end
          return res
      end
      return tostring(sum_digits(tonumber(to_binary(N))))
  end
- |2-
    local result = ''
    while N > 0 do
      local remainder = N % 2
      result = remainder .. result
      N = math.floor(N / 2)
    end
    return result
  end
- |2-
    local bin = ""
    while N > 0 do
      bin = bin .. tostring(N % 2)
      N = math.floor(N / 2)
    end
    return bin
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local result = ""
    while N > 0 do
      local r = N % 2
      N = math.floor(N / 2)
      result = tostring(r) .. result
    end
    return result
  end
- |2-
    local t = {}
    local i = 1
    while N > 0 do
      local r = N % 2
      t[i] = r
      N = (N - r) / 2
      i = i + 1
    end
    return table.concat(t)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local res = ''
    while N > 0 do
      local r = N % 2
      res = r .. res
      N = (N - r) / 2
    end
    return res
  end
- |2-
    local t = {}
    local i = 0
    while N > 0 do
      i = i + 1
      t[i] = N % 2
      N = math.floor(N / 2)
    end
    return table.concat(t)
  end
- |2-
      local binary = {}
      while N > 0 do
          local rest = N % 2
          table.insert(binary, 1, rest)
          N = (N - rest) / 2
      end
      return table.concat(binary)
  end
- |2-
      local s = ''
      while N > 0 do
          s = tostring(N % 2) .. s
          N = math.floor(N / 2)
      end
      return s
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local bin = string.format("%b", N)
    local sum = 0
    for i = 1, #bin do
      sum = sum + tonumber(bin:sub(i, i))
    end
    return sum
  end
- |2-
      local function toBinary(N)
          local bin = ""
          while N > 0 do
              local rest = N % 2
              bin = bin .. tostring(rest)
              N = (N - rest) / 2
          end
          return bin
      end
      local bin = toBinary(N)
      local sum = 0
      for i = 1, #bin do
          sum = sum + tonumber(bin:sub(i, i))
      end
      return sum
  end
- |2-
      local s = ''
      while N > 0 do
          s = tostring(N % 2) .. s
          N = math.floor(N / 2)
      end
      return s
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local remainder = N % 2
      sum = sum + remainder
      binary = remainder .. binary
      N = math.floor(N / 2)
    end
    return sum
  end
- |2-
      local s = ''
      while N > 0 do
          s = tostring(N % 2) .. s
          N = math.floor(N / 2)
      end
      return s
  end
- |2-
    local sum = 0
    local binary = ''
    while N > 0 do
      local rest = N % 2
      sum = sum + rest
      binary = tostring(rest) .. binary
      N = (N - rest) / 2
    end
    return binary .. ' ' .. tostring(sum)
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
    local b = ''
    while N > 0 do
      b = tostring(N % 2) .. b
      N = math.floor(N / 2)
    end
    return b
  end
- |2-
      local s = ''
      while N > 0 do
          local r = N % 2
          s = r .. s
          N = (N - r) / 2
      end
      return s
  end
- |2-
    local bin = {}
    local i = 1
    while N > 0 do
      bin[i] = N % 2
      N = math.floor(N / 2)
      i = i + 1
    end
    return table.concat(bin)
  end
- |2-
      local binary = {}
      local i = 1
      while N > 0 do
          binary[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(binary)
  end
- |2-
    local res = ''
    while N > 0 do
      res = tostring(N % 2) .. res
      N = math.floor(N / 2)
    end
    return res
  end
- |2-
      local bin = {}
      local i = 1
      while N > 0 do
          bin[i] = N % 2
          N = math.floor(N / 2)
          i = i + 1
      end
      return table.concat(bin)
  end
- |2-
    local result = ''
    while N > 0 do
      local remainder = N % 2
      result = remainder .. result
      N = math.floor(N / 2)
    end
    return result
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
