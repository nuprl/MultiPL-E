name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
  -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "    local t = {}\n    while N > 0 do\n        table.insert(t,\
    \ N % 2)\n        N = math.floor(N / 2)\n    end\n    return table.concat(t)\n\
    end", "  local sum = 0\n  for i = 1, N do\n    sum = sum + i\n  end\n  return\
    \ sum\nend", "  local result = ''\n  while N > 0 do\n    result = tostring(N %\
    \ 2) .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "  local\
    \ sum = 0\n  for i = 1, #N do\n    sum = sum + tonumber(N:sub(i, i))\n  end\n\
    \  return sum\nend", "  local s = ''\n  while N > 0 do\n    s = tostring(N % 2)\
    \ .. s\n    N = math.floor(N / 2)\n  end\n  return s\nend", "  local bin = {}\n\
    \  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n\
    \    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local function to_binary(N)\n\
    \    local binary = {}\n    local i = 0\n    while N > 0 do\n      i = i + 1\n\
    \      binary[i] = N % 2\n      N = math.floor(N / 2)\n    end\n    return binary\n\
    \  end\n  local function sum_digits(binary)\n    local sum = 0\n    for i = 1,\
    \ #binary do\n      sum = sum + binary[i]\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend", "    local bin = {}\n    local i = 1\n    while\
    \ N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i =\
    \ i + 1\n    end\n    return table.concat(bin)\nend", "    local result = ''\n\
    \    local remainder = 0\n    while N > 0 do\n        remainder = N % 2\n    \
    \    N = math.floor(N / 2)\n        result = remainder .. result\n    end\n  \
    \  return result\nend", "  local sum = 0\n  local binary = ''\n  while N > 0 do\n\
    \    local remainder = N % 2\n    sum = sum + remainder\n    binary = remainder\
    \ .. binary\n    N = math.floor(N / 2)\n  end\n  return sum\nend", "  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local result\
    \ = ''\n  while N > 0 do\n    local remainder = N % 2\n    result = remainder\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "  local\
    \ result = ''\n  local remainder = 0\n  while N > 0 do\n    remainder = N % 2\n\
    \    N = math.floor(N / 2)\n    result = remainder .. result\n  end\n  return\
    \ result\nend", "    local res = {}\n    local i = 1\n    while N > 0 do\n   \
    \     res[i] = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n\
    \    return table.concat(res)\nend", "  local sum = 0\n  local binary = {}\n \
    \ while N > 0 do\n    local r = N % 2\n    sum = sum + r\n    table.insert(binary,\
    \ r)\n    N = (N - r) / 2\n  end\n  return sum\nend", "    local sum = 0\n   \
    \ local binary = ''\n    while N > 0 do\n        local remainder = N % 2\n   \
    \     binary = remainder .. binary\n        N = math.floor(N / 2)\n    end\n \
    \   for i = 1, #binary do\n        sum = sum + tonumber(binary:sub(i, i))\n  \
    \  end\n    return sum\nend", "  local bin = {}\n  local i = 1\n  while N > 0\
    \ do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "  local result = ''\n  local remainder = 0\n  while\
    \ N > 0 do\n    remainder = N % 2\n    N = math.floor(N / 2)\n    result = remainder\
    \ .. result\n  end\n  return result\nend", "  return tostring(N):gsub(\".\", function(c)\
    \ return tonumber(c) end):reverse()\nend", "  local bin = {}\n  local i = 1\n\
    \  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i +\
    \ 1\n  end\n  return table.concat(bin)\nend", "  local sum = 0\n  local bin =\
    \ ''\n  while N > 0 do\n    local r = N % 2\n    N = (N - r) / 2\n    sum = sum\
    \ + r\n    bin = r .. bin\n  end\n  return bin\nend", "  local result = \"\"\n\
    \  while N > 0 do\n    local remainder = N % 2\n    result = tostring(remainder)\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "  local\
    \ result = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r)\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "    local\
    \ s = tostring(N)\n    local sum = 0\n    for i = 1, #s do\n        sum = sum\
    \ + tonumber(s:sub(i, i))\n    end\n    return sum\nend", "    local result =\
    \ ''\n    while N > 0 do\n        local remainder = N % 2\n        N = math.floor(N\
    \ / 2)\n        result = tostring(remainder) .. result\n    end\n    return result\n\
    end", "  local sum = 0\n  local binary = ''\n  while N > 0 do\n    local rem =\
    \ N % 2\n    sum = sum + rem\n    binary = tostring(rem) .. binary\n    N = (N\
    \ - rem) / 2\n  end\n  return binary\nend", "    local bin = string.format(\"\
    %b\", N)\n    local sum = 0\n    for i = 1, #bin do\n        sum = sum + tonumber(bin:sub(i,\
    \ i))\n    end\n    return sum\nend", "    local s = ''\n    while N > 0 do\n\
    \        local r = N % 2\n        s = r .. s\n        N = (N - r) / 2\n    end\n\
    \    return s\nend", "  local s = ''\n  local t = {}\n  while N > 0 do\n    local\
    \ r = N % 2\n    N = math.floor(N / 2)\n    table.insert(t, r)\n  end\n  for i\
    \ = #t, 1, -1 do\n    s = s .. t[i]\n  end\n  return s\nend", "  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r) .. result\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend", "  return N:to_binary()\n\
    end", "  local bin = \"\"\n  while N > 0 do\n    local rem = N % 2\n    bin =\
    \ rem .. bin\n    N = (N - rem) / 2\n  end\n  return bin\nend", "  local bin =\
    \ {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local bin =\
    \ string.format(\"%b\", N)\n  local sum = 0\n  for i = 1, #bin do\n    sum = sum\
    \ + tonumber(bin:sub(i, i))\n  end\n  return sum\nend", "    local binary = {}\n\
    \    local i = 1\n    while N > 0 do\n        binary[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(binary)\nend", " \
    \ local sum = 0\n  local bin = \"\"\n  while N > 0 do\n    local r = N % 2\n \
    \   sum = sum + r\n    bin = r .. bin\n    N = (N - r) / 2\n  end\n  return sum\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "    local sum = 0\n    local binary = \"\"\n    while\
    \ N > 0 do\n        local remainder = N % 2\n        sum = sum + remainder\n \
    \       binary = remainder .. binary\n        N = math.floor(N / 2)\n    end\n\
    \    return sum\nend", "  local s = ''\n  while N > 0 do\n    local r = N % 2\n\
    \    s = r .. s\n    N = (N - r) / 2\n  end\n  return s\nend", "    local sum\
    \ = 0\n    local binary = ''\n    while N > 0 do\n        local remainder = N\
    \ % 2\n        sum = sum + remainder\n        binary = remainder .. binary\n \
    \       N = (N - remainder) / 2\n    end\n    return sum\nend", "  local bin =\
    \ {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "    local result\
    \ = {}\n    local i = 1\n    while N > 0 do\n        result[i] = N % 2\n     \
    \   N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(result)\n\
    end", "  local result = ''\n  while N > 0 do\n    local r = N % 2\n    N = math.floor(N\
    \ / 2)\n    result = r .. result\n  end\n  return result\nend", "  local sum =\
    \ 0\n  local b = \"\"\n  while N > 0 do\n    local r = N % 2\n    N = math.floor(N\
    \ / 2)\n    b = r .. b\n    sum = sum + r\n  end\n  return sum\nend", "  local\
    \ sum = 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n\
    \    N = math.floor(N / 2)\n    sum = sum + remainder\n    binary = tostring(remainder)\
    \ .. binary\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #N do\n\
    \    sum = sum + tonumber(N:sub(i, i))\n  end\n  return sum\nend", "    local\
    \ t = {}\n    local i = 1\n    while N > 0 do\n        t[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(t)\n\
    end", "  local s = ''\n  while N > 0 do\n    s = tostring(N % 2) .. s\n    N =\
    \ math.floor(N / 2)\n  end\n  return s\nend", "  local sum = 0\n  local bin =\
    \ {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  for i = 1, #bin do\n    sum = sum + bin[i]\n \
    \ end\n  return sum\nend", "    local bin = {}\n    local i = 1\n    while N >\
    \ 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i +\
    \ 1\n    end\n    return table.concat(bin)\nend", "    local bin = {}\n    local\
    \ i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "    local\
    \ bin = string.format(\"%b\", N)\n    local sum = 0\n    for i = 1, #bin do\n\
    \        sum = sum + tonumber(bin:sub(i, i))\n    end\n    return sum\nend", " \
    \ local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N =\
    \ math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", " \
    \ local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N =\
    \ math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", " \
    \ local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N =\
    \ math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", " \
    \   local s = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n     \
    \   N = math.floor(N / 2)\n    end\n    return s\nend", "  local result = ''\n\
    \  while N > 0 do\n    local r = N % 2\n    result = result .. tostring(r)\n \
    \   N = math.floor(N / 2)\n  end\n  return result\nend", "  local bin = {}\n \
    \ local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n\
    \    i = i + 1\n  end\n  return table.concat(bin)\nend", "    local result = ''\n\
    \    while N > 0 do\n        result = tostring(N % 2) .. result\n        N = math.floor(N\
    \ / 2)\n    end\n    return result\nend", "  local bin = {}\n  while N > 0 do\n\
    \    table.insert(bin, N % 2)\n    N = math.floor(N / 2)\n  end\n  return table.concat(bin):reverse()\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "  local t = {}\n  while N > 0 do\n    local r = N % 2\n    N = (N - r)\
    \ / 2\n    table.insert(t, r)\n  end\n  return table.concat(t)\nend", "    local\
    \ function to_binary(n)\n        local t = {}\n        while n > 0 do\n      \
    \      local rest = math.fmod(n, 2)\n            t[#t+1] = rest\n            n\
    \ = (n-rest) / 2\n        end\n        return table.concat(t):reverse()\n    end\n\
    \    local function sum_digits(n)\n        local sum = 0\n        while n > 0\
    \ do\n            local rest = math.fmod(n, 10)\n            sum = sum + rest\n\
    \            n = (n-rest) / 10\n        end\n        return sum\n    end\n   \
    \ return sum_digits(tonumber(to_binary(N)))\nend", "  local sum = 0\n  local binary\
    \ = {}\n  local i = 1\n  while N > 0 do\n    local remainder = N % 2\n    binary[i]\
    \ = remainder\n    N = (N - remainder) / 2\n    i = i + 1\n  end\n  for i = 1,\
    \ #binary do\n    sum = sum + binary[i]\n  end\n  return sum\nend", "  local function\
    \ to_binary(N)\n    local bin = \"\"\n    while N > 0 do\n      local rest = N\
    \ % 2\n      bin = rest .. bin\n      N = (N - rest) / 2\n    end\n    return\
    \ bin\n  end\n  local function sum_digits(bin)\n    local sum = 0\n    for i =\
    \ 1, #bin do\n      sum = sum + tonumber(bin:sub(i, i))\n    end\n    return sum\n\
    \  end\n  return sum_digits(to_binary(N))\nend", "  local bin = {}\n  local i\
    \ = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i\
    \ = i + 1\n  end\n  return table.concat(bin)\nend", "  local s = ''\n  while N\
    \ > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n  end\n  return\
    \ s\nend", "  local sum = 0\n  local bin = ''\n  while N > 0 do\n    local r =\
    \ N % 2\n    sum = sum + r\n    bin = r .. bin\n    N = (N - r) / 2\n  end\n \
    \ return sum\nend", "    local bin = {}\n    local i = 1\n    while N > 0 do\n\
    \        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n  \
    \  end\n    return table.concat(bin)\nend", "  local sum = 0\n  while N > 0 do\n\
    \    sum = sum + N % 2\n    N = math.floor(N / 2)\n  end\n  return sum\nend",
  "  local function to_binary(N)\n    local t = {}\n    while N > 0 do\n      local\
    \ r = N % 2\n      table.insert(t, r)\n      N = (N - r) / 2\n    end\n    return\
    \ t\n  end\n  local function sum_digits(t)\n    local sum = 0\n    for _, v in\
    \ ipairs(t) do\n      sum = sum + v\n    end\n    return sum\n  end\n  local t\
    \ = to_binary(N)\n  return sum_digits(t)\nend", "  local result = ''\n  while\
    \ N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N / 2)\n\
    \  end\n  return result\nend", "  local sum = 0\n  local binary = {}\n  while\
    \ N > 0 do\n    local remainder = N % 2\n    table.insert(binary, remainder)\n\
    \    N = (N - remainder) / 2\n  end\n  for i = 1, #binary do\n    sum = sum +\
    \ binary[i]\n  end\n  return sum\nend", "  local s = \"\"\n  while N > 0 do\n\
    \    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n  end\n  return s\n\
    end", "  local sum = 0\n  local bin = \"\"\n  while N > 0 do\n    local rem =\
    \ N % 2\n    bin = bin .. rem\n    N = (N - rem) / 2\n  end\n  for i = 1, #bin\
    \ do\n    sum = sum + tonumber(bin:sub(i, i))\n  end\n  return sum\nend", "  \
    \  local sum = 0\n    local bin = ''\n    while N > 0 do\n        local r = N\
    \ % 2\n        N = math.floor(N / 2)\n        sum = sum + r\n        bin = r ..\
    \ bin\n    end\n    return sum\nend", "  local binary = {}\n  local i = 1\n  while\
    \ N > 0 do\n    binary[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n\
    \  end\n  local result = 0\n  for i = 1, #binary do\n    result = result + binary[i]\n\
    \  end\n  return result\nend", "  local t = {}\n  local i = 1\n  while N > 0 do\n\
    \    t[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(t)\n\
    end", "    return N:tobinary()\nend", "  local result = ''\n  while N > 0 do\n\
    \    result = tostring(N % 2) .. result\n    N = math.floor(N / 2)\n  end\n  return\
    \ result\nend", "  local s = \"\"\n  while N > 0 do\n    s = tostring(N % 2) ..\
    \ s\n    N = math.floor(N / 2)\n  end\n  return s\nend", "  return N:to_binary()\n\
    end", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local function to_binary(N)\n        local bin = \"\"\n        while\
    \ N > 0 do\n            bin = bin .. tostring(N % 2)\n            N = math.floor(N\
    \ / 2)\n        end\n        return bin\n    end\n    local bin = to_binary(N)\n\
    \    local sum = 0\n    for i = 1, #bin do\n        sum = sum + tonumber(bin:sub(i,\
    \ i))\n    end\n    return sum\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local result = ''\n  local remainder = 0\n\
    \  while N > 0 do\n    remainder = N % 2\n    N = math.floor(N / 2)\n    result\
    \ = remainder .. result\n  end\n  return result\nend", "  local bin = {}\n  local\
    \ sum = 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n  \
    \  N = (N - rest) / 2\n    table.insert(bin, rest)\n  end\n  return table.concat(bin)\n\
    end", "  local sum = 0\n  local binary = {}\n  while N > 0 do\n    local remainder\
    \ = N % 2\n    N = (N - remainder) / 2\n    table.insert(binary, remainder)\n\
    \  end\n  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n  return sum\n\
    end", "  local s = ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n\
    \    N = (N - r) / 2\n  end\n  return s\nend", "  local bin = {}\n  local i =\
    \ 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i =\
    \ i + 1\n  end\n  return table.concat(bin)\nend", "    local result = ''\n   \
    \ while N > 0 do\n        local r = N % 2\n        result = r .. result\n    \
    \    N = math.floor(N / 2)\n    end\n    return result\nend", "  local result\
    \ = 0\n  while N > 0 do\n    result = result + N % 2\n    N = math.floor(N / 2)\n\
    \  end\n  return result\nend", "    local res = {}\n    while N > 0 do\n     \
    \   table.insert(res, N % 2)\n        N = math.floor(N / 2)\n    end\n    return\
    \ table.concat(res)\nend", "  local sum = 0\n  local binary = \"\"\n  while N\
    \ > 0 do\n    local remainder = N % 2\n    sum = sum + remainder\n    binary =\
    \ remainder .. binary\n    N = math.floor(N / 2)\n  end\n  return sum\nend", " \
    \ local s = ''\n  while N > 0 do\n    local r = N % 2\n    s = r .. s\n    N =\
    \ (N - r) / 2\n  end\n  return s\nend", "    local sum = 0\n    local binary =\
    \ ''\n    while N > 0 do\n        local r = N % 2\n        sum = sum + r\n   \
    \     binary = tostring(r) .. binary\n        N = (N - r) / 2\n    end\n    return\
    \ sum\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] =\
    \ N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local sum = 0\n    local binary = {}\n    local i = 1\n    while N\
    \ > 0 do\n        local remainder = N % 2\n        N = (N - remainder) / 2\n \
    \       binary[i] = remainder\n        i = i + 1\n    end\n    for i = 1, #binary\
    \ do\n        sum = sum + binary[i]\n    end\n    return sum\nend", "  local bin\
    \ = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local result\
    \ = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N\
    \ / 2)\n  end\n  return result\nend", "    local result = ''\n    while N > 0\
    \ do\n        result = tostring(N % 2) .. result\n        N = math.floor(N / 2)\n\
    \    end\n    return result\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N\
    \ > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin):reverse()\nend", "  local result = ''\n  while N >\
    \ 0 do\n    result = tostring(N % 2) .. result\n    N = math.floor(N / 2)\n  end\n\
    \  return result\nend", "  local result = ''\n  local remainder = 0\n  while N\
    \ > 0 do\n    remainder = N % 2\n    N = math.floor(N / 2)\n    result = result\
    \ .. remainder\n  end\n  return result\nend", "  local bin = {}\n  local sum =\
    \ 0\n  while N > 0 do\n    local rest = N % 2\n    sum = sum + rest\n    N = (N\
    \ - rest) / 2\n    table.insert(bin, rest)\n  end\n  return table.concat(bin)\n\
    end", "  local result = \"\"\n  local remainder = 0\n  while N > 0 do\n    remainder\
    \ = N % 2\n    N = math.floor(N / 2)\n    result = remainder .. result\n  end\n\
    \  return result\nend", "  return N:to_binary()\nend", "    return N:to_binary()\n\
    end", "  local result = ''\n  local remainder = 0\n  repeat\n    remainder = N\
    \ % 2\n    N = math.floor(N / 2)\n    result = remainder .. result\n  until N\
    \ == 0\n  return result\nend", "  local bin = {}\n  local i = 1\n  while N > 0\
    \ do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "  local sum = 0\n  local binary = ''\n  while N >\
    \ 0 do\n    local rest = N % 2\n    sum = sum + rest\n    binary = rest .. binary\n\
    \    N = (N - rest) / 2\n  end\n  return sum\nend", "    local bin = {}\n    local\
    \ i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "  local\
    \ sum = 0\n  local bin = {}\n  local i = 1\n  while N > 0 do\n    local rem =\
    \ N % 2\n    bin[i] = rem\n    N = (N - rem) / 2\n    i = i + 1\n  end\n  for\
    \ i = 1, #bin do\n    sum = sum + bin[i]\n  end\n  return sum\nend", "  local\
    \ bin = {}\n  local i = 1\n  while N > 0 do\n    local rest = math.fmod(N,2)\n\
    \    bin[i] = rest\n    N = (N-rest)/2\n    i = i+1\n  end\n  return table.concat(bin)\n\
    end", "  local binary = {}\n  while N > 0 do\n    local rest = N % 2\n    table.insert(binary,\
    \ 1, rest)\n    N = (N - rest) / 2\n  end\n  return table.concat(binary)\nend",
  "  local sum = 0\n  local binary = ''\n  while N > 0 do\n    local rest = N % 2\n\
    \    sum = sum + rest\n    binary = tostring(rest) .. binary\n    N = (N - rest)\
    \ / 2\n  end\n  return tostring(sum)\nend", "  local bin = {}\n  local i = 1\n\
    \  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i +\
    \ 1\n  end\n  local sum = 0\n  for i = 1, #bin do\n    sum = sum + bin[i]\n  end\n\
    \  return sum\nend", "  local function to_binary(N)\n    local result = ''\n \
    \   while N > 0 do\n      local r = N % 2\n      result = r .. result\n      N\
    \ = (N - r) / 2\n    end\n    return result\n  end\n  local function sum_digits(str)\n\
    \    local result = 0\n    for i = 1, #str do\n      result = result + tonumber(str:sub(i,\
    \ i))\n    end\n    return result\n  end\n  return sum_digits(to_binary(N))\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n\
    \    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "    local bin = {}\n    local i = 1\n    while N >\
    \ 0 do\n        bin[i] = N % 2\n        N = math.floor(N / 2)\n        i = i +\
    \ 1\n    end\n    return table.concat(bin)\nend", "  local result = ''\n  local\
    \ quotient = N\n  local remainder = 0\n  while quotient > 0 do\n    remainder\
    \ = quotient % 2\n    quotient = math.floor(quotient / 2)\n    result = remainder\
    \ .. result\n  end\n  return result\nend", "    local bin = \"\"\n    while N\
    \ > 0 do\n        bin = tostring(N % 2) .. bin\n        N = math.floor(N / 2)\n\
    \    end\n    return bin\nend", "  local function to_binary(n)\n    local t =\
    \ {}\n    while n > 0 do\n      local rest = math.fmod(n,2)\n      t[#t+1] = rest\n\
    \      n = (n-rest)/2\n    end\n    return table.concat(t):reverse()\n  end\n\
    \  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n   \
    \   sum = sum + tonumber(s:sub(i,i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend", "  local s = ''\n  while N > 0 do\n    local\
    \ r = N % 2\n    s = r .. s\n    N = math.floor(N / 2)\n  end\n  return s\nend",
  "  local binary = {}\n  local sum = 0\n  local i = 0\n  while N > 0 do\n    binary[i]\
    \ = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  for i = 0, #binary\
    \ - 1 do\n    sum = sum + binary[i]\n  end\n  return sum\nend", "  local bin =\
    \ {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local result\
    \ = ''\n  while N > 0 do\n    local r = N % 2\n    result = result .. tostring(r)\n\
    \    N = (N - r) / 2\n  end\n  return result\nend", "  local result = 0\n  local\
    \ bin = ''\n  while N > 0 do\n    local rest = N % 2\n    bin = bin .. tostring(rest)\n\
    \    N = (N - rest) / 2\n  end\n  for i = 1, #bin do\n    result = result + tonumber(bin:sub(i,\
    \ i))\n  end\n  return tostring(result)\nend", "    local bin = {}\n    while\
    \ N > 0 do\n        table.insert(bin, N % 2)\n        N = math.floor(N / 2)\n\
    \    end\n    return table.concat(bin)\nend", "  local bin = {}\n  local i = 1\n\
    \  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i +\
    \ 1\n  end\n  return table.concat(bin)\nend", "  local bin = \"\"\n  local sum\
    \ = 0\n  while N > 0 do\n    local rest = N % 2\n    N = (N - rest) / 2\n    bin\
    \ = bin .. rest\n    sum = sum + rest\n  end\n  return sum\nend", "    local bin\
    \ = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N\
    \ = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end", "    local binary = {}\n    local sum = 0\n    while N > 0 do\n        local\
    \ remainder = N % 2\n        N = (N - remainder) / 2\n        table.insert(binary,\
    \ remainder)\n    end\n    for i = 1, #binary do\n        sum = sum + binary[i]\n\
    \    end\n    return sum\nend", "    local bin = \"\"\n    while N > 0 do\n  \
    \      local r = N % 2\n        bin = r .. bin\n        N = (N - r) / 2\n    end\n\
    \    return bin\nend", "  local bin = {}\n  local sum = 0\n  while N > 0 do\n\
    \    local rest = N % 2\n    sum = sum + rest\n    N = (N - rest) / 2\n    table.insert(bin,\
    \ rest)\n  end\n  return sum\nend", "  local bin = {}\n  local i = 1\n  while\
    \ N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n\
    \  return table.concat(bin)\nend", "  local sum = 0\n  local binary = ''\n  while\
    \ N > 0 do\n    local remainder = N % 2\n    sum = sum + remainder\n    binary\
    \ = remainder .. binary\n    N = math.floor(N / 2)\n  end\n  return sum\nend",
  "  local function to_binary(n)\n    local t = {}\n    while n > 0 do\n      local\
    \ r = n % 2\n      t[#t + 1] = r\n      n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\n\
    \  end\n  local function sum_digits(s)\n    local sum = 0\n    for i = 1, #s do\n\
    \      sum = sum + tonumber(s:sub(i, i))\n    end\n    return sum\n  end\n  return\
    \ sum_digits(to_binary(N))\nend", "  local sum = 0\n  local binary = ''\n  while\
    \ N > 0 do\n    local r = N % 2\n    sum = sum + r\n    binary = r .. binary\n\
    \    N = (N - r) / 2\n  end\n  return sum\nend", "  local bin = {}\n  local i\
    \ = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i\
    \ = i + 1\n  end\n  return table.concat(bin)\nend", "  local s = ''\n  while N\
    \ > 0 do\n    s = tostring(N % 2) .. s\n    N = math.floor(N / 2)\n  end\n  return\
    \ s\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N\
    \ % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(bin)\nend", "  local result = ''\n  while N > 0 do\n    result\
    \ = tostring(N % 2) .. result\n    N = math.floor(N / 2)\n  end\n  return result\n\
    end", "    local s = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n\
    \        N = math.floor(N / 2)\n    end\n    return s\nend", "    local result\
    \ = ''\n    while N > 0 do\n        local r = N % 2\n        result = tostring(r)\
    \ .. result\n        N = math.floor(N / 2)\n    end\n    return result\nend",
  "  local result = ''\n  while N > 0 do\n    local r = N % 2\n    result = tostring(r)\
    \ .. result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "    local\
    \ bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n    \
    \    N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end", "  local sum = 0\n  local bin = ''\n  while N > 0 do\n    local r = N %\
    \ 2\n    N = (N - r) / 2\n    sum = sum + r\n    bin = tostring(r) .. bin\n  end\n\
    \  return bin, sum\nend", "  local res = \"\"\n  while N > 0 do\n    local r =\
    \ N % 2\n    res = r .. res\n    N = (N - r) / 2\n  end\n  return res\nend", " \
    \ local result = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n\
    \    N = math.floor(N / 2)\n  end\n  return result\nend", "    local bin = {}\n\
    \    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "  local\
    \ result = ''\n  while N > 0 do\n    result = tostring(N % 2) .. result\n    N\
    \ = math.floor(N / 2)\n  end\n  return result\nend", "  local function to_binary(n)\n\
    \    local function to_binary_iter(n, acc)\n      if n == 0 then\n        return\
    \ acc\n      else\n        return to_binary_iter(math.floor(n / 2), n % 2 .. acc)\n\
    \      end\n    end\n    return to_binary_iter(n, \"\")\n  end\n  local function\
    \ sum_digits(n)\n    local function sum_digits_iter(n, acc)\n      if n == 0 then\n\
    \        return acc\n      else\n        return sum_digits_iter(math.floor(n /\
    \ 10), n % 10 + acc)\n      end\n    end\n    return sum_digits_iter(n, 0)\n \
    \ end\n  local function to_decimal(n)\n    local function to_decimal_iter(n, acc)\n\
    \      if n == 0 then\n        return acc\n      else\n        return to_decimal_iter(math.floor(n\
    \ / 10), n % 10 + acc * 2)\n      end\n    end\n    return to_decimal_iter(n,\
    \ 0)\n  end\n  return to_binary(sum_digits(to_decimal(N)))\nend", "  local bin\
    \ = ''\n  local sum = 0\n  while N > 0 do\n    local rem = N % 2\n    bin = bin\
    \ .. rem\n    sum = sum + rem\n    N = math.floor(N / 2)\n  end\n  return sum\n\
    end", "  local result = ''\n  while N > 0 do\n    result = tostring(N % 2) ..\
    \ result\n    N = math.floor(N / 2)\n  end\n  return result\nend", "  local res\
    \ = ''\n  local n = N\n  while n > 0 do\n    res = tostring(n % 2) .. res\n  \
    \  n = math.floor(n / 2)\n  end\n  return res\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "    local result = \"\"\
    \n    local remainder = 0\n    while N > 0 do\n        remainder = N % 2\n   \
    \     N = math.floor(N / 2)\n        result = remainder .. result\n    end\n \
    \   return result\nend", "    local bin = string.format(\"%b\", N)\n    local\
    \ sum = 0\n    for i = 1, #bin do\n        sum = sum + tonumber(bin:sub(i, i))\n\
    \    end\n    return sum\nend", "  local sum = 0\n  local binary = {}\n  while\
    \ N > 0 do\n    local remainder = N % 2\n    N = (N - remainder) / 2\n    table.insert(binary,\
    \ remainder)\n  end\n  for i = 1, #binary do\n    sum = sum + binary[i]\n  end\n\
    \  return sum\nend", "  local binary = {}\n  local i = 1\n  while N > 0 do\n \
    \   binary[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(binary)\nend", "  local sum = 0\n  local binary = ''\n  while N\
    \ > 0 do\n    local remainder = N % 2\n    N = math.floor(N / 2)\n    binary =\
    \ remainder .. binary\n    sum = sum + remainder\n  end\n  return sum\nend", " \
    \ local binary = {}\n  local i = 1\n  while N > 0 do\n    binary[i] = N % 2\n\
    \    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(binary)\n\
    end", "  local sum = 0\n  local bin = ''\n  while N > 0 do\n    local r = N %\
    \ 2\n    sum = sum + r\n    bin = bin .. tostring(r)\n    N = math.floor(N / 2)\n\
    \  end\n  return sum\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n\
    \    bin[i] = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return\
    \ table.concat(bin)\nend", "    local function to_binary(N)\n        local res\
    \ = ''\n        while N > 0 do\n            res = tostring(N % 2) .. res\n   \
    \         N = math.floor(N / 2)\n        end\n        return res\n    end\n  \
    \  local function sum_digits(N)\n        local res = 0\n        while N > 0 do\n\
    \            res = res + N % 10\n            N = math.floor(N / 10)\n        end\n\
    \        return res\n    end\n    return tostring(sum_digits(tonumber(to_binary(N))))\n\
    end", "  local result = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  result = remainder .. result\n    N = math.floor(N / 2)\n  end\n  return result\n\
    end", "  local bin = \"\"\n  while N > 0 do\n    bin = bin .. tostring(N % 2)\n\
    \    N = math.floor(N / 2)\n  end\n  return bin\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "    local bin = {}\n  \
    \  local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n        N = math.floor(N\
    \ / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\nend", "  local\
    \ result = \"\"\n  while N > 0 do\n    local r = N % 2\n    N = math.floor(N /\
    \ 2)\n    result = tostring(r) .. result\n  end\n  return result\nend", "  local\
    \ t = {}\n  local i = 1\n  while N > 0 do\n    local r = N % 2\n    t[i] = r\n\
    \    N = (N - r) / 2\n    i = i + 1\n  end\n  return table.concat(t)\nend", " \
    \ local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N =\
    \ math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", " \
    \ local res = ''\n  while N > 0 do\n    local r = N % 2\n    res = r .. res\n\
    \    N = (N - r) / 2\n  end\n  return res\nend", "  local t = {}\n  local i =\
    \ 0\n  while N > 0 do\n    i = i + 1\n    t[i] = N % 2\n    N = math.floor(N /\
    \ 2)\n  end\n  return table.concat(t)\nend", "    local binary = {}\n    while\
    \ N > 0 do\n        local rest = N % 2\n        table.insert(binary, 1, rest)\n\
    \        N = (N - rest) / 2\n    end\n    return table.concat(binary)\nend", " \
    \   local s = ''\n    while N > 0 do\n        s = tostring(N % 2) .. s\n     \
    \   N = math.floor(N / 2)\n    end\n    return s\nend", "  local bin = {}\n  local\
    \ i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N / 2)\n   \
    \ i = i + 1\n  end\n  return table.concat(bin)\nend", "  local bin = string.format(\"\
    %b\", N)\n  local sum = 0\n  for i = 1, #bin do\n    sum = sum + tonumber(bin:sub(i,\
    \ i))\n  end\n  return sum\nend", "    local function toBinary(N)\n        local\
    \ bin = \"\"\n        while N > 0 do\n            local rest = N % 2\n       \
    \     bin = bin .. tostring(rest)\n            N = (N - rest) / 2\n        end\n\
    \        return bin\n    end\n    local bin = toBinary(N)\n    local sum = 0\n\
    \    for i = 1, #bin do\n        sum = sum + tonumber(bin:sub(i, i))\n    end\n\
    \    return sum\nend", "    local s = ''\n    while N > 0 do\n        s = tostring(N\
    \ % 2) .. s\n        N = math.floor(N / 2)\n    end\n    return s\nend", "  local\
    \ bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N = math.floor(N\
    \ / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", "  local sum =\
    \ 0\n  local binary = ''\n  while N > 0 do\n    local remainder = N % 2\n    sum\
    \ = sum + remainder\n    binary = remainder .. binary\n    N = math.floor(N /\
    \ 2)\n  end\n  return sum\nend", "    local s = ''\n    while N > 0 do\n     \
    \   s = tostring(N % 2) .. s\n        N = math.floor(N / 2)\n    end\n    return\
    \ s\nend", "  local sum = 0\n  local binary = ''\n  while N > 0 do\n    local\
    \ rest = N % 2\n    sum = sum + rest\n    binary = tostring(rest) .. binary\n\
    \    N = (N - rest) / 2\n  end\n  return binary .. ' ' .. tostring(sum)\nend",
  "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i] = N % 2\n    N =\
    \ math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\nend", " \
    \ local b = ''\n  while N > 0 do\n    b = tostring(N % 2) .. b\n    N = math.floor(N\
    \ / 2)\n  end\n  return b\nend", "    local s = ''\n    while N > 0 do\n     \
    \   local r = N % 2\n        s = r .. s\n        N = (N - r) / 2\n    end\n  \
    \  return s\nend", "  local bin = {}\n  local i = 1\n  while N > 0 do\n    bin[i]\
    \ = N % 2\n    N = math.floor(N / 2)\n    i = i + 1\n  end\n  return table.concat(bin)\n\
    end", "    local binary = {}\n    local i = 1\n    while N > 0 do\n        binary[i]\
    \ = N % 2\n        N = math.floor(N / 2)\n        i = i + 1\n    end\n    return\
    \ table.concat(binary)\nend", "  local res = ''\n  while N > 0 do\n    res = tostring(N\
    \ % 2) .. res\n    N = math.floor(N / 2)\n  end\n  return res\nend", "    local\
    \ bin = {}\n    local i = 1\n    while N > 0 do\n        bin[i] = N % 2\n    \
    \    N = math.floor(N / 2)\n        i = i + 1\n    end\n    return table.concat(bin)\n\
    end", "  local result = ''\n  while N > 0 do\n    local remainder = N % 2\n  \
    \  result = remainder .. result\n    N = math.floor(N / 2)\n  end\n  return result\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
