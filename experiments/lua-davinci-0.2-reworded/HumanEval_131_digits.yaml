---
name: HumanEval_131_digits
language: lua
prompt: |
  -- Given a positive integer n, return the product of the odd digits.
  -- Return 0 if all digits are even.
  -- For example:
  -- >>> digits(1)
  -- 1
  -- >>> digits(4)
  -- 0
  -- >>> digits(235)
  -- 15
  local function digits(n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = digits
      lu.assertEquals(candidate(5), 5)
      lu.assertEquals(candidate(54), 5)
      lu.assertEquals(candidate(120), 1)
      lu.assertEquals(candidate(5014), 5)
      lu.assertEquals(candidate(98765), 315)
      lu.assertEquals(candidate(5576543), 2625)
      lu.assertEquals(candidate(2468), 0)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = (n - digit) / 10
      end
      return product
  end
- |2-
      local r = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              r = r * d
          end
          n = math.floor(n / 10)
      end
      return r
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = (n - digit) / 10
      end
      return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = math.floor(n / 10)
      end
      return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = math.floor(n / 10)
    end
    return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- "\tlocal result = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit %
  2 == 1 then\n\t\t\tresult = result * digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn
  result\nend"
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local r = 1
      while n > 0 do
          local d = n % 10
          if d % 2 ~= 0 then
              r = r * d
          end
          n = math.floor(n / 10)
      end
      return r
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = (n - digit) / 10
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- "\tlocal product = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit %
  2 == 1 then\n\t\t\tproduct = product * digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn
  product\nend"
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = math.floor(n / 10)
      end
      return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = (n - digit) / 10
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local sum = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        sum = sum * d
      end
      n = math.floor(n / 10)
    end
    return sum
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local total = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        total = total * digit
      end
      n = math.floor(n / 10)
    end
    return total
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = (n - digit) / 10
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              product = product * d
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local prod = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              prod = prod * d
          end
          n = math.floor(n / 10)
      end
      return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = math.floor(n / 10)
      end
      return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = (n - digit) / 10
      end
      return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local res = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        res = res * d
      end
      n = math.floor(n / 10)
    end
    return res
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = (n - digit) / 10
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = math.floor(n / 10)
    end
    return prod
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = math.floor(n / 10)
    end
    return prod
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    if n == 0 then return 0 end
    local d = n % 10
    if d % 2 == 0 then
      return digits(n // 10)
    else
      return d * digits(n // 10)
    end
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local p = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        p = p * d
      end
      n = math.floor(n / 10)
    end
    return p
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = math.floor(n / 10)
      end
      return result
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
      local sum = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              sum = sum * d
          end
          n = math.floor(n / 10)
      end
      return sum
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = math.floor(n / 10)
    end
    return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local prod = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              prod = prod * d
          end
          n = (n - d) / 10
      end
      return prod
  end
- |2-
    local result = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        result = result * d
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = (n - digit) / 10
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local prod = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              prod = prod * d
          end
          n = math.floor(n / 10)
      end
      return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local p = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        p = p * d
      end
      n = math.floor(n / 10)
    end
    return p
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = (n - digit) / 10
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        result = result * d
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local prod = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              prod = prod * d
          end
          n = math.floor(n / 10)
      end
      return prod
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = math.floor(n / 10)
      end
      return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = math.floor(n / 10)
      end
      return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local result = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              result = result * digit
          end
          n = math.floor(n / 10)
      end
      return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local p = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        p = p * d
      end
      n = math.floor(n / 10)
    end
    return p
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = (n - digit) / 10
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        product = product * d
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = (n - digit) / 10
      end
      return product
  end
- |2-
    local p = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        p = p * d
      end
      n = math.floor(n / 10)
    end
    return p
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = (n - d) / 10
    end
    return prod
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = math.floor(n / 10)
    end
    return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = math.floor(n / 10)
    end
    return result
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local p = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        p = p * d
      end
      n = math.floor(n / 10)
    end
    return p
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = math.floor(n / 10)
    end
    return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local prod = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              prod = prod * d
          end
          n = math.floor(n / 10)
      end
      return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = (n - d) / 10
    end
    return prod
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local result = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        result = result * digit
      end
      n = (n - digit) / 10
    end
    return result
  end
- |2-
    local prod = 1
    while n > 0 do
      local d = n % 10
      if d % 2 == 1 then
        prod = prod * d
      end
      n = math.floor(n / 10)
    end
    return prod
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
    local product = 1
    while n > 0 do
      local digit = n % 10
      if digit % 2 == 1 then
        product = product * digit
      end
      n = math.floor(n / 10)
    end
    return product
  end
- |2-
      local p = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              p = p * d
          end
          n = (n - d) / 10
      end
      return p
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local d = n % 10
          if d % 2 == 1 then
              product = product * d
          end
          n = (n - d) / 10
      end
      return product
  end
- |2-
      local product = 1
      while n > 0 do
          local digit = n % 10
          if digit % 2 == 1 then
              product = product * digit
          end
          n = math.floor(n / 10)
      end
      return product
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
