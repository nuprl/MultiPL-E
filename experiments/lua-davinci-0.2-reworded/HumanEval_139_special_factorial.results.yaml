---
language: lua
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmbobtd0.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpxmbobtd0.lua:12:
    in local 'candidate'\n\t/tmp/tmpxmbobtd0.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2y1jsxy.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu2y1jsxy.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vim_dig.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmp8vim_dig.lua:12:
    in local 'candidate'\n\t/tmp/tmp8vim_dig.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpib4jhwqw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpib4jhwqw.lua:12:
    in local 'candidate'\n\t/tmp/tmpib4jhwqw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8pbb1n9v.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmp8pbb1n9v.lua:12:
    in local 'candidate'\n\t/tmp/tmp8pbb1n9v.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptrjya_0v.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmptrjya_0v.lua:12:
    in local 'candidate'\n\t/tmp/tmptrjya_0v.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lc4pblt.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp5lc4pblt.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1zxby1d.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpy1zxby1d.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bdhi84w.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmp9bdhi84w.lua:12:
    in local 'candidate'\n\t/tmp/tmp9bdhi84w.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lic3p73.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmp9lic3p73.lua:12:
    in local 'candidate'\n\t/tmp/tmp9lic3p73.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_ckwb4q.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpx_ckwb4q.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi029ro5d.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpi029ro5d.lua:12:
    in local 'candidate'\n\t/tmp/tmpi029ro5d.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local factorial = 1
        for i = n, 1, -1 do
            factorial = factorial * i
        end
        return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfi9xyd65.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfi9xyd65.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptrjya_0v.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmptrjya_0v.lua:12:
    in local 'candidate'\n\t/tmp/tmptrjya_0v.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- Your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm2nmrm7.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpjm2nmrm7.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local factorial = 1
        for i = 1, n do
            factorial = factorial * i
        end
        return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42bqacd0.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp42bqacd0.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function.
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqh28i8z.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpsqh28i8z.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        if n == 0 then
            return 1
        else
            return n * special_factorial(n - 1)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yx1bous.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_yx1bous.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: implement the function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoipc0f01.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoipc0f01.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n < 0 then
        return nil
      end
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxur1bpzx.lua:23:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxur1bpzx.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        if n == 0 then
            return 1
        else
            return n * special_factorial(n - 1)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yx1bous.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_yx1bous.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        if n == 0 then
            return 1
        else
            return n * special_factorial(n - 1)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yx1bous.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_yx1bous.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        if n == 0 then
            return 1
        else
            return n * special_factorial(n - 1)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yx1bous.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_yx1bous.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9r22em.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9p9r22em.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = n, 1, -1 do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqirrxnq.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptqirrxnq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * factorial(i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq0rvmgw.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpwq0rvmgw.lua:12:
    in local 'candidate'\n\t/tmp/tmpwq0rvmgw.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe6djnk4.lua:16:
    expected: 288, actual: nil\nstack traceback:\n\t/tmp/tmpoe6djnk4.lua:16: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      if n == 0 then
        return 1
      else
        return n * special_factorial(n - 1)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea9kxqru.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpea9kxqru.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * i
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ite7gs3.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp0ite7gs3.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local factorial = 1
        for i = 1, n do
            factorial = factorial * i
        end
        return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42bqacd0.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp42bqacd0.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = n, 1, -1 do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuehv3an.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfuehv3an.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        local result = 1
        for i = 1, n do
            result = result * i
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpweu86ucw.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpweu86ucw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        if n == 0 then
            return 1
        else
            return n * special_factorial(n - 1)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yx1bous.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_yx1bous.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local factorial = 1
      for i = 1, n do
        factorial = factorial * i
      end
      return factorial
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu390mves.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpu390mves.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
        if n == 0 then
            return 1
        else
            return n * special_factorial(n - 1)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yx1bous.lua:20:
    expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_yx1bous.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = 1, n do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf2_hcj9.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpdf2_hcj9.lua:12:
    in local 'candidate'\n\t/tmp/tmpdf2_hcj9.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: |-
    -- The Brazilian factorial is defined as:
    -- brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    -- where n > 0
    -- For example:
    -- >>> special_factorial(4)
    -- 288
    -- The function will receive an integer as input and should return the special
    -- factorial of this integer.
    local function special_factorial(n)
      local result = 1
      for i = n, 1, -1 do
        result = result * factorial(i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = special_factorial
        lu.assertEquals(candidate(4), 288)
        lu.assertEquals(candidate(5), 34560)
        lu.assertEquals(candidate(7), 125411328000)
        lu.assertEquals(candidate(1), 1)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpki1h64wy.lua:12:
    attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpki1h64wy.lua:12:
    in local 'candidate'\n\t/tmp/tmpki1h64wy.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
