{
  "language": "lua",
  "name": "HumanEval_80_is_happy",
  "results": [
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] ~= s[i+1] and s[i+1] ~= s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpeojxyav_.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n<|endoftext|><|python|>#                                                                                                                                                                                                                                                                              \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpy_9mam8b.lua:40: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp39d05ioc.lua:40: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n        t[s[i]] = s[i+1]\n        t[s[i+1]] = s[i+2]\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua2v2jkn.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpua2v2jkn.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s) - 2 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, len(s) - 1 do\n        if not t[s[i]] or not t[s[i+1]] then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa09da91r.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpa09da91r.lua:18: in local 'candidate'\n\t/tmp/tmpa09da91r.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i-1]] == s[i] or t[s[i]] == s[i-1] then return false end\n        t[s[i-1]] = s[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgeg_7pca.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpgeg_7pca.lua:18: in local 'candidate'\n\t/tmp/tmpgeg_7pca.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i + 1]] and t[s[i + 2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n<|endoftext|><|python|nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpckyni0uj.lua:40: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaua85tfr.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpaua85tfr.lua:22: in local 'candidate'\n\t/tmp/tmpaua85tfr.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n<|endoftext|><|python|nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8_v9wra1.lua:40: unexpected symbol near '<'\n",
      "stdout": "",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for k, v in pairs(t) do\n        if v == false then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_d3x4ne4.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp_d3x4ne4.lua:22: in local 'candidate'\n\t/tmp/tmp_d3x4ne4.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyorabqe.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppyorabqe.lua:22: in local 'candidate'\n\t/tmp/tmppyorabqe.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n<|endoftext|><|python|nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6lx94z6j.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s) - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, len(s) - 1 do\n        if not t[s[i]] and not t[s[i+1]] then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd7mdms0s.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpd7mdms0s.lua:18: in local 'candidate'\n\t/tmp/tmpd7mdms0s.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s) - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, len(s) - 1 do\n        if t[s[i]] and t[s[i+1]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx2kxqj5w.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpx2kxqj5w.lua:18: in local 'is_happy'\n\t/tmp/tmpx2kxqj5w.lua:34: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, s:len() - 2, 3 do\n        if t[s[i]] == t[s[i+1]] and t[s[i+1]] == t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpayo3h_lw.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpayo3h_lw.lua:23: in local 'is_happy'\n\t/tmp/tmpayo3h_lw.lua:38: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == true then\n            return false\n        end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgh1q0qoy.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpgh1q0qoy.lua:23: in local 'candidate'\n\t/tmp/tmpgh1q0qoy.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbngo2yt0.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpbngo2yt0.lua:22: in local 'is_happy'\n\t/tmp/tmpbngo2yt0.lua:34: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\ntrue\ntrue\ntrue\ntrue\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82svsvje.lua:40: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp82svsvje.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz4hx6zij.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpz4hx6zij.lua:22: in local 'is_happy'\n\t/tmp/tmpz4hx6zij.lua:34: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i + 1]] and t[s[i + 2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmppwgq7_ls.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppwgq7_ls.lua:22: in local 'is_happy'\n\t/tmp/tmppwgq7_ls.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnn7eab.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpjcnn7eab.lua:22: in local 'candidate'\n\t/tmp/tmpjcnn7eab.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5fxyc4.lua:37: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpms5fxyc4.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvzjxh74h.lua:22: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == nil then\n            t[s[i]] = 1\n        else\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then\n        return false\n    end\n    local function is_consecutive_distinct(a, b)\n        return a != b\n    end\n    for i = 1, len(s), 3 do\n        if not is_consecutive_distinct(s[i], s[i+1]) or not is_consecutive_distinct(s[i+1], s[i+2]) then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\nprint(is_happy(adb))\nprint(is_happy(xyy))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmps_aj_7vv.lua:22: 'end' expected (to close 'function' at line 21) near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qezr10v.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6qezr10v.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpb4_f84co.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpb4_f84co.lua:22: in local 'is_happy'\n\t/tmp/tmpb4_f84co.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n        t[s[i]] = s[i+1]\n        t[s[i+1]] = s[i+2]\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua2v2jkn.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpua2v2jkn.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyorabqe.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppyorabqe.lua:22: in local 'candidate'\n\t/tmp/tmppyorabqe.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpoh0ov3r2.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpoh0ov3r2.lua:22: in local 'is_happy'\n\t/tmp/tmpoh0ov3r2.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s) - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, len(s) - 1 do\n        if t[s[i]] and t[s[i+1]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9tifly5k.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp9tifly5k.lua:18: in local 'is_happy'\n\t/tmp/tmp9tifly5k.lua:34: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuspyhev8.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuspyhev8.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('aaa'))\nprint(is_happy('aaaa'))\nprint(is_happy('aaaaa'))\nprint(is_happy('aaaaaa'))\nprint(is_happy('aaaaaaa'))\nprint(is_happy('aaaaaaaa'))\nprint(is_happy('aaaaaaaaa'))\nprint(is_happy('aaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaaaaaaa'))\nprint\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj8z6z7jl.lua:63: syntax error near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n        t[s[i]] = s[i+1]\n        t[s[i+1]] = s[i+2]\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua2v2jkn.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpua2v2jkn.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnn7eab.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpjcnn7eab.lua:22: in local 'candidate'\n\t/tmp/tmpjcnn7eab.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if not t[s[i+1]] then t[s[i+1]] = 1 end\n        if not t[s[i+2]] then t[s[i+2]] = 1 end\n    end\n    return t[s[1]] and t[s[2]] and t[s[3]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyorabqe.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppyorabqe.lua:22: in local 'candidate'\n\t/tmp/tmppyorabqe.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "lua: /tmp/tmpknnr03sh.lua:22: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n        t[s[i]] = s[i+1]\n        t[s[i+1]] = s[i+2]\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua2v2jkn.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpua2v2jkn.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpb4_f84co.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpb4_f84co.lua:22: in local 'is_happy'\n\t/tmp/tmpb4_f84co.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s) - 2 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ie742vi.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp8ie742vi.lua:18: in local 'candidate'\n\t/tmp/tmp8ie742vi.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == nil then\n            t[s[i]] = 1\n        else\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpb4_f84co.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpb4_f84co.lua:22: in local 'is_happy'\n\t/tmp/tmpb4_f84co.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for k, v in pairs(t) do\n        if v > 1 then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpmz5xc6pw.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpmz5xc6pw.lua:23: in local 'is_happy'\n\t/tmp/tmpmz5xc6pw.lua:38: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i+3) ~= s:sub(i+1, i+3) then return false end\n        table.insert(t, s:sub(i, i+3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobitjh3v.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobitjh3v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if not t[s[i+1]] then t[s[i+1]] = 1 end\n        if not t[s[i+2]] then t[s[i+2]] = 1 end\n    end\n    return t[1] and t[2] and t[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpms8iag1t.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpms8iag1t.lua:18: in local 'candidate'\n\t/tmp/tmpms8iag1t.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if not t[s[i+1]] then t[s[i+1]] = 1 end\n        if not t[s[i+2]] then t[s[i+2]] = 1 end\n    end\n    return len(t) == len(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7emcqgbu.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp7emcqgbu.lua:18: in local 'candidate'\n\t/tmp/tmp7emcqgbu.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x7ra3z9.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_x7ra3z9.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() do\n        if s[i] == s[i+1] and s[i] == s[i+2] then\n            t[s[i]] = t[s[i]] or true\n        end\n    end\n    for i = 1, s:len() do\n        if t[s[i]] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vctv4r8.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6vctv4r8.lua:22: in local 'candidate'\n\t/tmp/tmp6vctv4r8.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkbc38k0c.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpkbc38k0c.lua:22: in local 'candidate'\n\t/tmp/tmpkbc38k0c.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            table.insert(t, s[i])\n            table.insert(t, s[i+1])\n            table.insert(t, s[i+2])\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5dqb1ba.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmph5dqb1ba.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpna3bh_pn.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpna3bh_pn.lua:22: in local 'is_happy'\n\t/tmp/tmpna3bh_pn.lua:34: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x7ra3z9.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_x7ra3z9.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnn7eab.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpjcnn7eab.lua:22: in local 'candidate'\n\t/tmp/tmpjcnn7eab.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyorabqe.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppyorabqe.lua:22: in local 'candidate'\n\t/tmp/tmppyorabqe.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xy\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4aflo_i7.lua:65: unfinished string near ''xy'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuspyhev8.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuspyhev8.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s) - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then return false end\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ayfyohp.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp3ayfyohp.lua:18: in local 'candidate'\n\t/tmp/tmp3ayfyohp.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuspyhev8.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuspyhev8.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for k, v in pairs(t) do\n        if v == 3 then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjaazmpvx.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpjaazmpvx.lua:23: in local 'candidate'\n\t/tmp/tmpjaazmpvx.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i + 1]] and t[s[i + 2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnn7eab.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpjcnn7eab.lua:22: in local 'candidate'\n\t/tmp/tmpjcnn7eab.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for k, v in pairs(t) do\n        if v == false then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_d3x4ne4.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp_d3x4ne4.lua:22: in local 'candidate'\n\t/tmp/tmp_d3x4ne4.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i + 1]] and t[s[i + 2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xy\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu5n59a_2.lua:65: unfinished string near ''xy'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpoh0ov3r2.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpoh0ov3r2.lua:22: in local 'is_happy'\n\t/tmp/tmpoh0ov3r2.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            table.insert(t, s[i])\n            table.insert(t, s[i+1])\n            table.insert(t, s[i+2])\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5dqb1ba.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmph5dqb1ba.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('aaa'))\nprint(is_happy('ab'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpto5bm_7y.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpto5bm_7y.lua:22: in local 'is_happy'\n\t/tmp/tmpto5bm_7y.lua:34: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            table.insert(t, s[i])\n            table.insert(t, s[i+1])\n            table.insert(t, s[i+2])\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5dqb1ba.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmph5dqb1ba.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i + 1]] or not t[s[i + 2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmppho6lvi_.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppho6lvi_.lua:22: in local 'is_happy'\n\t/tmp/tmppho6lvi_.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] ~= s[i+1] and s[i+1] ~= s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpeojxyav_.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i=1,s:len(),3 do\n        if s:sub(i,i+3) ~= s:sub(i,i+3) then return false end\n        table.insert(t,s:sub(i,i+3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3w38yog.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_3w38yog.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i+3) ~= s:sub(i+1, i+3) then return false end\n        table.insert(t, s:sub(i, i+3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobitjh3v.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobitjh3v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qezr10v.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6qezr10v.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i+3) ~= s:sub(i+1, i+3) then return false end\n        table.insert(t, s:sub(i, i+3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobitjh3v.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobitjh3v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == nil then\n            t[s[i]] = 1\n        else\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == 0 then\n            t[s[i]] = 1\n        else\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsizfy3hk.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsizfy3hk.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyorabqe.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppyorabqe.lua:22: in local 'candidate'\n\t/tmp/tmppyorabqe.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpoh0ov3r2.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpoh0ov3r2.lua:22: in local 'is_happy'\n\t/tmp/tmpoh0ov3r2.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then\n        return false\n    end\n    local function is_consecutive_letter(a, b)\n        if a == b then\n            return true\n        end\n        return false\n    end\n    for i = 1, len(s), 3 do\n        if not is_consecutive_letter(s[i], s[i+1]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu39kdji3.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpu39kdji3.lua:18: in local 'candidate'\n\t/tmp/tmpu39kdji3.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\nfalse\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn8fbp9f.lua:39: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsn8fbp9f.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == nil then\n            t[s[i]] = 1\n        else\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnd6k09r8.lua:22: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmpb4_f84co.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpb4_f84co.lua:22: in local 'is_happy'\n\t/tmp/tmpb4_f84co.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpb_7i3egq.lua:21: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then\n        return false\n    end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then\n            return false\n        end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmple7stric.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmple7stric.lua:18: in local 'candidate'\n\t/tmp/tmple7stric.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == true then\n            return false\n        end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgh1q0qoy.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpgh1q0qoy.lua:23: in local 'candidate'\n\t/tmp/tmpgh1q0qoy.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for k, v in pairs(t) do\n        if v > 1 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2hd5vj10.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmp2hd5vj10.lua:23: in local 'candidate'\n\t/tmp/tmp2hd5vj10.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i + 1]] and t[s[i + 2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_44lxfux.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp_44lxfux.lua:22: in local 'is_happy'\n\t/tmp/tmp_44lxfux.lua:34: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() do\n        if s[i] == s[i+1] and s[i] == s[i+2] then\n            t[s[i]] = true\n            i = i + 1\n        end\n    end\n    for k, v in pairs(t) do\n        if v == false then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfevpzwsu.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpfevpzwsu.lua:22: in local 'candidate'\n\t/tmp/tmpfevpzwsu.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then\n        return false\n    end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then\n            return false\n        end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmple7stric.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmple7stric.lua:18: in local 'candidate'\n\t/tmp/tmple7stric.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja21k_f3.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpja21k_f3.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lexmgpb.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lexmgpb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcnn7eab.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpjcnn7eab.lua:22: in local 'candidate'\n\t/tmp/tmpjcnn7eab.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if not t[s[i+1]] then t[s[i+1]] = 1 end\n        if not t[s[i+2]] then t[s[i+2]] = 1 end\n    end\n    return len(t) == len(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7emcqgbu.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp7emcqgbu.lua:18: in local 'candidate'\n\t/tmp/tmp7emcqgbu.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]] then t[s[i]] = true end\n        if not t[s[i+1]] then t[s[i+1]] = true end\n        if not t[s[i+2]] then t[s[i+2]] = true end\n    end\n    return t[s[1]] and t[s[2]] and t[s[3]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixc40vk8.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpixc40vk8.lua:18: in local 'candidate'\n\t/tmp/tmpixc40vk8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop5no3oi.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpop5no3oi.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n                t[s[i]] = true\n            else\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3f7i7gd.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpw3f7i7gd.lua:23: in local 'candidate'\n\t/tmp/tmpw3f7i7gd.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "false\nfalse\n",
      "stderr": "lua: /tmp/tmp6pd5539b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp6pd5539b.lua:22: in local 'is_happy'\n\t/tmp/tmp6pd5539b.lua:36: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then\n        return false\n    end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then\n            return false\n        end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmple7stric.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmple7stric.lua:18: in local 'candidate'\n\t/tmp/tmple7stric.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n        t[s[i]] = s[i+1]\n        t[s[i+1]] = s[i+2]\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua2v2jkn.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpua2v2jkn.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938053
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdi0u9vc.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsdi0u9vc.lua:18: in local 'candidate'\n\t/tmp/tmpsdi0u9vc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxsa35tgp.lua:21: unexpected symbol near '='\n",
      "stdout": "",
      "timestamp": 1661938052
    },
    {
      "exit_code": 1,
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyorabqe.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmppyorabqe.lua:22: in local 'candidate'\n\t/tmp/tmppyorabqe.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661938053
    },
    {
      "program": "-- You are given a string s.\n-- Your task is to check if the string is haplua or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n-- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>> is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if t[s[i]] == t[s[i+1]] == t[s[i+2]] then return true end\n    end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_s1uodld.lua:18: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp_s1uodld.lua:18: in local 'is_happy'\n\t/tmp/tmp_s1uodld.lua:26: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}