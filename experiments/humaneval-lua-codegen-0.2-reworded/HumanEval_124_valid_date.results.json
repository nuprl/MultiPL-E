{
  "language": "lua",
  "name": "HumanEval_124_valid_date",
  "results": [
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfkqm1f.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqfkqm1f.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    if string.len(date) < 8 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 31 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 30 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3fw69em.lua:25: attempt to compare string with number\nstack traceback:\n\t/tmp/tmph3fw69em.lua:25: in local 'candidate'\n\t/tmp/tmph3fw69em.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = string.tonumber(month)\n    day = string.tonumber(day)\n    year = string.tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea_bm8wn.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpea_bm8wn.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month then\n        return false\n    end\n    if not day then\n        return false\n    end\n    if not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy029u0d0.lua:57: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy029u0d0.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    if date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(20[0-9]{2}|19[0-9]{2})$') then\n        return true\n    end\n    if date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(20[0-9]{2}|19[0-9]{2})$') then\n        return true\n    end\n    if date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(20[0-9]{2}|19[0-9]{2})$') then\n        return true\n    end\n    if date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(20[0-9]{2}|19[0-9]{2})$') then\n        return true\n    end\n    if date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(20[0-9]{2}|19[0-9]{2})$') then\n        return true\n    end\n    if date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(20[0-9]{2}|19[0-9]{2})$') then\n        return true\n    end\n    if date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(20[0-9]{2}|19[0-9]{2})$') then\n        return true\n    end\n    if date:match('^(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqrxlrdwa.lua:43: unfinished string near ''^('\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{4}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpkvtg5c37.lua:20: 'end' expected (to close 'if' at line 19) near 'if'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8ln7gik.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa8ln7gik.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[12][0-9]|30|31)$')\n    if not day then\n        return false\n    end\n    if not month then\n        return false\n    end\n    if not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 and day > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_fm37ie.lua:47: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7_fm37ie.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not (day >= 1 and day <= 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5o3qda7.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl5o3qda7.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then return false\n    if not string.len(date) then return false\n    if not string.sub(date,1,3) then return false\n    if not string.sub(date,4,6) then return false\n    if not string.sub(date,7,10) then return false\n    if not string.sub(date,11,13) then return false\n    if not string.sub(date,14,16) then return false\n    if not string.sub(date,17,19) then return false\n    if not string.sub(date,20,22) then return false\n    if not string.sub(date,23,25) then return false\n    if not string.sub(date,26,28) then return false\n    if not string.sub(date,29,31) then return false\n    if not string.sub(date,32,34) then return false\n    if not string.sub(date,35,37) then return false\n    if not string.sub(date,38,40) then return false\n    if not string.sub(date,41,43) then return false\n    if not string.sub(date,44,46) then return false\n    if not string.sub(date,47,49) then return false\n    if not string.sub(date,50,52) then return false\n    if not string.sub(date,53,55) then return false\n    if not string.sub(date,56,58) then return false\n    if not string.sub(date,59,61) then return false\n    if not string.sub(date,62,64) then return false\n    if not string.sub(date,65,67) then return false\n    if not string.sub(date,68,70) then return false\n    if not string.sub(date,71,73) then return false\n    if not string.sub(date,74,76) then return false\n    if not string.sub(date,77,79) then return false\n    if not string.sub(date,80,82) then return false\n    if not string.sub(date,83,85) then return false\n    if not string.sub(date,86,88) then return\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfnkej4xj.lua:20: 'end' expected (to close 'if' at line 19) near 'if'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjj7f67in.lua:20: <name> expected near 'return'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tbt07xn.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6tbt07xn.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date ~= '' then\n        if date:match('^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$') then\n            return true\n        end\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5srtr4x7.lua:30: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5srtr4x7.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month then\n        return false\n    end\n    if not day then\n        return false\n    end\n    if not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ztwchm0.lua:52: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1ztwchm0.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])($|[^0-9])')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    local month_num = tonumber(month)\n    local day_num = tonumber(day)\n    local year_num = tonumber(year)\n    if month_num < 1 or month_num > 12 then\n        return false\n    end\n    if day_num < 1 or day_num > 31 then\n        return false\n    end\n    if month_num == 2 then\n        if day_num < 1 or day_num > 29 then\n            return false\n        end\n    end\n    if month_num == 1 or month_num == 3 or month_num == 5 or month_num == 7 or month_num == 8 or month_num == 10 or month_num == 12 then\n        if day_num < 1 or day_num > 30 then\n            return false\n        end\n    end\n    if month_num == 4 or month_num == 6 or month_num == 9 or month_num == 11 then\n        if day_num < 1 or day_num > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp153h4tjp.lua:56: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp153h4tjp.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907499
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo92ave_.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbo92ave_.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg24xwu_w.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg24xwu_w.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]|[4-9])$')\n    if not day or not month or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        else\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmv4reya.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdmv4reya.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9petjedf.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9petjedf.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month and day and year then\n        if month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n            if day < 1 or day > 31 then\n                return false\n            end\n        elseif month == '4' or month == '6' or month == '9' or month == '11' then\n            if day < 1 or day > 30 then\n                return false\n            end\n        elseif month == '2' then\n            if day < 1 or day > 29 then\n                return false\n            end\n        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfajoqglj.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfajoqglj.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x3qzciw.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2x3qzciw.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjj7f67in.lua:20: <name> expected near 'return'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxj4hkyd.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoxj4hkyd.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date,1,2) < 1 or string.sub(date,1,2) > 12 then\n        return false\n    end\n    if string.sub(date,3,4) < 1 or string.sub(date,3,4) > 12 then\n        return false\n    end\n    if string.sub(date,5,6) < 1 or string.sub(date,5,6) > 31 then\n        return false\n    end\n    if string.sub(date,7,8) < 1 or string.sub(date,7,8) > 30 then\n        return false\n    end\n    if string.sub(date,9,10) < 1 or string.sub(date,9,10) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0f0qkzy.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmpj0f0qkzy.lua:22: in local 'candidate'\n\t/tmp/tmpj0f0qkzy.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|1[0-2])([-/.])(0[1-9]|[12][0-9]|3[01])$')\n    if day == nil or month == nil or year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1dfp6df.lua:48: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj1dfp6df.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if day == nil or month == nil or year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1_v2xeh.lua:48: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi1_v2xeh.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    month = string.tonumber(month)\n    day = string.tonumber(day)\n    year = string.tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not (day >= 1 and day <= 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tjwowy9.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4tjwowy9.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month_num = string.gsub(month, '^0*', '')\n    local day_num = string.gsub(day, '^0*', '')\n    local year_num = string.gsub(year, '^0*', '')\n    if month_num < 1 or month_num > 12 then\n        return false\n    end\n    if day_num < 1 or day_num > 31 then\n        return false\n    end\n    if month_num == 2 then\n        if day_num < 1 or day_num > 29 then\n            return false\n        end\n    elseif month_num == 1 or month_num == 3 or month_num == 5 or month_num == 7 or month_num == 8 or month_num == 10 or month_num == 12 then\n        if day_num < 1 or day_num > 30 then\n            return false\n        end\n    elseif month_num == 4 or month_num == 6 or month_num == 9 or month_num == 11 then\n        if day_num < 1 or day_num > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xld64h5.lua:54: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1xld64h5.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 13 then\n        return false\n    end\n    if string.sub(date,1,3) < 1 or string.sub(date,1,3) > 12 then\n        return false\n    end\n    if string.sub(date,4,6) < 1 or string.sub(date,4,6) > 12 then\n        return false\n    end\n    if string.sub(date,7,10) < 1 or string.sub(date,7,10) > 31 then\n        return false\n    end\n    if string.sub(date,11,13) < 1 or string.sub(date,11,13) > 30 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo88dlnrp.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmpo88dlnrp.lua:22: in local 'candidate'\n\t/tmp/tmpo88dlnrp.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxj4hkyd.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoxj4hkyd.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 9 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3o9o5d3.lua:43: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi3o9o5d3.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjj7f67in.lua:20: <name> expected near 'return'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    if date ~= '' then\n        local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n        if month and day and year then\n            if month ~= '' and day ~= '' and year ~= '' then\n                if month > 1 and month < 13 then\n                    if day > 1 and day < 32 then\n                        if year > 1900 and year < 2040 then\n                            return true\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2nteqq6.lua:42: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp2nteqq6.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxj4hkyd.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoxj4hkyd.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then return false end\n    if not string.len(date) then return false end\n    if not string.sub(date,1,3) then return false end\n    if not string.sub(date,4,6) then return false end\n    if not string.sub(date,7,10) then return false end\n    if not string.sub(date,11,13) then return false end\n    if not string.sub(date,14,16) then return false end\n    if not string.sub(date,17,19) then return false end\n    if not string.sub(date,20,22) then return false end\n    if not string.sub(date,23,25) then return false end\n    if not string.sub(date,26,28) then return false end\n    if not string.sub(date,29,31) then return false end\n    if not string.sub(date,32,34) then return false end\n    if not string.sub(date,35,37) then return false end\n    if not string.sub(date,38,40) then return false end\n    if not string.sub(date,41,43) then return false end\n    if not string.sub(date,44,46) then return false end\n    if not string.sub(date,47,49) then return false end\n    if not string.sub(date,50,52) then return false end\n    if not string.sub(date,53,55) then return false end\n    if not string.sub(date,56,58) then return false end\n    if not string.sub(date,59,61) then return false end\n    if not string.sub(date,62,64) then return false end\n    if not string.sub(date,65,67) then return false end\n    if not string.sub(date,68,70) then return false end\n    if not string.sub(date,71,73) then return false end\n    if not string.sub(date,74,76) then return false end\n    if not string.sub(date,77,79) then return false end\n    if not string.sub(date,80,82) then return false end\n    if not\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9h7kbir6.lua:49: 'then' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date,1,2) < 1 or string.sub(date,1,2) > 12 then\n        return false\n    end\n    if string.sub(date,3,5) < 1 or string.sub(date,3,5) > 12 then\n        return false\n    end\n    if string.sub(date,6,8) < 1 or string.sub(date,6,8) > 31 then\n        return false\n    end\n    if string.sub(date,9,11) < 1 or string.sub(date,9,11) > 30 then\n        return false\n    end\n    if string.sub(date,12,14) < 1 or string.sub(date,12,14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpso9gknhe.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmpso9gknhe.lua:22: in local 'candidate'\n\t/tmp/tmpso9gknhe.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[1-9][0-9]|[2][0-9]|30|31)$')\n    if month and day and year then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rd7z_kg.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3rd7z_kg.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|1[0-2])([- /.])(0[1-9]|1[0-9]|2[0-9]|3[01])([- /.])([0-9]{4})$')\n    if day ~= nil and month ~= nil and year ~= nil then\n        if month == '2' then\n            if day < 1 or day > 29 then\n                return false\n            end\n        elseif month == '4' or month == '6' or month == '9' or month == '11' then\n            if day < 1 or day > 30 then\n                return false\n            end\n        elseif month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n            if day < 1 or day > 31 then\n                return false\n            end\n        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql1yjdg4.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpql1yjdg4.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 20 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oh07e91.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0oh07e91.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajbuvrle.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpajbuvrle.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|1[0-2])([-/.])(0[1-9]|[12][0-9]|3[01])$')\n    if month ~= nil and month ~= '' then\n        if month < 1 or month > 12 then\n            return false\n        end\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        elseif month == 4 or month == 6 or month == 9 or month == 11 then\n            if day < 1 or day > 30 then\n                return false\n            end\n        elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n            if day < 1 or day > 31 then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8fo1dor.lua:48: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_8fo1dor.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfkqm1f.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqfkqm1f.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^(\\d{2})-(\\d{2})-(\\d{4})$')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        else\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe77s6srm.lua:22: invalid escape sequence near ''^(\\d'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfkqm1f.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqfkqm1f.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 9 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3o9o5d3.lua:43: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi3o9o5d3.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    if month == '02' then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == '01' or month == '03' or month == '05' or month == '07' or month == '08' or month == '10' or month == '12' then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == '04' or month == '06' or month == '09' or month == '11' then\n        if day < 1 or day > 30 then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbov6koez.lua:47: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbov6koez.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month and day and year then\n        month = tonumber(month)\n        day = tonumber(day)\n        year = tonumber(year)\n        if month < 1 or month > 12 then\n            return false\n        end\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        elseif month == 4 or month == 6 or month == 9 or month == 11 then\n            if day < 1 or day > 30 then\n                return false\n            end\n        else\n            if day < 1 or day > 31 then\n                return false\n            end\n        end\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl1peu0b.lua:52: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprl1peu0b.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]|[4-9])$')\n    if not day or not month or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        else\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month and day and year then\n        month = tonumber(month)\n        day = tonumber(day)\n        year = tonumber(year)\n        if month < 1 or month > 12 then\n            return false\n        end\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        elseif month == 4 or month == 6 or month == 9 or month == 11 then\n            if day < 1 or day > 30 then\n                return false\n            end\n        else\n            if day < 1 or day > 31 then\n                return false\n            end\n        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfpz6sie.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmplfpz6sie.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or not day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or not day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or not day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdztasz9t.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdztasz9t.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zmus0cm.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9zmus0cm.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk2d5bg1.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnk2d5bg1.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfkqm1f.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqfkqm1f.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or not string.len(date) > 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40g8qsmo.lua:19: attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmp40g8qsmo.lua:19: in local 'candidate'\n\t/tmp/tmp40g8qsmo.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day = date:sub(1,1)\n    local month = date:sub(2,1)\n    local year = date:sub(3,1)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        else\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqwtt1k_.lua:25: attempt to compare string with number\nstack traceback:\n\t/tmp/tmpiqwtt1k_.lua:25: in local 'candidate'\n\t/tmp/tmpiqwtt1k_.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = string.match(date, '^(\\d{2})(\\d{2})(\\d{4})$')\n    if day == nil or month == nil or year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmzs5g2v_.lua:22: invalid escape sequence near ''^(\\d'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzkv9otm.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmzkv9otm.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxno9cex.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxno9cex.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 13 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2as_o689.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp2as_o689.lua:22: in local 'candidate'\n\t/tmp/tmp2as_o689.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ms7avre.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ms7avre.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date,1,2) < 1 or string.sub(date,1,2) > 12 then\n        return false\n    end\n    if string.sub(date,3,5) < 1 or string.sub(date,3,5) > 12 then\n        return false\n    end\n    if string.sub(date,6,8) < 1 or string.sub(date,6,8) > 12 then\n        return false\n    end\n    if string.sub(date,9,11) < 1 or string.sub(date,9,11) > 12 then\n        return false\n    end\n    if string.sub(date,12,14) < 1 or string.sub(date,12,14) > 31 then\n        return false\n    end\n    if string.sub(date,15,17) < 1 or string.sub(date,15,17) > 30 then\n        return false\n    end\n    if string.sub(date,18,20) < 1 or string.sub(date,18,20) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mgj1ziw.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp5mgj1ziw.lua:22: in local 'candidate'\n\t/tmp/tmp5mgj1ziw.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local day = string.gsub(date, '-', '/')\n    local month = string.gsub(day, '-', '')\n    local year = string.gsub(day, '-', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '0', '')\n    local month = string.gsub(month, '1', '1')\n    local month = string.gsub(month, '2', '2')\n    local month = string.gsub(month, '3', '3')\n    local month = string.gsub(month, '4', '4')\n    local month = string.gsub(month, '5', '5')\n    local month = string.gsub(month, '6', '6')\n    local month = string.gsub(month, '7', '7')\n    local month = string.gsub(month, '8', '8')\n    local month = string.gsub(month, '9', '9')\n    local month = string.gsub(month, '10', '10')\n    local month = string.gsub(month, '11', '11')\n    local month = string.gsub(month, '12', '12')\n    local month = string.gsub(month, '13', '13')\n    local month = string.gsub(month, '14', '14')\n    local month = string.gsub(month, '15', '15')\n    local month = string.gsub(month, '16', '16')\n    local month = string.gsub(month, '17', '17')\n    local month = string.gsub(month, '18', '18')\n    local month = string.gsub(month, '19', '19')\n    local month = string.gsub(month, '20', '20')\n    local month = string.gsub(month, '21', '21')\n    local month = string.gsub(month, '22', '22')\n    local month = string.gsub(month\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfskmtqgw.lua:50: ')' expected (to close '(' at line 49) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date and string.len(date) == 8 then\n        local month, day, year = string.match(date, '^([0-9]{2})([0-9]{2})([0-9]{4})$')\n        if month and day and year then\n            if month and string.len(month) == 2 then\n                month = string.upper(month)\n                if month == '01' or month == '02' or month == '03' or month == '04' or month == '05' or month == '06' or month == '07' or month == '08' or month == '09' or month == '10' or month == '11' or month == '12' then\n                    if day and string.len(day) == 2 then\n                        day = string.upper(day)\n                        if day >= '01' and day <= '31' then\n                            return true\n                        elseif day >= '01' and day <= '30' then\n                            return true\n                        elseif day >= '01' and day <= '29' then\n                            return true\n                        else\n                            return false\n                        end\n                    else\n                        return false\n                    end\n                else\n                    return false\n                end\n            else\n                return false\n            end\n        else\n            return false\n        end\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tk619pl.lua:56: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0tk619pl.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local day, month, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not day or not month or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq71q_pow.lua:48: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq71q_pow.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[12][0-9]|30)$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurwu0dw1.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpurwu0dw1.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj38ypgx6.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj38ypgx6.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then return false\n    local date_parts = string.match(date, '^(\\d{2})(\\d{2})(\\d{4})$')\n    if not date_parts then return false\n    local month = tonumber(date_parts[1])\n    local day = tonumber(date_parts[2])\n    local year = tonumber(date_parts[3])\n    if month < 1 or month > 12 then return false\n    if day < 1 or day > 31 then return false\n    if month == 2 and day > 29 then return false\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day > 31 then return false\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day > 30 then return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_j78cd83.lua:20: 'end' expected (to close 'if' at line 19) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date ~= '' then\n        local days = string.gsub(date, '-', '/')\n        local month = string.gsub(date, '-', '')\n        local year = string.gsub(date, '-', '')\n        if month ~= '' and month ~= '0' then\n            if month ~= '1' and month ~= '2' and month ~= '3' and month ~= '4' and month ~= '5' and month ~= '6' and month ~= '7' and month ~= '8' and month ~= '9' and month ~= '10' and month ~= '11' and month ~= '12' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '1' and month ~= '4' and month ~= '6' and month ~= '9' and month ~= '11' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '2' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '5' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '7' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '8' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '10' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '12' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '3' then\n                return false\n            end\n        end\n        if month ~= '' and month ~= '0' then\n            if month ~= '5' then\n                return false\n            end\n        \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpydwkr8pv.lua:95: 'end' expected (to close 'if' at line 68) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month and day and year then\n        month = tonumber(month)\n        day = tonumber(day)\n        year = tonumber(year)\n        if month < 1 or month > 12 then\n            return false\n        end\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        elseif month == 4 or month == 6 or month == 9 or month == 11 then\n            if day < 1 or day > 30 then\n                return false\n            end\n        else\n            if day < 1 or day > 31 then\n                return false\n            end\n        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplfpz6sie.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmplfpz6sie.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjj7f67in.lua:20: <name> expected near 'return'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day > 29 then\n        return false\n    end\n    if month == 2 and day < 1 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tkkbil_.lua:57: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1tkkbil_.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqw4jo5w.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgqw4jo5w.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]|[4-9])$')\n    if day == nil or month == nil or year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf30c4t7.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxf30c4t7.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xvscif9.lua:54: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4xvscif9.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date and string.len(date) == 8 then\n        if string.sub(date, 1, 2) == '0' then\n            if string.sub(date, 3, 2) == '0' then\n                if string.sub(date, 5, 2) == '0' then\n                    if string.sub(date, 7, 2) == '0' then\n                        return true\n                    else\n                        return false\n                else\n                    return false\n            else\n                return false\n        else\n            return false\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp35l2kzgp.lua:27: 'end' expected (to close 'if' at line 23) near 'else'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date,1,3) < 1 or string.sub(date,1,3) > 12 then\n        return false\n    end\n    if string.sub(date,4,6) < 1 or string.sub(date,4,6) > 12 then\n        return false\n    end\n    if string.sub(date,7,10) < 1 or string.sub(date,7,10) > 31 then\n        return false\n    end\n    if string.sub(date,11,13) < 1 or string.sub(date,11,13) > 30 then\n        return false\n    end\n    if string.sub(date,14,16) < 1 or string.sub(date,14,16) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lyk1a7s.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp6lyk1a7s.lua:22: in local 'candidate'\n\t/tmp/tmp6lyk1a7s.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2x3qzciw.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2x3qzciw.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxj4hkyd.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoxj4hkyd.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    if date ~= '' then\n        local month, day, year = date:match('^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]{4})$')\n        if month and day and year then\n            if month ~= '' and day ~= '' and year ~= '' then\n                if month > 12 or month < 1 then\n                    return false\n                end\n                if day > 31 or day < 1 then\n                    return false\n                end\n                if year > 9999 or year < 1000 then\n                    return false\n                end\n                return true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1e3ex1o.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmps1e3ex1o.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd08xczm.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfd08xczm.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date,1,3) < 1 or string.sub(date,1,3) > 12 then\n        return false\n    end\n    if string.sub(date,4,6) < 1 or string.sub(date,4,6) > 12 then\n        return false\n    end\n    if string.sub(date,7,10) < 1 or string.sub(date,7,10) > 31 then\n        return false\n    end\n    if string.sub(date,11,13) < 1 or string.sub(date,11,13) > 30 then\n        return false\n    end\n    if string.sub(date,14,16) < 1 or string.sub(date,14,16) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lyk1a7s.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp6lyk1a7s.lua:22: in local 'candidate'\n\t/tmp/tmp6lyk1a7s.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4y4zyik.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm4y4zyik.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 9 then\n        return false\n    end\n    if string.sub(date,1,2) < 1 or string.sub(date,1,2) > 12 then\n        return false\n    end\n    if string.sub(date,3,5) < 1 or string.sub(date,3,5) > 12 then\n        return false\n    end\n    if string.sub(date,6,8) < 1 or string.sub(date,6,8) > 31 then\n        return false\n    end\n    if string.sub(date,9,11) < 1 or string.sub(date,9,11) > 30 then\n        return false\n    end\n    if string.sub(date,12,14) < 1 or string.sub(date,12,14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05hn3oa4.lua:43: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp05hn3oa4.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local days = string.gsub(date, '-', '/')\n    local month = string.gsub(days, '-', '')\n    local year = string.gsub(days, '-', '')\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) then\n            return false\n        end\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (days < 1 or days > 31) then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (days < 1 or days > 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa4gu7t7d.lua:29: ')' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    if date ~= '' then\n        local month, day, year = date:match('^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]{4})$')\n        if month and day and year then\n            if month ~= '' and day ~= '' and year ~= '' then\n                if month > 12 or month < 1 then\n                    return false\n                end\n                if day > 31 or day < 1 then\n                    return false\n                end\n                if year > 9999 or year < 1000 then\n                    return false\n                end\n                return true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1e3ex1o.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmps1e3ex1o.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajbuvrle.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpajbuvrle.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local day, month, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not day or not month or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq71q_pow.lua:48: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq71q_pow.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2szsz3qx.lua:48: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2szsz3qx.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month and day and year then\n        if month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n            if day < 1 or day > 31 then\n                return false\n            end\n        elseif month == '4' or month == '6' or month == '9' or month == '11' then\n            if day < 1 or day > 30 then\n                return false\n            end\n        elseif month == '2' then\n            if day < 1 or day > 29 then\n                return false\n            end\n        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfajoqglj.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfajoqglj.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not day or not month or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbi_0nfm.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmphbi_0nfm.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]|[4-9])$')\n    if not day then\n        return false\n    end\n    if month then\n        if month < 1 or month > 12 then\n            return false\n        end\n    else\n        if month < 1 or month > 12 then\n            return false\n        end\n    end\n    if year then\n        if year < 1 or year > 9999 then\n            return false\n        end\n    else\n        if year < 1 or year > 9999 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwabfmxa.lua:50: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwwabfmxa.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i_1a7dg.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6i_1a7dg.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 20 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[12][0-9]|30)$')\n    if not month or not day or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskxb_m6e.lua:43: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpskxb_m6e.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month then\n        return false\n    end\n    if not day then\n        return false\n    end\n    if not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy029u0d0.lua:57: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy029u0d0.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzkv9otm.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmzkv9otm.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    if string.len(date) < 8 then\n        return false\n    end\n    if string.sub(date,1,3) < 1 or string.sub(date,1,3) > 12 then\n        return false\n    end\n    if string.sub(date,4,6) < 1 or string.sub(date,4,6) > 12 then\n        return false\n    end\n    if string.sub(date,7,8) < 1 or string.sub(date,7,8) > 31 then\n        return false\n    end\n    if string.sub(date,9,10) < 1 or string.sub(date,9,10) > 30 then\n        return false\n    end\n    if string.sub(date,11,12) < 1 or string.sub(date,11,12) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7wbn1z32.lua:25: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp7wbn1z32.lua:25: in local 'candidate'\n\t/tmp/tmp7wbn1z32.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzkv9otm.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmzkv9otm.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vjrxvkw.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4vjrxvkw.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local date_parts = string.gsub(date, '-', '/')\n    local date_parts = string.gsub(date_parts, '-', '/')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ':', '')\n    local date_parts = string.gsub(date_parts, '.', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ', '')\n    local date_parts = string.gsub(date_parts, ' ',\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmppjdy31ll.lua:47: ')' expected (to close '(' at line 46) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8ln7gik.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa8ln7gik.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day = string.gsub(date, '-', '/')\n    local month = string.gsub(day, '-', '')\n    local year = string.gsub(day, '-', '')\n    local month = string.gsub(month, '-', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '0', '')\n    local month = string.gsub(month, '1', '01')\n    local month = string.gsub(month, '2', '02')\n    local month = string.gsub(month, '3', '03')\n    local month = string.gsub(month, '4', '04')\n    local month = string.gsub(month, '5', '05')\n    local month = string.gsub(month, '6', '06')\n    local month = string.gsub(month, '7', '07')\n    local month = string.gsub(month, '8', '08')\n    local month = string.gsub(month, '9', '09')\n    local month = string.gsub(month, '10', '10')\n    local month = string.gsub(month, '11', '11')\n    local month = string.gsub(month, '12', '12')\n    local month = string.gsub(month, '13', '13')\n    local month = string.gsub(month, '14', '14')\n    local month = string.gsub(month, '15', '15')\n    local month = string.gsub(month, '16', '16')\n    local month = string.gsub(month, '17', '17')\n    local month = string.gsub(month, '18', '18')\n    local month = string.gsub(month, '19', '19')\n    local month = string.gsub(month, '20', '20')\n    local month = string.gsub(month, '21', '21')\n    local month = string.gsub(month, '22', '22')\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm2ba1psv.lua:73: 'end' expected (to close 'function' at line 18) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8ln7gik.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa8ln7gik.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjj7f67in.lua:20: <name> expected near 'return'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date then\n        local month, day, year = date:match('^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])($|[^0-9])')\n        if month and day and year then\n            month = tointeger(month)\n            day = tointeger(day)\n            year = tointeger(year)\n            if month and day and year then\n                if month < 1 or month > 12 then\n                    return false\n                if day < 1 or day > 31 then\n                    return false\n                if month == 2 and day < 29 then\n                    return false\n                if month in (1,3,5,7,8,10,12) and day > 31 then\n                    return false\n                if month in (4,6,9,11) and day > 30 then\n                    return false\n                return true\n            else\n                return false\n        else\n            return false\n    else\n        return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8v6hs6em.lua:28: 'end' expected (to close 'if' at line 26) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn_54b0_.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdn_54b0_.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    if string.len(date) < 8 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 31 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 30 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3fw69em.lua:25: attempt to compare string with number\nstack traceback:\n\t/tmp/tmph3fw69em.lua:25: in local 'candidate'\n\t/tmp/tmph3fw69em.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tydaqxb.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0tydaqxb.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month_num = string.match(month, '^(0[1-9]|1[0-2])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month_num then\n        return false\n    end\n    local day_num = string.match(day, '^([0-9]|[1-2][0-9]|3[0-1])$')\n    if not day_num then\n        return false\n    end\n    local year_num = string.match(year, '^([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not year_num then\n        return false\n    end\n    if month_num[1] < 1 or month_num[1] > 12 then\n        return false\n    end\n    if month_num[2] < 1 or month_num[2] > 31 then\n        return false\n    end\n    if month_num[3] < 1 or month_num[3] > 31 then\n        return false\n    end\n    if month_num[4] < 1 or month_num[4] > 30 then\n        return false\n    end\n    if month_num[5] < 1 or month_num[5] > 30 then\n        return false\n    end\n    if month_num[6] < 1 or month_num[6] > 29 then\n        return false\n    end\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmph1mphhi3.lua:79: 'end' expected (to close 'function' at line 18) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local days = string.gsub(date, '-', '/')\n    local month = string.gsub(date, '-', '')\n    local year = string.gsub(date, '-', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '-', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', ''\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo0s4u54o.lua:53: ')' expected (to close '(' at line 52) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptp_66kcy.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmptp_66kcy.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    if not date:return false\n    if not string.match(date, '^[0-9]{2}-[0-9]{2}-[0-9]{4}$') then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{2})-([0-9]{2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day > 29 then\n        return false\n    end\n    if month == 2 and day < 1 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn__mc8o7.lua:22: <name> expected near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local days = string.gsub(date, '-', '/')\n    local month = string.gsub(date, '-', '')\n    local year = string.gsub(date, '-', '')\n    local month = string.gsub(month, '-', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '.', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '0', '')\n    local month = string.gsub(month, '1', '')\n    local month = string.gsub(month, '2', '')\n    local month = string.gsub(month, '3', '')\n    local month = string.gsub(month, '4', '')\n    local month = string.gsub(month, '5', '')\n    local month = string.gsub(month, '6', '')\n    local month = string.gsub(month, '7', '')\n    local month = string.gsub(month, '8', '')\n    local month = string.gsub(month, '9', '')\n    local month = string.gsub(month, '10', '')\n    local month = string.gsub(month, '11', '')\n    local month = string.gsub(month, '12', '')\n    local month = string.gsub(month, '13', '')\n    local month = string.gsub(month, '14', '')\n    local month = string.gsub(month, '15', '')\n    local month = string.gsub(month, '16', '')\n    local month = string.gsub(month, '17', '')\n    local month = string.gsub(month, '18', '')\n    local month = string.gsub(month, '19', '')\n    local month = string.gsub(month, '20', '')\n    local month = string.gsub(month, '21', '')\n    local month = string.gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcb_nep_9.lua:74: 'end' expected (to close 'function' at line 18) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local days = {\n        1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    }\n    local months = {\n        1, 3, 5, 7, 8, 10, 12\n    }\n    local month = date:match('^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$')\n    if not month then\n        return false\n    end\n    local month_num = tonumber(month[2])\n    if month_num < 1 or month_num > 12 then\n        return false\n    end\n    local day = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$')\n    if not day then\n        return false\n    end\n    local day_num = tonumber(day[2])\n    if day_num < 1 or day_num > days[month_num] then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_ar5516.lua:50: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_ar5516.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-9]|2[0-9]|3[01])-(\\\\d{4})$')\n    if not day or not month or not year then\n        return false\n    end\n    local month = month:gsub('0', '')\n    local month = month:gsub('1', 'Jan')\n    local month = month:gsub('2', 'Feb')\n    local month = month:gsub('3', 'Mar')\n    local month = month:gsub('4', 'Apr')\n    local month = month:gsub('5', 'May')\n    local month = month:gsub('6', 'Jun')\n    local month = month:gsub('7', 'Jul')\n    local month = month:gsub('8', 'Aug')\n    local month = month:gsub('9', 'Sep')\n    local month = month:gsub('10', 'Oct')\n    local month = month:gsub('11', 'Nov')\n    local month = month:gsub('12', 'Dec')\n    local month = month:gsub('Jan', '01')\n    local month = month:gsub('Feb', '02')\n    local month = month:gsub('Mar', '03')\n    local month = month:gsub('Apr', '04')\n    local month = month:gsub('May', '05')\n    local month = month:gsub('Jun', '06')\n    local month = month:gsub('Jul', '07')\n    local month = month:gsub('Aug', '08')\n    local month = month:gsub('Sep', '09')\n    local month = month:gsub('Oct', '10')\n    local month = month:gsub('Nov', '11')\n    local month = month:gsub('Dec', '12')\n    local day = day:gsub('0', '')\n    local day = day:gsub('1', '01')\n    local day = day:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpinrv8hmc.lua:53: unfinished string near '''\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxj4hkyd.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoxj4hkyd.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local days = string.gsub(date, '-', '/')\n    local month = string.gsub(days, '-', '')\n    local year = string.gsub(days, '-', '')\n    local month = string.gsub(month, '-', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '/', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '.', '')\n    local month = string.gsub(month, '.', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, ' ',\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmphmmzeuu6.lua:53: ')' expected (to close '(' at line 52) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgv6cxuwd.lua:57: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgv6cxuwd.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if month == nil or day == nil or year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk2d5bg1.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnk2d5bg1.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])($|[^0-9])')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day > 29 then\n            return false\n        end\n    elseif month < 3 or month > 12 then\n        return false\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi1ypo9d.lua:54: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxi1ypo9d.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then return false\n    if not string.len(date) then return false\n    if not string.sub(date,1,3) then return false\n    if not string.sub(date,4,6) then return false\n    if not string.sub(date,7,10) then return false\n    if not string.sub(date,11,13) then return false\n    if not string.sub(date,14,16) then return false\n    if not string.sub(date,17,19) then return false\n    if not string.sub(date,20,22) then return false\n    if not string.sub(date,23,25) then return false\n    if not string.sub(date,26,28) then return false\n    if not string.sub(date,29,31) then return false\n    if not string.sub(date,32,34) then return false\n    if not string.sub(date,35,37) then return false\n    if not string.sub(date,38,40) then return false\n    if not string.sub(date,41,43) then return false\n    if not string.sub(date,44,46) then return false\n    if not string.sub(date,47,49) then return false\n    if not string.sub(date,50,52) then return false\n    if not string.sub(date,53,55) then return false\n    if not string.sub(date,56,58) then return false\n    if not string.sub(date,59,61) then return false\n    if not string.sub(date,62,64) then return false\n    if not string.sub(date,65,67) then return false\n    if not string.sub(date,68,70) then return false\n    if not string.sub(date,71,73) then return false\n    if not string.sub(date,74,76) then return false\n    if not string.sub(date,77,79) then return false\n    if not string.sub(date,80,82) then return false\n    if not string.sub(date,83,85) then return false\n    if not string.sub(date,86,88) then return\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfnkej4xj.lua:20: 'end' expected (to close 'if' at line 19) near 'if'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$')\n    if not month then\n        return false\n    end\n    local day = string.match(date, '^([0-9]|[1-2][0-9]|3[0-1])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$')\n    if not day then\n        return false\n    end\n    local month = string.match(date, '^([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month then\n        return false\n    end\n    local year = string.match(date, '^([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$')\n    if not year then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybsgj5w0.lua:44: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpybsgj5w0.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfkqm1f.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqfkqm1f.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not day or not month or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpj5b4ad.lua:47: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqpj5b4ad.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 20 or string.len(date) % 2 != 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbf889a23.lua:19: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local day = string.sub(date, 1, 2)\n    local month = string.sub(date, 3, 5)\n    local year = string.sub(date, 6, 10)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvx6z1s3.lua:25: attempt to compare string with number\nstack traceback:\n\t/tmp/tmpfvx6z1s3.lua:25: in local 'candidate'\n\t/tmp/tmpfvx6z1s3.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if day ~= nil and month ~= nil and year ~= nil then\n        if month < 1 or month > 12 then\n            return false\n        end\n        if month == 2 then\n            if day < 1 or day > 29 then\n                return false\n            end\n        elseif month == 4 or month == 6 or month == 9 or month == 11 then\n            if day < 1 or day > 30 then\n                return false\n            end\n        elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n            if day < 1 or day > 31 then\n                return false\n            end\n        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsc36ln7.lua:48: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbsc36ln7.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpul4zoosc.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpul4zoosc.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 13 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2as_o689.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp2as_o689.lua:22: in local 'candidate'\n\t/tmp/tmp2as_o689.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not day or not month or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkfyejof.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgkfyejof.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if month == nil then\n        return false\n    end\n    if day == nil then\n        return false\n    end\n    if year == nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83nsj4o8.lua:57: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp83nsj4o8.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[6][0-9])$')\n    if not month or not day or not year then\n        return false\n    end\n    if month and string.len(month) > 2 then\n        return false\n    end\n    if day and string.len(day) > 2 then\n        return false\n    end\n    if year and string.len(year) > 4 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1i5mv0g.lua:41: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq1i5mv0g.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajbuvrle.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpajbuvrle.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxno9cex.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxno9cex.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{4}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0-9]{2}-[0-9]{2}-[0-9]{2}$') then return false\n    if not date:match('^[0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpkvtg5c37.lua:20: 'end' expected (to close 'if' at line 19) near 'if'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq_4hn21.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiq_4hn21.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 10 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_rr40i6.lua:22: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp3_rr40i6.lua:22: in local 'candidate'\n\t/tmp/tmp3_rr40i6.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 9 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 31 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 30 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnz80lp1w.lua:40: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnz80lp1w.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfkqm1f.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqfkqm1f.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhok8dhh.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwhok8dhh.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|1[0-2])([-/.])(0[1-9]|[12][0-9]|3[01])([-/.])([0-9]{4})$')\n    if day ~= nil and month ~= nil and year ~= nil then\n        if month == '2' then\n            if day < 29 then\n                return true\n            elseif day > 29 then\n                return true\n            else\n                return false\n            end\n        elseif month == '4' or month == '6' or month == '9' or month == '11' then\n            if day < 30 then\n                return true\n            elseif day > 30 then\n                return true\n            else\n                return false\n            end\n        elseif month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n            if day < 31 then\n                return true\n            elseif day > 31 then\n                return true\n            else\n                return false\n            end\n        else\n            return false\n        end\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukoznylz.lua:59: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpukoznylz.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqfkqm1f.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprqfkqm1f.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    local days = {}\n    local months = {}\n    local years = {}\n    local valid = true\n    local month = date:match('^(0[1-9]|1[0-2])([- /.])(0[1-9]|1[0-9]|2[0-9]|3[0-1])([- /.])(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|0[0-9])($|[^0-9])')\n    if month then\n        month = month:gsub('^0', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]$', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]', '')\n        month = month:gsub('^[- /.]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmplmhh7_iw.lua:44: unfinished string near ''^[- /.]'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j2d3j0m.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1j2d3j0m.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 9 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 31 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 30 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnz80lp1w.lua:40: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnz80lp1w.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or not day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or not day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or not day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexorm2w2.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpexorm2w2.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[12][0-9]|30)$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfcwe0ys4.lua:54: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfcwe0ys4.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq_4hn21.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiq_4hn21.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then return false\n    local date_parts = string.match(date, '^([0-9]{1,2})([-/.])([0-9]{1,2})([-/.])([0-9]{4})$')\n    if not date_parts then return false\n    local month = tonumber(date_parts[1])\n    local day = tonumber(date_parts[3])\n    local year = tonumber(date_parts[5])\n    if month < 1 or month > 12 then return false\n    if day < 1 or day > 31 then return false\n    if month == 2 and day > 29 then return false\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 30 then return false\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 29 then return false\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5o85dvt0.lua:20: 'end' expected (to close 'if' at line 19) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date and date:match('^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$') then\n        local day, month, year = date:gmatch(1), date:gmatch(2), date:gmatch(3)\n        if month and month:match('^[0-9]{1,2}$') and day and day:match('^[0-9]{1,2}$') and year and year:match('^[0-9]{4}$') then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiturl90l.lua:31: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiturl90l.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    else\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpws2cbt0u.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpws2cbt0u.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day < 1 or day > 31) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day < 1 or day > 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq_4hn21.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiq_4hn21.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhok8dhh.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwhok8dhh.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local month, day, year = date:match('^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[12][0-9]|30|31)$')\n    if not month then\n        return false\n    end\n    if not day then\n        return false\n    end\n    if not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gt7j5zv.lua:49: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8gt7j5zv.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local days = string.gsub(date, '-', '/')\n    local month = string.gsub(date, '-', '')\n    local year = string.gsub(date, '-', '')\n    local month = string.gsub(month, ' ', '')\n    local month = string.gsub(month, '0', '')\n    local month = string.gsub(month, '1', '1')\n    local month = string.gsub(month, '2', '2')\n    local month = string.gsub(month, '3', '3')\n    local month = string.gsub(month, '4', '4')\n    local month = string.gsub(month, '5', '5')\n    local month = string.gsub(month, '6', '6')\n    local month = string.gsub(month, '7', '7')\n    local month = string.gsub(month, '8', '8')\n    local month = string.gsub(month, '9', '9')\n    local month = string.gsub(month, '10', '10')\n    local month = string.gsub(month, '11', '11')\n    local month = string.gsub(month, '12', '12')\n    local month = string.gsub(month, '13', '13')\n    local month = string.gsub(month, '14', '14')\n    local month = string.gsub(month, '15', '15')\n    local month = string.gsub(month, '16', '16')\n    local month = string.gsub(month, '17', '17')\n    local month = string.gsub(month, '18', '18')\n    local month = string.gsub(month, '19', '19')\n    local month = string.gsub(month, '20', '20')\n    local month = string.gsub(month, '21', '21')\n    local month = string.gsub(month, '22', '22')\n    local month = string.gsub(month, '23', '23')\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzw0yclh_.lua:73: 'end' expected (to close 'function' at line 18) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date and date:match('^\\d{2}-\\d{2}-\\d{4}$') then\n        if date:tonumber() >= 1 and date:tonumber() <= 31 then\n            if date:tonumber() >= 1 and date:tonumber() <= 12 then\n                if date:tonumber() >= 1 and date:tonumber() <= 30 then\n                    return true\n                else\n                    return false\n                end\n            else\n                return false\n            end\n        else\n            return false\n        end\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx0_4ukh5.lua:19: invalid escape sequence near ''^\\d'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date == '' then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]|[4-9])$')\n    if not day or not month or not year then\n        return false\n    end\n    if month == '2' then\n        if not day or not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n        if not day or not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == '4' or month == '6' or month == '9' or month == '11' then\n        if not day or not (day >= 1 and day <= 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp512m76ow.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp512m76ow.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxno9cex.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxno9cex.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t0inoeb.lua:53: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0t0inoeb.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    if string.len(date) < 8 then\n        return false\n    end\n    if string.sub(date,1,2) < 1 or string.sub(date,1,2) > 12 then\n        return false\n    end\n    if string.sub(date,3,5) < 1 or string.sub(date,3,5) > 12 then\n        return false\n    end\n    if string.sub(date,6,8) < 1 or string.sub(date,6,8) > 31 then\n        return false\n    end\n    if string.sub(date,9,11) < 1 or string.sub(date,9,11) > 30 then\n        return false\n    end\n    if string.sub(date,12,14) < 1 or string.sub(date,12,14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89808a6j.lua:25: attempt to compare string with number\nstack traceback:\n\t/tmp/tmp89808a6j.lua:25: in local 'candidate'\n\t/tmp/tmp89808a6j.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhok8dhh.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwhok8dhh.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    if month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9petjedf.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9petjedf.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = string.match(date, '^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]|[4-9])$')\n    if not day then\n        return false\n    end\n    if month then\n        if month < 1 or month > 12 then\n            return false\n        end\n        if month == 2 and day > 29 then\n            return false\n        end\n        if month == 2 and day < 1 then\n            return false\n        end\n        if month == 4 or month == 6 or month == 9 or month == 11 and day > 30 then\n            return false\n        end\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 and day < 1 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6hksxz5.lua:49: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz6hksxz5.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[12][0-9]|30|31)$')\n    if not day or not month or not year then\n        return false\n    end\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day < 1 or month == 2 and day > 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v2haua_.lua:47: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7v2haua_.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])([-0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])([0-9]|[1-2][0-9]|3[0-1])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 and day > 29 then\n        return false\n    end\n    if month == 2 and day < 29 then\n        return false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppvf3qzz.lua:57: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpppvf3qzz.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])([- /.])(0[1-9]|1[012])([- /.])([0-3][0-9]|[12][0-9]|3[01]|0[1-9])$')\n    if not day or not month or not year then\n        return false\n    end\n    if month == '2' then\n        if not day or not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n        if not day or not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == '4' or month == '6' or month == '9' or month == '11' then\n        if not day or not (day >= 1 and day <= 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcb7aw9y.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdcb7aw9y.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or not (day < 1 or day > 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or not (day < 1 or day > 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or not (day < 1 or day > 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tbt07xn.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6tbt07xn.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxno9cex.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxno9cex.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|[6][0-9])$')\n    if not month or not day or not year then\n        return false\n    end\n    if month == '2' then\n        if not day or not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n        if not day or not (day >= 1 and day <= 31) then\n            return false\n        end\n    elseif month == '4' or month == '6' or month == '9' or month == '11' then\n        if not day or not (day >= 1 and day <= 30) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp916andks.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp916andks.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 13 then\n        return false\n    end\n    local month = string.sub(date, 1, 2)\n    local day = string.sub(date, 3, 4)\n    local year = string.sub(date, 6, 11)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_3g0xzd.lua:25: attempt to compare string with number\nstack traceback:\n\t/tmp/tmpj_3g0xzd.lua:25: in local 'candidate'\n\t/tmp/tmpj_3g0xzd.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date then\n        return false\n    end\n    local day, month, year = date:match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]|[4-9])$')\n    if not day or not month or not year then\n        return false\n    end\n    if month == '2' and day > 29 then\n        return false\n    end\n    if month == '1' or month == '3' or month == '5' or month == '7' or month == '8' or month == '10' or month == '12' then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month == '4' or month == '6' or month == '9' or month == '11' then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == '2' then\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0tzi8ss.lua:48: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt0tzi8ss.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if date and date:match('^[0-9]{2}-[0-9]{2}-[0-9]{4}$') then\n        local month, day, year = date:gmatch('.*-(.*)-(.*)')\n        if month and month:match('^[0-9]{1,2}$') and day and day:match('^[0-9]{1,2}$') and year and year:match('^[0-9]{4}$') then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppltpjnc5.lua:31: expected: true, actual: false\nstack traceback:\n\t/tmp/tmppltpjnc5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local day = string.gsub(date, '-', '/')\n    local month = string.gsub(day, '-', '')\n    local year = string.gsub(day, '-', '')\n    local month = string.gsub(month, '-', '')\n    if month == '' or month == '0' then\n        month = '01'\n    end\n    if month < '01' or month > '12' then\n        return false\n    end\n    if month == '02' then\n        if not day or day < '01' or day > '29' then\n            return false\n        end\n    else\n        if not day or day < '01' or day > '30' then\n            return false\n        end\n    end\n    if month == '01' or month == '03' or month == '05' or month == '07' or month == '08' or month == '10' or month == '12' then\n        if not day or day < '01' or day > '31' then\n            return false\n        end\n    else\n        if not day or day < '01' or day > '30' then\n            return false\n        end\n    end\n    if month == '04' or month == '06' or month == '09' or month == '11' then\n        if not day or day < '01' or day > '30' then\n            return false\n        end\n    else\n        if not day or day < '01' or day > '29' then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1qel4tw.lua:67: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz1qel4tw.lua:67: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) < 1 or string.len(date) > 9 then\n        return false\n    end\n    if string.sub(date, 1, 2) < 1 or string.sub(date, 1, 2) > 12 then\n        return false\n    end\n    if string.sub(date, 3, 5) < 1 or string.sub(date, 3, 5) > 12 then\n        return false\n    end\n    if string.sub(date, 6, 8) < 1 or string.sub(date, 6, 8) > 31 then\n        return false\n    end\n    if string.sub(date, 9, 11) < 1 or string.sub(date, 9, 11) > 30 then\n        return false\n    end\n    if string.sub(date, 12, 14) < 1 or string.sub(date, 12, 14) > 29 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3o9o5d3.lua:43: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi3o9o5d3.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not (day >= 1 and day <= 29) then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not (day >= 1 and day <= 30) then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not (day >= 1 and day <= 31) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajbuvrle.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpajbuvrle.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\n    if not date:\n        return false\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjj7f67in.lua:20: <name> expected near 'return'\n",
      "stdout": "",
      "timestamp": 1661907498
    },
    {
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(0[0-9]|[12][0-9]|3[01]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9])$')\n    if not month or not day or not year then\n        return false\n    end\n    local month = tonumber(month)\n    local day = tonumber(day)\n    local year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if not day or not year or day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if not day or not year or day < 1 or day > 31 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if not day or not year or day < 1 or day > 30 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2pxtzri.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_2pxtzri.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You have to write a function which validates a given date string and\n-- returns true if the date is valid otherwise false.\n-- The date is valid if all of the following rules are satisfied:\n-- 1. The date string is not empty.\n-- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n-- True\n-- >>> valid_date('15-01-2012')\n-- False\n-- >>> valid_date('04-0-2040')\n-- False\n-- >>> valid_date('06-04-2020')\n-- True\n-- >>> valid_date('06/04/2020')\n-- False\nlocal function valid_date(date)\n    if not date or string.len(date) == 0 then\n        return false\n    end\n    local month, day, year = string.match(date, '^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$')\n    if not month or not day or not year then\n        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return false\n    end\n    if month == 2 then\n        if day < 1 or day > 29 then\n            return false\n        end\n    elseif month == 4 or month == 6 or month == 9 or month == 11 then\n        if day < 1 or day > 30 then\n            return false\n        end\n    elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then\n        if day < 1 or day > 31 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwsru_y.lua:51: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmwsru_y.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907498
    }
  ]
}