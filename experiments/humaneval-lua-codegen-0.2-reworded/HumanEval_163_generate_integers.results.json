{
  "language": "lua",
  "name": "HumanEval_163_generate_integers",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtb2e14i.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmphtb2e14i.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        table.insert(t, i)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaebno38.lua:21: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpbaebno38.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtb2e14i.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmphtb2e14i.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = i\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihvjkr3q.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpihvjkr3q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            t[i] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2dve0yr.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpo2dve0yr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = i\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihvjkr3q.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpihvjkr3q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22oag3s1.lua:21: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmp22oag3s1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, a+1, 2 do\n        for j = b, b+1, 2 do\n            if i < j then\n                result[i*10+j] = true\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07nirkqf.lua:25: expected: {2, 4, 6, 8}\nactual: {30=true}\nstack traceback:\n\t/tmp/tmp07nirkqf.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i, j, result = 1, 1, {}\n    while a <= b do\n        if a % 2 == 0 then\n            table.insert(result, a)\n            a = a + 1\n        else\n            a = a + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qi68lfb.lua:26: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp5qi68lfb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22oag3s1.lua:21: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmp22oag3s1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22oag3s1.lua:21: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmp22oag3s1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            t[i] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2dve0yr.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpo2dve0yr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22oag3s1.lua:21: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmp22oag3s1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        table.insert(t, i)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaebno38.lua:21: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpbaebno38.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22oag3s1.lua:21: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmp22oag3s1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i = a\n    local j = b\n    local result = []\n    while i <= j do\n        if i % 2 == 0 then\n            result = result .. i\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5wvmwas.lua:13: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i = a\n    local j = b\n    local result = []\n    while i <= j do\n        if i % 2 == 0 then\n            result = result .. i\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5wvmwas.lua:13: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb314qifd.lua:22: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpb314qifd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb314qifd.lua:22: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpb314qifd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22oag3s1.lua:21: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmp22oag3s1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = i\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihvjkr3q.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpihvjkr3q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i = a\n    local j = b\n    local result = []\n    while i <= j do\n        if i % 2 == 0 then\n            result = result .. i\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5wvmwas.lua:13: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtb2e14i.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmphtb2e14i.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i, j, k, res = 1, 1, 0, {}\n    while a < b do\n        if a % 2 == 0 then\n            res[k] = a\n            k = k + 1\n        end\n        a = a + 1\n    end\n    for i = 1, k do\n        j = res[i]\n        while j < b do\n            res[k] = j\n            k = k + 1\n            j = j + 2\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ibbei06.lua:33: expected: {2, 4, 6, 8}\nactual: {0=2, 4, 6, 8, 4, 6, 8, 6, 8, 8, 4, 6, 8}\nstack traceback:\n\t/tmp/tmp2ibbei06.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i = a\n    local j = b\n    local result = []\n    while i <= j do\n        if i % 2 == 0 then\n            result = result .. i\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5wvmwas.lua:13: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22oag3s1.lua:21: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmp22oag3s1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, a+b, 2 do\n        if i > b then break end\n        result[i] = true\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6_w0uco.lua:22: expected: {2, 4, 6, 8}\nactual: {2=true, 4=true, 6=true, 8=true, 10=true}\nstack traceback:\n\t/tmp/tmph6_w0uco.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, a+1, 2 do\n        for j = b, b+1, 2 do\n            if i < j then\n                result[i*10+j] = true\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07nirkqf.lua:25: expected: {2, 4, 6, 8}\nactual: {30=true}\nstack traceback:\n\t/tmp/tmp07nirkqf.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            t[i] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2dve0yr.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpo2dve0yr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i, j, res = 1, 1, {}\n    while a <= b do\n        if a % 2 == 0 then\n            res[j] = a\n            j = j + 1\n        end\n        a = a + 1\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfexp8kd8.lua:26: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpfexp8kd8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx, cy, cz, da, db, dc, dd, de, df, dg, dh, di, dj, dk, dl, dm, dn, do, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, dz, ea, eb, ec, ed, ee, ef, eg, eh, ei, ej, ek, el, em, en, eo, ep, eq, er, es, et, eu, ev, ew, ex, ey, ez, fa, fb, fc, fd, fe, ff, fg, fh, fi, fj, fk, fl, fm, fn, fo, fp, fq, fr, fs, ft, fu, fv, fw, fx, fy, fz, ga, gb, gc, gd, ge, gf, gg, gh, gi, gj, gk, gl, gm, gn, go, gp,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr3yigc9g.lua:11: <name> expected near 'do'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i, j, k, res = 1, a, 0, {}\n    for i = a, b, 1 do\n        for j = 1, 10 do\n            if j % 2 == 0 then\n                k = j\n                break\n            end\n        end\n        if k ~= 0 then\n            table.insert(res, k)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5ko9u5m.lua:29: expected: {2, 4, 6, 8}\nactual: {2, 2, 2, 2, 2, 2, 2, 2, 2}\nstack traceback:\n\t/tmp/tmpe5ko9u5m.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i = a\n    local j = b\n    local result = []\n    while i <= j do\n        if i % 2 == 0 then\n            result = result .. i\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5wvmwas.lua:13: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtb2e14i.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmphtb2e14i.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1hcsmaqu.lua:11: too many local variables (limit is 200) in function at line 10 near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            t[i] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2dve0yr.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpo2dve0yr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    }
  ]
}