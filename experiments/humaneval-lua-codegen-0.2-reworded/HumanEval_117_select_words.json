{
  "name": "HumanEval_117_select_words",
  "language": "lua",
  "prompt": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 2 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                end\n            end\n            if word ~= \"\" then\n                table.insert(words, word)\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t = t .. {s:sub(1, i - 1)}\n            i = i + 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i - 1)] == nil then\n                words[s:sub(1, i - 1)] = {}\n            end\n            words[s:sub(1, i - 1)] = words[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return words[s]\nend",
    "    local t = {}\n    for i=1,#",
    "    local t = {}\n    for i=1,#",
    "    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            if #t == n then\n                t[#",
    "    local t = {}\n    for i=1,#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == s[i+1] then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = \"\"\n        local j = 1\n        while j <= #s do\n            if s[j] ~= \" \" then\n                word = word .. s[j]\n                j = j + 1\n            else\n                j = j + 1\n            end\n        end\n        if word ~= \"\" and #word == n then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local table = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table[s:sub(i, i)] = true\n        end\n    end\n    return table\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend",
    "    local t = {}\n    for i=1,#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ",
    "    local words = {}\n    for i=1,#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            table.insert(t, s:sub(i, i, n))\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i)] == nil then\n                words[s:sub(1, i)] = {}\n            end\n            words[s:sub(1, i)] = words[s:sub(1, i)]\n        else\n            if words[s:sub(1, i)] == nil then\n                words[s:sub(1, i)] = {}\n            end\n            words[s:sub(1, i)] = words[s:sub(1, i)]\n        end\n    end\n    for i = 1, #words do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i]\n    end\n    return words[1]\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n > 0 then\n                if n == 1 then\n                    words[s:sub(i, i)] = true\n                else\n                    words[s:sub(i, i)] = true\n                    n = n - 1\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                words[s:sub(i,i+1)]=1\n            else\n                words[s:sub(i,i+1)]=select_words(s:sub(i+1,s:len()),n-1)\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = 1\n            else\n                if s[i] == \" \" then\n                    n = n - 1\n                else\n                    n = n + 1\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return words[s]\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = 1\n            else\n                t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == \" \" then\n            if n == 0 then\n                t[s[i+1]] = 1\n            elseif n > 0 then\n                t[s[i+1]] = t[s[i+1]] + 1\n                if t[s[i+1]] == n then\n                    t[s[i+1]] = 1\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                words[s:sub(1,i)] = true\n            elseif n>0 then\n                words[s:sub(1,i)] = true\n                n = n - 1\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                table.insert(t, s[i..j])\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if n > 0 then\n                if n == 1 then\n                    words[s:sub(i, i, 1)] = true\n                else\n                    words[s:sub(i, i, 1)] = true\n                    n = n - 1\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        if t[i][n] == nil then\n            t[i][n] = {}\n        end\n        t[i][n] = t[i][n] .. {i}\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = 1\n            else\n                if s[i] == s[i+1] then\n                    t[s[i]] = t[s[i]] + 1\n                else\n                    t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if #t == n then\n                t = t .. s[i]\n            else\n                t = t .. s[i] .. \" \"\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\n    return nil\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\n    return nil\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words[#words + 1] = words[#words]\n            end\n        else\n            if n == 0 then\n                words[#words + 1] = s:sub(i, i)\n            else\n                words[#words + 1] = words[#words] .. s:sub(i, i)\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    return t[s[1]..s[n+1]]\nend",
    "    local words = {}\n    for i=1,#s do\n        local word = \"\"\n        for j=1,n do\n            if s[i+j-1] == \" \" then\n                word = word .. \" \"\n            else\n                word = word .. s[i+j-1]\n            end\n        end\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n        else\n            if words[s:sub(i, i)] == nil then\n                words[s:sub(i, i)] = {}\n            end\n            words[s:sub(i, i)] = words[s:sub(i, i)] + 1\n        end\n    end\n    return words[s]\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i, 1)] == nil then\n                t[s:sub(1, i, 1)] = {}\n            end\n            t[s:sub(1, i, 1)] = t[s:sub(1, i, 1)] .. {s:sub(i, #s, 1)}\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        for j = 1, #t[i], 1 do\n            if t[i][j] == nil then\n                t[i][j] = {}\n            end\n            for k = 1, #t[i][j], 1 do\n                if t[i][j][k] == nil then\n                    t[i][j][k] = {}\n                end\n                t[i][j][k] = t[i][j][k] .. {i}\n            end\n        end\n    end\n    return t[1]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            words[s:sub(i, i)] = true\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n > 0 then\n                if n == 1 then\n                    words[s:sub(i+1, i+1)] = true\n                else\n                    words[s:sub(i+1, i+1)] = true\n                    words[s:sub(i+2, i+2)] = true\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i)] == nil then\n                t[s:sub(1, i)] = {}\n            end\n            t[s:sub(1, i)][s:sub(i+1, #s)] = 1\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n    end\n    for i = 1, #t do\n        if t[i]:sub(1, #t[i]) == n then\n            return t[i]\n        end\n    end\n    return nil\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i)] ~= nil then\n                t[s:sub(1,i)] = t[s:sub(1,i)] .. \" \" .. s:sub(i+1)\n            else\n                t[s:sub(1,i)] = s:sub(i+1)\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i] ~= nil then\n            if t[i] ~= \"\" then\n                t[i] = t[i] .. \" \" .. i\n            else\n                t[i] = i\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,#s]\nend",
    "    local words = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i - 1)] == nil then\n                words[s:sub(1, i - 1)] = {}\n            end\n            words[s:sub(1, i - 1)] = words[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #words do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i] .. {i}\n    end\n    return words[1]\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == \" \" then\n            if t[s[i+1]] == nil then\n                t[s[i+1]] = 1\n            else\n                t[s[i+1]] = t[s[i+1]] + 1\n            end\n        else\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, n)}\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and i <= j and j - i + 1 == n then\n                if words[s[i]] == nil then\n                    words[s[i]] = 1\n                else\n                    words[s[i]] = words[s[i]] + 1\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] ~= nil then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i)..\" \"] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            t[s:sub(1,i-1)]=true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words = words or {}\n                words[s:sub(i, i)] = true\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if s[i] ~= \" \" then\n                    t[s[i]] = 1\n                end\n            elseif s[i] == s[i-1] then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==s:sub(i,i):len()==n then\n            t[s:sub(i,i)]=true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == \" \" then\n            if n == 0 then\n                t[s[i+1]] = 1\n            elseif n > 0 then\n                t[s[i+1]] = t[s[i+1]] + 1\n                if t[s[i+1]] == n then\n                    t[s[i+1]] = 1\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i):len()] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i) .. \" \" .. s:sub(i + 1, i + 1)] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i)..\" \"] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)]==nil then\n                t[s:sub(1,i-1)]=1\n            else\n                t[s:sub(1,i-1)]=t[s:sub(1,i-1)]+1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = {}\n            end\n            t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return t[s]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[s]\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            end\n        else\n            if n == 0 or #words == 0 then\n                words[s:sub(i, i)] = 1\n            else\n                words[s:sub(i, i)] = words[s:sub(i, i)] + 1\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[s]\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = {}\n            end\n            t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] .. {s:sub(i, i)}\n        end\n    end\n    return t[s]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i - 1)] == nil then\n                words[s:sub(1, i - 1)] = {}\n            end\n            words[s:sub(1, i - 1)] = words[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\n    return nil\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                if words[s[i]] == nil then\n                    words[s[i]] = 1\n                else\n                    words[s[i]] = words[s[i]] + 1\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)]==nil then\n                t[s:sub(1,i-1)] = {}\n            end\n            t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. {s:sub(i+1,#s)}\n        end\n    end\n    return t[1]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local t1 = {}\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    t1[s[j]] = 1\n                end\n            end\n            if #t1 > 0 then\n                table.insert(t, t1)\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if words[s:sub(1,i-1)]==nil then\n                words[s:sub(1,i-1)]=1\n            else\n                words[s:sub(1,i-1)]=words[s:sub(1,i-1)]+1\n            end\n        end\n    end\n    for i=1,#words do\n        if words[i]==n then\n            table.insert(words, i)\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i)]==nil then\n                t[s:sub(1,i)]=1\n            else\n                t[s:sub(1,i)]=t[s:sub(1,i)]+1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)]=t[s:sub(1,i-1)]..\",\"..s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)]=s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend",
    "    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j=i,i+n,1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i - 1, 1)] == nil then\n                t[s:sub(1, i - 1, 1)] = {}\n            end\n            t[s:sub(1, i - 1, 1)] = t[s:sub(1, i - 1, 1)] .. {s:sub(i + 1, #s, 1)}\n        end\n    end\n    return t[s]\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            t[s[i:i+n]] = true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            end\n        else\n            if n == 0 or #s:sub(1, i) == \" \" then\n                if #words == 0 then\n                    words[s:sub(i, i)] = 1\n                else\n                    words[s:sub(i, i)] = words[s:sub(i, i)] + 1\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i+1, i)] == nil then\n                words[s:sub(i+1, i)] = {}\n            end\n            words[s:sub(i+1, i)] = words[s:sub(i+1, i)]\n        else\n            if words[s:sub(i, i)] == nil then\n                words[s:sub(i, i)] = {}\n            end\n            words[s:sub(i, i)] = words[s:sub(i, i)]\n        end\n    end\n    return words[s]\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i,",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = true\n            else\n                for j = i + 1, #s, 1 do\n                    if s[j] ~= \" \" then\n                        if n == #s - i + 1 then\n                            t[s[i:j]] = true\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if s[i:i+n] ~= \"\" then\n                table.insert(t, s[i:i+n])\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = 1\n            else\n                words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    return words[s]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = 1\n            else\n                t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, s:sub(i + 1, i + 1))\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        if words[i][n] == nil then\n            words[i][n] = {}\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if words[s:sub(1, i - 1, 1)] == nil then\n                words[s:sub(1, i - 1, 1)] = {}\n            end\n            words[s:sub(1, i - 1, 1)] = words[s:sub(1, i - 1, 1)] .. {s:sub(i + 1, #s, 1)}\n        end\n    end\n    return words[s]\nend",
    "    local words = {}\n    for i = 1, #s do\n        for j = 1, #s:sub(i, n+1) do\n            if s:sub(i, j) ~= \"\" then\n                table.insert(words, s:sub(i, j))\n            end\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = {}\n            else\n                words[s:sub(i + 1, i + 1) .. \" \"] = 1\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local table = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                table[s[i]] = 1\n            end\n        end\n    end\n    return table\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,#s]\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = {}\n            else\n                words[s:sub(i + 1, i + 1) .. \" \"] = true\n            end\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if s[i] ~= \" \" then\n                    if s[i] ~= \" \" then\n                        if s[i] ~= \" \" then\n                            if s[i] ~= \" \" then\n                                if s[i] ~= \" \" then\n                                    if s[i] ~= \" \" then\n                                        if s[i] ~= \" \" then\n                                            if s[i] ~= \" \" then\n                                                if s[i] ~= \" \" then\n                                                    if s[i] ~= \" \" then\n                                                        if s[i] ~= \" \" then\n                                                            if s[i] ~= \" \" then\n                                                                if s[i] ~= \" \" then\n                                                                    if s[i] ~= \" \" then\n                                                                        if s[i] ~= \" \" then\n                                                                            if s[i] ~= \" \" then\n                                                                                if s[i] ~= \" \" then\n                                                                                    if s[i] ~= \" \" then\n                                                                                        words[s[i]] = 1\n                                                                                    end\n                                                                                end\n                                                                            end\n                                                                        end\n                                                                    end\n                                                                end\n                                                            end\n                                                        end\n                                                    end\n                                                end\n                                            end\n                                        end\n                                    end\n                                end\n                            end\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words[#words + 1] = words[#words]\n            end\n        else\n            if n == 0 then\n                words[#words + 1] = s:sub(i, i)\n            else\n                words[#words + 1] = words[#words] .. s:sub(i, i)\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                table.insert(t, s[i..j])\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i,",
    "    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local t1 = {}\n            for j = i, i+n-1, 1 do\n                if s[j] ~= \" \" then\n                    t1[s[j]] = 1\n                end\n            end\n            if #t1 > 0 then\n                t[#t+1] = t1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return words[s]\nend",
    "    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = 1\n            else\n                if s[i-1] == \" \" then\n                    t[s[i]] = 1\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i)]==nil then\n                t[s:sub(1,i)] = 1\n            else\n                t[s:sub(1,i)] = t[s:sub(1,i)] + 1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and i - j + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s do\n        for j = 1, #s:sub(i, n+1) do\n            if s:sub(i, j) ~= \"\" then\n                table.insert(t, s:sub(i, j))\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            words[s:sub(i, i)] = true\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = 1\n            else\n                t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    return t[s:sub(1, n + 1)]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i] + 1\n    end\n    return words[1]\nend",
    "    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                words[s:sub(1,i)]=true\n            else\n                for j=i+1,#s do\n                    if s:sub(i,j)==\" \" then\n                        if n==0 then\n                            words[s:sub(1,i):sub(i+1,j)]=true\n                        else\n                            words[s:sub(1,i):sub(i+1,j)]=true\n                    end\n                end\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, n)}\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i:sub(i, 1)) == s:sub(i, i:sub(i, 1)) then\n            words[s:sub(i, i:sub(i, 1))] = true\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i:sub(i, 1)) == s:sub(i, i:sub(i, 1)) then\n            words[s:sub(i, i:sub(i, 1))] = true\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 1 then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                t[s:sub(1,i-1)]=true\n            else\n                t[s:sub(1,i-1)]=true\n                if n==1 then\n                    t[s:sub(1,i-1)]=true\n                else\n                    t[s:sub(1,i-1)]=true\n                    if n==2 then\n                        t[s:sub(1,i-1)]=true\n                    else\n                        t[s:sub(1,i-1)]=true\n                        if n==3 then\n                            t[s:sub(1,i-1)]=true\n                        else\n                            t[s:sub(1,i-1)]=true\n                            if n==4 then\n                                t[s:sub(1,i-1)]=true\n                            else\n                                t[s:sub(1,i-1)]=true\n                                if n==5 then\n                                    t[s:sub(1,i-1)]=true\n                                else\n                                    t[s:sub(1,i-1)]=true\n                                    if n==6 then\n                                        t[s:sub(1,i-1)]=true\n                                    else\n                                        t[s:sub(1,i-1)]=true\n                                        if n==7 then\n                                            t[s:sub(1,i-1)]=true\n                                        else\n                                            t[s:sub(1,i-1)]=true\n                                            if n==8 then\n                                                t[s:sub(1,i-1)]=true\n                                            else\n                                                t[s:sub(1,i-1)]=true\n                                                if n==9 then\n                                                    t[s:sub(1,i-1)]=true\n                                                else\n                                                    t[s:sub(1,i-1)]=true\n                                                    if n==10 then\n                                    ",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] ~= nil then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(i+1,i+1)]==nil then\n                t[s:sub(i+1,i+1)]=1\n            else\n                t[s:sub(i+1,i+1)]=t[s:sub(i+1,i+1)]+1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)]==nil then\n                t[s:sub(1,i-1)] = {}\n            end\n            t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. {s:sub(i+1,#s)}\n        end\n    end\n    for i=1,#t do\n        if t[i]==nil then\n            t[i] = {}\n        end\n        if t[i][n]==nil then\n            t[i][n] = {}\n        end\n        t[i][n] = t[i][n] .. {i}\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return words[s]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            table.insert(t, s:sub(i, i, n))\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                words[#words + 1] = word\n            end\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i+1, i)] == nil then\n                words[s:sub(i+1, i)] = {}\n            end\n            words[s:sub(i+1, i)] = words[s:sub(i+1, i)]\n        else\n            if words[s:sub(i, i)] == nil then\n                words[s:sub(i, i)] = {}\n            end\n            words[s:sub(i, i)] = words[s:sub(i, i)]\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i]\n    end\n    return words[1]\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if n == 1 then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            local t1 = {}\n            for j=i,i+n-1,1 do\n                if s[j] ~= \" \" then\n                    t1[s[j]] = 1\n                end\n            end\n            if #t1 > 0 then\n                t[#t+1] = t1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            t = t .. {s:sub(1, i - 1)}\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i:sub(i, 1)) == s:sub(i, i:sub(i, 1)) then\n            words[s:sub(i, i:sub(i, 1))] = true\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end",
    "    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] ~= nil then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and i - j + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words[#words + 1] = words[#words]\n            end\n        else\n            if n == 0 then\n                words[#words + 1] = s:sub(i, i)\n            else\n                words[#words + 1] = words[#words] .. s:sub(i, i)\n            end\n        end\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if #t == n then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, n)}\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            table.insert(t, s:sub(i, i, n))\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            words[s:sub(i, i, n)] = true\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s do\n        local word = \"\"\n        for j=1,n do\n            if s[i+j-1] == \" \" then\n                word = word .. \" \"\n            else\n                word = word .. s[i+j-1]\n            end\n        end\n        if word ~= \"\" then\n            words[#words+1] = word\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if words[s:sub(i+1,i)] then\n                words[s:sub(i+1,i)] = words[s:sub(i+1,i)] .. \" \" .. s:sub(i+1,i)\n            else\n                words[s:sub(i+1,i)] = s:sub(i+1,i)\n            end\n        end\n    end\n    for i=1,#words do\n        if words[i] then\n            if n==0 then\n                return words[i]\n            elseif n==1 then\n                return words[i]\n            elseif n==2 then\n                return words[i] .. \" \" .. words[i+1]\n            elseif n==3 then\n                return words[i] .. \" \" .. words[i+1] .. \" \" .. words[i+2]\n            end\n        end\n    end\n    return \"\"\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = {}\n            end\n            t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] .. {s:sub(i, i)}\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, #t[i])}\n    end\n    return t[1]\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = \"\"\n        local j = 1\n        while j <= n and j <= #s:\n            if s[j] == \" \" then\n                word = word .. \" \"\n                j = j + 1\n            elseif s[j] == \" \" then\n                j = j + 1\n            else\n                word = word .. s[j]\n                j = j + 1\n            end\n        end\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                table.insert(t, s[i..j])\n            end\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i) .. \" \" .. s:sub(i + 1, i + 1)] = 1\n        end\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i)] == nil then\n                t[s:sub(1, i)] = 1\n            else\n                t[s:sub(1, i)] = t[s:sub(1, i)] + 1\n            end\n        end\n    end\n    for i = 1, #t do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}