{
  "language": "lua",
  "name": "HumanEval_55_fib",
  "results": [
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpax2bxung.lua:10: 'end' expected (to close 'if' at line 9) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1\n    elseif n == 2 then return 1\n    else return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkolx8h81.lua:24: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1\n    elseif n == 2 then return 1\n    else return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkolx8h81.lua:24: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then return 0\n    if n == 1 then return 1\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu75p7i6l.lua:10: 'end' expected (to close 'if' at line 9) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then return 0\n    if n == 1 then return 1\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu75p7i6l.lua:10: 'end' expected (to close 'if' at line 9) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292528,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 1,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vl0adsk.lua:10: stack overflow\nstack traceback:\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t/tmp/tmp2vl0adsk.lua:10: in upvalue 'fib'\n\t...\n\t/tmp/tmp2vl0adsk.lua:10: in local 'candidate'\n\t/tmp/tmp2vl0adsk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.146 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 then\n        return 1\n    elseif n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    },
    {
      "exit_code": 0,
      "program": "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n-- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n    if n == 1 or n == 2 then\n        return 1\n    else\n        return fib(n-1) + fib(n-2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907515
    }
  ]
}