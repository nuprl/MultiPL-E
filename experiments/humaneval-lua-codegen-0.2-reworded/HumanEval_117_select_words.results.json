{
  "language": "lua",
  "name": "HumanEval_117_select_words",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 2 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                end\n            end\n            if word ~= \"\" then\n                table.insert(words, word)\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbferhet.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpxbferhet.lua:24: in local 'candidate'\n\t/tmp/tmpxbferhet.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t = t .. {s:sub(1, i - 1)}\n            i = i + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqh0a67z.lua:21: attempt to concatenate a table value (local 't')\nstack traceback:\n\t/tmp/tmpvqh0a67z.lua:21: in local 'candidate'\n\t/tmp/tmpvqh0a67z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfujqjgab.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfujqjgab.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i - 1)] == nil then\n                words[s:sub(1, i - 1)] = {}\n            end\n            words[s:sub(1, i - 1)] = words[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k3qzcyh.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp7k3qzcyh.lua:24: in local 'candidate'\n\t/tmp/tmp7k3qzcyh.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpe53iznjc.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpe53iznjc.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            if #t == n then\n                t[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpf0rhqs8g.lua:23: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmph5hqazx1.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == s[i+1] then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgx1mt71.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpwgx1mt71.lua:22: in local 'candidate'\n\t/tmp/tmpwgx1mt71.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_o6o7h2r.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp_o6o7h2r.lua:22: in local 'candidate'\n\t/tmp/tmp_o6o7h2r.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpo5jpv7pu.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = \"\"\n        local j = 1\n        while j <= #s do\n            if s[j] ~= \" \" then\n                word = word .. s[j]\n                j = j + 1\n            else\n                j = j + 1\n            end\n        end\n        if word ~= \"\" and #word == n then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpen_szvv8.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpen_szvv8.lua:25: in local 'candidate'\n\t/tmp/tmpen_szvv8.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local table = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table[s:sub(i, i)] = true\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbouyb2d.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprbouyb2d.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkt343i6_.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpkt343i6_.lua:24: in local 'candidate'\n\t/tmp/tmpkt343i6_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpo5jpv7pu.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpcoo7sfgx.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6xjgc32_.lua:49: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            table.insert(t, s:sub(i, i, n))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzvc5s70.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpmzvc5s70.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i)] == nil then\n                words[s:sub(1, i)] = {}\n            end\n            words[s:sub(1, i)] = words[s:sub(1, i)]\n        else\n            if words[s:sub(1, i)] == nil then\n                words[s:sub(1, i)] = {}\n            end\n            words[s:sub(1, i)] = words[s:sub(1, i)]\n        end\n    end\n    for i = 1, #words do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i]\n    end\n    return words[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr495vu0j.lua:44: expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpr495vu0j.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n > 0 then\n                if n == 1 then\n                    words[s:sub(i, i)] = true\n                else\n                    words[s:sub(i, i)] = true\n                    n = n - 1\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ocse571.lua:37: expected: {\"little\"}\nactual: {\" \"=true}\nstack traceback:\n\t/tmp/tmp9ocse571.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                words[s:sub(i,i+1)]=1\n            else\n                words[s:sub(i,i+1)]=select_words(s:sub(i+1,s:len()),n-1)\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w56w0xv.lua:34: expected: {\"little\"}\nactual: {\" a\"={\" l\"={}}, \" h\"={\" a\"={\" l\"={}}, \" l\"={}}, \" l\"={}}\nstack traceback:\n\t/tmp/tmp4w56w0xv.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = 1\n            else\n                if s[i] == \" \" then\n                    n = n - 1\n                else\n                    n = n + 1\n                end\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzdtd9g4.lua:38: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmplzdtd9g4.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjwfjws4.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpcjwfjws4.lua:24: in local 'candidate'\n\t/tmp/tmpcjwfjws4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = 1\n            else\n                t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv_71n0g.lua:34: expected: {\"little\"}\nactual: {a=1, h=1, l=1}\nstack traceback:\n\t/tmp/tmpqv_71n0g.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == \" \" then\n            if n == 0 then\n                t[s[i+1]] = 1\n            elseif n > 0 then\n                t[s[i+1]] = t[s[i+1]] + 1\n                if t[s[i+1]] == n then\n                    t[s[i+1]] = 1\n                end\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjayh8f8d.lua:37: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpjayh8f8d.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdk06o9tj.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpdk06o9tj.lua:22: in local 'candidate'\n\t/tmp/tmpdk06o9tj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                words[s:sub(1,i)] = true\n            elseif n>0 then\n                words[s:sub(1,i)] = true\n                n = n - 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk60cv5a.lua:35: expected: {\"little\"}\nactual: {\"Mary \"=true, \"Mary had \"=true, \"Mary had a \"=true, \"Mary had a little \"=true}\nstack traceback:\n\t/tmp/tmpkk60cv5a.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                table.insert(t, s[i..j])\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88gponim.lua:32: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp88gponim.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if n > 0 then\n                if n == 1 then\n                    words[s:sub(i, i, 1)] = true\n                else\n                    words[s:sub(i, i, 1)] = true\n                    n = n - 1\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkx1cqd3m.lua:37: expected: {\"little\"}\nactual: {\" \"=true}\nstack traceback:\n\t/tmp/tmpkx1cqd3m.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        if t[i][n] == nil then\n            t[i][n] = {}\n        end\n        t[i][n] = t[i][n] .. {i}\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2ae8f1u.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp_2ae8f1u.lua:24: in local 'candidate'\n\t/tmp/tmp_2ae8f1u.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzby3hkx2.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpzby3hkx2.lua:23: in local 'candidate'\n\t/tmp/tmpzby3hkx2.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = 1\n            else\n                if s[i] == s[i+1] then\n                    t[s[i]] = t[s[i]] + 1\n                else\n                    t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpb84ekb3p.lua:46: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr24c9wl8.lua:39: expected: {\"little\"}\nactual: {\" \"=4}\nstack traceback:\n\t/tmp/tmpr24c9wl8.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xyrc7c2.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1xyrc7c2.lua:24: in local 'candidate'\n\t/tmp/tmp1xyrc7c2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if #t == n then\n                t = t .. s[i]\n            else\n                t = t .. s[i] .. \" \"\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8sxvhxj5.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp8sxvhxj5.lua:24: in local 'candidate'\n\t/tmp/tmp8sxvhxj5.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr24c9wl8.lua:39: expected: {\"little\"}\nactual: {\" \"=4}\nstack traceback:\n\t/tmp/tmpr24c9wl8.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8sxvhxj5.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp8sxvhxj5.lua:24: in local 'candidate'\n\t/tmp/tmp8sxvhxj5.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words[#words + 1] = words[#words]\n            end\n        else\n            if n == 0 then\n                words[#words + 1] = s:sub(i, i)\n            else\n                words[#words + 1] = words[#words] .. s:sub(i, i)\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqj7at_q.lua:30: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqqj7at_q.lua:30: in local 'candidate'\n\t/tmp/tmpqqj7at_q.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    return t[s[1]..s[n+1]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7b0lpio2.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmp7b0lpio2.lua:23: in local 'candidate'\n\t/tmp/tmp7b0lpio2.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i=1,#s do\n        local word = \"\"\n        for j=1,n do\n            if s[i+j-1] == \" \" then\n                word = word .. \" \"\n            else\n                word = word .. s[i+j-1]\n            end\n        end\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9z6d92sp.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp9z6d92sp.lua:25: in local 'candidate'\n\t/tmp/tmp9z6d92sp.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n        else\n            if words[s:sub(i, i)] == nil then\n                words[s:sub(i, i)] = {}\n            end\n            words[s:sub(i, i)] = words[s:sub(i, i)] + 1\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1opm9ni1.lua:29: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp1opm9ni1.lua:29: in local 'candidate'\n\t/tmp/tmp1opm9ni1.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc4z0go2o.lua:48: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i, 1)] == nil then\n                t[s:sub(1, i, 1)] = {}\n            end\n            t[s:sub(1, i, 1)] = t[s:sub(1, i, 1)] .. {s:sub(i, #s, 1)}\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        for j = 1, #t[i], 1 do\n            if t[i][j] == nil then\n                t[i][j] = {}\n            end\n            for k = 1, #t[i][j], 1 do\n                if t[i][j][k] == nil then\n                    t[i][j][k] = {}\n                end\n                t[i][j][k] = t[i][j][k] .. {i}\n            end\n        end\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16ajpz__.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp16ajpz__.lua:24: in local 'candidate'\n\t/tmp/tmp16ajpz__.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdhvdg83b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpdhvdg83b.lua:22: in local 'candidate'\n\t/tmp/tmpdhvdg83b.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr24c9wl8.lua:39: expected: {\"little\"}\nactual: {\" \"=4}\nstack traceback:\n\t/tmp/tmpr24c9wl8.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ns2u7rf.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ns2u7rf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbv0of34r.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpbv0of34r.lua:24: in local 'candidate'\n\t/tmp/tmpbv0of34r.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaphrkkq.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppaphrkkq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            words[s:sub(i, i)] = true\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9bl5g5d.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpy9bl5g5d.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp24ayrd1v.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmp24ayrd1v.lua:23: in local 'candidate'\n\t/tmp/tmp24ayrd1v.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n > 0 then\n                if n == 1 then\n                    words[s:sub(i+1, i+1)] = true\n                else\n                    words[s:sub(i+1, i+1)] = true\n                    words[s:sub(i+2, i+2)] = true\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqfp_6zf.lua:37: expected: {\"little\"}\nactual: {\" \"=true, a=true, h=true, i=true, l=true}\nstack traceback:\n\t/tmp/tmptqfp_6zf.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i)] == nil then\n                t[s:sub(1, i)] = {}\n            end\n            t[s:sub(1, i)][s:sub(i+1, #s)] = 1\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n    end\n    for i = 1, #t do\n        if t[i]:sub(1, #t[i]) == n then\n            return t[i]\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzycubm2w.lua:43: expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpzycubm2w.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i)] ~= nil then\n                t[s:sub(1,i)] = t[s:sub(1,i)] .. \" \" .. s:sub(i+1)\n            else\n                t[s:sub(1,i)] = s:sub(i+1)\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i] ~= nil then\n            if t[i] ~= \"\" then\n                t[i] = t[i] .. \" \" .. i\n            else\n                t[i] = i\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyub8_vvj.lua:43: expected: \n{\"little\"}\nactual: \n{\n    \"Mary \"=\"had a little lamb\",\n    \"Mary had \"=\"a little lamb\",\n    \"Mary had a \"=\"little lamb\",\n    \"Mary had a little \"=\"lamb\"\n}\nstack traceback:\n\t/tmp/tmpyub8_vvj.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,#s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8gf6igb5.lua:28: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i - 1)] == nil then\n                words[s:sub(1, i - 1)] = {}\n            end\n            words[s:sub(1, i - 1)] = words[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #words do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i] .. {i}\n    end\n    return words[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6qwbgho.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpf6qwbgho.lua:24: in local 'candidate'\n\t/tmp/tmpf6qwbgho.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == \" \" then\n            if t[s[i+1]] == nil then\n                t[s[i+1]] = 1\n            else\n                t[s[i+1]] = t[s[i+1]] + 1\n            end\n        else\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3oesedme.lua:28: table index is nil\nstack traceback:\n\t/tmp/tmp3oesedme.lua:28: in local 'candidate'\n\t/tmp/tmp3oesedme.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaphrkkq.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppaphrkkq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, n)}\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5g43_42c.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp5g43_42c.lua:24: in local 'candidate'\n\t/tmp/tmp5g43_42c.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and i <= j and j - i + 1 == n then\n                if words[s[i]] == nil then\n                    words[s[i]] = 1\n                else\n                    words[s[i]] = words[s[i]] + 1\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsz0o8gho.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpsz0o8gho.lua:23: in local 'candidate'\n\t/tmp/tmpsz0o8gho.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] ~= nil then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3tou5oxp.lua:28: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ns2u7rf.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ns2u7rf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i)..\" \"] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh_h43z8.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpgh_h43z8.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            t[s:sub(1,i-1)]=true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0h69g3w.lua:30: expected: {\"little\"}\nactual: {Mary=true, \"Mary had\"=true, \"Mary had a\"=true, \"Mary had a little\"=true}\nstack traceback:\n\t/tmp/tmpb0h69g3w.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words = words or {}\n                words[s:sub(i, i)] = true\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjn4ef1_y.lua:43: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if s[i] ~= \" \" then\n                    t[s[i]] = 1\n                end\n            elseif s[i] == s[i-1] then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo0224bv.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmppo0224bv.lua:23: in local 'candidate'\n\t/tmp/tmppo0224bv.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbv0of34r.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpbv0of34r.lua:24: in local 'candidate'\n\t/tmp/tmpbv0of34r.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==s:sub(i,i):len()==n then\n            t[s:sub(i,i)]=true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqz746y9.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwqz746y9.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == \" \" then\n            if n == 0 then\n                t[s[i+1]] = 1\n            elseif n > 0 then\n                t[s[i+1]] = t[s[i+1]] + 1\n                if t[s[i+1]] == n then\n                    t[s[i+1]] = 1\n                end\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjayh8f8d.lua:37: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpjayh8f8d.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i):len()] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrqccz93.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprrqccz93.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i) .. \" \" .. s:sub(i + 1, i + 1)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisox9fdl.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpisox9fdl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaphrkkq.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppaphrkkq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaphrkkq.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppaphrkkq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i)..\" \"] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh_h43z8.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpgh_h43z8.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)]==nil then\n                t[s:sub(1,i-1)]=1\n            else\n                t[s:sub(1,i-1)]=t[s:sub(1,i-1)]+1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qsz_55l.lua:39: expected: {\"little\"}\nactual: {Mary=1, \"Mary had\"=1, \"Mary had a\"=1, \"Mary had a little\"=1}\nstack traceback:\n\t/tmp/tmp5qsz_55l.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = {}\n            end\n            t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return t[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5vl7o94.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpu5vl7o94.lua:24: in local 'candidate'\n\t/tmp/tmpu5vl7o94.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xyrc7c2.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1xyrc7c2.lua:24: in local 'candidate'\n\t/tmp/tmp1xyrc7c2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfndh8uz.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmppfndh8uz.lua:24: in local 'candidate'\n\t/tmp/tmppfndh8uz.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            end\n        else\n            if n == 0 or #words == 0 then\n                words[s:sub(i, i)] = 1\n            else\n                words[s:sub(i, i)] = words[s:sub(i, i)] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfp9ileg2.lua:38: expected: {\"little\"}\nactual: {M=1, a=1, e=1, i=1, l=1, m=1, r=1, t=1}\nstack traceback:\n\t/tmp/tmpfp9ileg2.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppcwvaz3s.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmppcwvaz3s.lua:24: in local 'candidate'\n\t/tmp/tmppcwvaz3s.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkt343i6_.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpkt343i6_.lua:24: in local 'candidate'\n\t/tmp/tmpkt343i6_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = {}\n            end\n            t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] .. {s:sub(i, i)}\n        end\n    end\n    return t[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz07matld.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpz07matld.lua:24: in local 'candidate'\n\t/tmp/tmpz07matld.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ns2u7rf.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ns2u7rf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i - 1)] == nil then\n                words[s:sub(1, i - 1)] = {}\n            end\n            words[s:sub(1, i - 1)] = words[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0akgzxg.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpr0akgzxg.lua:24: in local 'candidate'\n\t/tmp/tmpr0akgzxg.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                if words[s[i]] == nil then\n                    words[s[i]] = 1\n                else\n                    words[s[i]] = words[s[i]] + 1\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2o8kltel.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmp2o8kltel.lua:23: in local 'candidate'\n\t/tmp/tmp2o8kltel.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ns2u7rf.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ns2u7rf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfujqjgab.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfujqjgab.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)]==nil then\n                t[s:sub(1,i-1)] = {}\n            end\n            t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. {s:sub(i+1,#s)}\n        end\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8l2cakzn.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp8l2cakzn.lua:24: in local 'candidate'\n\t/tmp/tmp8l2cakzn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local t1 = {}\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    t1[s[j]] = 1\n                end\n            end\n            if #t1 > 0 then\n                table.insert(t, t1)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiy9lpgnh.lua:24: table index is nil\nstack traceback:\n\t/tmp/tmpiy9lpgnh.lua:24: in local 'candidate'\n\t/tmp/tmpiy9lpgnh.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if words[s:sub(1,i-1)]==nil then\n                words[s:sub(1,i-1)]=1\n            else\n                words[s:sub(1,i-1)]=words[s:sub(1,i-1)]+1\n            end\n        end\n    end\n    for i=1,#words do\n        if words[i]==n then\n            table.insert(words, i)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv9twukq.lua:39: expected: {\"little\"}\nactual: {Mary=1, \"Mary had\"=1, \"Mary had a\"=1, \"Mary had a little\"=1}\nstack traceback:\n\t/tmp/tmpdv9twukq.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_o6o7h2r.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp_o6o7h2r.lua:22: in local 'candidate'\n\t/tmp/tmp_o6o7h2r.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_o6o7h2r.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp_o6o7h2r.lua:22: in local 'candidate'\n\t/tmp/tmp_o6o7h2r.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i)]==nil then\n                t[s:sub(1,i)]=1\n            else\n                t[s:sub(1,i)]=t[s:sub(1,i)]+1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_jjwac6.lua:39: expected: {\"little\"}\nactual: {\"Mary \"=1, \"Mary had \"=1, \"Mary had a \"=1, \"Mary had a little \"=1}\nstack traceback:\n\t/tmp/tmpd_jjwac6.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaphrkkq.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppaphrkkq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)]=t[s:sub(1,i-1)]..\",\"..s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)]=s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7ng_ra0y.lua:28: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j=i,i+n,1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0i5jdu07.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0i5jdu07.lua:24: in local 'candidate'\n\t/tmp/tmp0i5jdu07.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(1, i - 1, 1)] == nil then\n                t[s:sub(1, i - 1, 1)] = {}\n            end\n            t[s:sub(1, i - 1, 1)] = t[s:sub(1, i - 1, 1)] .. {s:sub(i + 1, #s, 1)}\n        end\n    end\n    return t[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj52awn3o.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpj52awn3o.lua:24: in local 'candidate'\n\t/tmp/tmpj52awn3o.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            t[s[i:i+n]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzvex8wj2.lua:21: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            end\n        else\n            if n == 0 or #s:sub(1, i) == \" \" then\n                if #words == 0 then\n                    words[s:sub(i, i)] = 1\n                else\n                    words[s:sub(i, i)] = words[s:sub(i, i)] + 1\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegb81i00.lua:40: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpegb81i00.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i+1, i)] == nil then\n                words[s:sub(i+1, i)] = {}\n            end\n            words[s:sub(i+1, i)] = words[s:sub(i+1, i)]\n        else\n            if words[s:sub(i, i)] == nil then\n                words[s:sub(i, i)] = {}\n            end\n            words[s:sub(i, i)] = words[s:sub(i, i)]\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2deziixt.lua:38: expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp2deziixt.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjb5ebpio.lua:72: ')' expected (to close '(' at line 71) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymjfqcq5.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpymjfqcq5.lua:22: in local 'candidate'\n\t/tmp/tmpymjfqcq5.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = true\n            else\n                for j = i + 1, #s, 1 do\n                    if s[j] ~= \" \" then\n                        if n == #s - i + 1 then\n                            t[s[i:j]] = true\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpl51g80r4.lua:27: function arguments expected near ']'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if s[i:i+n] ~= \"\" then\n                table.insert(t, s[i:i+n])\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmptscwvnz6.lua:21: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = 1\n            else\n                words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc693qskz.lua:34: expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpc693qskz.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymjfqcq5.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpymjfqcq5.lua:22: in local 'candidate'\n\t/tmp/tmpymjfqcq5.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = 1\n            else\n                t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, s:sub(i + 1, i + 1))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7ribru7.lua:39: expected: {\"little\"}\nactual: {a=1, h=1, l=1}\nstack traceback:\n\t/tmp/tmps7ribru7.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        if words[i][n] == nil then\n            words[i][n] = {}\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppos73jq1.lua:24: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmppos73jq1.lua:24: in local 'candidate'\n\t/tmp/tmppos73jq1.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if words[s:sub(1, i - 1, 1)] == nil then\n                words[s:sub(1, i - 1, 1)] = {}\n            end\n            words[s:sub(1, i - 1, 1)] = words[s:sub(1, i - 1, 1)] .. {s:sub(i + 1, #s, 1)}\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfu3bxgt1.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpfu3bxgt1.lua:24: in local 'candidate'\n\t/tmp/tmpfu3bxgt1.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        for j = 1, #s:sub(i, n+1) do\n            if s:sub(i, j) ~= \"\" then\n                table.insert(words, s:sub(i, j))\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u23dget.lua:32: expected: {\"little\"}\nactual: {\"M\", \"Ma\", \"Mar\", \"Mary\", \"Mary \", \"a\", \"ar\", \"ary\", \"r\"}\nstack traceback:\n\t/tmp/tmp0u23dget.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = {}\n            else\n                words[s:sub(i + 1, i + 1) .. \" \"] = 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp848eky1e.lua:42: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxtfaorzh.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpxtfaorzh.lua:22: in local 'candidate'\n\t/tmp/tmpxtfaorzh.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local table = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                table[s[i]] = 1\n            end\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3gi5vi1b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp3gi5vi1b.lua:22: in local 'candidate'\n\t/tmp/tmp3gi5vi1b.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,#s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8gf6igb5.lua:28: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = {}\n            else\n                words[s:sub(i + 1, i + 1) .. \" \"] = true\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw6ms1g8.lua:34: expected: {\"little\"}\nactual: {\"a \"=true, \"h \"=true, \"l \"=true}\nstack traceback:\n\t/tmp/tmpcw6ms1g8.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if s[i] ~= \" \" then\n                    if s[i] ~= \" \" then\n                        if s[i] ~= \" \" then\n                            if s[i] ~= \" \" then\n                                if s[i] ~= \" \" then\n                                    if s[i] ~= \" \" then\n                                        if s[i] ~= \" \" then\n                                            if s[i] ~= \" \" then\n                                                if s[i] ~= \" \" then\n                                                    if s[i] ~= \" \" then\n                                                        if s[i] ~= \" \" then\n                                                            if s[i] ~= \" \" then\n                                                                if s[i] ~= \" \" then\n                                                                    if s[i] ~= \" \" then\n                                                                        if s[i] ~= \" \" then\n                                                                            if s[i] ~= \" \" then\n                                                                                if s[i] ~= \" \" then\n                                                                                    if s[i] ~= \" \" then\n                                                                                        words[s[i]] = 1\n                                                                                    end\n                                                                                end\n                                                                            end\n                                                                        end\n                                                                    end\n                                                                end\n                                                            end\n                                                        end\n                                                    end\n                                                end\n                                            end\n                                        end\n                                    end\n                                end\n                            end\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo9y83hhc.lua:40: table index is nil\nstack traceback:\n\t/tmp/tmpo9y83hhc.lua:40: in local 'candidate'\n\t/tmp/tmpo9y83hhc.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzby3hkx2.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpzby3hkx2.lua:23: in local 'candidate'\n\t/tmp/tmpzby3hkx2.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xyrc7c2.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1xyrc7c2.lua:24: in local 'candidate'\n\t/tmp/tmp1xyrc7c2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxtfaorzh.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpxtfaorzh.lua:22: in local 'candidate'\n\t/tmp/tmpxtfaorzh.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words[#words + 1] = words[#words]\n            end\n        else\n            if n == 0 then\n                words[#words + 1] = s:sub(i, i)\n            else\n                words[#words + 1] = words[#words] .. s:sub(i, i)\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqj7at_q.lua:30: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqqj7at_q.lua:30: in local 'candidate'\n\t/tmp/tmpqqj7at_q.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplor8luze.lua:39: expected: {\"little\"}\nactual: {\" \"=4}\nstack traceback:\n\t/tmp/tmplor8luze.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkt343i6_.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpkt343i6_.lua:24: in local 'candidate'\n\t/tmp/tmpkt343i6_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                table.insert(t, s[i..j])\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88gponim.lua:32: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp88gponim.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i, i)] = true\n        end\n    end\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            words[s:sub(i,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjb5ebpio.lua:72: ')' expected (to close '(' at line 71) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local t1 = {}\n            for j = i, i+n-1, 1 do\n                if s[j] ~= \" \" then\n                    t1[s[j]] = 1\n                end\n            end\n            if #t1 > 0 then\n                t[#t+1] = t1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsbbk1pp.lua:24: table index is nil\nstack traceback:\n\t/tmp/tmphsbbk1pp.lua:24: in local 'candidate'\n\t/tmp/tmphsbbk1pp.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphav8qiz7.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmphav8qiz7.lua:22: in local 'candidate'\n\t/tmp/tmphav8qiz7.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfujqjgab.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfujqjgab.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjwfjws4.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpcjwfjws4.lua:24: in local 'candidate'\n\t/tmp/tmpcjwfjws4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if n == 0 then\n                t[s[i]] = 1\n            else\n                if s[i-1] == \" \" then\n                    t[s[i]] = 1\n                end\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw2t2i2n.lua:36: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpmw2t2i2n.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i)]==nil then\n                t[s:sub(1,i)] = 1\n            else\n                t[s:sub(1,i)] = t[s:sub(1,i)] + 1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoeg4r9j5.lua:39: expected: {\"little\"}\nactual: {\"Mary \"=1, \"Mary had \"=1, \"Mary had a \"=1, \"Mary had a little \"=1}\nstack traceback:\n\t/tmp/tmpoeg4r9j5.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaphrkkq.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppaphrkkq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and i - j + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvr2tndoa.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpvr2tndoa.lua:22: in local 'candidate'\n\t/tmp/tmpvr2tndoa.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        for j = 1, #s:sub(i, n+1) do\n            if s:sub(i, j) ~= \"\" then\n                table.insert(t, s:sub(i, j))\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuukeed30.lua:32: expected: {\"little\"}\nactual: {\"M\", \"Ma\", \"Mar\", \"Mary\", \"Mary \", \"a\", \"ar\", \"ary\", \"r\"}\nstack traceback:\n\t/tmp/tmpuukeed30.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdk06o9tj.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpdk06o9tj.lua:22: in local 'candidate'\n\t/tmp/tmpdk06o9tj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc4z0go2o.lua:48: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            words[s:sub(i, i)] = true\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9bl5g5d.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpy9bl5g5d.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = 1\n            else\n                t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] + 1\n            end\n        end\n    end\n    return t[s:sub(1, n + 1)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4sxcy5g.lua:34: expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpw4sxcy5g.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ns2u7rf.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ns2u7rf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] + 1\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i] + 1\n    end\n    return words[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0aoisrqc.lua:24: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp0aoisrqc.lua:24: in local 'candidate'\n\t/tmp/tmp0aoisrqc.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                words[s:sub(1,i)]=true\n            else\n                for j=i+1,#s do\n                    if s:sub(i,j)==\" \" then\n                        if n==0 then\n                            words[s:sub(1,i):sub(i+1,j)]=true\n                        else\n                            words[s:sub(1,i):sub(i+1,j)]=true\n                    end\n                end\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa4hkvpfa.lua:50: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, n)}\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcurwpfah.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpcurwpfah.lua:24: in local 'candidate'\n\t/tmp/tmpcurwpfah.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i:sub(i, 1)) == s:sub(i, i:sub(i, 1)) then\n            words[s:sub(i, i:sub(i, 1))] = true\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuht0xrt2.lua:20: attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpuht0xrt2.lua:20: in local 'candidate'\n\t/tmp/tmpuht0xrt2.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xyrc7c2.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1xyrc7c2.lua:24: in local 'candidate'\n\t/tmp/tmp1xyrc7c2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ns2u7rf.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ns2u7rf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i:sub(i, 1)) == s:sub(i, i:sub(i, 1)) then\n            words[s:sub(i, i:sub(i, 1))] = true\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuht0xrt2.lua:20: attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpuht0xrt2.lua:20: in local 'candidate'\n\t/tmp/tmpuht0xrt2.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymjfqcq5.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpymjfqcq5.lua:22: in local 'candidate'\n\t/tmp/tmpymjfqcq5.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            if n == 1 then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3yg6t_i4.lua:24: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp3yg6t_i4.lua:24: in local 'candidate'\n\t/tmp/tmp3yg6t_i4.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if n==0 then\n                t[s:sub(1,i-1)]=true\n            else\n                t[s:sub(1,i-1)]=true\n                if n==1 then\n                    t[s:sub(1,i-1)]=true\n                else\n                    t[s:sub(1,i-1)]=true\n                    if n==2 then\n                        t[s:sub(1,i-1)]=true\n                    else\n                        t[s:sub(1,i-1)]=true\n                        if n==3 then\n                            t[s:sub(1,i-1)]=true\n                        else\n                            t[s:sub(1,i-1)]=true\n                            if n==4 then\n                                t[s:sub(1,i-1)]=true\n                            else\n                                t[s:sub(1,i-1)]=true\n                                if n==5 then\n                                    t[s:sub(1,i-1)]=true\n                                else\n                                    t[s:sub(1,i-1)]=true\n                                    if n==6 then\n                                        t[s:sub(1,i-1)]=true\n                                    else\n                                        t[s:sub(1,i-1)]=true\n                                        if n==7 then\n                                            t[s:sub(1,i-1)]=true\n                                        else\n                                            t[s:sub(1,i-1)]=true\n                                            if n==8 then\n                                                t[s:sub(1,i-1)]=true\n                                            else\n                                                t[s:sub(1,i-1)]=true\n                                                if n==9 then\n                                                    t[s:sub(1,i-1)]=true\n                                                else\n                                                    t[s:sub(1,i-1)]=true\n                                                    if n==10 then\n                                    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp52sae7uo.lua:76: 'end' expected (to close 'if' at line 61) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            if t[s:sub(i, i, 1)] == nil then\n                t[s:sub(i, i, 1)] = 1\n            else\n                t[s:sub(i, i, 1)] = t[s:sub(i, i, 1)] + 1\n            end\n        end\n    end\n    for i = 1, #t, 1 do\n        if t[i] == n then\n            table.insert(t, s:sub(i, i, 1))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr24c9wl8.lua:39: expected: {\"little\"}\nactual: {\" \"=4}\nstack traceback:\n\t/tmp/tmpr24c9wl8.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdhvdg83b.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpdhvdg83b.lua:22: in local 'candidate'\n\t/tmp/tmpdhvdg83b.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] ~= nil then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqfzuyyo.lua:34: expected: \n{\"little\"}\nactual: \n{\n    Mary=\"had a little lamb\",\n    \"Mary had\"=\"a little lamb\",\n    \"Mary had a\"=\"little lamb\",\n    \"Mary had a little\"=\"lamb\"\n}\nstack traceback:\n\t/tmp/tmpoqfzuyyo.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(i+1,i+1)]==nil then\n                t[s:sub(i+1,i+1)]=1\n            else\n                t[s:sub(i+1,i+1)]=t[s:sub(i+1,i+1)]+1\n            end\n        end\n    end\n    for i=1,#t do\n        if t[i]==n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvubj8p6.lua:39: expected: {\"little\"}\nactual: {a=1, h=1, l=2}\nstack traceback:\n\t/tmp/tmpbvubj8p6.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)]==nil then\n                t[s:sub(1,i-1)] = {}\n            end\n            t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. {s:sub(i+1,#s)}\n        end\n    end\n    for i=1,#t do\n        if t[i]==nil then\n            t[i] = {}\n        end\n        if t[i][n]==nil then\n            t[i][n] = {}\n        end\n        t[i][n] = t[i][n] .. {i}\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3vj94_zo.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp3vj94_zo.lua:24: in local 'candidate'\n\t/tmp/tmp3vj94_zo.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpaup1gsh5.lua:28: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_lfpi513.lua:81: 'end' expected (to close 'for' at line 64) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkt343i6_.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpkt343i6_.lua:24: in local 'candidate'\n\t/tmp/tmpkt343i6_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i + 1)}\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjwfjws4.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpcjwfjws4.lua:24: in local 'candidate'\n\t/tmp/tmpcjwfjws4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            table.insert(t, s:sub(i, i, n))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzvc5s70.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpmzvc5s70.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                words[#words + 1] = word\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqk2p9kfk.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqk2p9kfk.lua:24: in local 'candidate'\n\t/tmp/tmpqk2p9kfk.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i+1, i)] == nil then\n                words[s:sub(i+1, i)] = {}\n            end\n            words[s:sub(i+1, i)] = words[s:sub(i+1, i)]\n        else\n            if words[s:sub(i, i)] == nil then\n                words[s:sub(i, i)] = {}\n            end\n            words[s:sub(i, i)] = words[s:sub(i, i)]\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i]\n    end\n    return words[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj45bpuv.lua:44: expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpaj45bpuv.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdbthlagl.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpdbthlagl.lua:24: in local 'candidate'\n\t/tmp/tmpdbthlagl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphav8qiz7.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmphav8qiz7.lua:22: in local 'candidate'\n\t/tmp/tmphav8qiz7.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if n == 1 then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwsgqj0yk.lua:44: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 1 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                else\n                    break\n                end\n            end\n            if word ~= \"\" then\n                table.insert(t, word)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xyrc7c2.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1xyrc7c2.lua:24: in local 'candidate'\n\t/tmp/tmp1xyrc7c2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            local t1 = {}\n            for j=i,i+n-1,1 do\n                if s[j] ~= \" \" then\n                    t1[s[j]] = 1\n                end\n            end\n            if #t1 > 0 then\n                t[#t+1] = t1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccw03hy7.lua:24: table index is nil\nstack traceback:\n\t/tmp/tmpccw03hy7.lua:24: in local 'candidate'\n\t/tmp/tmpccw03hy7.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            t = t .. {s:sub(1, i - 1)}\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36jzmycc.lua:21: attempt to concatenate a table value (local 't')\nstack traceback:\n\t/tmp/tmp36jzmycc.lua:21: in local 'candidate'\n\t/tmp/tmp36jzmycc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i:sub(i, 1)) == s:sub(i, i:sub(i, 1)) then\n            words[s:sub(i, i:sub(i, 1))] = true\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuht0xrt2.lua:20: attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpuht0xrt2.lua:20: in local 'candidate'\n\t/tmp/tmpuht0xrt2.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\n    end\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t[s:sub(i, i, 1)] = true\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_lfpi513.lua:81: 'end' expected (to close 'for' at line 64) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if t[s:sub(1,i-1)] ~= nil then\n                t[s:sub(1,i-1)] = t[s:sub(1,i-1)] .. \" \" .. s:sub(i+1,#s)\n            else\n                t[s:sub(1,i-1)] = s:sub(i+1,#s)\n            end\n        end\n    end\n    return t[1,n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3tou5oxp.lua:28: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and i - j + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvr2tndoa.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpvr2tndoa.lua:22: in local 'candidate'\n\t/tmp/tmpvr2tndoa.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymjfqcq5.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpymjfqcq5.lua:22: in local 'candidate'\n\t/tmp/tmpymjfqcq5.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if n == 0 then\n                words = words\n            else\n                words[#words + 1] = words[#words]\n            end\n        else\n            if n == 0 then\n                words[#words + 1] = s:sub(i, i)\n            else\n                words[#words + 1] = words[#words] .. s:sub(i, i)\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqj7at_q.lua:30: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqqj7at_q.lua:30: in local 'candidate'\n\t/tmp/tmpqqj7at_q.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphav8qiz7.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmphav8qiz7.lua:22: in local 'candidate'\n\t/tmp/tmphav8qiz7.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#s do\n        if s[i] ~= \" \" then\n            if #t == n then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmlhtqghy.lua:24: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpmlhtqghy.lua:24: in local 'candidate'\n\t/tmp/tmpmlhtqghy.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfujqjgab.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfujqjgab.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    for i = 1, #t do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, n)}\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcurwpfah.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpcurwpfah.lua:24: in local 'candidate'\n\t/tmp/tmpcurwpfah.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            table.insert(t, s:sub(i, i, n))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzvc5s70.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpmzvc5s70.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            t[s:sub(i, i, n)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ns2u7rf.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ns2u7rf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            words[s:sub(i, i, n)] = true\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxo1nhhw.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpcxo1nhhw.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i=1,#s do\n        local word = \"\"\n        for j=1,n do\n            if s[i+j-1] == \" \" then\n                word = word .. \" \"\n            else\n                word = word .. s[i+j-1]\n            end\n        end\n        if word ~= \"\" then\n            words[#words+1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjgv8eu9.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpdjgv8eu9.lua:25: in local 'candidate'\n\t/tmp/tmpdjgv8eu9.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i=1,#s do\n        if s:sub(i,i)==\" \" then\n            if words[s:sub(i+1,i)] then\n                words[s:sub(i+1,i)] = words[s:sub(i+1,i)] .. \" \" .. s:sub(i+1,i)\n            else\n                words[s:sub(i+1,i)] = s:sub(i+1,i)\n            end\n        end\n    end\n    for i=1,#words do\n        if words[i] then\n            if n==0 then\n                return words[i]\n            elseif n==1 then\n                return words[i]\n            elseif n==2 then\n                return words[i] .. \" \" .. words[i+1]\n            elseif n==3 then\n                return words[i] .. \" \" .. words[i+1] .. \" \" .. words[i+2]\n            end\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_6r4mgj.lua:47: expected: {\"little\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpd_6r4mgj.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(i + 1, i + 1)] == nil then\n                words[s:sub(i + 1, i + 1)] = {}\n            end\n            words[s:sub(i + 1, i + 1)] = words[s:sub(i + 1, i + 1)] .. {s:sub(i, i)}\n        end\n    end\n    for i = 1, #words, 2 do\n        if words[i] ~= nil and #words[i] == n then\n            return words[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp88ajqb0_.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp88ajqb0_.lua:24: in local 'candidate'\n\t/tmp/tmp88ajqb0_.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(i + 1, i + 1)] == nil then\n                t[s:sub(i + 1, i + 1)] = {}\n            end\n            t[s:sub(i + 1, i + 1)] = t[s:sub(i + 1, i + 1)] .. {s:sub(i, i)}\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == nil then\n            t[i] = {}\n        end\n        t[i] = t[i] .. {t[i]:sub(1, #t[i])}\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_n9xzvc6.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp_n9xzvc6.lua:24: in local 'candidate'\n\t/tmp/tmp_n9xzvc6.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                t[s[i]] = 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdk06o9tj.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpdk06o9tj.lua:22: in local 'candidate'\n\t/tmp/tmpdk06o9tj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = \"\"\n        local j = 1\n        while j <= n and j <= #s:\n            if s[j] == \" \" then\n                word = word .. \" \"\n                j = j + 1\n            elseif s[j] == \" \" then\n                j = j + 1\n            else\n                word = word .. s[j]\n                j = j + 1\n            end\n        end\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpelbegweg.lua:24: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n                end\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzby3hkx2.lua:23: table index is nil\nstack traceback:\n\t/tmp/tmpzby3hkx2.lua:23: in local 'candidate'\n\t/tmp/tmpzby3hkx2.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and (j - i + 1) == n then\n                table.insert(t, s[i..j])\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq7ertg2.lua:32: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpdq7ertg2.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1):len() == n then\n            t[s:sub(i, i) .. \" \" .. s:sub(i + 1, i + 1)] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisox9fdl.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpisox9fdl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i)] == nil then\n                t[s:sub(1, i)] = 1\n            else\n                t[s:sub(1, i)] = t[s:sub(1, i)] + 1\n            end\n        end\n    end\n    for i = 1, #t do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6y8gl7l.lua:39: expected: {\"little\"}\nactual: {\"Mary \"=1, \"Mary had \"=1, \"Mary had a \"=1, \"Mary had a little \"=1}\nstack traceback:\n\t/tmp/tmpr6y8gl7l.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}