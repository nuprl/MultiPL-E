{
  "language": "lua",
  "name": "HumanEval_47_median",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplk91i99a.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplk91i99a.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyrg0738l.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvfo4fnfh.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxxdntpy7.lua:11: 'end' expected (to close 'if' at line 10) near 'if'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then return nil\n    elseif n == 1 then return t[1]\n    else\n        local m = math.floor(n / 2)\n        local a = t[m + 1]\n        local b = t[m]\n        if a < b then return a\n        else return b\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpw22ohvl4.lua:33: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / n / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmvaza5z.lua:20: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpdmvaza5z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplk91i99a.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    elseif n == 1 then return l[1]\n    else\n        local m = math.floor(n/2)\n        return (l[m] + l[n]) / 2.0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9im9a70.lua:21: expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpn9im9a70.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / n / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmvaza5z.lua:20: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpdmvaza5z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxxdntpy7.lua:11: 'end' expected (to close 'if' at line 10) near 'if'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return t[1]\n    else\n        local m = math.floor(n/2)\n        if n%2 == 0 then\n            return (t[m] + t[m+1])/2\n        else\n            return t[m+1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9qv7lot4.lua:35: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq_fvdly.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpzq_fvdly.lua:11: in local 'candidate'\n\t/tmp/tmpzq_fvdly.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return t[1]\n    else\n        local m = math.floor(n / 2)\n        if n % 2 == 0 then\n            return (t[m] + t[m + 1]) / 2\n        else\n            return t[m + 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8b3sbxi4.lua:35: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = table.getn(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahm1pso5.lua:7: attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpahm1pso5.lua:7: in local 'candidate'\n\t/tmp/tmpahm1pso5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    elseif n == 1 then return l[1]\n    elseif l[n] > l[n-1] then return l[n]\n    else return l[n-1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpamc36fio.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbjokfsg.lua:12: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqbjokfsg.lua:12: in local 'candidate'\n\t/tmp/tmpqbjokfsg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = table.getn(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahm1pso5.lua:7: attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpahm1pso5.lua:7: in local 'candidate'\n\t/tmp/tmpahm1pso5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6orbit12.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if #t % 2 == 0 then\n            return t[i]\n        else\n            return t[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavfft36j.lua:24: expected: 8.0, actual: -10\nstack traceback:\n\t/tmp/tmpavfft36j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyrg0738l.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyrg0738l.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5v4cufmz.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmp5v4cufmz.lua:11: in local 'candidate'\n\t/tmp/tmp5v4cufmz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqnly78_r.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqbmdbutg.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyrg0738l.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbjokfsg.lua:12: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqbjokfsg.lua:12: in local 'candidate'\n\t/tmp/tmpqbjokfsg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if #t % 2 == 0 then\n            return t[i]\n        else\n            return t[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavfft36j.lua:24: expected: 8.0, actual: -10\nstack traceback:\n\t/tmp/tmpavfft36j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / (n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq762aw_j.lua:20: expected: 3, actual: 4.0\nstack traceback:\n\t/tmp/tmpq762aw_j.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = i\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (t[l[m]] + t[l[m + 1]]) / 2\n    else\n        return t[l[m + 1]]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0c4agcw8.lua:27: expected: 8.0, actual: nil\nstack traceback:\n\t/tmp/tmp0c4agcw8.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqnly78_r.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = table.count(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelhvyrfx.lua:7: attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpelhvyrfx.lua:7: in local 'candidate'\n\t/tmp/tmpelhvyrfx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    elseif n == 1 then return l[1]\n    else return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx72dj5l0.lua:25: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbjokfsg.lua:12: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqbjokfsg.lua:12: in local 'candidate'\n\t/tmp/tmpqbjokfsg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = table.getn(l)\n    if n == 0 then\n        return nil\n    end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahm1pso5.lua:7: attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpahm1pso5.lua:7: in local 'candidate'\n\t/tmp/tmpahm1pso5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 2 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhv8xzon.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpwhv8xzon.lua:11: in local 'candidate'\n\t/tmp/tmpwhv8xzon.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,2 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9r4oy1s.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpx9r4oy1s.lua:11: in local 'candidate'\n\t/tmp/tmpx9r4oy1s.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    for i = 1, #t, 1 do\n        if #t > 1 then\n            t[#t] = t[i]\n            t[#t] = math.floor(t[#t] / 2)\n            t[#t] = math.floor(t[#t] + t[i] / 2)\n        end\n    end\n    return t[#t]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44bsabzt.lua:25: expected: 8.0, actual: 7\nstack traceback:\n\t/tmp/tmp44bsabzt.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,2 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9r4oy1s.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpx9r4oy1s.lua:11: in local 'candidate'\n\t/tmp/tmpx9r4oy1s.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rncz4l8.lua:17: expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2rncz4l8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n        if #t > 1 then\n            t[#t] = t[#t] + t[#t+1]\n        end\n    end\n    return t[#t] / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5sx8aq4v.lua:11: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp5sx8aq4v.lua:11: in local 'candidate'\n\t/tmp/tmp5sx8aq4v.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqbmdbutg.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq_fvdly.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpzq_fvdly.lua:11: in local 'candidate'\n\t/tmp/tmpzq_fvdly.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvfo4fnfh.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4p_p8db.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpe4p_p8db.lua:11: in local 'candidate'\n\t/tmp/tmpe4p_p8db.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqnly78_r.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvfo4fnfh.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rncz4l8.lua:17: expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2rncz4l8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rncz4l8.lua:17: expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2rncz4l8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n == 1 then return l[1] end\n    if n == 2 then return (l[1] + l[2]) / 2.0 end\n    return (l[m] + l[m+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e8yvrx4.lua:18: expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp5e8yvrx4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    for i=1,#t,1 do\n        if t[i] > t[i+1] then\n            t[i+1] = t[i]\n        end\n    end\n    return t[#t]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbjokfsg.lua:12: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqbjokfsg.lua:12: in local 'candidate'\n\t/tmp/tmpqbjokfsg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5v4cufmz.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmp5v4cufmz.lua:11: in local 'candidate'\n\t/tmp/tmp5v4cufmz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gy4mlmo.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmp8gy4mlmo.lua:11: in local 'candidate'\n\t/tmp/tmp8gy4mlmo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqbmdbutg.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[#t + 1] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5v4cufmz.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmp5v4cufmz.lua:11: in local 'candidate'\n\t/tmp/tmp5v4cufmz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqnly78_r.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[i] = l[i]\n    end\n    return math.median(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq_fvdly.lua:11: attempt to call a nil value (field 'median')\nstack traceback:\n\t/tmp/tmpzq_fvdly.lua:11: in local 'candidate'\n\t/tmp/tmpzq_fvdly.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6orbit12.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1] end\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rncz4l8.lua:17: expected: 3, actual: 1.5\nstack traceback:\n\t/tmp/tmp2rncz4l8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2.0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq0ct6x2q.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyrg0738l.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n == 1 then return l[1] else\n    if n == 2 then return (l[1] + l[2]) / 2\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3rl_8kh8.lua:12: 'end' expected (to close 'if' at line 11) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = table.getn(l)\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt8lv_eyp.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 1 then return l[1]\n    return (l[n] + l[n-1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqnly78_r.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    n = math.floor(n/2)\n    if n == 0 then return l[1]\n    return (l[n] + l[n+1]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps13mgwbc.lua:11: 'end' expected (to close 'if' at line 10) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n%2 == 0 then\n        return (l[m] + l[m+1])/2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsewu25nq.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    if n == 1 then return l[1] end\n    s = 0\n    for i = 1, n, 2 do\n        s = s + l[i]\n    end\n    return s / n / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmvaza5z.lua:20: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpdmvaza5z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n        if #t > 1 then\n            if t[#t] > t[#t+1] then\n                t[#t] = t[#t+1]\n            end\n        end\n    end\n    return t[#t]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppe5e4h0a.lua:11: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppe5e4h0a.lua:11: in local 'candidate'\n\t/tmp/tmppe5e4h0a.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "exit_code": 1,
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local n = #l\n    if n == 0 then return nil end\n    local m = math.floor(n/2)\n    if n % 2 == 0 then\n        return (l[m] + l[m+1]) / 2\n    else\n        return l[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmt899yip.lua:26: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907493
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[#t+1] = l[i]\n        if #t > 1 then\n            if t[#t] > t[#t+1] then\n                t[#t] = t[#t+1]\n            end\n        end\n    end\n    return t[#t]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppe5e4h0a.lua:11: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppe5e4h0a.lua:11: in local 'candidate'\n\t/tmp/tmppe5e4h0a.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return median of elements in the table l.\n-- >>> median([3, 1, 2, 4, 5])\n-- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[i] = l[i]\n    end\n    local n = #t\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return t[1]\n    else\n        local m = math.floor(n / 2)\n        if n % 2 == 0 then\n            return (t[m] + t[m + 1]) / 2\n        else\n            return t[m + 1]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d8dm1y2.lua:29: expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5d8dm1y2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}