{
  "language": "lua",
  "name": "HumanEval_145_order_by_points",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8j7ge3c.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {1, -12, 11, -11, -1}\nstack traceback:\n\t/tmp/tmpw8j7ge3c.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 2 do\n        for j = i + 1, #nums, 2 do\n            if nums[i] + nums[j] < nums[i] then\n                resultnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpuwsbuhu_.lua:16: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 2 do\n        table[nums[i]] = i\n    end\n    for i = 2, #nums, 2 do\n        if nums[i] ~= nums[i-1] then\n            table[nums[i]] = i\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6po4gu99.lua:20: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp6po4gu99.lua:20: in local 'candidate'\n\t/tmp/tmp6po4gu99.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i=1,#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps0k03h6u.lua:13: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    return t:sort(function(a, b)\n        return a[1] + a[2] - b[1] - b[2]\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpextxioqy.lua:15: attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpextxioqy.lua:15: in local 'candidate'\n\t/tmp/tmpextxioqy.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                nums[i], nums[j] = nums[j], nums[i]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s6qp_in.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp8s6qp_in.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local sorted = {}\n    for i, num in ipairs(nums) do\n        sorted[sorted.table[num]] = i\n        sorted.table[num] = i\n    end\n    return sorted.table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_3f7u24.lua:13: attempt to index a nil value (field 'table')\nstack traceback:\n\t/tmp/tmpo_3f7u24.lua:13: in local 'candidate'\n\t/tmp/tmpo_3f7u24.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local function compare(a, b)\n        return a[1] - b[1]\n    end\n    return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0liqthk5.lua:12: attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp0liqthk5.lua:12: in function </tmp/tmp0liqthk5.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp0liqthk5.lua:14: in local 'candidate'\n\t/tmp/tmp0liqthk5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local function compare(a, b)\n        return a[1] - b[1]\n    end\n    return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0liqthk5.lua:12: attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp0liqthk5.lua:12: in function </tmp/tmp0liqthk5.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp0liqthk5.lua:14: in local 'candidate'\n\t/tmp/tmp0liqthk5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local sorted = {}\n    for i, num in ipairs(nums) do\n        sorted[num] = i\n    end\n    for i, num in ipairs(nums) do\n        sorted[num] = i\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe58tjvns.lua:24: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpe58tjvns.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] > nums[j - 1] then\n                table[nums[j]] = table[nums[j - 1]]\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0r48ua7f.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp0r48ua7f.lua:22: in local 'candidate'\n\t/tmp/tmp0r48ua7f.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukduzpk6.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpukduzpk6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        result[num] = i\n    end\n    for i, num in ipairs(nums) do\n        if result[num] ~= num then\n            result[num] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfctc7dmv.lua:26: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpfctc7dmv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqw6yh_q.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpqqw6yh_q.lua:15: in local 'candidate'\n\t/tmp/tmpqqw6yh_q.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local sorted = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        for j, c in ipairs(num) do\n            sum = sum + c\n        end\n        sorted[sum] = i\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4n03fca.lua:14: bad argument #1 to 'ipairs' (table expected, got number)\nstack traceback:\n\t/tmp/tmpq4n03fca.lua:14: in local 'candidate'\n\t/tmp/tmpq4n03fca.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local sorted = {}\n    for i, num in ipairs(nums) do\n        sorted[num] = i\n    end\n    for i, num in ipairs(nums) do\n        local sum = 0\n        for j, digit in ipairs(num) do\n            sum = sum + digit\n        end\n        sorted[sum] = i\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0et74ew0.lua:17: bad argument #1 to 'ipairs' (table expected, got number)\nstack traceback:\n\t/tmp/tmp0et74ew0.lua:17: in local 'candidate'\n\t/tmp/tmp0et74ew0.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                nums[i], nums[j] = nums[j], nums[i]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s6qp_in.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp8s6qp_in.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] < nums[j] then\n                result[i] = j\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8kwwhto.lua:26: expected: {-1, -11, 1, -12, 11}\nactual: {2, 3=1, 4=1, 5=1}\nstack traceback:\n\t/tmp/tmpq8kwwhto.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n            end\n        end\n    end\n    return table.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7x0gb7r.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpa7x0gb7r.lua:23: in local 'candidate'\n\t/tmp/tmpa7x0gb7r.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    for i, v in ipairs(nums) do\n        n = 0\n        for j, w in ipairs(nums) do\n            n = n + v * w\n        end\n        t[n] = i\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggxjqm64.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpggxjqm64.lua:22: in local 'candidate'\n\t/tmp/tmpggxjqm64.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua5owjdt.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {1, -12, -11, -1, 11}\nstack traceback:\n\t/tmp/tmpua5owjdt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqw6yh_q.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpqqw6yh_q.lua:15: in local 'candidate'\n\t/tmp/tmpqqw6yh_q.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0j0wt8se.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp0j0wt8se.lua:15: in local 'candidate'\n\t/tmp/tmp0j0wt8se.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return table[a] < table[b]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyo_2l66_.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpyo_2l66_.lua:15: in local 'candidate'\n\t/tmp/tmpyo_2l66_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i=1,#nums,2 do\n        t[nums[i]] = i\n    end\n    for i=1,#nums,2 do\n        t[nums[i]] = i\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07l3sg38.lua:18: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp07l3sg38.lua:18: in local 'candidate'\n\t/tmp/tmp07l3sg38.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local sorted = {}\n    for i, num in ipairs(nums) do\n        sorted[num] = i\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzeethg2.lua:21: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpyzeethg2.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j - 1] then\n                t[t.p = nums[j]] = i\n                break\n            end\n        end\n    end\n    return t.p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8d2oi95d.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    return t:sort(function(a, b)\n        return a[1] - b[1]\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6dcgp8e.lua:15: attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpa6dcgp8e.lua:15: in local 'candidate'\n\t/tmp/tmpa6dcgp8e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef582u37.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpef582u37.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0j0wt8se.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp0j0wt8se.lua:15: in local 'candidate'\n\t/tmp/tmp0j0wt8se.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3u5nbbcv.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp3u5nbbcv.lua:23: in local 'candidate'\n\t/tmp/tmp3u5nbbcv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdrcnqk8.lua:23: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsdrcnqk8.lua:23: in local 'candidate'\n\t/tmp/tmpsdrcnqk8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vz7lwlm.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp4vz7lwlm.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnuf19t17.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpnuf19t17.lua:24: in local 'candidate'\n\t/tmp/tmpnuf19t17.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0j0wt8se.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp0j0wt8se.lua:15: in local 'candidate'\n\t/tmp/tmp0j0wt8se.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3u5nbbcv.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp3u5nbbcv.lua:23: in local 'candidate'\n\t/tmp/tmp3u5nbbcv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[j] ~= nums[i] and t[nums[j]] < t[nums[i]] then\n                t[nums[i]] = t[nums[j]]\n            end\n        end\n    end\n    return t[1] .. \" \" .. t[#nums]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzclut3th.lua:22: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpzclut3th.lua:22: in local 'candidate'\n\t/tmp/tmpzclut3th.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[i] then\n                t[nums[i]] = i\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpled3cgsc.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpled3cgsc.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.table[i]] = nums[i]\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] > nums[j] then\n                t[t.table[i]] = nums[i]\n                t[t.table[j]] = nums[j]\n            end\n        end\n    end\n    return t.table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyiw9yqld.lua:13: attempt to index a nil value (field 'table')\nstack traceback:\n\t/tmp/tmpyiw9yqld.lua:13: in local 'candidate'\n\t/tmp/tmpyiw9yqld.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i=1,#nums,2 do\n        t[nums[i]] = nums[i]\n    end\n    for i=1,#nums,2 do\n        t[nums[i]] = nums[i]\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2p8qsa5.lua:18: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpe2p8qsa5.lua:18: in local 'candidate'\n\t/tmp/tmpe2p8qsa5.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.concat(nums[i])] = i\n    end\n    return t[nums]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgxfngxgh.lua:13: attempt to call a nil value (field 'concat')\nstack traceback:\n\t/tmp/tmpgxfngxgh.lua:13: in local 'candidate'\n\t/tmp/tmpgxfngxgh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = i + 1, #nums, 1 do\n            if nums[i] + nums[j] == nums[i] .. nums[j] then\n                table[nums[i]] .. table[nums[j]] = table[nums[i]] .. table[nums[j]]\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4qzdg09r.lua:18: syntax error near '..'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv2s7a81.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpjv2s7a81.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    for i, v in ipairs(nums) do\n        n = 0\n        for j, w in ipairs(nums) do\n            n = n + t[w] - t[v]\n        end\n        if n > 0 then\n            return nums[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp19ml0i.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: 1\nstack traceback:\n\t/tmp/tmpvp19ml0i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3u5nbbcv.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp3u5nbbcv.lua:23: in local 'candidate'\n\t/tmp/tmp3u5nbbcv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0j0wt8se.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp0j0wt8se.lua:15: in local 'candidate'\n\t/tmp/tmp0j0wt8se.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6m4qixr.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpo6m4qixr.lua:24: in local 'candidate'\n\t/tmp/tmpo6m4qixr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 2 do\n        for j = 1, #nums, 2 do\n            if nums[i] + nums[j] > 0 then\n                result[#result + 1] = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyefixzdr.lua:25: expected: {-1, -11, 1, -12, 11}\nactual: {2}\nstack traceback:\n\t/tmp/tmpyefixzdr.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    table.sort(function(a, b)\n        return #a - #b\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprpy7zhr6.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmprpy7zhr6.lua:15: in local 'candidate'\n\t/tmp/tmprpy7zhr6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[i + 1] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_utpj9i.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpe_utpj9i.lua:17: in local 'candidate'\n\t/tmp/tmpe_utpj9i.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 2 do\n        sum = 0\n        for j = 1, nums[i], 10 do\n            sum = sum + j\n        end\n        result[sum] = nums[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkfrc19e.lua:25: expected: {-1, -11, 1, -12, 11}\nactual: {0=-12, 1}\nstack traceback:\n\t/tmp/tmpdkfrc19e.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] > nums[j-1] then\n                t[nums[j]] = t[nums[j]] - 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9eky91i8.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=-3}\nstack traceback:\n\t/tmp/tmp9eky91i8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vz7lwlm.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp4vz7lwlm.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        if num ~= nil then\n            result[i] = num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt27u5o4t.lua:23: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmpt27u5o4t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j-1] then\n                t[nums[j]] = t[nums[j-1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqfcing1.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpsqfcing1.lua:22: in local 'candidate'\n\t/tmp/tmpsqfcing1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 2 do\n        t[i] = nums[i]\n    end\n    for i = 2, #nums, 2 do\n        t[i] = nums[i] - nums[i - 1]\n    end\n    return t:sort(function(a, b)\n        return a[1] < b[1]\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3rp4xgr.lua:18: attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpr3rp4xgr.lua:18: in local 'candidate'\n\t/tmp/tmpr3rp4xgr.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua5owjdt.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {1, -12, -11, -1, 11}\nstack traceback:\n\t/tmp/tmpua5owjdt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gr_ecqi.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {1, -12, 11, -11, -1}\nstack traceback:\n\t/tmp/tmp8gr_ecqi.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j-1] then\n                t[nums[j]] = t[nums[j]] - 1\n            end\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5la_0am.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpe5la_0am.lua:22: in local 'candidate'\n\t/tmp/tmpe5la_0am.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0j0wt8se.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp0j0wt8se.lua:15: in local 'candidate'\n\t/tmp/tmp0j0wt8se.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    table.sort(function(a, b)\n        return a.points - b.points\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp142sybyu.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp142sybyu.lua:15: in local 'candidate'\n\t/tmp/tmp142sybyu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 2 do\n        t[nums[i]] = i\n    end\n    for i = 2, #nums, 2 do\n        if nums[i] ~= nums[i - 1] then\n            t[nums[i]] = i\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsr32940_.lua:20: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsr32940_.lua:20: in local 'candidate'\n\t/tmp/tmpsr32940_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        if num ~= nil then\n            local sum = 0\n            for j, c in ipairs(num) do\n                sum = sum + c\n            end\n            result[sum] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a number value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] > nums[j-1] then\n                t[nums[j]] = t[nums[j]] - 1\n            end\n        end\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48y141n2.lua:31: expected: {-1, -11, 1, -12, 11}\nactual: {1, -3, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp48y141n2.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vz7lwlm.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp4vz7lwlm.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0unerpmr.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp0unerpmr.lua:24: in local 'candidate'\n\t/tmp/tmp0unerpmr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0j0wt8se.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp0j0wt8se.lua:15: in local 'candidate'\n\t/tmp/tmp0j0wt8se.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n                t[t.p = nums[i]] = i\n                t[t.p = nums[j]] = j\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4jpui94i.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j-1] then\n                t[nums[j]] = t[nums[j]] - 1\n            end\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5la_0am.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpe5la_0am.lua:22: in local 'candidate'\n\t/tmp/tmpe5la_0am.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        result[i] = num\n    end\n    for i, num in ipairs(nums) do\n        if num ~= nil then\n            result[i] = num\n        end\n    end\n    for i, num in ipairs(result) do\n        result[i] = num\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m8i_05y.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp9m8i_05y.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.concat(nums[i])] = i\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudayhzs_.lua:13: attempt to call a nil value (field 'concat')\nstack traceback:\n\t/tmp/tmpudayhzs_.lua:13: in local 'candidate'\n\t/tmp/tmpudayhzs_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j - 1] then\n                t[nums[i]] = i\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxn2py5x.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmptxn2py5x.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 2 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 2 do\n        table[nums[i]] = i\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_o8jryr.lua:18: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmps_o8jryr.lua:18: in local 'candidate'\n\t/tmp/tmps_o8jryr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local function compare(a, b)\n        return a[1] - b[1]\n    end\n    return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0liqthk5.lua:12: attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp0liqthk5.lua:12: in function </tmp/tmp0liqthk5.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp0liqthk5.lua:14: in local 'candidate'\n\t/tmp/tmp0liqthk5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums do\n        for j = 2, #nums do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0h2_gcm.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpc0h2_gcm.lua:24: in local 'candidate'\n\t/tmp/tmpc0h2_gcm.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tub7rus.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp3tub7rus.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.key = nums[i]] = i\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuhatd7kj.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j] = nums[i] + nums[j]\n                t[t.p = nums[j]] = j\n            end\n        end\n    end\n    return nums[1 .. #nums]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2u93262m.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    for i, v in ipairs(nums) do\n        if t[v] ~= i then\n            t[v] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1snh4qud.lua:26: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp1snh4qud.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] > 0 then\n                result[#result + 1] = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79kph9_d.lua:25: expected: {-1, -11, 1, -12, 11}\nactual: {2, 12, 12, 22, 10, 10}\nstack traceback:\n\t/tmp/tmp79kph9_d.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyowx3e9t.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpyowx3e9t.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[i] then\n                t[nums[i]] = t[nums[i]] .. 1\n                t[nums[j]] = t[nums[j]] .. 1\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_28x8i4x.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=\"51111\", -11=\"41111\", -1=\"31111\", \"1111\", 11=\"2111\"}\nstack traceback:\n\t/tmp/tmp_28x8i4x.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.count + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31gu7o4i.lua:13: attempt to perform arithmetic on a nil value (field 'count')\nstack traceback:\n\t/tmp/tmp31gu7o4i.lua:13: in local 'candidate'\n\t/tmp/tmp31gu7o4i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.concat(nums[i])] = i\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudayhzs_.lua:13: attempt to call a nil value (field 'concat')\nstack traceback:\n\t/tmp/tmpudayhzs_.lua:13: in local 'candidate'\n\t/tmp/tmpudayhzs_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        if num ~= nil then\n            result[i] = num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt27u5o4t.lua:23: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmpt27u5o4t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6m4qixr.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpo6m4qixr.lua:24: in local 'candidate'\n\t/tmp/tmpo6m4qixr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr0lkvfn.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpcr0lkvfn.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local sorted = {}\n    for i, num in ipairs(nums) do\n        sorted[num] = i\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzeethg2.lua:21: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpyzeethg2.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyowx3e9t.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpyowx3e9t.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n                t[t.p = nums[i]] = i\n                t[t.p = nums[j]] = j\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4023nsh6.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    for i, v in ipairs(nums) do\n        if t[v] ~= i then\n            nums[i], nums[t[v]] = nums[t[v]], nums[i]\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_y720010.lua:26: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp_y720010.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqw6yh_q.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpqqw6yh_q.lua:15: in local 'candidate'\n\t/tmp/tmpqqw6yh_q.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.table[i]] = nums[i]\n    end\n    for i = 1, #t, 1 do\n        t[i] = t.table[i]\n    end\n    return t.table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3w470m4v.lua:13: attempt to index a nil value (field 'table')\nstack traceback:\n\t/tmp/tmp3w470m4v.lua:13: in local 'candidate'\n\t/tmp/tmp3w470m4v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 2 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 2 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[i] then\n                table[nums[j]] = i\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3w9hh315.lua:23: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3w9hh315.lua:23: in local 'candidate'\n\t/tmp/tmp3w9hh315.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqktlyc16.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpqktlyc16.lua:22: in local 'candidate'\n\t/tmp/tmpqktlyc16.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        result[i] = num\n    end\n    for i, num in ipairs(nums) do\n        result[i] = num\n        for j, num in ipairs(nums) do\n            if num > num then\n                result[i] = num\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95b9_h4s.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp95b9_h4s.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnuf19t17.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpnuf19t17.lua:24: in local 'candidate'\n\t/tmp/tmpnuf19t17.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i, num in ipairs(nums) do\n        table[num] = i\n    end\n    table = table:sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table:map(function(x) return nums[x] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl39iphm3.lua:15: attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpl39iphm3.lua:15: in local 'candidate'\n\t/tmp/tmpl39iphm3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgunk_s0_.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpgunk_s0_.lua:22: in local 'candidate'\n\t/tmp/tmpgunk_s0_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tub7rus.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp3tub7rus.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    return t.p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_87lw571.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp_87lw571.lua:13: in local 'candidate'\n\t/tmp/tmp_87lw571.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3u5nbbcv.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp3u5nbbcv.lua:23: in local 'candidate'\n\t/tmp/tmp3u5nbbcv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr0lkvfn.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpcr0lkvfn.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    for i, v in ipairs(nums) do\n        if t[v] ~= i then\n            t[v] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1snh4qud.lua:26: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp1snh4qud.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 2 do\n        t[nums[i]] = i\n    end\n    for i = 2, #nums, 2 do\n        if nums[i] ~= nums[i - 1] then\n            t[nums[i]] = i\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsr32940_.lua:20: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsr32940_.lua:20: in local 'candidate'\n\t/tmp/tmpsr32940_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3u5nbbcv.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp3u5nbbcv.lua:23: in local 'candidate'\n\t/tmp/tmp3u5nbbcv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqktlyc16.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpqktlyc16.lua:22: in local 'candidate'\n\t/tmp/tmpqktlyc16.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i, num in ipairs(nums) do\n        table[num] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4akthk2e.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp4akthk2e.lua:15: in local 'candidate'\n\t/tmp/tmp4akthk2e.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tub7rus.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp3tub7rus.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdrcnqk8.lua:23: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsdrcnqk8.lua:23: in local 'candidate'\n\t/tmp/tmpsdrcnqk8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort()\n    return table.map(function(k) return nums[k] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8b5efy3.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpk8b5efy3.lua:15: in local 'candidate'\n\t/tmp/tmpk8b5efy3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr36woveb.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpr36woveb.lua:22: in local 'candidate'\n\t/tmp/tmpr36woveb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                nums[i], nums[j] = nums[j], nums[i]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s6qp_in.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp8s6qp_in.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.key = nums[i]] = i\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuhatd7kj.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    table.sort(function(a, b)\n        return table[a] + table[b]\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphczs6m48.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmphczs6m48.lua:15: in local 'candidate'\n\t/tmp/tmphczs6m48.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfhwrjyp2.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpfhwrjyp2.lua:23: in local 'candidate'\n\t/tmp/tmpfhwrjyp2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 2 do\n        t[nums[i]] = i\n    end\n    for i = 2, #nums, 2 do\n        if nums[i] ~= nums[i-1] then\n            t[nums[i]] = i\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5h0o4ia.lua:20: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_5h0o4ia.lua:20: in local 'candidate'\n\t/tmp/tmp_5h0o4ia.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgunk_s0_.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpgunk_s0_.lua:22: in local 'candidate'\n\t/tmp/tmpgunk_s0_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = i + 1, #nums, 1 do\n            if nums[i] + nums[j] == nums[j] + nums[i] then\n                table[nums[i]] = table[nums[i]] .. \" \" .. table[nums[j]]\n                table[nums[j]] = table[nums[i]] .. \" \" .. table[nums[j]]\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrsea1xc.lua:23: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmplrsea1xc.lua:23: in local 'candidate'\n\t/tmp/tmplrsea1xc.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptgnictgn.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmptgnictgn.lua:13: in local 'candidate'\n\t/tmp/tmptgnictgn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = i + 1, #nums, 1 do\n            if nums[i] + nums[j] == nums[i] + nums[j] then\n                table[nums[i]] = table[nums[i]] .. table[nums[j]]\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyr1umisc.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpyr1umisc.lua:22: in local 'candidate'\n\t/tmp/tmpyr1umisc.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6m4qixr.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpo6m4qixr.lua:24: in local 'candidate'\n\t/tmp/tmpo6m4qixr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[t.p = nums[i]] = i\n                t[t.p = nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmplck0p6bv.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i, num in ipairs(nums) do\n        table[num] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4akthk2e.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp4akthk2e.lua:15: in local 'candidate'\n\t/tmp/tmp4akthk2e.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                table[nums[j]] = table[nums[j - 1]]\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpayg0nwbx.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpayg0nwbx.lua:22: in local 'candidate'\n\t/tmp/tmpayg0nwbx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    return t:sort(function(a, b)\n        return a[1] < b[1]\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8y22fvep.lua:15: attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmp8y22fvep.lua:15: in local 'candidate'\n\t/tmp/tmp8y22fvep.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 2 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 2 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsgwu303q.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpsgwu303q.lua:22: in local 'candidate'\n\t/tmp/tmpsgwu303q.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcr0lkvfn.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpcr0lkvfn.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 1 do\n        sum = 0\n        for j = 1, #nums[i], 1 do\n            sum = sum + nums[i][j]\n        end\n        result[sum] = nums[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67rj9y_0.lua:14: attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp67rj9y_0.lua:14: in local 'candidate'\n\t/tmp/tmp67rj9y_0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] > 0 then\n                result[#result + 1] = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79kph9_d.lua:25: expected: {-1, -11, 1, -12, 11}\nactual: {2, 12, 12, 22, 10, 10}\nstack traceback:\n\t/tmp/tmp79kph9_d.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdrcnqk8.lua:23: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsdrcnqk8.lua:23: in local 'candidate'\n\t/tmp/tmpsdrcnqk8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[i] = nums[i]\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqw6yh_q.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpqqw6yh_q.lua:15: in local 'candidate'\n\t/tmp/tmpqqw6yh_q.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 2 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 2 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                table[nums[j]] = table[nums[j - 1]]\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq17vmbbe.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpq17vmbbe.lua:22: in local 'candidate'\n\t/tmp/tmpq17vmbbe.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn41c4np2.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnuf19t17.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpnuf19t17.lua:24: in local 'candidate'\n\t/tmp/tmpnuf19t17.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] > nums[j - 1] then\n                t[t.p = nums[j]] = i\n                break\n            end\n        end\n    end\n    return t.p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpiiqyo22x.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    for i, v in ipairs(nums) do\n        if t[v] ~= i then\n            t[v] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1snh4qud.lua:26: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmp1snh4qud.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] > nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6zwzaaac.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp6zwzaaac.lua:22: in local 'candidate'\n\t/tmp/tmp6zwzaaac.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    return t.p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_87lw571.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp_87lw571.lua:13: in local 'candidate'\n\t/tmp/tmp_87lw571.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i, num in ipairs(nums) do\n        table[num] = i\n    end\n    table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4akthk2e.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp4akthk2e.lua:15: in local 'candidate'\n\t/tmp/tmp4akthk2e.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local function sort_by_points(a, b)\n        if a[1] > b[1] then return 1\n        if a[1] < b[1] then return -1\n        return 0\n    end\n    return table.sort(nums, sort_by_points)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz4dmyurc.lua:13: 'end' expected (to close 'if' at line 12) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.key = nums[i]] = i\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuhatd7kj.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local function compare(a, b)\n        return a[1] < b[1]\n    end\n    return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_yp_6ww.lua:12: attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpd_yp_6ww.lua:12: in function </tmp/tmpd_yp_6ww.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpd_yp_6ww.lua:14: in local 'candidate'\n\t/tmp/tmpd_yp_6ww.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local function sort_by_points(a, b)\n        if a[1] > b[1] then return 1\n        if a[1] < b[1] then return -1\n        return 0\n    end\n    return table.sort(nums, sort_by_points)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz4dmyurc.lua:13: 'end' expected (to close 'if' at line 12) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i, v in ipairs(nums) do\n        t[v] = i\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv2s7a81.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpjv2s7a81.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        result[num] = i\n    end\n    for i, num in ipairs(nums) do\n        if num ~= nil then\n            result[num] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9fbuqbe.lua:26: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpg9fbuqbe.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdrcnqk8.lua:23: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsdrcnqk8.lua:23: in local 'candidate'\n\t/tmp/tmpsdrcnqk8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p + nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qjha0av.lua:13: attempt to perform arithmetic on a nil value (field 'p')\nstack traceback:\n\t/tmp/tmp4qjha0av.lua:13: in local 'candidate'\n\t/tmp/tmp4qjha0av.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8j7ge3c.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {1, -12, 11, -11, -1}\nstack traceback:\n\t/tmp/tmpw8j7ge3c.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    table.sort(function(a, b)\n        return table[a] - table[b]\n    end)\n    return table.map(function(x) return nums[x] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqf_b82w.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpvqf_b82w.lua:15: in local 'candidate'\n\t/tmp/tmpvqf_b82w.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local function compare(a, b)\n        return a[1] - b[1]\n    end\n    return table.sort(nums, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0liqthk5.lua:12: attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp0liqthk5.lua:12: in function </tmp/tmp0liqthk5.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp0liqthk5.lua:14: in local 'candidate'\n\t/tmp/tmp0liqthk5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[i + 1] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6us8u3vj.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6us8u3vj.lua:17: in local 'candidate'\n\t/tmp/tmp6us8u3vj.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j-1] then\n                t[nums[j]] = t[nums[j]] .. 1\n            end\n        end\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp798cu32x.lua:31: expected: {-1, -11, 1, -12, 11}\nactual: {1, 2, 3, \"411111\", 5}\nstack traceback:\n\t/tmp/tmp798cu32x.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnuf19t17.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpnuf19t17.lua:24: in local 'candidate'\n\t/tmp/tmpnuf19t17.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i, num in ipairs(nums) do\n        table[num] = i\n    end\n    table = table:sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table:map(function(x) return nums[x] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl39iphm3.lua:15: attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpl39iphm3.lua:15: in local 'candidate'\n\t/tmp/tmpl39iphm3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                nums[j - 1], nums[j] = nums[j], nums[j - 1]\n                t[nums[j - 1]] = i\n                t[nums[j]] = i\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudut41xx.lua:30: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -11, -1, -12}\nstack traceback:\n\t/tmp/tmpudut41xx.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i, num in ipairs(nums) do\n        table[num] = i\n    end\n    table = table.sort(function(a, b)\n        return a[1] - b[1]\n    end)\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9t6toour.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmp9t6toour.lua:15: in local 'candidate'\n\t/tmp/tmp9t6toour.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] < nums[j] then\n                nums[j], nums[i] = nums[i], nums[j]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gr_ecqi.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {1, -12, 11, -11, -1}\nstack traceback:\n\t/tmp/tmp8gr_ecqi.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                table[nums[i]] = i\n                table[nums[j]] = j\n                break\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnuf19t17.lua:24: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpnuf19t17.lua:24: in local 'candidate'\n\t/tmp/tmpnuf19t17.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[t.p = nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        nums[i] = t[nums[i]]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn41c4np2.lua:13: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 1 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j-1] then\n                table[nums[j]] = table[nums[j]] - 1\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyhj9g2nq.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpyhj9g2nq.lua:22: in local 'candidate'\n\t/tmp/tmpyhj9g2nq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfhwrjyp2.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpfhwrjyp2.lua:23: in local 'candidate'\n\t/tmp/tmpfhwrjyp2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8h3goor.lua:29: expected: {-1, -11, 1, -12, 11}\nactual: {-12=5, -11=4, -1=3, 1, 11=2}\nstack traceback:\n\t/tmp/tmpv8h3goor.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j-1] then\n                t[nums[j]] = t[nums[j]] - 1\n            end\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5la_0am.lua:22: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpe5la_0am.lua:22: in local 'candidate'\n\t/tmp/tmpe5la_0am.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i = 1, #nums, 1 do\n        for j = 1, #nums, 1 do\n            if nums[i] + nums[j] > 0 then\n                result[#result + 1] = nums[i] + nums[j]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79kph9_d.lua:25: expected: {-1, -11, 1, -12, 11}\nactual: {2, 12, 12, 22, 10, 10}\nstack traceback:\n\t/tmp/tmp79kph9_d.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j - 1] then\n                t[nums[j]] = t[nums[j - 1]]\n            end\n        end\n    end\n    return t[nums[1]], t[nums[2]], t[nums[3]], t[nums[4]], t[nums[5]]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmknxstr2.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: 1\nstack traceback:\n\t/tmp/tmpmknxstr2.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i, num in ipairs(nums) do\n        table[num] = i\n    end\n    table.sort(function(a, b)\n        return table[a] - table[b]\n    end)\n    return table.concat()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmhjz7h36.lua:15: attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpmhjz7h36.lua:15: in local 'candidate'\n\t/tmp/tmpmhjz7h36.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 2 do\n        t[i] = nums[i]\n    end\n    for i = 2, #nums, 2 do\n        t[i] = nums[i] - nums[i - 1]\n    end\n    return t:sort(function(a, b) return a[1] - b[1]\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfb_oads.lua:18: attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpbfb_oads.lua:18: in local 'candidate'\n\t/tmp/tmpbfb_oads.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80a60zcz.lua:23: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp80a60zcz.lua:23: in local 'candidate'\n\t/tmp/tmp80a60zcz.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local table = {}\n    for i = 1, #nums, 2 do\n        table[nums[i]] = i\n    end\n    for i = 1, #nums, 2 do\n        for j = 2, #nums, 2 do\n            if nums[j] < nums[j - 1] then\n                table[nums[j]] = table[nums[j]] - 1\n            end\n        end\n    end\n    return table.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfrz6qluv.lua:18: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpfrz6qluv.lua:18: in local 'candidate'\n\t/tmp/tmpfrz6qluv.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[i] + nums[j] > nums[i] then\n                t[nums[i]] = i\n                t[nums[j]] = j\n                break\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp09z_gf9r.lua:24: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmp09z_gf9r.lua:24: in local 'candidate'\n\t/tmp/tmp09z_gf9r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        if num ~= nil then\n            result[i] = num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt27u5o4t.lua:23: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmpt27u5o4t.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                nums[i], nums[j] = nums[j], nums[i]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ch29qpl.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp_ch29qpl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 1 do\n            if nums[j] < nums[j-1] then\n                t[nums[j]] = t[nums[j-1]]\n            end\n        end\n    end\n    return t.values()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk45p_u46.lua:22: attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmpk45p_u46.lua:22: in local 'candidate'\n\t/tmp/tmpk45p_u46.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function which sorts the given table of integers\n-- in ascending order according to the sum of their digits.\n-- Note: if there are several items with similar sum of their digits,\n-- order them based on their index in original table.\n-- For example:\n-- >>> order_by_points([1, 11, -1, -11, -12])\n-- [-1, -11, 1, -12, 11]\n-- >>> order_by_points([])\n-- []\nlocal function order_by_points(nums)\n    local t = {}\n    for i = 1, #nums, 1 do\n        t[nums[i]] = i\n    end\n    for i = 1, #nums, 1 do\n        for j = 2, #nums, 2 do\n            if nums[i] + nums[j] > nums[j] + nums[i] then\n                nums[i], nums[j] = nums[j], nums[i]\n            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ch29qpl.lua:28: expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\t/tmp/tmp_ch29qpl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}