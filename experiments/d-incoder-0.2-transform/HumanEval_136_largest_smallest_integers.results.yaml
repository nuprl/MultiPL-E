language: d
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        \n        foreach(j : lst, \n            \n            if(j\
    \ > i) \n            {\n                result := Tuple!(Nullable!(long), Nullable!(long));\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \                result := Tuple!(result.0, result.1);\n                result\
    \ := Tuple!(result.0, result.1);\n                result := Tuple!(result.0, result.1);\n\
    \nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n       \
    \ auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4j5std47.d(23): Error: no identifier for declarator `i`\n/tmp/tmp4j5std47.d(23):
    Error: found `:` when expecting `;`\n/tmp/tmp4j5std47.d(25): Error: expression
    expected, not `foreach`\n/tmp/tmp4j5std47.d(25): Error: found `:` when expecting
    `,`\n/tmp/tmp4j5std47.d(27): Error: expression expected, not `if`\n/tmp/tmp4j5std47.d(28):
    Error: found `{` when expecting `,`\n/tmp/tmp4j5std47.d(29): Error: found `:`
    when expecting `,`\n/tmp/tmp4j5std47.d(29): Error: expression expected, not `=`\n/tmp/tmp4j5std47.d(29):
    Error: found `Tuple` when expecting `,`\n/tmp/tmp4j5std47.d(29): Error: found
    `;` when expecting `,`\n/tmp/tmp4j5std47.d(30): Error: found `:` when expecting
    `,`\n/tmp/tmp4j5std47.d(30): Error: expression expected, not `=`\n/tmp/tmp4j5std47.d(30):
    Error: found `Tuple` when expecting `,`\n/tmp/tmp4j5std47.d(30): Error: found
    `0.00000` when expecting `)`\n/tmp/tmp4j5std47.d(30): Error: found `0.1` when
    expecting `,`\n/tmp/tmp4j5std47.d(30): Error: found `;` when expecting `)`\n/tmp/tmp4j5std47.d(31):
    Error: found `=` instead of statement\n/tmp/tmp4j5std47.d(32): Error: found `=`
    instead of statement\n/tmp/tmp4j5std47.d(33): Error: found `=` instead of statement\n/tmp/tmp4j5std47.d(34):
    Error: found `=` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp4j5std47.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool neg\
    \ = false;\n    long max = 0;\n    long min = 0;\n    for (long i : lst) {\n \
    \       if (i < 0) {\n            neg = true;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n        if (i < min) {\n            min\
    \ = i;\n        }\n    }\n    if (neg) {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    } else {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n        result.a.value = max;\n        result.b.value\
    \ = min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsuzv_kjo.d(25): Error: semicolon expected, not `:`\n/tmp/tmpsuzv_kjo.d(25):
    Error: expression expected, not `:`\n/tmp/tmpsuzv_kjo.d(25): Error: found `lst`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpsuzv_kjo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largest = Long.min;\n  \
    \  long smallest = Long.max;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            foundNegative = true;\n        } else if (i >= 0) {\n           \
    \ foundPositive = true;\n        }\n        if (foundNegative && foundPositive)\
    \ {\n            break;\n        }\n        if (foundNegative) {\n           \
    \ largest = i;\n        } else if (foundPositive) {\n            smallest = i;\n\
    \        }\n    }\n    if (foundNegative && foundPositive) {\n        result =\
    \ Tuple!(Nullable!(long), Nullable!(long));\n        result.0 = largest;\n   \
    \     result.1 = smallest;\n    } else {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n        result.0 = null;\n        result.1 = null;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmply2jkaoz.d(26): Error: semicolon expected, not `:`\n/tmp/tmply2jkaoz.d(26):
    Error: expression expected, not `:`\n/tmp/tmply2jkaoz.d(26): Error: found `lst`
    when expecting `;` following `for` condition\n/tmp/tmply2jkaoz.d(43): Error: found
    `0.00000` when expecting `;` following statement\n/tmp/tmply2jkaoz.d(43): Error:
    found `=` instead of statement\n/tmp/tmply2jkaoz.d(44): Error: found `0.1` when
    expecting `;` following statement\n/tmp/tmply2jkaoz.d(44): Error: found `=` instead
    of statement\n/tmp/tmply2jkaoz.d(47): Error: found `0.00000` when expecting `;`
    following statement\n/tmp/tmply2jkaoz.d(47): Error: found `=` instead of statement\n/tmp/tmply2jkaoz.d(48):
    Error: found `0.1` when expecting `;` following statement\n/tmp/tmply2jkaoz.d(48):
    Error: found `=` instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmply2jkaoz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool neg\
    \ = false;\n    long max = 0;\n    long min = 0;\n    for (long i : lst)\n   \
    \ {\n        if (i < 0)\n        {\n            neg = true;\n        }\n     \
    \   if (i > 0)\n        {\n            if (neg)\n            {\n             \
    \   if (max < 0)\n                {\n                    max = i;\n          \
    \      }\n                else\n                {\n                    min = i;\n\
    \                }\n            }\n            else\n            {\n         \
    \       if (max < 0)\n                {\n                    max = i;\n      \
    \          }\n                else\n                {\n                    min\
    \ = i;\n                }\n            }\n        }\n    }\n    if (neg)\n   \
    \ {\n        result.a = Nullable!(long);\n        result.b = Nullable!(long);\n\
    \    }\n    else\n    {\n        result.a = Nullable!(long);\n        result.b\
    \ = Nullable!(long);\n    }\n    if (max > 0)\n    {\n        result.a = max;\n\
    \    }\n    if (min < 0)\n    {\n        result.b = min;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4vjc3ox2.d(25): Error: semicolon expected, not `:`\n/tmp/tmp4vjc3ox2.d(25):
    Error: expression expected, not `:`\n/tmp/tmp4vjc3ox2.d(25): Error: found `lst`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4vjc3ox2.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool positive\
    \ = true;\n    long largest = -(2L);\n    long smallest = (2L);\n    foreach (long\
    \ i in lst) {\n        if (i < 0) {\n            positive = false;\n        }\n\
    \        if (largest < i) {\n            largest = i;\n        }\n        if (smallest\
    \ > i) {\n            smallest = i;\n        }\n    }\n    if (positive && smallest\
    \ < largest) {\n        result.a = smallest;\n        result.b = largest;\n  \
    \  } else {\n        result.a = null;\n        result.b = null;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n\
    {\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq8k8ir73.d(25): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8k8ir73.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach\
    \ (long i in lst) {\n        if (i < 0) {\n            result.a = i;\n       \
    \ } else {\n            result.b = i;\n        }\n    }\n    \n    if (result.a\
    \ == null) {\n        result.a = result.b = None;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4r4ub732.d(23): Error: found `in` when expecting `;`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r4ub732.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    long a = null;\n    long b = null;\n    foreach(long x, lst)\n\
    \    {\n        if (x < 0)\n        {\n            if (a < 0)\n              \
    \  a = x;\n        }\n        else\n        {\n            if (b < 0)\n      \
    \          b = x;\n        }\n    }\n    return Tuple!(a, b);\n}\nunittest\n{\n\
    \    alias candidate = largest_smallest_integers;\n\n{\n        auto result =\
    \ candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n  \
    \      assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwbgpr3p9.d(23): Error: no identifier for declarator `lst`\n/tmp/tmpwbgpr3p9.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmpwbgpr3p9.d(36): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbgpr3p9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool has_negative\
    \ = false;\n    bool has_positive = false;\n    foreach (long x in lst) {\n  \
    \      if (x < 0) {\n            has_negative = true;\n        }\n        if (x\
    \ > 0) {\n            has_positive = true;\n        }\n    }\n    if (has_negative\
    \ && has_positive) {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \        result.0 = Nullable!(long);\n        result.1 = Nullable!(long);\n  \
    \  } else {\n        result = Tuple!(Nullable!(long), Nullable!(long));\n    \
    \    result.0 = Nullable!(long);\n        result.1 = Nullable!(long);\n    }\n\
    \    return result;\n}\n/*\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpatwipd7c.d(24): Error: found `in` when expecting `;`\n/tmp/tmpatwipd7c.d(34):
    Error: found `0.00000` when expecting `;` following statement\n/tmp/tmpatwipd7c.d(34):
    Error: found `=` instead of statement\n/tmp/tmpatwipd7c.d(35): Error: found `0.1`
    when expecting `;` following statement\n/tmp/tmpatwipd7c.d(35): Error: found `=`
    instead of statement\n/tmp/tmpatwipd7c.d(38): Error: found `0.00000` when expecting
    `;` following statement\n/tmp/tmpatwipd7c.d(38): Error: found `=` instead of statement\n/tmp/tmpatwipd7c.d(39):
    Error: found `0.1` when expecting `;` following statement\n/tmp/tmpatwipd7c.d(39):
    Error: found `=` instead of statement\n/tmp/tmpatwipd7c.d(43): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatwipd7c.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    bool\
    \ isNegative = false;\n    long max = 0;\n    long min = 0;\n    \n    foreach(long\
    \ x, lst)\n    {\n        if(x < 0)\n        {\n            isNegative = true;\n\
    \        }\n        \n        if(x > max)\n        {\n            max = x;\n \
    \       }\n        \n        if(x < min)\n        {\n            min = x;\n  \
    \      }\n    }\n    \n    if(isNegative)\n    {\n        result.a = Nullable!(long);\n\
    \        result.b = Nullable!(long);\n    }\n    else\n    {\n        result.a\
    \ = Nullable!(long);\n        result.b = Nullable!(long);\n    }\n    \n    if(max\
    \ > 0)\n    {\n        result.a.value = max;\n    }\n    \n    if(min < 0)\n \
    \   {\n        result.b.value = min;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv0yi46jg.d(27): Error: no identifier for declarator `lst`\n/tmp/tmpv0yi46jg.d(27):
    Error: found `)` when expecting `;`\n/tmp/tmpv0yi46jg.d(45): Error: found `if`
    when expecting `)`\n/tmp/tmpv0yi46jg.d(50): Error: found `else` when expecting
    `;` following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0yi46jg.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largestPositive = 0;\n \
    \   long largestNegative = 0;\n    long smallestPositive = 0;\n    long smallestNegative\
    \ = 0;\n    foreach(long x in lst)\n    {\n        if (x < 0)\n        {\n   \
    \         foundNegative = true;\n            largestNegative = x;\n        }\n\
    \        else\n        {\n            foundPositive = true;\n            largestPositive\
    \ = x;\n        }\n    }\n    if (foundNegative && foundPositive)\n    {\n   \
    \     if (largestPositive > largestNegative)\n        {\n            result.Item1\
    \ = largestPositive;\n            result.Item2 = smallestPositive;\n        }\n\
    \        else\n        {\n            result.Item1 = largestNegative;\n      \
    \      result.Item2 = smallestNegative;\n        }\n    }\n    else if (foundNegative)\n\
    \    {\n        result.Item1 = largestNegative;\n        result.Item2 = None;\n\
    \    }\n    else if (foundPositive)\n    {\n        result.Item1 = largestPositive;\n\
    \        result.Item2 = None;\n    }\n    else\n    {\n        result.Item1 =\
    \ None;\n        result.Item2 = None;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,c++,c++-cli,.net,c# |>\n<| c |>\nI like your solution, however it\
    \ seems that it only works with arrays of integers. I need a solution that works\
    \ with arrays of any type.\n<|/ c |>\n<| c |>\n: I added a solution that works\
    \ for any type.\n<|/ c |>\n<| c |>\n: I added a solution that works for any type.\n\
    <|/ c |>\n<| c |>\n: I added a solution that works for any type.\n<|/ c |>\n<|\
    \ c |>\n: I added a solution that works for any type.\n<|/ c |>\n<| a tags=c#,c++,c++-cli,.net,c#\
    \ |>\nI believe this should work:\n<code>\npublic static Tuple<Nullable<long>,\
    \ Nullable<long>> GetLargestAndSmallestIntegers(long[] array)\n{\n    Nullable<long>\
    \ largest = null;\n    Nullable<long> smallest = null;\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoapph5a6.d(28): Error: found `in` when expecting `;`\n/tmp/tmpoapph5a6.d(71):
    Error: declaration expected, not `<`\n/tmp/tmpoapph5a6.d(94): Error: no identifier
    for declarator `Nullable`\n/tmp/tmpoapph5a6.d(94): Error: declaration expected,
    not `<`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoapph5a6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n        Tuple!(Nullable!(long), Nullable!(long)) t = \n           \
    \ Tuple!(Nullable!(long), Nullable!(long)) (\n                if(i<0L) None else\
    \ Some(i),\n                if(i>0L) None else Some(i)\n            )\n    )\n\
    \    \n    foreach(t : result, \n        Tuple!(Nullable!(long), Nullable!(long))\
    \ t = \n            Tuple!(Nullable!(long), Nullable!(long)) (\n             \
    \   if((t.f0.isSome) && (t.f1.isSome)) \n                    Some((t.f0.get().max(),\
    \ t.f1.get().min()))\n                else None\n            )\n    )\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphs5bux_u.d(23): Error: no identifier for declarator `i`\n/tmp/tmphs5bux_u.d(23):
    Error: found `:` when expecting `;`\n/tmp/tmphs5bux_u.d(24): Error: found `t`
    when expecting `)`\n/tmp/tmphs5bux_u.d(24): Error: found `=` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphs5bux_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           {\n               if (i < 0) \n                   result\
    \ = Tuple!(Nullable!(long), Nullable!(long));\n               else\n         \
    \          result = Tuple!(Nullable!(long), Nullable!(long));\n           });\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5e91bzvs.d(23): Error: no identifier for declarator `i`\n/tmp/tmp5e91bzvs.d(23):
    Error: found `:` when expecting `;`\n/tmp/tmp5e91bzvs.d(29): Error: use `{ }`
    for an empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5e91bzvs.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool foundNegative\
    \ = false;\n    bool foundPositive = false;\n    long largestPositive = 0;\n \
    \   long largestNegative = 0;\n    long smallestPositive = 0;\n    long smallestNegative\
    \ = 0;\n    for (long i : lst)\n    {\n        if (i < 0)\n        {\n       \
    \     foundNegative = true;\n            largestNegative = i;\n        }\n   \
    \     else if (i > 0)\n        {\n            foundPositive = true;\n        \
    \    largestPositive = i;\n        }\n    }\n    if (foundNegative && foundPositive)\n\
    \    {\n        if (largestNegative > largestPositive)\n        {\n          \
    \  result.a = largestNegative;\n            result.b = largestPositive;\n    \
    \    }\n        else\n        {\n            result.a = largestPositive;\n   \
    \         result.b = largestNegative;\n        }\n    }\n    else if (foundNegative)\n\
    \    {\n        result.a = largestNegative;\n        result.b = None;\n    }\n\
    \    else if (foundPositive)\n    {\n        result.a = largestPositive;\n   \
    \     result.b = None;\n    }\n    else\n    {\n        result.a = None;\n   \
    \     result.b = None;\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L,\
    \ 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L,\
    \ 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L,\
    \ 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get\
    \ == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L,\
    \ -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n       \
    \ assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n\
    }\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L,\
    \ -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n\
    \        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L,\
    \ -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj2lmj_33.d(28): Error: semicolon expected, not `:`\n/tmp/tmpj2lmj_33.d(28):
    Error: expression expected, not `:`\n/tmp/tmpj2lmj_33.d(28): Error: found `lst`
    when expecting `;` following `for` condition\n/tmp/tmpj2lmj_33.d(71): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj2lmj_33.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst, \n           {\n               if (i < 0L) \n                   {\n \
    \                      result = Tuple!(Nullable!(long), Nullable!(long));\n  \
    \                     break;\n                   }\n               else\n    \
    \               {\n                       result = Tuple!(Nullable!(long), Nullable!(long));\n\
    \                       break;\n                   }\n           });\n    \n \
    \   return result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpda3syzyv.d(23): Error: no identifier for declarator `i`\n/tmp/tmpda3syzyv.d(23):
    Error: found `:` when expecting `;`\n/tmp/tmpda3syzyv.d(35): Error: use `{ }`
    for an empty statement, not `;`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpda3syzyv.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst) {\n        if (i < 0) {\n            result.a = i;\n        } else if\
    \ (i > 0){\n            result.b = i;\n        } else {\n            result.a\
    \ = null;\n            result.b = null;\n        }\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n      \
    \  auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaby07z_y.d(23): Error: no identifier for declarator `i`\n/tmp/tmpaby07z_y.d(23):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpaby07z_y.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool negative\
    \ = false;\n    long largest = 0;\n    long smallest = 0;\n    foreach(long i\
    \ in lst)\n    {\n        if (i < 0)\n        {\n            negative = true;\n\
    \        }\n        if (i > largest)\n        {\n            largest = i;\n  \
    \      }\n        if (i < smallest)\n        {\n            smallest = i;\n  \
    \      }\n    }\n    if (negative == false)\n    {\n        result = Tuple!(Nullable!(long),\
    \ Nullable!(long)) (Nullable!(long) largest, Nullable!(long) smallest);\n    }\n\
    \    else\n    {\n        result = Tuple!(Nullable!(long), Nullable!(long)) (Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long) Nullable!(long)\
    \ Nullable!(long) Nullable!(long) \nunittest\n{\n    alias candidate = largest_smallest_integers;\n\
    \n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppf6hpa8n.d(25): Error: found `in` when expecting `;`\n/tmp/tmppf6hpa8n.d(42):
    Error: found `largest` when expecting `,`\n/tmp/tmppf6hpa8n.d(42): Error: expression
    expected, not `,`\n/tmp/tmppf6hpa8n.d(42): Error: found `Nullable` when expecting
    `,`\n/tmp/tmppf6hpa8n.d(42): Error: C style cast illegal, use `cast(long)smallest`\n/tmp/tmppf6hpa8n.d(46):
    Error: found `Nullable` when expecting `,`\n/tmp/tmppf6hpa8n.d(46): Error: C style
    cast illegal, use `cast(long)Nullable!long`\n/tmp/tmppf6hpa8n.d(46): Error: found
    `Nullable` when expecting `,`\n/tmp/tmppf6hpa8n.d(46): Error: C style cast illegal,
    use `cast(long)Nullable!long`\n/tmp/tmppf6hpa8n.d(46): Error: found `Nullable`
    when expecting `,`\n/tmp/tmppf6hpa8n.d(46): Error: C style cast illegal, use `cast(long)Nullable!long`\n/tmp/tmppf6hpa8n.d(46):
    Error: found `Nullable` when expecting `,`\n/tmp/tmppf6hpa8n.d(46): Error: C style
    cast illegal, use `cast(long)Nullable!long`\n/tmp/tmppf6hpa8n.d(46): Error: found
    `Nullable` when expecting `,`\n/tmp/tmppf6hpa8n.d(46): Error: C style cast illegal,
    use `cast(long)Nullable!long`\n/tmp/tmppf6hpa8n.d(46): Error: found `Nullable`
    when expecting `,`\n/tmp/tmppf6hpa8n.d(46): Error: C style cast illegal, use `cast(long)Nullable!long`\n/tmp/tmppf6hpa8n.d(46):
    Error: found `Nullable` when expecting `,`\n/tmp/tmppf6hpa8n.d(46): Error: C style
    cast illegal, use `cast(long)Nullable!long`\n/tmp/tmppf6hpa8n.d(46): Error: found
    `Nullable` when expecting `,`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppf6hpa8n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    bool positive\
    \ = true;\n    long largest = -(2L);\n    long smallest = (2L);\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            positive = false;\n        }\n\
    \        if (i > largest) {\n            largest = i;\n        }\n        if (i\
    \ < smallest) {\n            smallest = i;\n        }\n    }\n    if (positive\
    \ && smallest > largest) {\n        smallest = None;\n    }\n    if (!positive\
    \ && smallest < largest) {\n        largest = None;\n    }\n    result = Tuple!(Nullable!(long),\
    \ Nullable!(long));\n    result.0 = largest;\n    result.1 = smallest;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n\
    {\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyv8qxgzy.d(25): Error: semicolon expected, not `:`\n/tmp/tmpyv8qxgzy.d(25):
    Error: expression expected, not `:`\n/tmp/tmpyv8qxgzy.d(25): Error: found `lst`
    when expecting `;` following `for` condition\n/tmp/tmpyv8qxgzy.d(43): Error: found
    `0.00000` when expecting `;` following statement\n/tmp/tmpyv8qxgzy.d(43): Error:
    found `=` instead of statement\n/tmp/tmpyv8qxgzy.d(44): Error: found `0.1` when
    expecting `;` following statement\n/tmp/tmpyv8qxgzy.d(44): Error: found `=` instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyv8qxgzy.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(long\
    \ x, lst) {\n        if (x < 0) {\n            result.a = x;\n        } else {\n\
    \            result.b = x;\n        }\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result\
    \ = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplzj093p7.d(23): Error: no identifier for declarator `lst`\n/tmp/tmplzj093p7.d(23):
    Error: found `)` when expecting `;`\n/tmp/tmplzj093p7.d(31): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzj093p7.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    if\
    \ (lst.is_empty())\n    {\n        return result;\n    }\n    \n    long max;\n\
    \    long min;\n    \n    foreach (long i in lst)\n    {\n        if (i < 0)\n\
    \        {\n            max = i;\n        }\n        else\n        {\n       \
    \     min = i;\n        }\n    }\n    \n    if (max == min)\n    {\n        return\
    \ result;\n    }\n    \n    result.0 = max;\n    result.1 = min;\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = largest_smallest_integers;\n\n\
    {\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_wya5ogz.d(31): Error: found `in` when expecting `;`\n/tmp/tmp_wya5ogz.d(48):
    Error: found `0.00000` when expecting `;` following statement\n/tmp/tmp_wya5ogz.d(48):
    Error: found `=` instead of statement\n/tmp/tmp_wya5ogz.d(49): Error: found `0.1`
    when expecting `;` following statement\n/tmp/tmp_wya5ogz.d(49): Error: found `=`
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_wya5ogz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n\n    Create a function that\
    \ returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
    \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
    \ no negative or positive integers, return them as None.\n\n    Examples:\n  \
    \  >>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\n    tuple(None, 1L)\n\
    \    >>> largest_smallest_integers([])\n    tuple(None, None)\n    >>> largest_smallest_integers([0L])\n\
    \    tuple(None, None)\n    \n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[]\
    \ lst) \n{\n    Tuple!(Nullable!(long), Nullable!(long)) result;\n    \n    foreach(i\
    \ : lst)\n    {\n        if (i < 0L)\n        {\n            result.a = Nullable!(long);\n\
    \            result.b = i;\n        }\n        else if (i > 0L)\n        {\n \
    \           result.a = i;\n            result.b = Nullable!(long);\n        }\n\
    \        else\n        {\n            result.a = Nullable!(long);\n          \
    \  result.b = Nullable!(long);\n        }\n    }\n    \n    return result;\n}\n\
    unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n\
    \        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto\
    \ result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n\
    \        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull\
    \ && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L,\
    \ 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get ==\
    \ -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n \
    \       auto result = candidate([]);\n        assert(result[0].isNull);\n    \
    \    assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n\
    \        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n\
    \        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n     \
    \   auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull\
    \ && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get\
    \ == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L,\
    \ 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull\
    \ && result[1].get == 1L);\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl7_vlpjq.d(23): Error: no identifier for declarator `i`\n/tmp/tmpl7_vlpjq.d(23):
    Error: found `:` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl7_vlpjq.d", "-I/tmp"]\n'''
  stdout: b''
