name: HumanEval_128_prod_signs
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given an array\
  \ arr of integers and you need to return\n    sum of magnitudes of integers multiplied\
  \ by product of all signs\n    of each number in the array, represented by 1, -1\
  \ or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1L,\
  \ 2L, 2L, -4L])\n    9L\n    >>> prod_signs([0L, 1L])\n    0L\n    >>> prod_signs([])\n\
  \    None\n    \n*/\nNullable!(long) prod_signs(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result =\
  \ candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get ==\
  \ -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull\
  \ && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L,\
  \ 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n\
  \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
  \        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull\
  \ && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L,\
  \ 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto\
  \ result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get\
  \ == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n      \
  \  assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}"
completions: ["{\n    long? res = null;\n    foreach(arr[idx], idx, arr) {\n     \
    \   long sign = signbit(arr[idx]);\n        long product = sign * arr[idx];\n\
    \        if (product != 0) {\n            res = max(res, product);\n        }\n\
    \    }\n    return res;\n}", "{\n    var sum = 0;\n    var sign = 1;\n    var\
    \ product = 1;\n    foreach(i : arr) {\n        sum += sign * i;\n        sign\
    \ *= -1;\n        product *= i;\n    }\n    return sum * product;\n}", "{\n  \
    \  var sum = 0;\n    var sign = 1;\n    foreach(i : arr) {\n        sum += sign\
    \ * i;\n        sign *= -1;\n    }\n    return sum;\n}\n/*", "{\n    var sum =\
    \ 0;\n    var sign = 1;\n    foreach(i : arr) {\n        sum += sign * i;\n  \
    \      sign *= sign;\n    }\n    return sum;\n}", "{\n    long? sum = 0;\n   \
    \ for(long i : arr) {\n        sum += i;\n    }\n    return sum;\n}", "{\n   \
    \ var sum = 0;\n    var sign = 1;\n    foreach(i : arr) {\n        sum += sign\
    \ * i;\n        sign *= -1;\n    }\n    return sum;\n}\n/*", "{\n    long sum\
    \ = 0;\n    long product = 1;\n    for(long i : arr)\n    {\n        sum += abs(i);\n\
    \        product *= sign(i);\n    }\n    return sum == 0 ? None : product;\n}",
  "{\n    long res = 0;\n    for (long i : arr) {\n        res += abs(i) * sign(i);\n\
    \    }\n    return res;\n}", "{\n    var res = 0;\n    var sign = 1;\n    foreach(i\
    \ : arr) {\n        res += sign * i;\n        sign *= sign;\n    }\n    return\
    \ res;\n}\n/*", "{\n    long? sum = 0;\n    for(long i : arr) {\n        sum +=\
    \ abs(i);\n    }\n    return sum;\n}", "{\n    long? sum = 0;\n    for(long i\
    \ : arr) \n    {\n        sum += i;\n    }\n    if(arr.length == 0) return null;\n\
    \    long product = 1;\n    for(long i : arr) \n    {\n        product *= i;\n\
    \    }\n    return sum * product;\n}", "{\n    var sum = 0;\n    var sign = 1;\n\
    \    var i = 0;\n    var len = arr.length;\n    while(i < len)\n    {\n      \
    \  var v = arr[i];\n        if(v > 0)\n        {\n            sum += sign * v;\n\
    \            sign *= -1;\n        }\n        else if(v < 0)\n        {\n     \
    \       sum += sign * v;\n            sign *= -1;\n        }\n        else\n \
    \       {\n            sum += sign;\n        }\n        i++;\n    }\n    return\
    \ sum;\n}\n/*", "{\n    long? sum = 0;\n    foreach(i : arr) {\n        sum +=\
    \ i.signum() * i;\n    }\n    return sum;\n}", "{\n    long? sum = 0;\n    for(long\
    \ i : arr) {\n        sum += i;\n    }\n    return sum;\n}", "{\n    var sum =\
    \ 0;\n    var sign = 1;\n    foreach(i : arr) \n    {\n        sum += sign * i;\n\
    \        sign *= -1;\n    }\n    return sum;\n}", "{\n    long sum = 0;\n    long\
    \ prod = 1;\n    for(long i : arr) {\n        sum += abs(i);\n        prod *=\
    \ sign(i);\n    }\n    return sum * prod;\n}\n/*", "{\n    var res = 0;\n    var\
    \ sign = 1;\n    foreach(elt in arr) {\n        sign *= elt;\n        res += sign;\n\
    \    }\n    return res;\n}", "{\n    var sum = 0;\n    var sign = 1;\n    foreach(x\
    \ | arr) {\n        sum += sign * x;\n        sign *= -1;\n    }\n    return sum;\n\
    }", "{\n    long? sum = 0;\n    foreach(x -> {\n        sum += magnitude(x) *\
    \ sign(x);\n    });\n    return sum;\n}", "{\n    var res = 0;\n    foreach(x\
    \ -> res += abs(x) * sign(x), arr);\n    return res;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
