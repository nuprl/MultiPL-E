language: d
name: HumanEval_85_add
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxmbpe178.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxmbpe178.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n/*\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjwizs56s.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjwizs56s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbu_a29gw.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbu_a29gw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxbo9nyaf.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxbo9nyaf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxmbpe178.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxmbpe178.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxmbpe178.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxmbpe178.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the even elements that are at even indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg6vcwxol.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpg6vcwxol.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n/*\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdwf5qdu3.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdwf5qdu3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n/*\nGiven a non-empty list of integers lst. add the even elements that\
    \ are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ygbwtwj.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5ygbwtwj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxbo9nyaf.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxbo9nyaf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph1xvkdg5.d(15): Error: no property `size` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph1xvkdg5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3pu49ti.d(15): Error: no property `size` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3pu49ti.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n/*\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdwf5qdu3.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdwf5qdu3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbu_a29gw.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbu_a29gw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg3pu49ti.d(15): Error: no property `size` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3pu49ti.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n/*\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjwizs56s.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjwizs56s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxbo9nyaf.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxbo9nyaf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n/*\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdwf5qdu3.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdwf5qdu3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(i\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n/*\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxbo9nyaf.d(22): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxbo9nyaf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.Length; i++)\n    {\n        if\
    \ (i % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n/*\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphxilc0jm.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphxilc0jm.d", "-I/tmp"]\n'''
  stdout: b''
