language: d
name: HumanEval_8_sum_product
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5d89bq1e.d(16): Error: semicolon expected, not `:`\n/tmp/tmp5d89bq1e.d(16):
    Error: expression expected, not `:`\n/tmp/tmp5d89bq1e.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5d89bq1e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long n, numbers)\n\
    \    {\n        sum += n;\n        product *= n;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppjyyy_bz.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmppjyyy_bz.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmppjyyy_bz.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjyyy_bz.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(number in numbers)\n\t\
    {\n\t\tsum += number;\n\t\tproduct *= number;\n\t}\n\treturn Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpet_mjy8s.d(16): Error: no identifier for declarator `number`\n/tmp/tmpet_mjy8s.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpet_mjy8s.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpktj4i3i8.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpktj4i3i8.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpktj4i3i8.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktj4i3i8.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tfor (long i : numbers)\n\t{\n\t\
    \tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5m1tvwx.d(16): Error: semicolon expected, not `:`\n/tmp/tmpi5m1tvwx.d(16):
    Error: expression expected, not `:`\n/tmp/tmpi5m1tvwx.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpi5m1tvwx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkv2f415.d(16): Error: semicolon expected, not `:`\n/tmp/tmpdkv2f415.d(16):
    Error: expression expected, not `:`\n/tmp/tmpdkv2f415.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdkv2f415.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkv2f415.d(16): Error: semicolon expected, not `:`\n/tmp/tmpdkv2f415.d(16):
    Error: expression expected, not `:`\n/tmp/tmpdkv2f415.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdkv2f415.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp64ivqoz3.d(16): Error: no identifier for declarator `number`\n/tmp/tmp64ivqoz3.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp64ivqoz3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkv2f415.d(16): Error: semicolon expected, not `:`\n/tmp/tmpdkv2f415.d(16):
    Error: expression expected, not `:`\n/tmp/tmpdkv2f415.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdkv2f415.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5phujtg.d(16): Error: no identifier for declarator `number`\n/tmp/tmpr5phujtg.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr5phujtg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\n\
    \    {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5d89bq1e.d(16): Error: semicolon expected, not `:`\n/tmp/tmp5d89bq1e.d(16):
    Error: expression expected, not `:`\n/tmp/tmp5d89bq1e.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp5d89bq1e.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5phujtg.d(16): Error: no identifier for declarator `number`\n/tmp/tmpr5phujtg.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr5phujtg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n\tlong sum = 0;\n\tlong product = 1;\n\tforeach(long i, numbers)\n\t{\n\
    \t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn Tuple!(sum, product);\n}\nunittest\n\
    {\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L,\
    \ 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkf3wo14u.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpkf3wo14u.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpkf3wo14u.d(21): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkf3wo14u.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp56mhgpmf.d(21):
    Error: template instance `tmp56mhgpmf.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56mhgpmf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkv2f415.d(16): Error: semicolon expected, not `:`\n/tmp/tmpdkv2f415.d(16):
    Error: expression expected, not `:`\n/tmp/tmpdkv2f415.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdkv2f415.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(number in numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5phujtg.d(16): Error: no identifier for declarator `number`\n/tmp/tmpr5phujtg.d(16):
    Error: found `in` when expecting `;`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr5phujtg.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\n\
    \    {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate = sum_product;\n\n\
    \    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L])\
    \ == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n\
    \    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkv2f415.d(16): Error: semicolon expected, not `:`\n/tmp/tmpdkv2f415.d(16):
    Error: expression expected, not `:`\n/tmp/tmpdkv2f415.d(16): Error: found `numbers`
    when expecting `;` following `for` condition\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpdkv2f415.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    for (long i = 0; i < numbers.length;\
    \ ++i)\n    {\n        sum += numbers[i];\n        product *= numbers[i];\n  \
    \  }\n    return Tuple!(sum, product);\n}\nunittest\n{\n    alias candidate =\
    \ sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L,\
    \ 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L,\
    \ 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L])\
    \ == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `sum` as
    parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(501):
    Error: template instance `parseSpecs!(sum, product)` cannot use local `product`
    as parameter to non-global template `parseSpecs(Specs...)`\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(614):
    Error: CTFE failed because of previous errors in `injectNamedFields`\n/tmp/tmp56mhgpmf.d(21):
    Error: template instance `tmp56mhgpmf.sum_product.Tuple!(sum, product)` error
    instantiating\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56mhgpmf.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i, numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum, product);\n\
    }\n/*\n For a given list of integers, return a tuple consisting of a sum and a\
    \ product of all the integers in a list.\n    Empty sum should be equal to 0 and\
    \ empty product should be equal to 1.\n    >>> sum_product([])\n    tuple(0L,\
    \ 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\n\
    Tuple!(long, long) sum_product(long[] numbers) \n{\n    long sum = 0;\n    long\
    \ product = 1;\n    foreach(long i, numbers) {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a given list of\
    \ integers, return a tuple consisting of a sum and a product of all the integers\
    \ in a list.\n    Empty sum should be equal to 0 and empty product should be equal\
    \ to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long i,\
    \ numbers) {\n        sum += i;\n        product *= i;\n    }\n    return Tuple!(sum,\
    \ product);\n}\n/*\n For a given list of integers, return a tuple consisting of\
    \ a sum and a product of all the integers in a list.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L, 4L])\n    tuple(10L, 24L)\n\
    \    \n*/\nTuple!(long, long) sum_product(long[] numbers) \n{\n    long sum =\
    \ 0;\n    long product = 1;\n    foreach(long i, numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return Tuple!(sum, product);\n}\n/*\n For a\
    \ given list of integers, return a tuple consisting of a sum and a product of\
    \ all the integers in a list.\n    Empty sum should be equal to 0 and empty product\
    \ should be equal to 1.\n    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L,\
    \ 2L, 3L, 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[]\
    \ numbers) \n{\n    long sum = 0;\n    long product = 1;\n\nunittest\n{\n    alias\
    \ candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n  \
    \  assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L,\
    \ 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L,\
    \ 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe103a55u.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpe103a55u.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpe103a55u.d(20): Error: found `return`
    when expecting `)`\n/tmp/tmpe103a55u.d(35): Error: no identifier for declarator
    `numbers`\n/tmp/tmpe103a55u.d(35): Error: found `)` when expecting `;`\n/tmp/tmpe103a55u.d(39):
    Error: found `return` when expecting `)`\n/tmp/tmpe103a55u.d(54): Error: no identifier
    for declarator `numbers`\n/tmp/tmpe103a55u.d(54): Error: found `)` when expecting
    `;`\n/tmp/tmpe103a55u.d(58): Error: found `return` when expecting `)`\n/tmp/tmpe103a55u.d(73):
    Error: no identifier for declarator `numbers`\n/tmp/tmpe103a55u.d(73): Error:
    found `)` when expecting `;`\n/tmp/tmpe103a55u.d(77): Error: found `return` when
    expecting `)`\n/tmp/tmpe103a55u.d(93): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe103a55u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n For a given list of integers,\
    \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
    \    Empty sum should be equal to 0 and empty product should be equal to 1.\n\
    \    >>> sum_product([])\n    tuple(0L, 1L)\n    >>> sum_product([1L, 2L, 3L,\
    \ 4L])\n    tuple(10L, 24L)\n    \n*/\nTuple!(long, long) sum_product(long[] numbers)\
    \ \n{\n    long sum = 0;\n    long product = 1;\n    foreach(long x, numbers)\
    \ {\n        sum += x;\n        product *= x;\n    }\n    return Tuple!(sum, product);\n\
    }\nunittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([])\
    \ == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n\
    \    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L,\
    \ 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpktj4i3i8.d(16): Error: no identifier for declarator `numbers`\n/tmp/tmpktj4i3i8.d(16):
    Error: found `)` when expecting `;`\n/tmp/tmpktj4i3i8.d(20): Error: found `return`
    when expecting `)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpktj4i3i8.d",
    "-I/tmp"]\n'''
  stdout: b''
