language: d
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbr2jrp8.d(18): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbr2jrp8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    float result;\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp128zvycb.d(19): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp128zvycb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph8xeo3lm.d(23): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph8xeo3lm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part = number - truncate_number(number);\n    \n    int_part =\
    \ int(frac_part);\n    \n    return frac_part - int_part;\n}\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx9_i3dbb.d(18): Error: cannot implicitly convert expression
    `frac_part` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpx9_i3dbb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float int_part = 0.0;\n    float remainder = 0.0;\n    \n    int_part\
    \ = floor(number);\n    \n    if (number - int_part > 0.5) {\n        float temp\
    \ = number - int_part;\n        \n        while(temp > 0.5) {\n            temp\
    \ -= 1.0;\n            decimals += 1.0;\n        }\n        \n        remainder\
    \ = temp;\n    }\n    \n    return int_part + decimals;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0n2apbca.d(38): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f75]\n??:? void tmp0n2apbca.__unittest_L34_C1() [0x427c8a]\n??:?
    void tmp0n2apbca.__modtest() [0x427cf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bddf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fe05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4302b4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fd91]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ac49]\n??:? runModuleUnitTests [0x42bbb5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42834b]\n??:? _d_run_main [0x4282b6]\n??:? main [0x427d0b]\n??:?
    __libc_start_main [0xa4ef3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    if (decimal_part ==\
    \ 0.0) \n    {\n        return integer_part;\n    }\n    \n    remainder = number\
    \ - integer_part;\n    \n    return remainder + decimal_part;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2z3ifhwe.d(19): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2z3ifhwe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part = number - truncate_number(number);\n    int_part = int(frac_part);\n\
    \    return number - int_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf8wmz37d.d(17): Error: cannot implicitly convert expression
    `frac_part` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpf8wmz37d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    float decimals = 1;\n    \n    while(number\
    \ > 0)\n    {\n        remainder = number % 1;\n        number = number / 1;\n\
    \        decimals = decimals * 10;\n    }\n    \n    result = result * decimals;\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long int int_part\
    \ = (long) number;\n    float remainder = (float) number - int_part;\n    \n \
    \   if (remainder > 0.5f) \n    {\n        return remainder;\n    }\n    else\
    \ \n    {\n        return remainder - 1.0f;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqk91edwa.d(15): Error: no identifier for declarator `long`\n/tmp/tmpqk91edwa.d(15):
    Error: C style cast illegal, use `cast(long)number`\n/tmp/tmpqk91edwa.d(16): Error:
    C style cast illegal, use `cast(float)number`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqk91edwa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    float decimals;\n    \n    decimals = number\
    \ - truncate_float(number);\n    \n    if (number > truncate_float(number))\n\
    \    {\n        remainder = truncate_float(number);\n        result = truncate_float(number)\
    \ + remainder;\n    }\n    else\n    {\n        result = number;\n    }\n    \n\
    \    return result + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0a8ztzt9.d(19): Error: undefined identifier `truncate_float`\n/tmp/tmp0a8ztzt9.d(21):
    Error: undefined identifier `truncate_float`\n/tmp/tmp0a8ztzt9.d(23): Error: undefined
    identifier `truncate_float`\n/tmp/tmp0a8ztzt9.d(24): Error: undefined identifier
    `truncate_float`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a8ztzt9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\n/*\n Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppn4l243i.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppn4l243i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floorf(number);\n\
    \    decimalPart = number-integerPart;\n    \n    if (decimalPart > 0.0) {\n \
    \       remainder = number-integerPart;\n    } else {\n        remainder = 0.0f;\n\
    \    }\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_n68r1yb.d(19): Error: undefined identifier `floorf`, did you
    mean function `floor`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_n68r1yb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    int integer;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpephj7zxn.d(18): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpephj7zxn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_7zms5l.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmps_7zms5l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    int decimals = (int)((result - number) * 100);\n    \n\
    \    if (decimals < 0)\n    {\n        decimals = 0;\n    }\n    \n    return\
    \ result - decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvg5kt1yt.d(17): Error: C style cast illegal, use `cast(int)((result
    - number) * 100)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvg5kt1yt.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    float temp;\n    \n    quotient\
    \ = number / 10;\n    decimals = number % 10;\n    \n    if (decimals > 0) {\n\
    \        temp = quotient * 100;\n        \n        if (temp > number) {\n    \
    \        temp = temp - decimals;\n        }\n        \n        quotient = temp\
    \ / 10;\n        decimals = temp % 10;\n    }\n    \n    if (decimals < 0) {\n\
    \        temp = quotient * 100;\n        \n        if (temp < number) {\n    \
    \        temp = temp + decimals;\n        }\n        \n        quotient = temp\
    \ / 10;\n        decimals = temp % 10;\n    }\n    \n    if (decimals == 0) {\n\
    \        remainder = quotient;\n    } else {\n        remainder = quotient + decimals;\n\
    \    }\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3hrlk1u9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    while(result > 1) \n    {\n        result /= 10;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbshzq_he.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    \n    int_part = trunc(number);\n    frac_part = number\
    \ - int_part;\n    \n    return frac_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbxmdsrr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 1;\n    float remainder = 0;\n    \n    while(number\
    \ > 0)\n    {\n        remainder = number % 10;\n        number = number / 10;\n\
    \        decimals = decimals * 10 + remainder;\n    }\n    \n    result = result\
    \ / decimals;\n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93io8wf6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    \n    int_part = int(number);\n    frac_part = number\
    \ - int_part;\n    \n    return frac_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg70_kw2g.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpg70_kw2g.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg70_kw2g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n \
    \       remainder = number % 1;\n        number = number / 1;\n        decimals\
    \ = decimals + remainder;\n    }\n    \n    return decimals;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpicznl9ws.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbr2jrp8.d(18): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbr2jrp8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floorf(number);\n\
    \    decimalPart = number - integerPart;\n    \n    remainder = number-integerPart;\n\
    \    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8oh__wtv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    while(result > 1.0f) {\n        result -= 1.0f;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek00q06a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_7zms5l.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmps_7zms5l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 0.0;\n    \n    while(number > 0.0)\n    {\n\
    \        float remainder = number % 1.0;\n        number = number;\n        decimals\
    \ += remainder;\n    }\n    \n    return result + decimals;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkjoup5qq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = number % 1;\n    float remainder = number - decimals;\n    float integerPart\
    \ = floor(number);\n    return remainder + decimals;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnor2reix.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = trunc(number);\n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81oqu1f0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqak8poru.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqak8poru.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part = number - truncate_number(number);\n    \n    int_part =\
    \ trunc(frac_part);\n    \n    return int_part + frac_part;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptzbi7n1f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = number - trunc(number);\n    return decimals;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnm5krwm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float trunc_number;\n    float decimal_part;\n    \n    trunc_number = number;\n\
    \    decimal_part = number - trunc_number;\n    \n    while(decimal_part >= 1)\n\
    \    {\n        remainder = decimal_part % 1;\n        decimal_part = decimal_part\
    \ / 1;\n        trunc_number = trunc_number * 10 + remainder;\n    }\n    \n \
    \   return trunc_number;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkp78z_si.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    \n    while(number > 0)\n    {\n      \
    \  remainder = number % 10;\n        number /= 10;\n        result = remainder\
    \ * 10.0 + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4e09scu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 1;\n    \n    while (result > 1) {\n       \
    \ result /= 10;\n        decimals++;\n    }\n    \n    return result - decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_he6a1e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int intPart =\
    \ (int) number;\n    float decimalPart = number - intPart;\n    \n    return decimalPart;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprg0aqlhl.d(15): Error: C style cast illegal, use cast(int)number\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprg0aqlhl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float trunc_number\
    \ = number;\n    float remainder;\n    float decimal_part;\n    int decimal_part_index;\n\
    \    int decimal_part_count;\n    int i;\n    \n    decimal_part_index = trunc_number\
    \ - trunc_number % 1;\n    \n    decimal_part_count = decimal_part_index + 1;\n\
    \    \n    remainder = trunc_number - decimal_part_index;\n    \n    decimal_part\
    \ = remainder / decimal_part_count;\n    \n    trunc_number = trunc_number - decimal_part\
    \ * decimal_part_count;\n    \n    return trunc_number;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbgo9ode.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    \n    int_part = trunc(number);\n    frac_part = number\
    \ - int_part;\n    \n    return frac_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbxmdsrr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    \n    while(number > 0)\n    {\n      \
    \  remainder = number % 10;\n        number = number / 10;\n        result = result\
    \ + remainder;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35sre1ef.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    while(result > 1) {\n        result /= 10;\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1v9t3v59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_7zms5l.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmps_7zms5l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    float temp;\n    int exponent;\n\
    \    \n    temp = number;\n    \n    exponent = std.math.frexp(temp, out remainder);\n\
    \    \n    quotient = temp / pow(2, exponent);\n    decimals = temp - quotient\
    \ * pow(2, exponent);\n    \n    return quotient + decimals;\n}\n/*\n Given a\
    \ positive floating point number, it can be decomposed into\n    and integer part\
    \ (largest integer smaller than given number) and decimals\n    (leftover part\
    \ always smaller than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcj6jwv7k.d(23): Error: expression expected, not \''out\''\n/tmp/tmpcj6jwv7k.d(23):
    Error: found \''remainder\'' when expecting \'',\''\n/tmp/tmpcj6jwv7k.d(30): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcj6jwv7k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    float integerPart;\n    \n    integerPart = number;\n\
    \    \n    decimals = number - integerPart;\n    \n    if (decimals < 0.0) \n\
    \    {\n        integerPart -= 1;\n        decimals = -decimals;\n    }\n    \n\
    \    remainder = number-integerPart;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperq_iu6l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = int(number);\n    \n    if (int_part\
    \ == number) {\n        decimal_part = number;\n    } else {\n        decimal_part\
    \ = number - int_part;\n    }\n    \n    return decimal_part;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7glmr291.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7glmr291.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7glmr291.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ intPart = (long long int) number;\n    long long int decimalPart = (long long\
    \ int) number - intPart;\n    \n    if (decimalPart > 0)\n        return number\
    \ - decimalPart;\n    else\n        return number;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxjoojad7.d(15): Error: no identifier for declarator long\n/tmp/tmpxjoojad7.d(15):
    Error: no identifier for declarator long\n/tmp/tmpxjoojad7.d(15): Error: found
    \''long\'' when expecting \''.\'' following long\n/tmp/tmpxjoojad7.d(15): Error:
    found \''int\'' when expecting identifier following \''long.\''\n/tmp/tmpxjoojad7.d(15):
    Error: semicolon expected, not \''number\''\n/tmp/tmpxjoojad7.d(16): Error: no
    identifier for declarator long\n/tmp/tmpxjoojad7.d(16): Error: no identifier for
    declarator long\n/tmp/tmpxjoojad7.d(16): Error: found \''long\'' when expecting
    \''.\'' following long\n/tmp/tmpxjoojad7.d(16): Error: found \''int\'' when expecting
    identifier following \''long.\''\n/tmp/tmpxjoojad7.d(16): Error: semicolon expected,
    not \''number\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjoojad7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 1;\n    \n    while(number > 0)\n    {\n   \
    \     number /= 10;\n        decimals++;\n    }\n    \n    return result / decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg4l7cxm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floorf(number);\n\
    \    decimalPart = number-integerPart;\n    \n    remainder = number-integerPart;\n\
    \    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnl76ac0g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floorf(number);\n\
    \    decimalPart = number-integerPart;\n    \n    if(decimalPart > 0.0f)\n   \
    \ {\n        remainder = number-integerPart;\n        \n        integerPart =\
    \ floorf(remainder);\n        decimalPart = remainder-integerPart;\n    }\n  \
    \  \n    return decimalPart;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5_73_yo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimal;\n    float integer_part;\n    float decimal_part;\n    \n\
    \    integer_part = floor(number);\n    \n    if (integer_part == number)\n  \
    \  {\n        decimal_part = 0.0;\n    }\n    else\n    {\n        decimal_part\
    \ = number - integer_part;\n    }\n    \n    remainder = number - integer_part;\n\
    \    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55jhhe2i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    float integer;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwvvnqtw9.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvvnqtw9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int intPart =\
    \ (int) number;\n    float decimalPart = number - intPart;\n    return decimalPart;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_xqyrie5.d(15): Error: C style cast illegal, use cast(int)number\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xqyrie5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n   \
    \ while(number > 0.0) {\n        remainder = number % 10.0;\n        number =\
    \ number / 10.0;\n        decimals = decimals + remainder;\n    }\n    \n    result\
    \ = result + decimals;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5vjmoe7h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int decimal_part\
    \ = int(number);\n    float trunc_number = number - decimal_part;\n    return\
    \ trunc_number;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7kn9ute9.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7kn9ute9.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmp7kn9ute9.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7kn9ute9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    int exponent;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphzcv1buj.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzcv1buj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n \
    \       remainder = number % 10.0;\n        number = number / 10.0;\n        decimals\
    \ = decimals + remainder;\n    }\n    \n    return decimals;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06ryhpyp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    float decimalPart;\n    \n    integerPart = int(number);\n\
    \    decimalPart = number - integerPart;\n    \n    remainder = decimalPart;\n\
    \    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplsk79zvf.d(19): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmplsk79zvf.d(19): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplsk79zvf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part - decimal_part;\n    \n    return remainder;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0llzur5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    float remainder;\n    \n    int_part = std.math.trunc(number);\n\
    \    remainder = number - int_part;\n    \n    return remainder;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkz18s33d.d(15): Error: no identifier for declarator long\n/tmp/tmpkz18s33d.d(15):
    Error: no identifier for declarator long\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkz18s33d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floor(number);\n\
    \    decimalPart = number - integerPart;\n    \n    if (decimalPart > 0.0) \n\
    \    {\n        remainder = truncate_number(decimalPart);\n    }\n    \n    return\
    \ remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5tzeyj10.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    while(result > 1) \n    {\n        result /= 10;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbshzq_he.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 1;\n    while (number > 0)\n    {\n        number\
    \ /= 10;\n        decimals++;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n \
    \   assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xvxvpk7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder\
    \ / pow(10.0, floor(log10(remainder)));\n    \n    return decimal_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fpun7go.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5_48txcv.d(17): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_48txcv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    \n    int_part = trunc(number);\n    frac_part = number\
    \ - int_part;\n    \n    return frac_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbxmdsrr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\n/*\n Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwryv89qk.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpwryv89qk.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmpwryv89qk.d(23): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwryv89qk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float trunc_number\
    \ = number;\n    float int_part = 0;\n    float decimal_part = 0;\n    float remainder\
    \ = 0;\n    float temp = 0;\n    int decimal_count = 0;\n    \n    while(trunc_number\
    \ > 0)\n    {\n        remainder = trunc_number % 10;\n        temp = trunc_number\
    \ / 10;\n        \n        int_part = int_part + temp * pow(10, decimal_count);\n\
    \        \n        decimal_part = decimal_part + remainder * pow(10, decimal_count);\n\
    \        \n        trunc_number = trunc_number / 10;\n        \n        decimal_count++;\n\
    \    }\n    \n    return int_part + decimal_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5y_scqhs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = int(number);\n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprzha8pa1.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmprzha8pa1.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzha8pa1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp80642noe.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80642noe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    int exponent;\n    \n    exponent = floor(log10(number));\n\
    \    \n    if(exponent < 0)\n        exponent = 0;\n    \n    remainder = number\
    \ - (float)pow(10.0, -exponent);\n    \n    if(remainder < 1.0e-6)\n        result\
    \ = remainder;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptzl1e8a1.d(24): Error: C style cast illegal, use cast(float)pow(10.0000,
    -exponent)\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptzl1e8a1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    float quotient = 0.0;\n    float quotient2\
    \ = 0.0;\n    float quotient3 = 0.0;\n    float quotient4 = 0.0;\n    float quotient5\
    \ = 0.0;\n    float quotient6 = 0.0;\n    float quotient7 = 0.0;\n    float quotient8\
    \ = 0.0;\n    float quotient9 = 0.0;\n    float quotient10 = 0.0;\n    float quotient11\
    \ = 0.0;\n    float quotient12 = 0.0;\n    float quotient13 = 0.0;\n    float\
    \ quotient14 = 0.0;\n    float quotient15 = 0.0;\n    float quotient16 = 0.0;\n\
    \    float quotient17 = 0.0;\n    float quotient18 = 0.0;\n    float quotient19\
    \ = 0.0;\n    float quotient20 = 0.0;\n    float quotient21 = 0.0;\n    float\
    \ quotient22 = 0.0;\n    float quotient23 = 0.0;\n    float quotient24 = 0.0;\n\
    \    float quotient25 = 0.0;\n    float quotient26 = 0.0;\n    float quotient27\
    \ = 0.0;\n    float quotient28 = 0.0;\n    float quotient29 = 0.0;\n    float\
    \ quotient30 = 0.0;\n    float quotient31 = 0.0;\n    float quotient32 = 0.0;\n\
    \    float quotient33 = 0.0;\n    float quotient34 = 0.0;\n    float quotient35\
    \ = 0.0;\n    float quotient36 = 0.0;\n    float quotient37 = 0.0;\n    float\
    \ quotient38 = 0.0;\n    float quotient39 = 0.0;\n    float quotient40 = 0.0;\n\
    \    float quotient41 = 0.0;\n    float quotient42 = 0.0;\n    float quotient43\
    \ = 0.0;\n    float quotient44 = 0.0;\n    float quotient45 = 0.0;\n    float\
    \ quotient46 = 0.0;\n    float quotient47 = 0.0;\n    float quotient48 = 0.0;\n\
    \    float quotient49 = 0.0;\n    float quotient50 = 0.0;\n    float quotient51\
    \ = 0.0;\n    float quotient52 = 0.0;\n    float quotient53 = 0.0;\n    float\
    \ quotient54 = 0.0;\n    float quotient55 = 0.0;\n    float quotient56 = 0.0;\n\
    \    float quotient57 = 0.0;\n    float quotient58 = 0.0;\n    float quotient59\
    \ = 0.0;\n    float quotient60 = 0.0;\n    float quotient61 = 0.\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsjrl1fg.d(78): Error: semicolon expected, not \''unittest\''\n/tmp/tmpfsjrl1fg.d(78):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpfsjrl1fg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part - decimal_part;\n    \n    return remainder;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpytc_d_m2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder\
    \ / pow(10.0, floor(log10(remainder)));\n    \n    return decimal_part;\n}\n</code>\n\
    <|/ a tags=floating-point,c++,truncate |>\n<| a dscore=2 |>\n<code>\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    int decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    remainder = number - integer_part;\n\
    \    \n    decimal_part = remainder / pow(10.0, floor(log10(remainder)));\n  \
    \  \n    return decimal_part;\n}\n</code>\n<|/ a tags=floating-point,c++,truncate\
    \ |>\n<| a tags=floating-point,c++,truncate |>\n<code>\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    int decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    remainder = number - integer_part;\n\
    \    \n    decimal_part = remainder / pow(10.0, floor(log10(remainder)));\n  \
    \  \n    return decimal_part;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=floating-point,c++,truncate\
    \ |>\n<code>\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder\
    \ / pow(10.0, floor(log10(remainder)));\n    \n    return decimal_part;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=floating-point,c++,truncate |>\n<code>\nfloat truncate_number(float\
    \ number) \n{\n    float remainder;\n    int integer_part;\n    int decimal_part;\n\
    \    \n    integer_part = trunc(number);\n    \n    remainder = number - integer_part;\n\
    \    \n    decimal_part = remainder / pow(10.0, floor(log10(remainder)));\n  \
    \  \n    return decimal_part;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=floating-point,c++,truncate\
    \ |>\n<code>\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpir7cet7k.d(27): Error: Declaration expected, not \''<\''\n/tmp/tmpir7cet7k.d(37):
    Error: no identifier for declarator integer_part\n/tmp/tmpir7cet7k.d(37): Error:
    Declaration expected, not \''=\''\n/tmp/tmpir7cet7k.d(39): Error: no identifier
    for declarator remainder\n/tmp/tmpir7cet7k.d(39): Error: Declaration expected,
    not \''=\''\n/tmp/tmpir7cet7k.d(41): Error: no identifier for declarator decimal_part\n/tmp/tmpir7cet7k.d(41):
    Error: Declaration expected, not \''=\''\n/tmp/tmpir7cet7k.d(43): Error: Declaration
    expected, not \''return\''\n/tmp/tmpir7cet7k.d(44): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpir7cet7k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floor(number);\n\
    \    decimalPart = number - integerPart;\n    \n    if (decimalPart > 0.0) {\n\
    \        remainder = truncate_number(decimalPart);\n    } else {\n        remainder\
    \ = 0.0f;\n    }\n    \n    return remainder + integerPart;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvztwp7q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqak8poru.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqak8poru.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimalPart;\n    \n    decimalPart = number - int(number);\n\
    \    \n    if(decimalPart > 0)\n    {\n        result = result - decimalPart;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpogi3m8fc.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpogi3m8fc.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogi3m8fc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    \n    while(number > 0)\n    {\n      \
    \  remainder = number % 10;\n        number /= 10;\n        result = remainder\
    \ * 10.0 + result;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4e09scu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = trunc(number);\n    \n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhjczscb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    \n    while(result > 1) {\n        remainder\
    \ = result % 1;\n        result = result / 1;\n        result = remainder + result;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxrkpyp79.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\nunittest\n{\n    alias candidate =\
    \ truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp8b8z3kz.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8b8z3kz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ intPart = (long long int)number;\n    long long int decimalPart = intPart %\
    \ 10;\n    intPart /= 10;\n    \n    if (decimalPart > 0)\n        return number;\n\
    \    \n    return intPart;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu0fsgvh5.d(15): Error: no identifier for declarator long\n/tmp/tmpu0fsgvh5.d(15):
    Error: no identifier for declarator long\n/tmp/tmpu0fsgvh5.d(15): Error: found
    \''long\'' when expecting \''.\'' following long\n/tmp/tmpu0fsgvh5.d(15): Error:
    found \''int\'' when expecting identifier following \''long.\''\n/tmp/tmpu0fsgvh5.d(15):
    Error: semicolon expected, not \''number\''\n/tmp/tmpu0fsgvh5.d(16): Error: no
    identifier for declarator long\n/tmp/tmpu0fsgvh5.d(16): Error: no identifier for
    declarator long\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0fsgvh5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    float decimals;\n    int exponent;\n  \
    \  int sign;\n    \n    sign = number < 0.0 ? -1.0 : 1.0;\n    exponent = std.math.trunc(std.math.log2(number));\n\
    \    \n    decimals = number - std.math.pow(10.0, exponent);\n    \n    remainder\
    \ = std.math.pow(10.0, exponent - 1);\n    \n    result = remainder + decimals;\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswsbx0_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part - decimal_part;\n    \n    return remainder;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0llzur5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float trunc_number;\n    int decimal_places = 1;\n    \n    while(number\
    \ > 0)\n    {\n        remainder = number % 10;\n        trunc_number = trunc_number\
    \ + remainder * pow(10.0, decimal_places);\n        number = number / 10;\n  \
    \      decimal_places++;\n    }\n    \n    return trunc_number;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53ksqk7u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp1lnq9qt.d(17): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1lnq9qt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floorf(number);\n\
    \    decimalPart = number-integerPart;\n    \n    remainder = number-integerPart;\n\
    \    \n    return remainder;\n}\n/*\n Given a positive floating point number,\
    \ it can be decomposed into\n    and integer part (largest integer smaller than\
    \ given number) and decimals\n    (leftover part always smaller than 1).\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_n98r_ms.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_n98r_ms.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = number - trunc(number);\n    float result = trunc(number);\n    return result\
    \ + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_zglwfs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int decimal_part\
    \ = int(number);\n    float trunc_number = number - decimal_part;\n    return\
    \ trunc_number;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7kn9ute9.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7kn9ute9.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmp7kn9ute9.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7kn9ute9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = int(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7j2uo7du.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7j2uo7du.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7j2uo7du.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float trunc_number\
    \ = number;\n    float remainder;\n    int decimal_part;\n    \n    decimal_part\
    \ = int(number - trunc_number);\n    \n    if (decimal_part == 0)\n    {\n   \
    \     trunc_number = trunc_number - remainder;\n        decimal_part = 1;\n  \
    \  }\n    \n    return trunc_number + remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi2fbs5wa.d(19): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpi2fbs5wa.d(19): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi2fbs5wa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder = 0;\n    \n    while(number > 0)\n    {\n  \
    \      remainder = number % 10;\n        number = number / 10;\n        result\
    \ = remainder * 10 + result;\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0o9k80kj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = trunc(number);\n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81oqu1f0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 0.0;\n    \n    while(result > 1.0f) {\n   \
    \     result += 1.0f;\n        decimals++;\n    }\n    \n    return result - decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzodabiw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ intPart = (long long) number;\n    long long int decimalPart = (intPart % 10);\n\
    \    intPart /= 10;\n    \n    if (decimalPart > 0)\n        return number;\n\
    \    \n    return (float) intPart + decimalPart;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeuuirr0n.d(15): Error: no identifier for declarator long\n/tmp/tmpeuuirr0n.d(15):
    Error: no identifier for declarator long\n/tmp/tmpeuuirr0n.d(15): Error: found
    \''long\'' when expecting \''.\'' following long\n/tmp/tmpeuuirr0n.d(15): Error:
    found \'')\'' when expecting identifier following \''long.\''\n/tmp/tmpeuuirr0n.d(15):
    Error: found \''number\'' when expecting \'')\''\n/tmp/tmpeuuirr0n.d(16): Error:
    no identifier for declarator long\n/tmp/tmpeuuirr0n.d(16): Error: no identifier
    for declarator long\n/tmp/tmpeuuirr0n.d(22): Error: C style cast illegal, use
    cast(float)intPart\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuuirr0n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    float decimals = number - trunc(number);\n    \n    if\
    \ (decimals > 0.0f)\n    {\n        result = trunc(number);\n    }\n    \n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n \
    \   assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n   \
    \ assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4zq21di3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    \n    int_part = int(number);\n    frac_part = number\
    \ - int_part;\n    \n    return frac_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg70_kw2g.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpg70_kw2g.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg70_kw2g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float integer = 0.0;\n    \n    while(number > 0.0) {\n        integer\
    \ += number % 10;\n        decimals += number / 10.0;\n        number /= 10.0;\n\
    \    }\n    \n    return decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkxeixrvf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = int(number);\n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4d44l957.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp4d44l957.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4d44l957.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    float quotient = 0.0;\n    \n    quotient\
    \ = number;\n    \n    while(quotient > 1.0)\n    {\n        remainder = quotient\
    \ - 1.0;\n        quotient = remainder / 10.0;\n        decimals = decimals +\
    \ 1.0;\n    }\n    \n    return quotient;\n}\n/*\n Given a positive floating point\
    \ number, it can be decomposed into\n    and integer part (largest integer smaller\
    \ than given number) and decimals\n    (leftover part always smaller than 1).\n\
    unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9duzw6m_.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp9duzw6m_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 1;\n    float remainder = 0;\n    \n    while(number\
    \ > 0)\n    {\n        remainder = number % 10;\n        number = number / 10;\n\
    \        decimals = decimals * 10;\n        \n        if(remainder > 0)\n    \
    \    {\n            decimals = decimals + 1;\n        }\n    }\n    \n    result\
    \ = result / decimals;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4l86_gv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integer_part;\n    float decimal_part;\n    \n    integer_part = floor(number);\n\
    \    decimal_part = number - integer_part;\n    \n    if (decimal_part == 0.0f)\n\
    \    {\n        return integer_part;\n    }\n    \n    remainder = number - integer_part;\n\
    \    \n    return remainder + 1.0f;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzia9sk4e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float trunc_number\
    \ = number;\n    float remainder = 0;\n    float decimal_part = 0;\n    float\
    \ decimal_part_remainder = 0;\n    float decimal_part_remainder_magnitude = 0;\n\
    \    float decimal_part_remainder_magnitude2 = 0;\n    float decimal_part_remainder_magnitude4\
    \ = 0;\n    float decimal_part_remainder_magnitude8 = 0;\n    float decimal_part_remainder_magnitude16\
    \ = 0;\n    float decimal_part_remainder_magnitude32 = 0;\n    float decimal_part_remainder_magnitude64\
    \ = 0;\n    float decimal_part_remainder_magnitude128 = 0;\n    float decimal_part_remainder_magnitude256\
    \ = 0;\n    float decimal_part_remainder_magnitude512 = 0;\n    float decimal_part_remainder_magnitude1024\
    \ = 0;\n    float decimal_part_remainder_magnitude2048 = 0;\n    float decimal_part_remainder_magnitude4096\
    \ = 0;\n    float decimal_part_remainder_magnitude8192 = 0;\n    float decimal_part_remainder_magnitude16384\
    \ = 0;\n    float decimal_part_remainder_magnitude32768 = 0;\n    float decimal_part_remainder_magnitude65536\
    \ = 0;\n    float decimal_part_remainder_magnitude131072 = 0;\n    float decimal_part_remainder_magnitude262144\
    \ = 0;\n    float decimal_part_remainder_magnitude524288 = 0;\n    float decimal_part_remainder_magnitude1048576\
    \ = 0;\n    float decimal_part_remainder_magnitude2097152 = 0.0;\n    float decimal_part_remainder_magnitude4194304\
    \ = 0.0;\n    float decimal_part_remainder_magnitude8388608 = 0.0;\n    float\
    \ decimal_part_remainder_magnitude16777216 = 0.0;\n    float decimal_part_remainder_magnitude33554432\
    \ = 0.0;\n    float decimal_part_remainder_magnitude67108864 = 0.0;\n    float\
    \ decimal_part_remainder_magnitude134217728 = 0.0;\n    float decimal_part_remainder_magnitude268435456\
    \ = 0.0;\n    float decimal_part_remainder_magnitude536870912 = 0.0;\n    float\
    \ decimal_part_remainder_magnitude1073741824 = 0.0;\n    float decimal_part_remainder_magnitude2147483648\
    \ = 0.0;\n    float decimal_part_remainder_magnitude4294967296 = 0.0;\n    float\
    \ decimal_part_remainder_magnitude8589934592 = 0.0;\n    float decimal_part_remainder_magnitude17179869184\
    \ = 0.0;\n    float decimal_part_remainder_magnitude34359738368 = 0.0;\n    float\
    \ decimal_part_remainder_magnitude68719476736 = 0.0;\n    float decimal_part_remainder_magnitude137438953472\
    \ = 0.0;\n    float decimal_part_remainder_magnitude274877906944 = 0.0;\n    float\
    \ decimal_\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq7_5rz4x.d(59): Error: semicolon expected, not \''unittest\''\n/tmp/tmpq7_5rz4x.d(59):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq7_5rz4x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder;\n\
    \    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrmfawz3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    float decimalPart;\n    \n    integerPart = int(number);\n\
    \    decimalPart = number - integerPart;\n    \n    remainder = decimalPart %\
    \ 1;\n    \n    return remainder;\n}\n</code>\n<|/ a tags=c++,floating-point,truncate\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `truncate_number(-3.5)`\
    \ returns `-3.5` instead of `-3.4999999999999999`.\n<|/ c |>\n<| a tags=c++,floating-point,truncate\
    \ |>\n<code>\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    float decimalPart;\n    \n    integerPart = int(number);\n\
    \    decimalPart = number - integerPart;\n    \n    remainder = decimalPart %\
    \ 1;\n    \n    return remainder;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `truncate_number(-3.5)` returns `-3.5` instead\
    \ of `-3.4999999999999999`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `truncate_number(-3.5)` returns `-3.5` instead of `-3.4999999999999999`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `truncate_number(-3.5)`\
    \ returns `-3.5` instead of `-3.4999999999999999`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `truncate_number(-3.5)` returns `-3.5` instead of\
    \ `-3.4999999999999999`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `truncate_number(-3.5)` returns `-3.5` instead of `-3.4999999999999999`.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nfloat truncate_number(float number) \n{\n  \
    \  float remainder;\n    int integerPart;\n    float decimalPart;\n    \n    integerPart\
    \ = int(number);\n    decimalPart = number - integerPart;\n    \n    remainder\
    \ = decimalPart % 1;\n    \n    return remainder;\n}\n</code>\n<|/ a tags=c++,floating-point,truncate\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `truncate_number(-3.5)`\
    \ returns `-3.5` instead of `\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp11vvv8p3.d(19): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp11vvv8p3.d(19): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmp11vvv8p3.d(26): Error: Declaration expected, not
    \''<\''\n/tmp/tmp11vvv8p3.d(29): Error: unterminated character constant\n/tmp/tmp11vvv8p3.d(39):
    Error: no identifier for declarator integerPart\n/tmp/tmp11vvv8p3.d(39): Error:
    Declaration expected, not \''=\''\n/tmp/tmp11vvv8p3.d(40): Error: no identifier
    for declarator decimalPart\n/tmp/tmp11vvv8p3.d(40): Error: Declaration expected,
    not \''=\''\n/tmp/tmp11vvv8p3.d(42): Error: no identifier for declarator remainder\n/tmp/tmp11vvv8p3.d(42):
    Error: Declaration expected, not \''=\''\n/tmp/tmp11vvv8p3.d(44): Error: Declaration
    expected, not \''return\''\n/tmp/tmp11vvv8p3.d(45): Error: unrecognized declaration\n/tmp/tmp11vvv8p3.d(49):
    Error: unterminated character constant\n/tmp/tmp11vvv8p3.d(52): Error: unterminated
    character constant\n/tmp/tmp11vvv8p3.d(55): Error: unterminated character constant\n/tmp/tmp11vvv8p3.d(58):
    Error: unterminated character constant\n/tmp/tmp11vvv8p3.d(61): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11vvv8p3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part - decimal_part;\n    \n    return remainder;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymneifxp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    \n    int_part = int(number);\n    frac_part = number\
    \ - int_part;\n    \n    return frac_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg70_kw2g.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpg70_kw2g.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg70_kw2g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder;\n\
    \    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v64vc00.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    int decimalPart;\n    \n    integerPart = int(number);\n\
    \    decimalPart = number - integerPart;\n    \n    remainder = number - integerPart;\n\
    \    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt36vzizo.d(19): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpt36vzizo.d(19): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt36vzizo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float int_part = 0.0;\n    float remainder = 0.0;\n    \n    int_part\
    \ = number;\n    \n    while(int_part >= 1.0)\n    {\n        int_part -= 1.0;\n\
    \        decimals += 1.0;\n    }\n    \n    remainder = int_part;\n    \n    return\
    \ remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fr_945y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder;\n\
    \    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v64vc00.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    float integer;\n    \n    integer = trunc(number);\n\
    \    decimals = number - integer;\n    \n    if (decimals < 0.0) \n    {\n   \
    \     decimals = 0.0;\n    }\n    \n    remainder = number - integer;\n    \n\
    \    return remainder + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ee149o9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int decimal_part\
    \ = int(number);\n    float trunc_number = number - decimal_part;\n    return\
    \ trunc_number;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7kn9ute9.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7kn9ute9.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmp7kn9ute9.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7kn9ute9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    int exponent;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphzcv1buj.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzcv1buj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimalPart;\n\
    \    float integerPart;\n    \n    integerPart = floor(number);\n    decimalPart\
    \ = number - integerPart;\n    \n    return decimalPart;\n}\nunittest\n{\n   \
    \ alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n \
    \   assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjzqt1qx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    int_part = trunc(number);\n    frac_part = number -\
    \ int_part;\n    return frac_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkk99h3q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder;\n\
    \    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v64vc00.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_7zms5l.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmps_7zms5l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder = 0;\n    float quotient = 0;\n    float quotient2\
    \ = 0;\n    float quotient3 = 0;\n    float quotient4 = 0;\n    float quotient5\
    \ = 0;\n    float quotient6 = 0;\n    float quotient7 = 0;\n    float quotient8\
    \ = 0;\n    float quotient9 = 0;\n    float quotient10 = 0;\n    float quotient11\
    \ = 0;\n    float quotient12 = 0;\n    float quotient13 = 0;\n    float quotient14\
    \ = 0;\n    float quotient15 = 0;\n    float quotient16 = 0;\n    float quotient17\
    \ = 0;\n    float quotient18 = 0;\n    float quotient19 = 0;\n    float quotient20\
    \ = 0;\n    float quotient21 = 0;\n    float quotient22 = 0;\n    float quotient23\
    \ = 0;\n    float quotient24 = 0;\n    float quotient25 = 0;\n    float quotient26\
    \ = 0;\n    float quotient27 = 0;\n    float quotient28 = 0;\n    float quotient29\
    \ = 0;\n    float quotient30 = 0;\n    float quotient31 = 0;\n    float quotient32\
    \ = 0;\n    float quotient33 = 0;\n    float quotient34 = 0;\n    float quotient35\
    \ = 0;\n    float quotient36 = 0;\n    float quotient37 = 0;\n    float quotient38\
    \ = 0;\n    float quotient39 = 0;\n    float quotient40 = 0;\n    float quotient41\
    \ = 0;\n    float quotient42 = 0;\n    float quotient43 = 0;\n    float quotient44\
    \ = 0;\n    float quotient45 = 0;\n    float quotient46 = 0;\n    float quotient47\
    \ = 0;\n    float quotient48 = 0;\n    float quotient49 = 0;\n    float quotient50\
    \ = 0;\n    float quotient51 = 0;\n    float quotient52 = 0;\n    float quotient53\
    \ = 0;\n    float quotient54 = 0;\n    float quotient55 = 0;\n    float quotient56\
    \ = 0;\n    float quotient57 = 0;\n    float quotient58 = 0;\n    float quotient59\
    \ = 0;\n    float quotient60 = 0;\n    float quotient61 = 0;\n    float quotient62\
    \ = 0;\n    float quotient63 = 0;\n    float quotient64 = 0;\n    float quotient65\
    \ = 0;\n    float quotient66 = 0;\n    float quotient67 = 0;\n    float quotient68\
    \ = 0;\n    float quotient69 = 0;\n    float quotient70 = 0;\n    float quotient71\
    \ = 0;\n    float quotient72 = 0;\n\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplvdr1ig1.d(90): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvdr1ig1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2pelsp9w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int decimal_part\
    \ = int(number);\n    float trunc_number = number - decimal_part;\n    return\
    \ trunc_number;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7kn9ute9.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7kn9ute9.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmp7kn9ute9.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7kn9ute9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    float integer;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwvvnqtw9.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvvnqtw9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 0.0;\n    float remainder = 0.0;\n    \n   \
    \ while(number > 0.0) {\n        remainder = number % 10.0;\n        number =\
    \ number / 10.0;\n        decimals = decimals + remainder;\n    }\n    \n    result\
    \ = result + decimals;\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5vjmoe7h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part - decimal_part;\n    \n    return remainder;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymneifxp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    float decimals = number - trunc(number);\n    \n    if\
    \ (number - trunc(number) == 0.5f)\n    {\n        decimals = 0.f;\n    }\n  \
    \  \n    result = trunc(number);\n    \n    return result + decimals;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwctf2us.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int intPart;\n\
    \    float decimalPart;\n    \n    intPart = (int) number;\n    decimalPart =\
    \ number - intPart;\n    \n    return decimalPart;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_6jq_11a.d(18): Error: C style cast illegal, use cast(int)number\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6jq_11a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floor(number);\n\
    \    decimalPart = number - integerPart;\n    \n    if (decimalPart > 0)\n   \
    \ {\n        remainder = truncate_number(decimalPart);\n    }\n    else\n    {\n\
    \        remainder = 0;\n    }\n    \n    return remainder;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjwu5e35s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    \n    while(result > 1)\n    {\n      \
    \  remainder = (result % 1);\n        result = floorf(result / 1);\n        if(remainder\
    \ > 0)\n        {\n            result += 1;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7nz3qovs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder;\n\
    \    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v64vc00.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part = number - truncate_number(number);\n    int_part = trunc(frac_part);\n\
    \    return int_part + frac_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnadqvsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    while(result > 1) {\n        result /= 10;\n    }\n   \
    \ \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1v9t3v59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    float integerPart;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbwvbpvcr.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwvbpvcr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long int intPart\
    \ = (long) number;\n    long int decimalPart = (intPart % 1);\n    intPart /=\
    \ 1;\n    \n    return (float) decimalPart;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu5l1ci4d.d(15): Error: no identifier for declarator long\n/tmp/tmpu5l1ci4d.d(15):
    Error: C style cast illegal, use cast(long)number\n/tmp/tmpu5l1ci4d.d(16): Error:
    no identifier for declarator long\n/tmp/tmpu5l1ci4d.d(19): Error: C style cast
    illegal, use cast(float)decimalPart\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpu5l1ci4d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 1;\n    float remainder = 0;\n    \n    while(number\
    \ > 0)\n    {\n        remainder = number % 10;\n        number = number / 10;\n\
    \        decimals = decimals * 10 + remainder;\n    }\n    \n    result = result\
    \ / decimals;\n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93io8wf6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\nunittest\n{\n    alias candidate =\
    \ truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp8b8z3kz.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp8b8z3kz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integer_part;\n    float decimal_part;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1joymmsy.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1joymmsy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    float integer;\n    float remainder_float;\n    float\
    \ decimal_part;\n    float decimal_part_float;\n    float decimal_part_float2;\n\
    \    float decimal_part_float3;\n    float decimal_part_float4;\n    float decimal_part_float5;\n\
    \    float decimal_part_float6;\n    float decimal_part_float7;\n    float decimal_part_float8;\n\
    \    float decimal_part_float9;\n    float decimal_part_float10;\n    float decimal_part_float11;\n\
    \    float decimal_part_float12;\n    float decimal_part_float13;\n    float decimal_part_float14;\n\
    \    float decimal_part_float15;\n    float decimal_part_float16;\n    float decimal_part_float17;\n\
    \    float decimal_part_float18;\n    float decimal_part_float19;\n    float decimal_part_float20;\n\
    \    float decimal_part_float21;\n    float decimal_part_float22;\n    float decimal_part_float23;\n\
    \    float decimal_part_float24;\n    float decimal_part_float25;\n    float decimal_part_float26;\n\
    \    float decimal_part_float27;\n    float decimal_part_float28;\n    float decimal_part_float29;\n\
    \    float decimal_part_float30;\n    float decimal_part_float31;\n    float decimal_part_float32;\n\
    \    float decimal_part_float33;\n    float decimal_part_float34;\n    float decimal_part_float35;\n\
    \    float decimal_part_float36;\n    float decimal_part_float37;\n    float decimal_part_float38;\n\
    \    float decimal_part_float39;\n    float decimal_part_float40;\n    float decimal_part_float41;\n\
    \    float decimal_part_float42;\n    float decimal_part_float43;\n    float decimal_part_float44;\n\
    \    float decimal_part_float45;\n    float decimal_part_float46;\n    float decimal_part_float47;\n\
    \    float decimal_part_float48;\n    float decimal_part_float49;\n    float decimal_part_float50;\n\
    \    float decimal_part_float51;\n    float decimal_part_float52;\n    float decimal_part_float53;\n\
    \    float decimal_part_float54;\n    float decimal_part_float55;\n    float decimal_part_float56;\n\
    \    float decimal_part_float57;\n    float decimal_part_float58;\n    float decimal_part_float59;\n\
    \    float decimal_part_float60;\n    float decimal_part_float61;\n    float decimal_part_float62;\n\
    \    float decimal_part_float\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyhsu8aus.d(83): Error: semicolon expected, not \''unittest\''\n/tmp/tmpyhsu8aus.d(83):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyhsu8aus.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float result = 0.0;\n    float remainder;\n    int exponent;\n \
    \   \n    exponent = std.math.frexp(number, &remainder);\n    \n    if (exponent\
    \ == 0)\n    {\n        result = number;\n    }\n    else\n    {\n        float\
    \ exponent2 = exponent - 1;\n        float exponent3 = exponent - 2;\n       \
    \ float exponent4 = exponent - 3;\n        float exponent5 = exponent - 4;\n \
    \       float exponent6 = exponent - 5;\n        float exponent7 = exponent -\
    \ 6;\n        float exponent8 = exponent - 7;\n        float exponent9 = exponent\
    \ - 8;\n        float exponent10 = exponent - 9;\n        float exponent11 = exponent\
    \ - 10;\n        float exponent12 = exponent - 11;\n        float exponent13 =\
    \ exponent - 12;\n        float exponent14 = exponent - 13;\n        float exponent15\
    \ = exponent - 14;\n        float exponent16 = exponent - 15;\n        float exponent17\
    \ = exponent - 16;\n        float exponent18 = exponent - 17;\n        float exponent19\
    \ = exponent - 18;\n        float exponent20 = exponent - 19;\n        float exponent21\
    \ = exponent - 20;\n        float exponent22 = exponent - 21;\n        float exponent23\
    \ = exponent - 22;\n        float exponent24 = exponent - 23;\n        float exponent25\
    \ = exponent - 24;\n        float exponent26 = exponent - 25;\n        float exponent27\
    \ = exponent - 26;\n        float exponent28 = exponent - 27;\n        float exponent29\
    \ = exponent - 28;\n        float exponent30 = exponent - 29;\n        float exponent31\
    \ = exponent - 30;\n        float exponent32 = exponent - 31;\n        float exponent33\
    \ = exponent - 32;\n        float exponent34 = exponent - 33;\n        float exponent35\
    \ = exponent - 34;\n        float exponent36 = exponent - 35;\n        float exponent37\
    \ = exponent - 36;\n        float exponent38 = exponent - 37;\n        float exponent39\
    \ = exponent - 38;\n        float exponent40 = exponent - 39;\n        float exponent41\
    \ = exponent - 40;\n        float exponent42 = exponent - 41;\n        float exponent43\
    \ = exponent - 42;\n        float exponent44 = exponent - 43;\n        float exponent45\
    \ = exponent - 44;\n        float exponent46 = exponent - 45;\n        float exponent47\
    \ = exponent - 46;\n        float exponent48 = exponent - 47;\n        float exponent49\
    \ = exponent - 48;\n        float \nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprj_rl2rw.d(77): Error: no identifier for declarator float\n/tmp/tmprj_rl2rw.d(77):
    Error: found \''unittest\'' instead of statement\n/tmp/tmprj_rl2rw.d(85): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprj_rl2rw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    int exponent;\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkt8u40k.d(19): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkt8u40k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp80642noe.d(18): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80642noe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int decimal_part\
    \ = int(number);\n    float trunc_number = number - decimal_part;\n    return\
    \ trunc_number;\n}\n/*\n Given a positive floating point number, it can be decomposed\
    \ into\n    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsqh5h589.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpsqh5h589.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmpsqh5h589.d(15):
    Error: found \'')\'' instead of statement\n/tmp/tmpsqh5h589.d(19): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqh5h589.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part = number - truncate_number(number);\n    \n    integer_part\
    \ = int(number);\n    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuwmrijfu.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmpuwmrijfu.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuwmrijfu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    float quotient;\n    float temp;\n    int\
    \ exponent;\n    int decimal_place;\n    int decimal_place_index;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_length;\n    int decimal_part_length;\n    int decimal_part_length;\n\
    \    int decimal_part_\nunittest\n{\n    alias candidate = truncate_number;\n\n\
    \    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n  \
    \  assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpry4hpf9a.d(117): Error: semicolon expected, not \''unittest\''\n/tmp/tmpry4hpf9a.d(117):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpry4hpf9a.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float decimals = 0.0;\n    \n    while(number > 0.0) {\n    \
    \    number = number - int(number);\n        decimals = decimals + 1;\n    }\n\
    \    \n    return result + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3aqkx1rl.d(19): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp3aqkx1rl.d(19): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3aqkx1rl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    int decimal_part_length;\n\
    \    int i;\n    \n    integer_part = trunc(number);\n    \n    decimal_part_length\
    \ = number_digits(number);\n    \n    decimal_part = number - integer_part;\n\
    \    \n    remainder = decimal_part % 1;\n    \n    if (remainder > 0)\n    {\n\
    \        decimal_part += 1;\n    }\n    \n    return integer_part + decimal_part\
    \ * pow(10.0, decimal_part_length);\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpw49te3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = int(number);\n    \n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp95y0droo.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp95y0droo.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95y0droo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    int decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    remainder = number\
    \ - integer_part - decimal_part;\n    \n    return remainder;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymneifxp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    remainder = number - integer_part;\n    \n    decimal_part = remainder;\n\
    \    \n    return decimal_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9v64vc00.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integer_part;\n    float decimal_part;\n    \n    integer_part = floor(number);\n\
    \    \n    if (number - integer_part > 0.5) \n    {\n        decimal_part = number\
    \ - integer_part;\n        remainder = floor(decimal_part * 1000.0f);\n    }\n\
    \    else \n    {\n        decimal_part = floor(number - integer_part);\n    \
    \    remainder = 0;\n    }\n    \n    return remainder + decimal_part;\n}\nunittest\n\
    {\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb6afwsv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long int int_part;\n\
    \    float decimal_part;\n    \n    int_part = trunc(number);\n    \n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyitvw2w6.d(15): Error: no identifier for declarator long\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyitvw2w6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimalPart\
    \ = number - int(number);\n    float integerPart = number - decimalPart;\n   \
    \ return decimalPart;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_jconqyv.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp_jconqyv.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmp_jconqyv.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_jconqyv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = int(number);\n    remainder =\
    \ number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptd6tstly.d(18): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmptd6tstly.d(18): Error: found \'')\'' when expecting \'';\''
    following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptd6tstly.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbr2jrp8.d(18): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbr2jrp8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    float remainder;\n    \n    int exponent = std::frexp(number,\
    \ &remainder);\n    \n    if (exponent == 0)\n    {\n        result = remainder;\n\
    \    }\n    else\n    {\n        result *= std::pow(10.0, -exponent);\n      \
    \  result += remainder;\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n \
    \   assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppvyqrc_2.d(19): Error: semicolon expected, not \'':\''\n/tmp/tmppvyqrc_2.d(19):
    Error: found \'':\'' instead of statement\n/tmp/tmppvyqrc_2.d(27): Error: found
    \'':\'' when expecting \'';\'' following statement\n/tmp/tmppvyqrc_2.d(27): Error:
    found \'':\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmppvyqrc_2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int decimal_part\
    \ = int(number);\n    float trunc_number = number - decimal_part;\n    return\
    \ trunc_number;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7kn9ute9.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7kn9ute9.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmp7kn9ute9.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7kn9ute9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    int exponent;\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkt8u40k.d(19): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkt8u40k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n \
    \       remainder = number % 10.0;\n        number = number / 10.0;\n        decimals\
    \ = decimals + remainder;\n    }\n    \n    return decimals;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06ryhpyp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    \n    quotient = number / float(10);\
    \ // integer part\n    remainder = number % float(10); // decimal part\n    decimals\
    \ = remainder / float(10); // decimal part\n    \n    return quotient + decimals;\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvn7fbayn.d(19): Error: found \''(\'' when expecting \''.\''
    following float\n/tmp/tmpvn7fbayn.d(19): Error: found \''10\'' when expecting
    identifier following \''float.\''\n/tmp/tmpvn7fbayn.d(19): Error: found \'')\''
    when expecting \'';\'' following statement\n/tmp/tmpvn7fbayn.d(20): Error: found
    \''(\'' when expecting \''.\'' following float\n/tmp/tmpvn7fbayn.d(20): Error:
    found \''10\'' when expecting identifier following \''float.\''\n/tmp/tmpvn7fbayn.d(20):
    Error: found \'')\'' when expecting \'';\'' following statement\n/tmp/tmpvn7fbayn.d(21):
    Error: found \''(\'' when expecting \''.\'' following float\n/tmp/tmpvn7fbayn.d(21):
    Error: found \''10\'' when expecting identifier following \''float.\''\n/tmp/tmpvn7fbayn.d(21):
    Error: found \'')\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpvn7fbayn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part;\n    \n    int_part = trunc(number);\n    decimal_part\
    \ = number - int_part;\n    \n    return decimal_part;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81oqu1f0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float remainder = 0.0;\n    \n    while(number > 0.0)\n    {\n \
    \       remainder = number % 1;\n        number = number / 1;\n        decimals\
    \ = decimals + remainder;\n    }\n    \n    return decimals;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpicznl9ws.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    float result;\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp128zvycb.d(19): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp128zvycb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float decimal_part = number - truncate_number(truncate_number(number));\n\
    \    int_part = trunc(number);\n    return decimal_part + int_part;\n}\n/*\n Given\
    \ a positive floating point number, it can be decomposed into\n    and integer\
    \ part (largest integer smaller than given number) and decimals\n    (leftover\
    \ part always smaller than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp97fg_bo4.d(20): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp97fg_bo4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float intPart;\n    float decimalPart;\n    \n    intPart = trunc(number);\n\
    \    decimalPart = number - intPart;\n    \n    if (decimalPart > 0)\n    {\n\
    \        remainder = trunc(decimalPart);\n    }\n    else\n    {\n        remainder\
    \ = 0;\n    }\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjm1zhs_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int decimal_part\
    \ = int(number);\n    float trunc_number = number - decimal_part;\n    return\
    \ trunc_number;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\n  \
    \  assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7kn9ute9.d(15): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp7kn9ute9.d(15): Error: semicolon expected, not \'')\''\n/tmp/tmp7kn9ute9.d(15):
    Error: found \'')\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7kn9ute9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    while(result > 1.0f) {\n        result = result / 10.0f;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwz7i6r03.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part;\n    \n    int_part = trunc(number);\n    frac_part = number\
    \ - int_part;\n    \n    return frac_part;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbxmdsrr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659803845
