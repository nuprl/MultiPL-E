language: d
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplbr2jrp8.d(18): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbr2jrp8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float quotient;\n    float decimals;\n    float result;\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp128zvycb.d(19): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp128zvycb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long long int\
    \ int_part;\n    long long int decimal_part;\n    \n    int_part = trunc(number);\n\
    \    decimal_part = number - int_part;\n    \n    return float(decimal_part);\n\
    }\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmproojkanf.d(15): Error: use `long` for a 64 bit integer instead
    of `long long`\n/tmp/tmproojkanf.d(15): Error: no identifier for declarator `long`\n/tmp/tmproojkanf.d(16):
    Error: use `long` for a 64 bit integer instead of `long long`\n/tmp/tmproojkanf.d(16):
    Error: no identifier for declarator `long`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmproojkanf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph8xeo3lm.d(23): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmph8xeo3lm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part = number - truncate_number(number);\n    \n    int_part =\
    \ int(frac_part);\n    \n    return frac_part - int_part;\n}\nunittest\n{\n  \
    \  alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx9_i3dbb.d(18): Error: cannot implicitly convert expression
    `frac_part` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpx9_i3dbb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float decimals\
    \ = 0.0;\n    float int_part = 0.0;\n    float remainder = 0.0;\n    \n    int_part\
    \ = floor(number);\n    \n    if (number - int_part > 0.5) {\n        float temp\
    \ = number - int_part;\n        \n        while(temp > 0.5) {\n            temp\
    \ -= 1.0;\n            decimals += 1.0;\n        }\n        \n        remainder\
    \ = temp;\n    }\n    \n    return int_part + decimals;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0n2apbca.d(38): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f75]\n??:? void tmp0n2apbca.__unittest_L34_C1() [0x427c8a]\n??:?
    void tmp0n2apbca.__modtest() [0x427cf8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bddf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fe05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4302b4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fd91]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ac49]\n??:? runModuleUnitTests [0x42bbb5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c4]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42834b]\n??:? _d_run_main [0x4282b6]\n??:? main [0x427d0b]\n??:?
    __libc_start_main [0xa4ef3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    float decimal_part;\n    \n    integer_part = trunc(number);\n\
    \    \n    decimal_part = number - integer_part;\n    \n    if (decimal_part ==\
    \ 0.0) \n    {\n        return integer_part;\n    }\n    \n    remainder = number\
    \ - integer_part;\n    \n    return remainder + decimal_part;\n}\nunittest\n{\n\
    \    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2z3ifhwe.d(19): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2z3ifhwe.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int int_part;\n\
    \    float frac_part = number - truncate_number(number);\n    int_part = int(frac_part);\n\
    \    return number - int_part;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf8wmz37d.d(17): Error: cannot implicitly convert expression
    `frac_part` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpf8wmz37d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: -1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    float decimals = 1;\n    \n    while(number\
    \ > 0)\n    {\n        remainder = number % 1;\n        number = number / 1;\n\
    \        decimals = decimals * 10;\n    }\n    \n    result = result * decimals;\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    long int int_part\
    \ = (long) number;\n    float remainder = (float) number - int_part;\n    \n \
    \   if (remainder > 0.5f) \n    {\n        return remainder;\n    }\n    else\
    \ \n    {\n        return remainder - 1.0f;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqk91edwa.d(15): Error: no identifier for declarator `long`\n/tmp/tmpqk91edwa.d(15):
    Error: C style cast illegal, use `cast(long)number`\n/tmp/tmpqk91edwa.d(16): Error:
    C style cast illegal, use `cast(float)number`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpqk91edwa.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integer_part;\n    \n    integer_part = trunc(number);\n    remainder\
    \ = number - integer_part;\n    \n    return remainder;\n}\nunittest\n{\n    alias\
    \ candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq_adt9ln.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq_adt9ln.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    float remainder;\n    float decimals;\n    \n    decimals = number\
    \ - truncate_float(number);\n    \n    if (number > truncate_float(number))\n\
    \    {\n        remainder = truncate_float(number);\n        result = truncate_float(number)\
    \ + remainder;\n    }\n    else\n    {\n        result = number;\n    }\n    \n\
    \    return result + decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0a8ztzt9.d(19): Error: undefined identifier `truncate_float`\n/tmp/tmp0a8ztzt9.d(21):
    Error: undefined identifier `truncate_float`\n/tmp/tmp0a8ztzt9.d(23): Error: undefined
    identifier `truncate_float`\n/tmp/tmp0a8ztzt9.d(24): Error: undefined identifier
    `truncate_float`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0a8ztzt9.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    int integerPart;\n    \n    integerPart = int(number);\n    remainder = number\
    \ - integerPart;\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate\
    \ = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25)\
    \ == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ypryetw.d(18): Error: cannot implicitly convert expression
    `number` of type `float` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ypryetw.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\n/*\n Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\nunittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5)\
    \ == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0)\
    \ == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppn4l243i.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppn4l243i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float integerPart;\n    float decimalPart;\n    \n    integerPart = floorf(number);\n\
    \    decimalPart = number-integerPart;\n    \n    if (decimalPart > 0.0) {\n \
    \       remainder = number-integerPart;\n    } else {\n        remainder = 0.0f;\n\
    \    }\n    \n    return remainder;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_n68r1yb.d(19): Error: undefined identifier `floorf`, did you
    mean function `floor`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_n68r1yb.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float remainder;\n\
    \    float decimals;\n    int integer;\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpephj7zxn.d(18): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpephj7zxn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    int integer_part;\n\
    \    float decimal_part;\n    \n    integer_part = trunc(number);\n    \n    decimal_part\
    \ = number - integer_part;\n    \n    return decimal_part;\n}\nunittest\n{\n \
    \   alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n\
    \    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps_7zms5l.d(18): Error: cannot implicitly convert expression
    `trunc(cast(real)number)` of type `real` to `int`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmps_7zms5l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \n*/\nfloat truncate_number(float number) \n{\n    float result\
    \ = number;\n    \n    int decimals = (int)((result - number) * 100);\n    \n\
    \    if (decimals < 0)\n    {\n        decimals = 0;\n    }\n    \n    return\
    \ result - decimals;\n}\nunittest\n{\n    alias candidate = truncate_number;\n\
    \n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n \
    \   assert(candidate(123.0) == 0.0);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvg5kt1yt.d(17): Error: C style cast illegal, use `cast(int)((result
    - number) * 100)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvg5kt1yt.d",
    "-I/tmp"]\n'''
  stdout: b''
